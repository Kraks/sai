; ModuleID = './sort.bc'
source_filename = "llvm-link"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, i8*, i8*, i8*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type { %struct._IO_marker*, %struct._IO_FILE*, i32 }
%struct.infomap = type { i8*, i8* }
%struct.__sigset_t = type { [16 x i64] }
%struct.option = type { i8*, i32, i32*, i32 }
%struct.keyfield = type { i64, i64, i64, i64, i8*, i8*, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, %struct.keyfield* }
%struct.line = type { i8*, i64, i8*, i8* }
%struct.tempnode = type { %struct.tempnode*, i32, i8, [0 x i8] }
%struct.hash_table = type { %struct.hash_entry*, %struct.hash_entry*, i64, i64, i64, %struct.hash_tuning*, i64 (i8*, i64)*, i1 (i8*, i8*)*, void (i8*)*, %struct.hash_entry* }
%struct.hash_tuning = type { float, float, float, float, i8 }
%struct.hash_entry = type { i8*, %struct.hash_entry* }
%struct.month = type { i8*, i32 }
%struct.md5_ctx = type { i32, i32, i32, i32, [2 x i32], i32, [32 x i32] }
%struct.stat = type { i64, i64, i64, i32, i32, i32, i32, i64, i64, i64, i64, %struct.timespec, %struct.timespec, %struct.timespec, [3 x i64] }
%struct.timespec = type { i64, i64 }
%struct.quoting_options = type { i32, i32, [8 x i32], i8*, i8* }
%struct.slotvec = type { i64, i8* }
%struct.Tokens = type { i64, i8**, i64*, %struct.obstack, %struct.obstack, %struct.obstack }
%struct.obstack = type { i64, %struct._obstack_chunk*, i8*, i8*, i8*, %union.anon, i64, %union.anon.0, %union.anon.1, i8*, i8 }
%struct._obstack_chunk = type { i8*, %struct._obstack_chunk*, [0 x i8] }
%union.anon = type { i64 }
%union.anon.0 = type { i8* (i64)* }
%union.anon.1 = type { void (i8*)* }
%struct.lconv = type { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.sigaction = type { %union.anon.2, %struct.__sigset_t, i32, void ()* }
%union.anon.2 = type { void (i32)* }
%struct.sortfile = type { i8*, %struct.tempnode* }
%struct.cs_status = type { i8, %struct.__sigset_t }
%struct.randread_source = type { %struct._IO_FILE*, void (i8*)*, i8*, %union.anon.20 }
%union.anon.20 = type { %struct.isaac }
%struct.isaac = type { i64, %struct.isaac_state, %union.anon.0.19 }
%struct.isaac_state = type { [256 x i64], i64, i64, i64 }
%union.anon.0.19 = type { [256 x i64] }
%struct.buffer = type { i8*, i64, i64, i64, i64, i64, i8 }
%struct.merge_node_queue = type { %struct.heap*, %union.pthread_mutex_t, %union.pthread_cond_t }
%struct.heap = type { i8**, i64, i64, i32 (i8*, i8*)* }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%union.pthread_cond_t = type { %struct.__pthread_cond_s }
%struct.__pthread_cond_s = type { %union.anon, %union.anon, [2 x i32], [2 x i32], i32, i32, [2 x i32] }
%struct.merge_node = type { %struct.line*, %struct.line*, %struct.line*, %struct.line*, %struct.line**, i64, i64, %struct.merge_node*, %struct.merge_node*, %struct.merge_node*, i32, i8, %union.pthread_mutex_t }
%union.pthread_mutexattr_t = type { i32 }
%struct.thread_args = type { %struct.line*, i64, i64, %struct.merge_node*, %struct.merge_node_queue*, %struct._IO_FILE*, i8* }
%union.pthread_attr_t = type { i64, [48 x i8] }
%struct.__mbstate_t = type { i32, %union.pthread_mutexattr_t }
%struct.sysinfo = type { i64, [3 x i64], i64, i64, i64, i64, i64, i64, i16, i16, i64, i64, i32, [0 x i8] }
%struct.__va_list_tag = type { i32, i32, i8*, i8* }

@stderr = external dso_local global %struct._IO_FILE*, align 8
@.str = private unnamed_addr constant [39 x i8] c"Try '%s --help' for more information.\0A\00", align 1
@.str.1 = private unnamed_addr constant [71 x i8] c"Usage: %s [OPTION]... [FILE]...\0A  or:  %s [OPTION]... --files0-from=F\0A\00", align 1
@stdout = external dso_local global %struct._IO_FILE*, align 8
@.str.2 = private unnamed_addr constant [63 x i8] c"Write sorted concatenation of all FILE(s) to standard output.\0A\00", align 1
@.str.3 = private unnamed_addr constant [20 x i8] c"Ordering options:\0A\0A\00", align 1
@.str.4 = private unnamed_addr constant [204 x i8] c"  -b, --ignore-leading-blanks  ignore leading blanks\0A  -d, --dictionary-order      consider only blanks and alphanumeric characters\0A  -f, --ignore-case           fold lower case to upper case characters\0A\00", align 1
@.str.5 = private unnamed_addr constant [211 x i8] c"  -g, --general-numeric-sort  compare according to general numerical value\0A  -i, --ignore-nonprinting    consider only printable characters\0A  -M, --month-sort            compare (unknown) < 'JAN' < ... < 'DEC'\0A\00", align 1
@.str.6 = private unnamed_addr constant [76 x i8] c"  -h, --human-numeric-sort    compare human readable numbers (e.g., 2K 1G)\0A\00", align 1
@.str.7 = private unnamed_addr constant [274 x i8] c"  -n, --numeric-sort          compare according to string numerical value\0A  -R, --random-sort           shuffle, but group identical keys.  See shuf(1)\0A      --random-source=FILE    get random bytes from FILE\0A  -r, --reverse               reverse the result of comparisons\0A\00", align 1
@.str.8 = private unnamed_addr constant [278 x i8] c"      --sort=WORD             sort according to WORD:\0A                                general-numeric -g, human-numeric -h, month -M,\0A                                numeric -n, random -R, version -V\0A  -V, --version-sort          natural sort of (version) numbers within text\0A\0A\00", align 1
@.str.9 = private unnamed_addr constant [17 x i8] c"Other options:\0A\0A\00", align 1
@.str.10 = private unnamed_addr constant [118 x i8] c"      --batch-size=NMERGE   merge at most NMERGE inputs at once;\0A                            for more use temp files\0A\00", align 1
@.str.11 = private unnamed_addr constant [277 x i8] c"  -c, --check, --check=diagnose-first  check for sorted input; do not sort\0A  -C, --check=quiet, --check=silent  like -c, but do not report first bad line\0A      --compress-program=PROG  compress temporaries with PROG;\0A                              decompress them with PROG -d\0A\00", align 1
@.str.12 = private unnamed_addr constant [348 x i8] c"      --debug               annotate the part of the line used to sort,\0A                              and warn about questionable usage to stderr\0A      --files0-from=F       read input from the files specified by\0A                            NUL-terminated names in file F;\0A                            If F is - then read names from standard input\0A\00", align 1
@.str.13 = private unnamed_addr constant [144 x i8] c"  -k, --key=KEYDEF          sort via a key; KEYDEF gives location and type\0A  -m, --merge               merge already sorted files; do not sort\0A\00", align 1
@.str.14 = private unnamed_addr constant [216 x i8] c"  -o, --output=FILE         write result to FILE instead of standard output\0A  -s, --stable              stabilize sort by disabling last-resort comparison\0A  -S, --buffer-size=SIZE    use SIZE for main memory buffer\0A\00", align 1
@.str.15 = private unnamed_addr constant [453 x i8] c"  -t, --field-separator=SEP  use SEP instead of non-blank to blank transition\0A  -T, --temporary-directory=DIR  use DIR for temporaries, not $TMPDIR or %s;\0A                              multiple options specify multiple directories\0A      --parallel=N          change the number of sorts run concurrently to N\0A  -u, --unique              with -c, check for strict ordering;\0A                              without -c, output only the first of an equal run\0A\00", align 1
@.str.16 = private unnamed_addr constant [5 x i8] c"/tmp\00", align 1
@.str.17 = private unnamed_addr constant [64 x i8] c"  -z, --zero-terminated     line delimiter is NUL, not newline\0A\00", align 1
@.str.18 = private unnamed_addr constant [45 x i8] c"      --help     display this help and exit\0A\00", align 1
@.str.19 = private unnamed_addr constant [54 x i8] c"      --version  output version information and exit\0A\00", align 1
@.str.20 = private unnamed_addr constant [604 x i8] c"\0AKEYDEF is F[.C][OPTS][,F[.C][OPTS]] for start and stop position, where F is a\0Afield number and C a character position in the field; both are origin 1, and\0Athe stop position defaults to the line's end.  If neither -t nor -b is in\0Aeffect, characters in a field are counted from the beginning of the preceding\0Awhitespace.  OPTS is one or more single-letter ordering options [bdfgiMhnRrV],\0Awhich override global ordering options for that key.  If no key is given, use\0Athe entire line as the key.  Use --debug to diagnose incorrect key usage.\0A\0ASIZE may be followed by the following multiplicative suffixes:\0A\00", align 1
@.str.21 = private unnamed_addr constant [229 x i8] c"% 1% of memory, b 1, K 1024 (default), and so on for M, G, T, P, E, Z, Y.\0A\0A*** WARNING ***\0AThe locale specified by the environment affects sort order.\0ASet LC_ALL=C to get the traditional sort order that uses\0Anative byte values.\0A\00", align 1
@.str.22 = private unnamed_addr constant [5 x i8] c"sort\00", align 1
@__const.emit_ancillary_info.infomap = private unnamed_addr constant [7 x %struct.infomap] [%struct.infomap { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.66, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.67, i32 0, i32 0) }, %struct.infomap { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.68, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.69, i32 0, i32 0) }, %struct.infomap { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.70, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.71, i32 0, i32 0) }, %struct.infomap { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.72, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.71, i32 0, i32 0) }, %struct.infomap { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.73, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.71, i32 0, i32 0) }, %struct.infomap { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.74, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.71, i32 0, i32 0) }, %struct.infomap zeroinitializer], align 16
@.str.75 = private unnamed_addr constant [23 x i8] c"\0A%s online help: <%s>\0A\00", align 1
@.str.44 = private unnamed_addr constant [14 x i8] c"GNU coreutils\00", align 1
@.str.76 = private unnamed_addr constant [40 x i8] c"https://www.gnu.org/software/coreutils/\00", align 1
@.str.77 = private unnamed_addr constant [4 x i8] c"en_\00", align 1
@.str.78 = private unnamed_addr constant [71 x i8] c"Report any translation bugs to <https://translationproject.org/team/>\0A\00", align 1
@.str.79 = private unnamed_addr constant [27 x i8] c"Full documentation <%s%s>\0A\00", align 1
@.str.81 = private unnamed_addr constant [12 x i8] c" invocation\00", align 1
@.str.24 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.80 = private unnamed_addr constant [51 x i8] c"or available locally via: info '(coreutils) %s%s'\0A\00", align 1
@.str.66 = private unnamed_addr constant [2 x i8] c"[\00", align 1
@.str.67 = private unnamed_addr constant [16 x i8] c"test invocation\00", align 1
@.str.68 = private unnamed_addr constant [10 x i8] c"coreutils\00", align 1
@.str.69 = private unnamed_addr constant [22 x i8] c"Multi-call invocation\00", align 1
@.str.70 = private unnamed_addr constant [10 x i8] c"sha224sum\00", align 1
@.str.71 = private unnamed_addr constant [15 x i8] c"sha2 utilities\00", align 1
@.str.72 = private unnamed_addr constant [10 x i8] c"sha256sum\00", align 1
@.str.73 = private unnamed_addr constant [10 x i8] c"sha384sum\00", align 1
@.str.74 = private unnamed_addr constant [10 x i8] c"sha512sum\00", align 1
@.str.65 = private unnamed_addr constant [75 x i8] c"\0AMandatory arguments to long options are mandatory for short options too.\0A\00", align 1
@.str.64 = private unnamed_addr constant [56 x i8] c"\0AWith no FILE, or when FILE is -, read standard input.\0A\00", align 1
@.str.23 = private unnamed_addr constant [16 x i8] c"POSIXLY_CORRECT\00", align 1
@hard_LC_COLLATE = internal global i8 0, align 1
@hard_LC_TIME = internal global i8 0, align 1
@decimal_point = internal global i8 0, align 1
@thousands_sep = internal global i32 0, align 4
@thousands_sep_ignored = internal global i8 0, align 1
@have_read_stdin = internal global i8 0, align 1
@caught_signals = internal global %struct.__sigset_t zeroinitializer, align 8
@main.sig = internal constant [11 x i32] [i32 14, i32 1, i32 2, i32 13, i32 3, i32 15, i32 29, i32 27, i32 26, i32 24, i32 25], align 16
@optind = external dso_local global i32, align 4
@short_options = internal constant [31 x i8] c"-bcCdfghik:mMno:rRsS:t:T:uVy:z\00", align 16
@long_options = internal constant [31 x %struct.option] [%struct.option { i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.94, i32 0, i32 0), i32 0, i32* null, i32 98 }, %struct.option { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.95, i32 0, i32 0), i32 2, i32* null, i32 128 }, %struct.option { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.96, i32 0, i32 0), i32 1, i32* null, i32 129 }, %struct.option { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.97, i32 0, i32 0), i32 0, i32* null, i32 130 }, %struct.option { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.98, i32 0, i32 0), i32 0, i32* null, i32 100 }, %struct.option { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.99, i32 0, i32 0), i32 0, i32* null, i32 102 }, %struct.option { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.100, i32 0, i32 0), i32 1, i32* null, i32 131 }, %struct.option { i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.101, i32 0, i32 0), i32 0, i32* null, i32 103 }, %struct.option { i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.102, i32 0, i32 0), i32 0, i32* null, i32 105 }, %struct.option { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.103, i32 0, i32 0), i32 1, i32* null, i32 107 }, %struct.option { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.104, i32 0, i32 0), i32 0, i32* null, i32 109 }, %struct.option { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.105, i32 0, i32 0), i32 0, i32* null, i32 77 }, %struct.option { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.106, i32 0, i32 0), i32 0, i32* null, i32 110 }, %struct.option { i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.107, i32 0, i32 0), i32 0, i32* null, i32 104 }, %struct.option { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.108, i32 0, i32 0), i32 0, i32* null, i32 86 }, %struct.option { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.109, i32 0, i32 0), i32 0, i32* null, i32 82 }, %struct.option { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.110, i32 0, i32 0), i32 1, i32* null, i32 133 }, %struct.option { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.22, i32 0, i32 0), i32 1, i32* null, i32 134 }, %struct.option { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.111, i32 0, i32 0), i32 1, i32* null, i32 111 }, %struct.option { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.112, i32 0, i32 0), i32 0, i32* null, i32 114 }, %struct.option { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.113, i32 0, i32 0), i32 0, i32* null, i32 115 }, %struct.option { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.114, i32 0, i32 0), i32 1, i32* null, i32 132 }, %struct.option { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.115, i32 0, i32 0), i32 1, i32* null, i32 83 }, %struct.option { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.116, i32 0, i32 0), i32 1, i32* null, i32 116 }, %struct.option { i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.117, i32 0, i32 0), i32 1, i32* null, i32 84 }, %struct.option { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.118, i32 0, i32 0), i32 0, i32* null, i32 117 }, %struct.option { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.119, i32 0, i32 0), i32 0, i32* null, i32 122 }, %struct.option { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.120, i32 0, i32 0), i32 1, i32* null, i32 135 }, %struct.option { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.121, i32 0, i32 0), i32 0, i32* null, i32 -130 }, %struct.option { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.122, i32 0, i32 0), i32 0, i32* null, i32 -131 }, %struct.option zeroinitializer], align 16
@optarg = external dso_local global i8*, align 8
@.str.25 = private unnamed_addr constant [25 x i8] c"invalid number after '-'\00", align 1
@.str.26 = private unnamed_addr constant [2 x i8] c"s\00", align 1
@.str.27 = private unnamed_addr constant [14 x i8] c"../src/sort.c\00", align 1
@__PRETTY_FUNCTION__.main = private unnamed_addr constant [23 x i8] c"int main(int, char **)\00", align 1
@.str.28 = private unnamed_addr constant [25 x i8] c"invalid number after '.'\00", align 1
@.str.29 = private unnamed_addr constant [30 x i8] c"stray character in field spec\00", align 1
@.str.30 = private unnamed_addr constant [7 x i8] c"--sort\00", align 1
@sort_args = internal constant [7 x i8*] [i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.125, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.126, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.127, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.128, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.129, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.122, i32 0, i32 0), i8* null], align 16
@sort_types = internal constant [6 x i8] c"ghMnRV", align 1
@.str.31 = private unnamed_addr constant [8 x i8] c"--check\00", align 1
@check_args = internal constant [4 x i8*] [i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.130, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.131, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.132, i32 0, i32 0), i8* null], align 16
@check_types = internal constant [3 x i8] c"CCc", align 1
@.str.32 = private unnamed_addr constant [3 x i8] c"cC\00", align 1
@compress_program = internal global i8* null, align 8
@.str.33 = private unnamed_addr constant [37 x i8] c"multiple compress programs specified\00", align 1
@debug = internal global i8 0, align 1
@.str.34 = private unnamed_addr constant [30 x i8] c"invalid number at field start\00", align 1
@.str.35 = private unnamed_addr constant [21 x i8] c"field number is zero\00", align 1
@.str.36 = private unnamed_addr constant [25 x i8] c"character offset is zero\00", align 1
@.str.37 = private unnamed_addr constant [25 x i8] c"invalid number after ','\00", align 1
@.str.38 = private unnamed_addr constant [32 x i8] c"multiple output files specified\00", align 1
@.str.39 = private unnamed_addr constant [34 x i8] c"multiple random sources specified\00", align 1
@stable = internal global i8 0, align 1
@.str.40 = private unnamed_addr constant [10 x i8] c"empty tab\00", align 1
@.str.41 = private unnamed_addr constant [3 x i8] c"\5C0\00", align 1
@.str.42 = private unnamed_addr constant [23 x i8] c"multi-character tab %s\00", align 1
@tab = internal global i32 128, align 4
@.str.43 = private unnamed_addr constant [18 x i8] c"incompatible tabs\00", align 1
@unique = internal global i8 0, align 1
@eolchar = internal global i8 10, align 1
@.str.45 = private unnamed_addr constant [13 x i8] c"Mike Haertel\00", align 1
@.str.46 = private unnamed_addr constant [12 x i8] c"Paul Eggert\00", align 1
@.str.47 = private unnamed_addr constant [17 x i8] c"extra operand %s\00", align 1
@.str.48 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@.str.49 = private unnamed_addr constant [52 x i8] c"file operands cannot be combined with --files0-from\00", align 1
@.str.50 = private unnamed_addr constant [2 x i8] c"r\00", align 1
@.str.51 = private unnamed_addr constant [31 x i8] c"cannot read file names from %s\00", align 1
@.str.52 = private unnamed_addr constant [2 x i8] c"-\00", align 1
@.str.53 = private unnamed_addr constant [63 x i8] c"when reading file names from stdin, no file name of %s allowed\00", align 1
@.str.54 = private unnamed_addr constant [38 x i8] c"%s:%lu: invalid zero-length file name\00", align 1
@.str.55 = private unnamed_addr constant [17 x i8] c"no input from %s\00", align 1
@keylist = internal global %struct.keyfield* null, align 8
@main.opts = internal global [10 x i8] c"X --debug\00", align 1
@.str.56 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.57 = private unnamed_addr constant [21 x i8] c"failed to set locale\00", align 1
@.str.58 = private unnamed_addr constant [47 x i8] c"text ordering performed using %s sorting rules\00", align 1
@.str.59 = private unnamed_addr constant [53 x i8] c"text ordering performed using simple byte comparison\00", align 1
@reverse = internal global i8 0, align 1
@temp_dir_count = internal global i64 0, align 8
@.str.60 = private unnamed_addr constant [7 x i8] c"TMPDIR\00", align 1
@sort_size = internal global i64 0, align 8
@nmerge = internal global i32 16, align 4
@.str.61 = private unnamed_addr constant [38 x i8] c"extra operand %s not allowed with -%c\00", align 1
@main.opts.62 = internal global [3 x i8] c"\00o\00", align 1
@stdin = external dso_local global %struct._IO_FILE*, align 8
@.str.63 = private unnamed_addr constant [13 x i8] c"close failed\00", align 1
@.str.188 = private unnamed_addr constant [16 x i8] c"standard output\00", align 1
@.str.187 = private unnamed_addr constant [7 x i8] c"%s: %s\00", align 1
@saved_line = internal global %struct.line zeroinitializer, align 8
@.str.174 = private unnamed_addr constant [2 x i8] c"w\00", align 1
@temphead = internal global %struct.tempnode* null, align 8
@nprocs = internal global i32 0, align 4
@.str.178 = private unnamed_addr constant [20 x i8] c"waiting for %s [-d]\00", align 1
@.str.179 = private unnamed_addr constant [30 x i8] c"%s [-d] terminated abnormally\00", align 1
@proctab = internal global %struct.hash_table* null, align 8
@.str.171 = private unnamed_addr constant [13 x i8] c"write failed\00", align 1
@blanks = internal global [256 x i8] zeroinitializer, align 16
@unit_order = internal constant <{ [108 x i8], [148 x i8] }> <{ [108 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\06\00\03\00\00\00\01\00\02\00\00\05\00\00\00\04\00\00\00\00\08\07\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\01", [148 x i8] zeroinitializer }>, align 16
@.str.172 = private unnamed_addr constant [20 x i8] c"^ no match for key\0A\00", align 1
@monthtab = internal global [12 x %struct.month] [%struct.month { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.82, i32 0, i32 0), i32 4 }, %struct.month { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.83, i32 0, i32 0), i32 8 }, %struct.month { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.84, i32 0, i32 0), i32 12 }, %struct.month { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.85, i32 0, i32 0), i32 2 }, %struct.month { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.86, i32 0, i32 0), i32 1 }, %struct.month { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.87, i32 0, i32 0), i32 7 }, %struct.month { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.88, i32 0, i32 0), i32 6 }, %struct.month { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.89, i32 0, i32 0), i32 3 }, %struct.month { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.90, i32 0, i32 0), i32 5 }, %struct.month { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.91, i32 0, i32 0), i32 11 }, %struct.month { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.92, i32 0, i32 0), i32 10 }, %struct.month { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.93, i32 0, i32 0), i32 9 }], align 16
@fold_toupper = internal global [256 x i8] zeroinitializer, align 16
@.str.82 = private unnamed_addr constant [4 x i8] c"APR\00", align 1
@.str.83 = private unnamed_addr constant [4 x i8] c"AUG\00", align 1
@.str.84 = private unnamed_addr constant [4 x i8] c"DEC\00", align 1
@.str.85 = private unnamed_addr constant [4 x i8] c"FEB\00", align 1
@.str.86 = private unnamed_addr constant [4 x i8] c"JAN\00", align 1
@.str.87 = private unnamed_addr constant [4 x i8] c"JUL\00", align 1
@.str.88 = private unnamed_addr constant [4 x i8] c"JUN\00", align 1
@.str.89 = private unnamed_addr constant [4 x i8] c"MAR\00", align 1
@.str.90 = private unnamed_addr constant [4 x i8] c"MAY\00", align 1
@.str.91 = private unnamed_addr constant [4 x i8] c"NOV\00", align 1
@.str.92 = private unnamed_addr constant [4 x i8] c"OCT\00", align 1
@.str.93 = private unnamed_addr constant [4 x i8] c"SEP\00", align 1
@random_md5_state = internal global %struct.md5_ctx zeroinitializer, align 4
@.str.168 = private unnamed_addr constant [29 x i8] c"string transformation failed\00", align 1
@.str.169 = private unnamed_addr constant [42 x i8] c"set LC_ALL='C' to work around the problem\00", align 1
@.str.170 = private unnamed_addr constant [32 x i8] c"the untransformed string was %s\00", align 1
@.str.183 = private unnamed_addr constant [34 x i8] c"couldn't execute compress program\00", align 1
@.str.184 = private unnamed_addr constant [31 x i8] c"couldn't create temporary file\00", align 1
@.str.180 = private unnamed_addr constant [9 x i8] c": errno \00", align 1
@.str.181 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@temp_dirs = internal global i8** null, align 8
@create_temp_file.temp_dir_index = internal global i64 0, align 8
@create_temp_file.slashbase = internal constant [12 x i8] c"/sortXXXXXX\00", align 1
@temptail = internal global %struct.tempnode** @temphead, align 8
@.str.185 = private unnamed_addr constant [35 x i8] c"cannot create temporary file in %s\00", align 1
@merge_buffer_size = internal global i64 262144, align 8
@.str.166 = private unnamed_addr constant [12 x i8] c"read failed\00", align 1
@.str.186 = private unnamed_addr constant [12 x i8] c"stat failed\00", align 1
@sort_buffer_size.size_bound = internal global i64 0, align 8
@.str.141 = private unnamed_addr constant [12 x i8] c"open failed\00", align 1
@.str.182 = private unnamed_addr constant [27 x i8] c"warning: cannot remove: %s\00", align 1
@.str.142 = private unnamed_addr constant [21 x i8] c"%s: error truncating\00", align 1
@.str.143 = private unnamed_addr constant [41 x i8] c"!\22unexpected mode passed to stream_open\22\00", align 1
@__PRETTY_FUNCTION__.stream_open = private unnamed_addr constant [46 x i8] c"FILE *stream_open(const char *, const char *)\00", align 1
@get_outstatus.outstat_errno = internal global i32 0, align 4
@get_outstatus.outstat = internal global %struct.stat zeroinitializer, align 8
@.str.175 = private unnamed_addr constant [34 x i8] c"couldn't create process for %s -d\00", align 1
@.str.176 = private unnamed_addr constant [3 x i8] c"-d\00", align 1
@.str.177 = private unnamed_addr constant [44 x i8] c"couldn't execute compress program (with -d)\00", align 1
@.str.173 = private unnamed_addr constant [12 x i8] c"cannot read\00", align 1
@.str.164 = private unnamed_addr constant [22 x i8] c"%s: %s:%s: disorder: \00", align 1
@.str.165 = private unnamed_addr constant [15 x i8] c"standard error\00", align 1
@.str.163 = private unnamed_addr constant [10 x i8] c"getrandom\00", align 1
@.str.145 = private unnamed_addr constant [2 x i8] c"+\00", align 1
@.str.146 = private unnamed_addr constant [4 x i8] c"-k \00", align 1
@.str.147 = private unnamed_addr constant [3 x i8] c" -\00", align 1
@.str.148 = private unnamed_addr constant [2 x i8] c",\00", align 1
@.str.149 = private unnamed_addr constant [45 x i8] c"obsolescent key %s used; consider %s instead\00", align 1
@.str.150 = private unnamed_addr constant [43 x i8] c"key %lu has zero width and will be ignored\00", align 1
@.str.151 = private unnamed_addr constant [72 x i8] c"leading blanks are significant in key %lu; consider also specifying 'b'\00", align 1
@.str.152 = private unnamed_addr constant [45 x i8] c"key %lu is numeric and spans multiple fields\00", align 1
@.str.153 = private unnamed_addr constant [62 x i8] c"field separator %s is treated as a group separator in numbers\00", align 1
@.str.154 = private unnamed_addr constant [60 x i8] c"field separator %s is treated as a decimal point in numbers\00", align 1
@.str.155 = private unnamed_addr constant [57 x i8] c"field separator %s is treated as a minus sign in numbers\00", align 1
@.str.156 = private unnamed_addr constant [56 x i8] c"field separator %s is treated as a plus sign in numbers\00", align 1
@.str.158 = private unnamed_addr constant [6 x i8] c"note \00", align 1
@.str.157 = private unnamed_addr constant [51 x i8] c"%snumbers use %s as a decimal point in this locale\00", align 1
@.str.159 = private unnamed_addr constant [70 x i8] c"the multi-byte number group separator in this locale is not supported\00", align 1
@.str.161 = private unnamed_addr constant [24 x i8] c"option '-%s' is ignored\00", align 1
@.str.160 = private unnamed_addr constant [26 x i8] c"options '-%s' are ignored\00", align 1
@.str.162 = private unnamed_addr constant [51 x i8] c"option '-r' only applies to last-resort comparison\00", align 1
@nondictionary = internal global [256 x i8] zeroinitializer, align 16
@nonprinting = internal global [256 x i8] zeroinitializer, align 16
@.str.144 = private unnamed_addr constant [14 x i8] c"fflush failed\00", align 1
@.str.140 = private unnamed_addr constant [35 x i8] c"number in parallel must be nonzero\00", align 1
@temp_dir_alloc = internal global i64 0, align 8
@.str.139 = private unnamed_addr constant [13 x i8] c"EgGkKmMPtTYZ\00", align 1
@.str.134 = private unnamed_addr constant [25 x i8] c"invalid --%s argument %s\00", align 1
@.str.136 = private unnamed_addr constant [2 x i8] c"2\00", align 1
@.str.135 = private unnamed_addr constant [28 x i8] c"minimum --%s argument is %s\00", align 1
@.str.137 = private unnamed_addr constant [27 x i8] c"--%s argument %s too large\00", align 1
@.str.138 = private unnamed_addr constant [48 x i8] c"maximum --%s argument with current rlimit is %s\00", align 1
@.str.133 = private unnamed_addr constant [31 x i8] c"options '-%s' are incompatible\00", align 1
@.str.130 = private unnamed_addr constant [6 x i8] c"quiet\00", align 1
@.str.131 = private unnamed_addr constant [7 x i8] c"silent\00", align 1
@.str.132 = private unnamed_addr constant [15 x i8] c"diagnose-first\00", align 1
@.str.125 = private unnamed_addr constant [16 x i8] c"general-numeric\00", align 1
@.str.126 = private unnamed_addr constant [14 x i8] c"human-numeric\00", align 1
@.str.127 = private unnamed_addr constant [6 x i8] c"month\00", align 1
@.str.128 = private unnamed_addr constant [8 x i8] c"numeric\00", align 1
@.str.129 = private unnamed_addr constant [7 x i8] c"random\00", align 1
@.str.122 = private unnamed_addr constant [8 x i8] c"version\00", align 1
@.str.124 = private unnamed_addr constant [35 x i8] c"%s: invalid field specification %s\00", align 1
@.str.123 = private unnamed_addr constant [33 x i8] c"%s: invalid count at start of %s\00", align 1
@.str.94 = private unnamed_addr constant [22 x i8] c"ignore-leading-blanks\00", align 1
@.str.95 = private unnamed_addr constant [6 x i8] c"check\00", align 1
@.str.96 = private unnamed_addr constant [17 x i8] c"compress-program\00", align 1
@.str.97 = private unnamed_addr constant [6 x i8] c"debug\00", align 1
@.str.98 = private unnamed_addr constant [17 x i8] c"dictionary-order\00", align 1
@.str.99 = private unnamed_addr constant [12 x i8] c"ignore-case\00", align 1
@.str.100 = private unnamed_addr constant [12 x i8] c"files0-from\00", align 1
@.str.101 = private unnamed_addr constant [21 x i8] c"general-numeric-sort\00", align 1
@.str.102 = private unnamed_addr constant [19 x i8] c"ignore-nonprinting\00", align 1
@.str.103 = private unnamed_addr constant [4 x i8] c"key\00", align 1
@.str.104 = private unnamed_addr constant [6 x i8] c"merge\00", align 1
@.str.105 = private unnamed_addr constant [11 x i8] c"month-sort\00", align 1
@.str.106 = private unnamed_addr constant [13 x i8] c"numeric-sort\00", align 1
@.str.107 = private unnamed_addr constant [19 x i8] c"human-numeric-sort\00", align 1
@.str.108 = private unnamed_addr constant [13 x i8] c"version-sort\00", align 1
@.str.109 = private unnamed_addr constant [12 x i8] c"random-sort\00", align 1
@.str.110 = private unnamed_addr constant [14 x i8] c"random-source\00", align 1
@.str.111 = private unnamed_addr constant [7 x i8] c"output\00", align 1
@.str.112 = private unnamed_addr constant [8 x i8] c"reverse\00", align 1
@.str.113 = private unnamed_addr constant [7 x i8] c"stable\00", align 1
@.str.114 = private unnamed_addr constant [11 x i8] c"batch-size\00", align 1
@.str.115 = private unnamed_addr constant [12 x i8] c"buffer-size\00", align 1
@.str.116 = private unnamed_addr constant [16 x i8] c"field-separator\00", align 1
@.str.117 = private unnamed_addr constant [20 x i8] c"temporary-directory\00", align 1
@.str.118 = private unnamed_addr constant [7 x i8] c"unique\00", align 1
@.str.119 = private unnamed_addr constant [16 x i8] c"zero-terminated\00", align 1
@.str.120 = private unnamed_addr constant [9 x i8] c"parallel\00", align 1
@.str.121 = private unnamed_addr constant [5 x i8] c"help\00", align 1
@Version = dso_local global i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.62, i32 0, i32 0), align 8
@.str.62 = private unnamed_addr constant [13 x i8] c"9.0.36-5e36c\00", align 1
@argmatch_die = dso_local global void ()* @__argmatch_die, align 8
@.str.167 = private unnamed_addr constant [27 x i8] c"invalid argument %s for %s\00", align 1
@.str.1.168 = private unnamed_addr constant [29 x i8] c"ambiguous argument %s for %s\00", align 1
@.str.2.169 = private unnamed_addr constant [21 x i8] c"Valid arguments are:\00", align 1
@.str.3.170 = private unnamed_addr constant [8 x i8] c"\0A  - %s\00", align 1
@.str.4.171 = private unnamed_addr constant [5 x i8] c", %s\00", align 1
@file_name = internal global i8* null, align 8
@ignore_EPIPE = internal global i8 0, align 1
@.str.189 = private unnamed_addr constant [12 x i8] c"write error\00", align 1
@.str.1.190 = private unnamed_addr constant [7 x i8] c"%s: %s\00", align 1
@.str.2.191 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@fillbuf.196 = internal constant <{ i8, [63 x i8] }> <{ i8 -128, [63 x i8] zeroinitializer }>, align 16
@exit_failure = dso_local global i32 1, align 4
@.str.205 = private unnamed_addr constant [2 x i8] c".\00", align 1
@.str.1.206 = private unnamed_addr constant [3 x i8] c"..\00", align 1
@.str.209 = private unnamed_addr constant [2 x i8] c"C\00", align 1
@.str.1.210 = private unnamed_addr constant [6 x i8] c"POSIX\00", align 1
@.str.211 = private unnamed_addr constant [24 x i8] c"# entries:         %lu\0A\00", align 1
@.str.1.212 = private unnamed_addr constant [24 x i8] c"# buckets:         %lu\0A\00", align 1
@.str.2.213 = private unnamed_addr constant [33 x i8] c"# buckets used:    %lu (%.2f%%)\0A\00", align 1
@.str.3.214 = private unnamed_addr constant [24 x i8] c"max bucket length: %lu\0A\00", align 1
@default_tuning = internal constant %struct.hash_tuning { float 0.000000e+00, float 1.000000e+00, float 0x3FE99999A0000000, float 0x3FF69FBE80000000, i8 0 }, align 4
@.str.237 = private unnamed_addr constant [16 x i8] c"OMP_NUM_THREADS\00", align 1
@.str.1.238 = private unnamed_addr constant [17 x i8] c"OMP_THREAD_LIMIT\00", align 1
@rpl_pipe2.have_pipe2_really = internal global i32 0, align 4
@.str.249 = private unnamed_addr constant [16 x i8] c"_POSIX2_VERSION\00", align 1
@program_name = dso_local global i8* null, align 8
@.str.254 = private unnamed_addr constant [56 x i8] c"A NULL argv[0] was passed through an exec system call.\0A\00", align 1
@.str.1.255 = private unnamed_addr constant [8 x i8] c"/.libs/\00", align 1
@.str.2.256 = private unnamed_addr constant [4 x i8] c"lt-\00", align 1
@program_invocation_short_name = external dso_local global i8*, align 8
@program_invocation_name = external dso_local global i8*, align 8
@quoting_style_args = dso_local constant [11 x i8*] [i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.257, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1.258, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2.259, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.3.260, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.4.261, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5.262, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.6.263, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.7.264, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.8.265, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.9.266, i32 0, i32 0), i8* null], align 16
@.str.257 = private unnamed_addr constant [8 x i8] c"literal\00", align 1
@.str.1.258 = private unnamed_addr constant [6 x i8] c"shell\00", align 1
@.str.2.259 = private unnamed_addr constant [13 x i8] c"shell-always\00", align 1
@.str.3.260 = private unnamed_addr constant [13 x i8] c"shell-escape\00", align 1
@.str.4.261 = private unnamed_addr constant [20 x i8] c"shell-escape-always\00", align 1
@.str.5.262 = private unnamed_addr constant [2 x i8] c"c\00", align 1
@.str.6.263 = private unnamed_addr constant [8 x i8] c"c-maybe\00", align 1
@.str.7.264 = private unnamed_addr constant [7 x i8] c"escape\00", align 1
@.str.8.265 = private unnamed_addr constant [7 x i8] c"locale\00", align 1
@.str.9.266 = private unnamed_addr constant [8 x i8] c"clocale\00", align 1
@quoting_style_vals = dso_local constant [10 x i32] [i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9], align 16
@quote_quoting_options = dso_local global %struct.quoting_options { i32 8, i32 0, [8 x i32] zeroinitializer, i8* null, i8* null }, align 8
@default_quoting_options = internal global %struct.quoting_options zeroinitializer, align 8
@.str.10.267 = private unnamed_addr constant [2 x i8] c"\22\00", align 1
@.str.11.268 = private unnamed_addr constant [2 x i8] c"`\00", align 1
@.str.12.269 = private unnamed_addr constant [2 x i8] c"'\00", align 1
@.str.13.270 = private unnamed_addr constant [6 x i8] c"UTF-8\00", align 1
@.str.14.271 = private unnamed_addr constant [4 x i8] c"\E2\80\98\00", align 1
@.str.15.272 = private unnamed_addr constant [4 x i8] c"\E2\80\99\00", align 1
@.str.16.273 = private unnamed_addr constant [8 x i8] c"GB18030\00", align 1
@.str.17.274 = private unnamed_addr constant [4 x i8] c"\A1\07e\00", align 1
@.str.18.275 = private unnamed_addr constant [3 x i8] c"\A1\AF\00", align 1
@slotvec = internal global %struct.slotvec* @slotvec0, align 8
@nslots = internal global i32 1, align 4
@slot0 = internal global [256 x i8] zeroinitializer, align 16
@slotvec0 = internal global %struct.slotvec { i64 256, i8* getelementptr inbounds ([256 x i8], [256 x i8]* @slot0, i32 0, i32 0) }, align 8
@.str.290 = private unnamed_addr constant [3 x i8] c"rb\00", align 1
@.str.1.291 = private unnamed_addr constant [16 x i8] c"%s: end of file\00", align 1
@.str.2.292 = private unnamed_addr constant [15 x i8] c"%s: read error\00", align 1
@.str.314 = private unnamed_addr constant [12 x i8] c"%s (%s) %s\0A\00", align 1
@.str.1.315 = private unnamed_addr constant [7 x i8] c"%s %s\0A\00", align 1
@.str.2.316 = private unnamed_addr constant [4 x i8] c"(C)\00", align 1
@.str.3.317 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.4.318 = private unnamed_addr constant [171 x i8] c"License GPLv3+: GNU GPL version 3 or later <%s>.\0AThis is free software: you are free to change and redistribute it.\0AThere is NO WARRANTY, to the extent permitted by law.\0A\00", align 1
@.str.5.319 = private unnamed_addr constant [34 x i8] c"https://gnu.org/licenses/gpl.html\00", align 1
@.str.6.320 = private unnamed_addr constant [16 x i8] c"Written by %s.\0A\00", align 1
@.str.7.321 = private unnamed_addr constant [23 x i8] c"Written by %s and %s.\0A\00", align 1
@.str.8.322 = private unnamed_addr constant [28 x i8] c"Written by %s, %s, and %s.\0A\00", align 1
@.str.9.323 = private unnamed_addr constant [32 x i8] c"Written by %s, %s, %s,\0Aand %s.\0A\00", align 1
@.str.10.324 = private unnamed_addr constant [36 x i8] c"Written by %s, %s, %s,\0A%s, and %s.\0A\00", align 1
@.str.11.325 = private unnamed_addr constant [40 x i8] c"Written by %s, %s, %s,\0A%s, %s, and %s.\0A\00", align 1
@.str.12.326 = private unnamed_addr constant [44 x i8] c"Written by %s, %s, %s,\0A%s, %s, %s, and %s.\0A\00", align 1
@.str.13.327 = private unnamed_addr constant [48 x i8] c"Written by %s, %s, %s,\0A%s, %s, %s, %s,\0Aand %s.\0A\00", align 1
@.str.14.328 = private unnamed_addr constant [52 x i8] c"Written by %s, %s, %s,\0A%s, %s, %s, %s,\0A%s, and %s.\0A\00", align 1
@.str.15.329 = private unnamed_addr constant [60 x i8] c"Written by %s, %s, %s,\0A%s, %s, %s, %s,\0A%s, %s, and others.\0A\00", align 1
@.str.16.332 = private unnamed_addr constant [20 x i8] c"Report bugs to: %s\0A\00", align 1
@.str.17.333 = private unnamed_addr constant [22 x i8] c"bug-coreutils@gnu.org\00", align 1
@.str.18.334 = private unnamed_addr constant [20 x i8] c"%s home page: <%s>\0A\00", align 1
@.str.19.335 = private unnamed_addr constant [14 x i8] c"GNU coreutils\00", align 1
@.str.20.336 = private unnamed_addr constant [40 x i8] c"https://www.gnu.org/software/coreutils/\00", align 1
@.str.21.337 = private unnamed_addr constant [39 x i8] c"General help using GNU software: <%s>\0A\00", align 1
@.str.22.338 = private unnamed_addr constant [29 x i8] c"https://www.gnu.org/gethelp/\00", align 1
@version_etc_copyright = dso_local constant [47 x i8] c"Copyright %s %d Free Software Foundation, Inc.\00", align 16
@.str.357 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.1.358 = private unnamed_addr constant [17 x i8] c"memory exhausted\00", align 1
@.str.359 = private unnamed_addr constant [25 x i8] c"string comparison failed\00", align 1
@.str.1.360 = private unnamed_addr constant [43 x i8] c"Set LC_ALL='C' to work around the problem.\00", align 1
@.str.2.361 = private unnamed_addr constant [37 x i8] c"The strings compared were %s and %s.\00", align 1
@.str.368 = private unnamed_addr constant [3 x i8] c"--\00", align 1
@.str.1.369 = private unnamed_addr constant [27 x i8] c"invalid %s%s argument '%s'\00", align 1
@.str.2.370 = private unnamed_addr constant [37 x i8] c"invalid suffix in %s%s argument '%s'\00", align 1
@.str.3.371 = private unnamed_addr constant [29 x i8] c"%s%s argument '%s' too large\00", align 1
@.str.374 = private unnamed_addr constant [38 x i8] c"0 <= strtol_base && strtol_base <= 36\00", align 1
@.str.1.375 = private unnamed_addr constant [17 x i8] c"../lib/xstrtol.c\00", align 1
@__PRETTY_FUNCTION__.xstrtoumax = private unnamed_addr constant [79 x i8] c"strtol_error xstrtoumax(const char *, char **, int, uintmax_t *, const char *)\00", align 1
@rpl_fcntl_DUPFD_CLOEXEC.have_dupfd_cloexec = internal global i32 0, align 4
@obstack_alloc_failed_handler = dso_local global void ()* @print_and_abort, align 8
@.str.390 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@.str.1.391 = private unnamed_addr constant [17 x i8] c"memory exhausted\00", align 1
@.str.432 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.1.433 = private unnamed_addr constant [6 x i8] c"ASCII\00", align 1

; Function Attrs: noreturn nounwind uwtable
define dso_local void @usage(i32 %status) #0 {
entry:
  %status.addr = alloca i32, align 4
  store i32 %status, i32* %status.addr, align 4, !tbaa !2
  %0 = load i32, i32* %status.addr, align 4, !tbaa !2
  %cmp = icmp ne i32 %0, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  br label %do.body

do.body:                                          ; preds = %if.then
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !6
  ; %2 = load i8*, i8** @program_name, align 8, !tbaa !6
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str, i64 0, i64 0), i8* %2)
  br label %do.end

do.end:                                           ; preds = %do.body
  br label %if.end

if.else:                                          ; preds = %entry
  ; %3 = load i8*, i8** @program_name, align 8, !tbaa !6
  ; %4 = load i8*, i8** @program_name, align 8, !tbaa !6
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str.1, i64 0, i64 0), i8* %3, i8* %4)
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !6
  %call2 = call i32 @fputs_unlocked(i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.2, i64 0, i64 0), %struct._IO_FILE* %5)
  call void @emit_stdin_note()
  call void @emit_mandatory_arg_note()
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !6
  %call3 = call i32 @fputs_unlocked(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i64 0, i64 0), %struct._IO_FILE* %6)
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !6
  %call4 = call i32 @fputs_unlocked(i8* getelementptr inbounds ([204 x i8], [204 x i8]* @.str.4, i64 0, i64 0), %struct._IO_FILE* %7)
  %8 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !6
  %call5 = call i32 @fputs_unlocked(i8* getelementptr inbounds ([211 x i8], [211 x i8]* @.str.5, i64 0, i64 0), %struct._IO_FILE* %8)
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !6
  %call6 = call i32 @fputs_unlocked(i8* getelementptr inbounds ([76 x i8], [76 x i8]* @.str.6, i64 0, i64 0), %struct._IO_FILE* %9)
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !6
  %call7 = call i32 @fputs_unlocked(i8* getelementptr inbounds ([274 x i8], [274 x i8]* @.str.7, i64 0, i64 0), %struct._IO_FILE* %10)
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !6
  %call8 = call i32 @fputs_unlocked(i8* getelementptr inbounds ([278 x i8], [278 x i8]* @.str.8, i64 0, i64 0), %struct._IO_FILE* %11)
  %12 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !6
  %call9 = call i32 @fputs_unlocked(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.9, i64 0, i64 0), %struct._IO_FILE* %12)
  %13 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !6
  %call10 = call i32 @fputs_unlocked(i8* getelementptr inbounds ([118 x i8], [118 x i8]* @.str.10, i64 0, i64 0), %struct._IO_FILE* %13)
  %14 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !6
  %call11 = call i32 @fputs_unlocked(i8* getelementptr inbounds ([277 x i8], [277 x i8]* @.str.11, i64 0, i64 0), %struct._IO_FILE* %14)
  %15 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !6
  %call12 = call i32 @fputs_unlocked(i8* getelementptr inbounds ([348 x i8], [348 x i8]* @.str.12, i64 0, i64 0), %struct._IO_FILE* %15)
  %16 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !6
  %call13 = call i32 @fputs_unlocked(i8* getelementptr inbounds ([144 x i8], [144 x i8]* @.str.13, i64 0, i64 0), %struct._IO_FILE* %16)
  %17 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !6
  %call14 = call i32 @fputs_unlocked(i8* getelementptr inbounds ([216 x i8], [216 x i8]* @.str.14, i64 0, i64 0), %struct._IO_FILE* %17)
  %call15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([453 x i8], [453 x i8]* @.str.15, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.16, i64 0, i64 0))
  %18 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !6
  %call16 = call i32 @fputs_unlocked(i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.17, i64 0, i64 0), %struct._IO_FILE* %18)
  %19 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !6
  %call17 = call i32 @fputs_unlocked(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.18, i64 0, i64 0), %struct._IO_FILE* %19)
  %20 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !6
  %call18 = call i32 @fputs_unlocked(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.19, i64 0, i64 0), %struct._IO_FILE* %20)
  %21 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !6
  %call19 = call i32 @fputs_unlocked(i8* getelementptr inbounds ([604 x i8], [604 x i8]* @.str.20, i64 0, i64 0), %struct._IO_FILE* %21)
  %22 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !6
  %call20 = call i32 @fputs_unlocked(i8* getelementptr inbounds ([229 x i8], [229 x i8]* @.str.21, i64 0, i64 0), %struct._IO_FILE* %22)
  call void @emit_ancillary_info(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.22, i64 0, i64 0))
  br label %if.end

if.end:                                           ; preds = %if.else, %do.end
  %23 = load i32, i32* %status.addr, align 4, !tbaa !2
  call void @exit(i32 %23) #21
  unreachable
}

declare dso_local i32 @fprintf(%struct._IO_FILE*, i8*, ...) #1

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32 @fputs_unlocked(i8*, %struct._IO_FILE*) #1

; Function Attrs: inlinehint nounwind uwtable
define internal void @emit_stdin_note() #2 {
entry:
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !6
  %call = call i32 @fputs_unlocked(i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.64, i64 0, i64 0), %struct._IO_FILE* %0)
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @emit_mandatory_arg_note() #2 {
entry:
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !6
  %call = call i32 @fputs_unlocked(i8* getelementptr inbounds ([75 x i8], [75 x i8]* @.str.65, i64 0, i64 0), %struct._IO_FILE* %0)
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @emit_ancillary_info(i8* %program) #2 {
entry:
  %program.addr = alloca i8*, align 8
  %infomap = alloca [7 x %struct.infomap], align 16
  %node = alloca i8*, align 8
  %map_prog = alloca %struct.infomap*, align 8
  %lc_messages = alloca i8*, align 8
  store i8* %program, i8** %program.addr, align 8, !tbaa !6
  %0 = bitcast [7 x %struct.infomap]* %infomap to i8*
  call void @llvm.lifetime.start.p0i8(i64 112, i8* %0) #13
  %1 = bitcast [7 x %struct.infomap]* %infomap to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %1, i8* align 16 bitcast ([7 x %struct.infomap]* @__const.emit_ancillary_info.infomap to i8*), i64 112, i1 false)
  %2 = bitcast i8** %node to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %2) #13
  %3 = load i8*, i8** %program.addr, align 8, !tbaa !6
  store i8* %3, i8** %node, align 8, !tbaa !6
  %4 = bitcast %struct.infomap** %map_prog to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %4) #13
  %arraydecay = getelementptr inbounds [7 x %struct.infomap], [7 x %struct.infomap]* %infomap, i64 0, i64 0
  store %struct.infomap* %arraydecay, %struct.infomap** %map_prog, align 8, !tbaa !6
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %5 = load %struct.infomap*, %struct.infomap** %map_prog, align 8, !tbaa !6
  %program1 = getelementptr inbounds %struct.infomap, %struct.infomap* %5, i32 0, i32 0
  %6 = load i8*, i8** %program1, align 8, !tbaa !8
  %tobool = icmp ne i8* %6, null
  br i1 %tobool, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %7 = load i8*, i8** %program.addr, align 8, !tbaa !6
  %8 = load %struct.infomap*, %struct.infomap** %map_prog, align 8, !tbaa !6
  %program2 = getelementptr inbounds %struct.infomap, %struct.infomap* %8, i32 0, i32 0
  %9 = load i8*, i8** %program2, align 8, !tbaa !8
  %call = call i32 @strcmp(i8* %7, i8* %9) #22
  %cmp = icmp eq i32 %call, 0
  %lnot = xor i1 %cmp, true
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %10 = phi i1 [ false, %while.cond ], [ %lnot, %land.rhs ]
  br i1 %10, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %11 = load %struct.infomap*, %struct.infomap** %map_prog, align 8, !tbaa !6
  %incdec.ptr = getelementptr inbounds %struct.infomap, %struct.infomap* %11, i32 1
  store %struct.infomap* %incdec.ptr, %struct.infomap** %map_prog, align 8, !tbaa !6
  br label %while.cond

while.end:                                        ; preds = %land.end
  %12 = load %struct.infomap*, %struct.infomap** %map_prog, align 8, !tbaa !6
  %node3 = getelementptr inbounds %struct.infomap, %struct.infomap* %12, i32 0, i32 1
  %13 = load i8*, i8** %node3, align 8, !tbaa !10
  %tobool4 = icmp ne i8* %13, null
  br i1 %tobool4, label %if.then, label %if.end

if.then:                                          ; preds = %while.end
  %14 = load %struct.infomap*, %struct.infomap** %map_prog, align 8, !tbaa !6
  %node5 = getelementptr inbounds %struct.infomap, %struct.infomap* %14, i32 0, i32 1
  %15 = load i8*, i8** %node5, align 8, !tbaa !10
  store i8* %15, i8** %node, align 8, !tbaa !6
  br label %if.end

if.end:                                           ; preds = %if.then, %while.end
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.75, i64 0, i64 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.44, i64 0, i64 0), i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.76, i64 0, i64 0))
  %16 = bitcast i8** %lc_messages to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %16) #13
  %call7 = call i8* @setlocale(i32 5, i8* null) #13
  store i8* %call7, i8** %lc_messages, align 8, !tbaa !6
  %17 = load i8*, i8** %lc_messages, align 8, !tbaa !6
  %tobool8 = icmp ne i8* %17, null
  br i1 %tobool8, label %land.lhs.true, label %if.end13

land.lhs.true:                                    ; preds = %if.end
  %18 = load i8*, i8** %lc_messages, align 8, !tbaa !6
  %call9 = call i32 @strncmp(i8* %18, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.77, i64 0, i64 0), i64 3) #22
  %tobool10 = icmp ne i32 %call9, 0
  br i1 %tobool10, label %if.then11, label %if.end13

if.then11:                                        ; preds = %land.lhs.true
  %19 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !6
  %call12 = call i32 @fputs_unlocked(i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str.78, i64 0, i64 0), %struct._IO_FILE* %19)
  br label %if.end13

if.end13:                                         ; preds = %if.then11, %land.lhs.true, %if.end
  %20 = load i8*, i8** %program.addr, align 8, !tbaa !6
  %call14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.79, i64 0, i64 0), i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.76, i64 0, i64 0), i8* %20)
  %21 = load i8*, i8** %node, align 8, !tbaa !6
  %22 = load i8*, i8** %node, align 8, !tbaa !6
  %23 = load i8*, i8** %program.addr, align 8, !tbaa !6
  %cmp15 = icmp eq i8* %22, %23
  %24 = zext i1 %cmp15 to i64
  %cond = select i1 %cmp15, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.81, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.24, i64 0, i64 0)
  %call16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.80, i64 0, i64 0), i8* %21, i8* %cond)
  %25 = bitcast i8** %lc_messages to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %25) #13
  %26 = bitcast %struct.infomap** %map_prog to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %26) #13
  %27 = bitcast i8** %node to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %27) #13
  %28 = bitcast [7 x %struct.infomap]* %infomap to i8*
  call void @llvm.lifetime.end.p0i8(i64 112, i8* %28) #13
  ret void
}

; Function Attrs: noreturn nounwind
declare dso_local void @exit(i32) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #4

; Function Attrs: nounwind readonly
declare dso_local i32 @strcmp(i8*, i8*) #5

; Function Attrs: nounwind
declare dso_local i8* @setlocale(i32, i8*) #6

; Function Attrs: nounwind readonly
declare dso_local i32 @strncmp(i8*, i8*, i64) #5

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #4

; Function Attrs: nounwind uwtable
define dso_local i32 @main(i32 %argc, i8** %argv) #7 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 8
  %key = alloca %struct.keyfield*, align 8
  %key_buf = alloca %struct.keyfield, align 8
  %gkey = alloca %struct.keyfield, align 8
  %gkey_only = alloca i8, align 1
  %s = alloca i8*, align 8
  %c = alloca i32, align 4
  %checkonly = alloca i8, align 1
  %mergeonly = alloca i8, align 1
  %random_source = alloca i8*, align 8
  %need_random = alloca i8, align 1
  %nthreads = alloca i64, align 8
  %nfiles = alloca i64, align 8
  %posixly_correct = alloca i8, align 1
  %posix_ver = alloca i32, align 4
  %traditional_usage = alloca i8, align 1
  %files = alloca i8**, align 8
  %files_from = alloca i8*, align 8
  %tok = alloca %struct.Tokens, align 8
  %outfile = alloca i8*, align 8
  %locale_ok = alloca i8, align 1
  %locale = alloca %struct.lconv*, align 8
  %i = alloca i64, align 8
  %act = alloca %struct.sigaction, align 8
  %oi = alloca i32, align 4
  %cleanup.dest.slot = alloca i32, align 4
  %minus_pos_usage = alloca i8, align 1
  %optarg1 = alloca i8*, align 8
  %str = alloca [2 x i8], align 1
  %newtab = alloca i8, align 1
  %p = alloca i8*, align 8
  %stream = alloca %struct._IO_FILE*, align 8
  %i407 = alloca i64, align 8
  %file_number = alloca i64, align 8
  %tmp_dir = alloca i8*, align 8
  %sortfiles = alloca %struct.sortfile*, align 8
  %i589 = alloca i64, align 8
  %np = alloca i64, align 8
  %nthreads_max = alloca i64, align 8
  store i32 0, i32* %retval, align 4
  store i32 %argc, i32* %argc.addr, align 4, !tbaa !2
  store i8** %argv, i8*** %argv.addr, align 8, !tbaa !6
  %0 = bitcast %struct.keyfield** %key to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #13
  %1 = bitcast %struct.keyfield* %key_buf to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* %1) #13
  %2 = bitcast %struct.keyfield* %gkey to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* %2) #13
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %gkey_only) #13
  store i8 0, i8* %gkey_only, align 1, !tbaa !11
  %3 = bitcast i8** %s to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %3) #13
  %4 = bitcast i32* %c to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %4) #13
  store i32 0, i32* %c, align 4, !tbaa !2
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %checkonly) #13
  store i8 0, i8* %checkonly, align 1, !tbaa !13
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %mergeonly) #13
  store i8 0, i8* %mergeonly, align 1, !tbaa !11
  %5 = bitcast i8** %random_source to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %5) #13
  store i8* null, i8** %random_source, align 8, !tbaa !6
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %need_random) #13
  store i8 0, i8* %need_random, align 1, !tbaa !11
  %6 = bitcast i64* %nthreads to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %6) #13
  store i64 0, i64* %nthreads, align 8, !tbaa !14
  %7 = bitcast i64* %nfiles to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %7) #13
  store i64 0, i64* %nfiles, align 8, !tbaa !14
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %posixly_correct) #13
  %call = call i8* @getenv(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.23, i64 0, i64 0)) #13
  %cmp = icmp ne i8* %call, null
  %frombool = zext i1 %cmp to i8
  store i8 %frombool, i8* %posixly_correct, align 1, !tbaa !11
  %8 = bitcast i32* %posix_ver to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %8) #13
  %call1 = call i32 @posix2_version()
  store i32 %call1, i32* %posix_ver, align 4, !tbaa !2
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %traditional_usage) #13
  %9 = load i32, i32* %posix_ver, align 4, !tbaa !2
  %cmp2 = icmp sle i32 200112, %9
  br i1 %cmp2, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %10 = load i32, i32* %posix_ver, align 4, !tbaa !2
  %cmp3 = icmp slt i32 %10, 200809
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %11 = phi i1 [ false, %entry ], [ %cmp3, %land.rhs ]
  %lnot = xor i1 %11, true
  %frombool4 = zext i1 %lnot to i8
  store i8 %frombool4, i8* %traditional_usage, align 1, !tbaa !11
  %12 = bitcast i8*** %files to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %12) #13
  %13 = bitcast i8** %files_from to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %13) #13
  store i8* null, i8** %files_from, align 8, !tbaa !6
  %14 = bitcast %struct.Tokens* %tok to i8*
  call void @llvm.lifetime.start.p0i8(i64 288, i8* %14) #13
  %15 = bitcast i8** %outfile to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %15) #13
  store i8* null, i8** %outfile, align 8, !tbaa !6
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %locale_ok) #13
  %16 = load i8**, i8*** %argv.addr, align 8, !tbaa !6
  %arrayidx = getelementptr inbounds i8*, i8** %16, i64 0
  %17 = load i8*, i8** %arrayidx, align 8, !tbaa !6
  ; call void @set_program_name(i8* %17)
  %call5 = call i8* @setlocale(i32 6, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.24, i64 0, i64 0)) #13
  %tobool = icmp ne i8* %call5, null
  %lnot6 = xor i1 %tobool, true
  %lnot7 = xor i1 %lnot6, true
  %frombool8 = zext i1 %lnot7 to i8
  store i8 %frombool8, i8* %locale_ok, align 1, !tbaa !11
  call void @initialize_exit_failure(i32 2)
  %call9 = call zeroext i1 @hard_locale(i32 3)
  %frombool10 = zext i1 %call9 to i8
  store i8 %frombool10, i8* @hard_LC_COLLATE, align 1, !tbaa !11
  %call11 = call zeroext i1 @hard_locale(i32 2)
  %frombool12 = zext i1 %call11 to i8
  store i8 %frombool12, i8* @hard_LC_TIME, align 1, !tbaa !11
  %18 = bitcast %struct.lconv** %locale to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %18) #13
  %call13 = call %struct.lconv* @localeconv() #13
  store %struct.lconv* %call13, %struct.lconv** %locale, align 8, !tbaa !6
  %19 = load %struct.lconv*, %struct.lconv** %locale, align 8, !tbaa !6
  %decimal_point = getelementptr inbounds %struct.lconv, %struct.lconv* %19, i32 0, i32 0
  %20 = load i8*, i8** %decimal_point, align 8, !tbaa !16
  %arrayidx14 = getelementptr inbounds i8, i8* %20, i64 0
  %21 = load i8, i8* %arrayidx14, align 1, !tbaa !13
  store i8 %21, i8* @decimal_point, align 1, !tbaa !13
  %22 = load i8, i8* @decimal_point, align 1, !tbaa !13
  %tobool15 = icmp ne i8 %22, 0
  br i1 %tobool15, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %land.end
  %23 = load %struct.lconv*, %struct.lconv** %locale, align 8, !tbaa !6
  %decimal_point16 = getelementptr inbounds %struct.lconv, %struct.lconv* %23, i32 0, i32 0
  %24 = load i8*, i8** %decimal_point16, align 8, !tbaa !16
  %arrayidx17 = getelementptr inbounds i8, i8* %24, i64 1
  %25 = load i8, i8* %arrayidx17, align 1, !tbaa !13
  %conv = sext i8 %25 to i32
  %tobool18 = icmp ne i32 %conv, 0
  br i1 %tobool18, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %land.end
  store i8 46, i8* @decimal_point, align 1, !tbaa !13
  br label %if.end

if.end:                                           ; preds = %if.then, %lor.lhs.false
  %26 = load %struct.lconv*, %struct.lconv** %locale, align 8, !tbaa !6
  %thousands_sep = getelementptr inbounds %struct.lconv, %struct.lconv* %26, i32 0, i32 1
  %27 = load i8*, i8** %thousands_sep, align 8, !tbaa !18
  %arrayidx19 = getelementptr inbounds i8, i8* %27, i64 0
  %28 = load i8, i8* %arrayidx19, align 1, !tbaa !13
  %conv20 = sext i8 %28 to i32
  store i32 %conv20, i32* @thousands_sep, align 4, !tbaa !2
  %29 = load i32, i32* @thousands_sep, align 4, !tbaa !2
  %tobool21 = icmp ne i32 %29, 0
  br i1 %tobool21, label %land.lhs.true, label %if.end27

land.lhs.true:                                    ; preds = %if.end
  %30 = load %struct.lconv*, %struct.lconv** %locale, align 8, !tbaa !6
  %thousands_sep22 = getelementptr inbounds %struct.lconv, %struct.lconv* %30, i32 0, i32 1
  %31 = load i8*, i8** %thousands_sep22, align 8, !tbaa !18
  %arrayidx23 = getelementptr inbounds i8, i8* %31, i64 1
  %32 = load i8, i8* %arrayidx23, align 1, !tbaa !13
  %conv24 = sext i8 %32 to i32
  %tobool25 = icmp ne i32 %conv24, 0
  br i1 %tobool25, label %if.then26, label %if.end27

if.then26:                                        ; preds = %land.lhs.true
  store i8 1, i8* @thousands_sep_ignored, align 1, !tbaa !11
  br label %if.end27

if.end27:                                         ; preds = %if.then26, %land.lhs.true, %if.end
  %33 = load i32, i32* @thousands_sep, align 4, !tbaa !2
  %tobool28 = icmp ne i32 %33, 0
  br i1 %tobool28, label %lor.lhs.false29, label %if.then34

lor.lhs.false29:                                  ; preds = %if.end27
  %34 = load %struct.lconv*, %struct.lconv** %locale, align 8, !tbaa !6
  %thousands_sep30 = getelementptr inbounds %struct.lconv, %struct.lconv* %34, i32 0, i32 1
  %35 = load i8*, i8** %thousands_sep30, align 8, !tbaa !18
  %arrayidx31 = getelementptr inbounds i8, i8* %35, i64 1
  %36 = load i8, i8* %arrayidx31, align 1, !tbaa !13
  %conv32 = sext i8 %36 to i32
  %tobool33 = icmp ne i32 %conv32, 0
  br i1 %tobool33, label %if.then34, label %if.end35

if.then34:                                        ; preds = %lor.lhs.false29, %if.end27
  store i32 128, i32* @thousands_sep, align 4, !tbaa !2
  br label %if.end35

if.end35:                                         ; preds = %if.then34, %lor.lhs.false29
  %37 = bitcast %struct.lconv** %locale to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %37) #13
  store i8 0, i8* @have_read_stdin, align 1, !tbaa !11
  call void @inittables()
  %38 = bitcast i64* %i to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %38) #13
  %39 = bitcast %struct.sigaction* %act to i8*
  call void @llvm.lifetime.start.p0i8(i64 152, i8* %39) #13
  %call36 = call i32 @sigemptyset(%struct.__sigset_t* @caught_signals) #13
  store i64 0, i64* %i, align 8, !tbaa !14
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end35
  %40 = load i64, i64* %i, align 8, !tbaa !14
  %cmp37 = icmp ult i64 %40, 11
  br i1 %cmp37, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %41 = load i64, i64* %i, align 8, !tbaa !14
  %arrayidx39 = getelementptr inbounds [11 x i32], [11 x i32]* @main.sig, i64 0, i64 %41
  %42 = load i32, i32* %arrayidx39, align 4, !tbaa !2
  %call40 = call i32 @sigaction(i32 %42, %struct.sigaction* null, %struct.sigaction* %act) #13
  %__sigaction_handler = getelementptr inbounds %struct.sigaction, %struct.sigaction* %act, i32 0, i32 0
  %sa_handler = bitcast %union.anon.2* %__sigaction_handler to void (i32)**
  %43 = load void (i32)*, void (i32)** %sa_handler, align 8, !tbaa !13
  %cmp41 = icmp ne void (i32)* %43, inttoptr (i64 1 to void (i32)*)
  br i1 %cmp41, label %if.then43, label %if.end46

if.then43:                                        ; preds = %for.body
  %44 = load i64, i64* %i, align 8, !tbaa !14
  %arrayidx44 = getelementptr inbounds [11 x i32], [11 x i32]* @main.sig, i64 0, i64 %44
  %45 = load i32, i32* %arrayidx44, align 4, !tbaa !2
  %call45 = call i32 @sigaddset(%struct.__sigset_t* @caught_signals, i32 %45) #13
  br label %if.end46

if.end46:                                         ; preds = %if.then43, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end46
  %46 = load i64, i64* %i, align 8, !tbaa !14
  %inc = add i64 %46, 1
  store i64 %inc, i64* %i, align 8, !tbaa !14
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %__sigaction_handler47 = getelementptr inbounds %struct.sigaction, %struct.sigaction* %act, i32 0, i32 0
  %sa_handler48 = bitcast %union.anon.2* %__sigaction_handler47 to void (i32)**
  store void (i32)* @sighandler, void (i32)** %sa_handler48, align 8, !tbaa !13
  %sa_mask = getelementptr inbounds %struct.sigaction, %struct.sigaction* %act, i32 0, i32 1
  %47 = bitcast %struct.__sigset_t* %sa_mask to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %47, i8* align 8 bitcast (%struct.__sigset_t* @caught_signals to i8*), i64 128, i1 false), !tbaa.struct !19
  %sa_flags = getelementptr inbounds %struct.sigaction, %struct.sigaction* %act, i32 0, i32 2
  store i32 0, i32* %sa_flags, align 8, !tbaa !20
  store i64 0, i64* %i, align 8, !tbaa !14
  br label %for.cond49

for.cond49:                                       ; preds = %for.inc60, %for.end
  %48 = load i64, i64* %i, align 8, !tbaa !14
  %cmp50 = icmp ult i64 %48, 11
  br i1 %cmp50, label %for.body52, label %for.end62

for.body52:                                       ; preds = %for.cond49
  %49 = load i64, i64* %i, align 8, !tbaa !14
  %arrayidx53 = getelementptr inbounds [11 x i32], [11 x i32]* @main.sig, i64 0, i64 %49
  %50 = load i32, i32* %arrayidx53, align 4, !tbaa !2
  %call54 = call i32 @sigismember(%struct.__sigset_t* @caught_signals, i32 %50) #13
  %tobool55 = icmp ne i32 %call54, 0
  br i1 %tobool55, label %if.then56, label %if.end59

if.then56:                                        ; preds = %for.body52
  %51 = load i64, i64* %i, align 8, !tbaa !14
  %arrayidx57 = getelementptr inbounds [11 x i32], [11 x i32]* @main.sig, i64 0, i64 %51
  %52 = load i32, i32* %arrayidx57, align 4, !tbaa !2
  %call58 = call i32 @sigaction(i32 %52, %struct.sigaction* %act, %struct.sigaction* null) #13
  br label %if.end59

if.end59:                                         ; preds = %if.then56, %for.body52
  br label %for.inc60

for.inc60:                                        ; preds = %if.end59
  %53 = load i64, i64* %i, align 8, !tbaa !14
  %inc61 = add i64 %53, 1
  store i64 %inc61, i64* %i, align 8, !tbaa !14
  br label %for.cond49

for.end62:                                        ; preds = %for.cond49
  %54 = bitcast %struct.sigaction* %act to i8*
  call void @llvm.lifetime.end.p0i8(i64 152, i8* %54) #13
  %55 = bitcast i64* %i to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %55) #13
  %call63 = call void (i32)* @signal(i32 17, void (i32)* null) #13
  %call64 = call i32 @atexit(void ()* @exit_cleanup) #13
  %call65 = call %struct.keyfield* @key_init(%struct.keyfield* %gkey)
  %sword = getelementptr inbounds %struct.keyfield, %struct.keyfield* %gkey, i32 0, i32 0
  store i64 -1, i64* %sword, align 8, !tbaa !23
  %56 = load i32, i32* %argc.addr, align 4, !tbaa !2
  %conv66 = sext i32 %56 to i64
  %call67 = call noalias nonnull i8* @xnmalloc(i64 %conv66, i64 8) #23
  %57 = bitcast i8* %call67 to i8**
  store i8** %57, i8*** %files, align 8, !tbaa !6
  br label %while.cond

while.cond:                                       ; preds = %cleanup.cont, %for.end62
  br label %while.body

while.body:                                       ; preds = %while.cond
  %58 = bitcast i32* %oi to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %58) #13
  store i32 -1, i32* %oi, align 4, !tbaa !2
  %59 = load i32, i32* %c, align 4, !tbaa !2
  %cmp68 = icmp eq i32 %59, -1
  br i1 %cmp68, label %if.then110, label %lor.lhs.false70

lor.lhs.false70:                                  ; preds = %while.body
  %60 = load i8, i8* %posixly_correct, align 1, !tbaa !11, !range !25
  %tobool71 = trunc i8 %60 to i1
  br i1 %tobool71, label %land.lhs.true73, label %lor.lhs.false106

land.lhs.true73:                                  ; preds = %lor.lhs.false70
  %61 = load i64, i64* %nfiles, align 8, !tbaa !14
  %cmp74 = icmp ne i64 %61, 0
  br i1 %cmp74, label %land.lhs.true76, label %lor.lhs.false106

land.lhs.true76:                                  ; preds = %land.lhs.true73
  %62 = load i8, i8* %traditional_usage, align 1, !tbaa !11, !range !25
  %tobool77 = trunc i8 %62 to i1
  br i1 %tobool77, label %land.lhs.true79, label %if.then110

land.lhs.true79:                                  ; preds = %land.lhs.true76
  %63 = load i8, i8* %checkonly, align 1, !tbaa !13
  %tobool80 = icmp ne i8 %63, 0
  br i1 %tobool80, label %if.then110, label %land.lhs.true81

land.lhs.true81:                                  ; preds = %land.lhs.true79
  %64 = load i32, i32* @optind, align 4, !tbaa !2
  %65 = load i32, i32* %argc.addr, align 4, !tbaa !2
  %cmp82 = icmp ne i32 %64, %65
  br i1 %cmp82, label %land.lhs.true84, label %if.then110

land.lhs.true84:                                  ; preds = %land.lhs.true81
  %66 = load i8**, i8*** %argv.addr, align 8, !tbaa !6
  %67 = load i32, i32* @optind, align 4, !tbaa !2
  %idxprom = sext i32 %67 to i64
  %arrayidx85 = getelementptr inbounds i8*, i8** %66, i64 %idxprom
  %68 = load i8*, i8** %arrayidx85, align 8, !tbaa !6
  %arrayidx86 = getelementptr inbounds i8, i8* %68, i64 0
  %69 = load i8, i8* %arrayidx86, align 1, !tbaa !13
  %conv87 = sext i8 %69 to i32
  %cmp88 = icmp eq i32 %conv87, 45
  br i1 %cmp88, label %land.lhs.true90, label %if.then110

land.lhs.true90:                                  ; preds = %land.lhs.true84
  %70 = load i8**, i8*** %argv.addr, align 8, !tbaa !6
  %71 = load i32, i32* @optind, align 4, !tbaa !2
  %idxprom91 = sext i32 %71 to i64
  %arrayidx92 = getelementptr inbounds i8*, i8** %70, i64 %idxprom91
  %72 = load i8*, i8** %arrayidx92, align 8, !tbaa !6
  %arrayidx93 = getelementptr inbounds i8, i8* %72, i64 1
  %73 = load i8, i8* %arrayidx93, align 1, !tbaa !13
  %conv94 = sext i8 %73 to i32
  %cmp95 = icmp eq i32 %conv94, 111
  br i1 %cmp95, label %land.lhs.true97, label %if.then110

land.lhs.true97:                                  ; preds = %land.lhs.true90
  %74 = load i8**, i8*** %argv.addr, align 8, !tbaa !6
  %75 = load i32, i32* @optind, align 4, !tbaa !2
  %idxprom98 = sext i32 %75 to i64
  %arrayidx99 = getelementptr inbounds i8*, i8** %74, i64 %idxprom98
  %76 = load i8*, i8** %arrayidx99, align 8, !tbaa !6
  %arrayidx100 = getelementptr inbounds i8, i8* %76, i64 2
  %77 = load i8, i8* %arrayidx100, align 1, !tbaa !13
  %conv101 = sext i8 %77 to i32
  %tobool102 = icmp ne i32 %conv101, 0
  br i1 %tobool102, label %lor.lhs.false106, label %lor.lhs.false103

lor.lhs.false103:                                 ; preds = %land.lhs.true97
  %78 = load i32, i32* @optind, align 4, !tbaa !2
  %add = add nsw i32 %78, 1
  %79 = load i32, i32* %argc.addr, align 4, !tbaa !2
  %cmp104 = icmp ne i32 %add, %79
  br i1 %cmp104, label %lor.lhs.false106, label %if.then110

lor.lhs.false106:                                 ; preds = %lor.lhs.false103, %land.lhs.true97, %land.lhs.true73, %lor.lhs.false70
  %80 = load i32, i32* %argc.addr, align 4, !tbaa !2
  %81 = load i8**, i8*** %argv.addr, align 8, !tbaa !6
  %call107 = call i32 @getopt_long(i32 %80, i8** %81, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @short_options, i64 0, i64 0), %struct.option* getelementptr inbounds ([31 x %struct.option], [31 x %struct.option]* @long_options, i64 0, i64 0), i32* %oi) #13
  store i32 %call107, i32* %c, align 4, !tbaa !2
  %cmp108 = icmp eq i32 %call107, -1
  br i1 %cmp108, label %if.then110, label %if.else

if.then110:                                       ; preds = %lor.lhs.false106, %lor.lhs.false103, %land.lhs.true90, %land.lhs.true84, %land.lhs.true81, %land.lhs.true79, %land.lhs.true76, %while.body
  %82 = load i32, i32* %argc.addr, align 4, !tbaa !2
  %83 = load i32, i32* @optind, align 4, !tbaa !2
  %cmp111 = icmp sle i32 %82, %83
  br i1 %cmp111, label %if.then113, label %if.end114

if.then113:                                       ; preds = %if.then110
  store i32 9, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end114:                                        ; preds = %if.then110
  %84 = load i8**, i8*** %argv.addr, align 8, !tbaa !6
  %85 = load i32, i32* @optind, align 4, !tbaa !2
  %inc115 = add nsw i32 %85, 1
  store i32 %inc115, i32* @optind, align 4, !tbaa !2
  %idxprom116 = sext i32 %85 to i64
  %arrayidx117 = getelementptr inbounds i8*, i8** %84, i64 %idxprom116
  %86 = load i8*, i8** %arrayidx117, align 8, !tbaa !6
  %87 = load i8**, i8*** %files, align 8, !tbaa !6
  %88 = load i64, i64* %nfiles, align 8, !tbaa !14
  %inc118 = add i64 %88, 1
  store i64 %inc118, i64* %nfiles, align 8, !tbaa !14
  %arrayidx119 = getelementptr inbounds i8*, i8** %87, i64 %88
  store i8* %86, i8** %arrayidx119, align 8, !tbaa !6
  br label %if.end389

if.else:                                          ; preds = %lor.lhs.false106
  %89 = load i32, i32* %c, align 4, !tbaa !2
  switch i32 %89, label %sw.default [
    i32 1, label %sw.bb
    i32 134, label %sw.bb221
    i32 98, label %sw.bb225
    i32 100, label %sw.bb225
    i32 102, label %sw.bb225
    i32 103, label %sw.bb225
    i32 104, label %sw.bb225
    i32 105, label %sw.bb225
    i32 77, label %sw.bb225
    i32 110, label %sw.bb225
    i32 114, label %sw.bb225
    i32 82, label %sw.bb225
    i32 86, label %sw.bb225
    i32 128, label %sw.bb230
    i32 99, label %sw.bb235
    i32 67, label %sw.bb235
    i32 129, label %sw.bb245
    i32 130, label %sw.bb253
    i32 131, label %sw.bb254
    i32 107, label %sw.bb255
    i32 109, label %sw.bb314
    i32 132, label %sw.bb315
    i32 111, label %sw.bb317
    i32 133, label %sw.bb325
    i32 115, label %sw.bb333
    i32 83, label %sw.bb334
    i32 116, label %sw.bb336
    i32 84, label %sw.bb361
    i32 135, label %sw.bb362
    i32 117, label %sw.bb365
    i32 121, label %sw.bb366
    i32 122, label %sw.bb386
    i32 -130, label %sw.bb387
    i32 -131, label %sw.bb388
  ]

sw.bb:                                            ; preds = %if.else
  store %struct.keyfield* null, %struct.keyfield** %key, align 8, !tbaa !6
  %90 = load i8*, i8** @optarg, align 8, !tbaa !6
  %arrayidx120 = getelementptr inbounds i8, i8* %90, i64 0
  %91 = load i8, i8* %arrayidx120, align 1, !tbaa !13
  %conv121 = sext i8 %91 to i32
  %cmp122 = icmp eq i32 %conv121, 43
  br i1 %cmp122, label %if.then124, label %if.end215

if.then124:                                       ; preds = %sw.bb
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %minus_pos_usage) #13
  %92 = load i32, i32* @optind, align 4, !tbaa !2
  %93 = load i32, i32* %argc.addr, align 4, !tbaa !2
  %cmp125 = icmp ne i32 %92, %93
  br i1 %cmp125, label %land.lhs.true127, label %land.end141

land.lhs.true127:                                 ; preds = %if.then124
  %94 = load i8**, i8*** %argv.addr, align 8, !tbaa !6
  %95 = load i32, i32* @optind, align 4, !tbaa !2
  %idxprom128 = sext i32 %95 to i64
  %arrayidx129 = getelementptr inbounds i8*, i8** %94, i64 %idxprom128
  %96 = load i8*, i8** %arrayidx129, align 8, !tbaa !6
  %arrayidx130 = getelementptr inbounds i8, i8* %96, i64 0
  %97 = load i8, i8* %arrayidx130, align 1, !tbaa !13
  %conv131 = sext i8 %97 to i32
  %cmp132 = icmp eq i32 %conv131, 45
  br i1 %cmp132, label %land.rhs134, label %land.end141

land.rhs134:                                      ; preds = %land.lhs.true127
  %98 = load i8**, i8*** %argv.addr, align 8, !tbaa !6
  %99 = load i32, i32* @optind, align 4, !tbaa !2
  %idxprom135 = sext i32 %99 to i64
  %arrayidx136 = getelementptr inbounds i8*, i8** %98, i64 %idxprom135
  %100 = load i8*, i8** %arrayidx136, align 8, !tbaa !6
  %arrayidx137 = getelementptr inbounds i8, i8* %100, i64 1
  %101 = load i8, i8* %arrayidx137, align 1, !tbaa !13
  %conv138 = sext i8 %101 to i32
  %sub = sub i32 %conv138, 48
  %cmp139 = icmp ule i32 %sub, 9
  br label %land.end141

land.end141:                                      ; preds = %land.rhs134, %land.lhs.true127, %if.then124
  %102 = phi i1 [ false, %land.lhs.true127 ], [ false, %if.then124 ], [ %cmp139, %land.rhs134 ]
  %frombool142 = zext i1 %102 to i8
  store i8 %frombool142, i8* %minus_pos_usage, align 1, !tbaa !11
  %103 = load i8, i8* %minus_pos_usage, align 1, !tbaa !11, !range !25
  %tobool143 = trunc i8 %103 to i1
  br i1 %tobool143, label %land.rhs145, label %land.end148

land.rhs145:                                      ; preds = %land.end141
  %104 = load i8, i8* %posixly_correct, align 1, !tbaa !11, !range !25
  %tobool146 = trunc i8 %104 to i1
  %lnot147 = xor i1 %tobool146, true
  br label %land.end148

land.end148:                                      ; preds = %land.rhs145, %land.end141
  %105 = phi i1 [ false, %land.end141 ], [ %lnot147, %land.rhs145 ]
  %land.ext = zext i1 %105 to i32
  %106 = load i8, i8* %traditional_usage, align 1, !tbaa !11, !range !25
  %tobool149 = trunc i8 %106 to i1
  %conv150 = zext i1 %tobool149 to i32
  %or = or i32 %conv150, %land.ext
  %tobool151 = icmp ne i32 %or, 0
  %frombool152 = zext i1 %tobool151 to i8
  store i8 %frombool152, i8* %traditional_usage, align 1, !tbaa !11
  %107 = load i8, i8* %traditional_usage, align 1, !tbaa !11, !range !25
  %tobool153 = trunc i8 %107 to i1
  br i1 %tobool153, label %if.then154, label %if.end214

if.then154:                                       ; preds = %land.end148
  %call155 = call %struct.keyfield* @key_init(%struct.keyfield* %key_buf)
  store %struct.keyfield* %call155, %struct.keyfield** %key, align 8, !tbaa !6
  %108 = load i8*, i8** @optarg, align 8, !tbaa !6
  %add.ptr = getelementptr inbounds i8, i8* %108, i64 1
  %109 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !tbaa !6
  %sword156 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %109, i32 0, i32 0
  %call157 = call i8* @parse_field_count(i8* %add.ptr, i64* %sword156, i8* null)
  store i8* %call157, i8** %s, align 8, !tbaa !6
  %110 = load i8*, i8** %s, align 8, !tbaa !6
  %tobool158 = icmp ne i8* %110, null
  br i1 %tobool158, label %land.lhs.true159, label %if.end166

land.lhs.true159:                                 ; preds = %if.then154
  %111 = load i8*, i8** %s, align 8, !tbaa !6
  %112 = load i8, i8* %111, align 1, !tbaa !13
  %conv160 = sext i8 %112 to i32
  %cmp161 = icmp eq i32 %conv160, 46
  br i1 %cmp161, label %if.then163, label %if.end166

if.then163:                                       ; preds = %land.lhs.true159
  %113 = load i8*, i8** %s, align 8, !tbaa !6
  %add.ptr164 = getelementptr inbounds i8, i8* %113, i64 1
  %114 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !tbaa !6
  %schar = getelementptr inbounds %struct.keyfield, %struct.keyfield* %114, i32 0, i32 1
  %call165 = call i8* @parse_field_count(i8* %add.ptr164, i64* %schar, i8* null)
  store i8* %call165, i8** %s, align 8, !tbaa !6
  br label %if.end166

if.end166:                                        ; preds = %if.then163, %land.lhs.true159, %if.then154
  %115 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !tbaa !6
  %sword167 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %115, i32 0, i32 0
  %116 = load i64, i64* %sword167, align 8, !tbaa !23
  %tobool168 = icmp ne i64 %116, 0
  br i1 %tobool168, label %if.end174, label %lor.lhs.false169

lor.lhs.false169:                                 ; preds = %if.end166
  %117 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !tbaa !6
  %schar170 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %117, i32 0, i32 1
  %118 = load i64, i64* %schar170, align 8, !tbaa !26
  %tobool171 = icmp ne i64 %118, 0
  br i1 %tobool171, label %if.end174, label %if.then172

if.then172:                                       ; preds = %lor.lhs.false169
  %119 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !tbaa !6
  %sword173 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %119, i32 0, i32 0
  store i64 -1, i64* %sword173, align 8, !tbaa !23
  br label %if.end174

if.end174:                                        ; preds = %if.then172, %lor.lhs.false169, %if.end166
  %120 = load i8*, i8** %s, align 8, !tbaa !6
  %tobool175 = icmp ne i8* %120, null
  br i1 %tobool175, label %lor.lhs.false176, label %if.then180

lor.lhs.false176:                                 ; preds = %if.end174
  %121 = load i8*, i8** %s, align 8, !tbaa !6
  %122 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !tbaa !6
  %call177 = call i8* @set_ordering(i8* %121, %struct.keyfield* %122, i32 0)
  %123 = load i8, i8* %call177, align 1, !tbaa !13
  %conv178 = sext i8 %123 to i32
  %tobool179 = icmp ne i32 %conv178, 0
  br i1 %tobool179, label %if.then180, label %if.else181

if.then180:                                       ; preds = %lor.lhs.false176, %if.end174
  store %struct.keyfield* null, %struct.keyfield** %key, align 8, !tbaa !6
  br label %if.end213

if.else181:                                       ; preds = %lor.lhs.false176
  %124 = load i8, i8* %minus_pos_usage, align 1, !tbaa !11, !range !25
  %tobool182 = trunc i8 %124 to i1
  br i1 %tobool182, label %if.then183, label %if.end212

if.then183:                                       ; preds = %if.else181
  %125 = bitcast i8** %optarg1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %125) #13
  %126 = load i8**, i8*** %argv.addr, align 8, !tbaa !6
  %127 = load i32, i32* @optind, align 4, !tbaa !2
  %inc184 = add nsw i32 %127, 1
  store i32 %inc184, i32* @optind, align 4, !tbaa !2
  %idxprom185 = sext i32 %127 to i64
  %arrayidx186 = getelementptr inbounds i8*, i8** %126, i64 %idxprom185
  %128 = load i8*, i8** %arrayidx186, align 8, !tbaa !6
  store i8* %128, i8** %optarg1, align 8, !tbaa !6
  %129 = load i8*, i8** %optarg1, align 8, !tbaa !6
  %add.ptr187 = getelementptr inbounds i8, i8* %129, i64 1
  %130 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !tbaa !6
  %eword = getelementptr inbounds %struct.keyfield, %struct.keyfield* %130, i32 0, i32 2
  %call188 = call i8* @parse_field_count(i8* %add.ptr187, i64* %eword, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.25, i64 0, i64 0))
  store i8* %call188, i8** %s, align 8, !tbaa !6
  %131 = load i8*, i8** %s, align 8, !tbaa !6
  %tobool189 = icmp ne i8* %131, null
  br i1 %tobool189, label %if.then190, label %if.else191

if.then190:                                       ; preds = %if.then183
  br label %if.end192

if.else191:                                       ; preds = %if.then183
  call void @__assert_fail(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.26, i64 0, i64 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.27, i64 0, i64 0), i32 4452, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @__PRETTY_FUNCTION__.main, i64 0, i64 0)) #21
  unreachable

if.end192:                                        ; preds = %if.then190
  %132 = load i8*, i8** %s, align 8, !tbaa !6
  %133 = load i8, i8* %132, align 1, !tbaa !13
  %conv193 = sext i8 %133 to i32
  %cmp194 = icmp eq i32 %conv193, 46
  br i1 %cmp194, label %if.then196, label %if.end199

if.then196:                                       ; preds = %if.end192
  %134 = load i8*, i8** %s, align 8, !tbaa !6
  %add.ptr197 = getelementptr inbounds i8, i8* %134, i64 1
  %135 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !tbaa !6
  %echar = getelementptr inbounds %struct.keyfield, %struct.keyfield* %135, i32 0, i32 3
  %call198 = call i8* @parse_field_count(i8* %add.ptr197, i64* %echar, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.28, i64 0, i64 0))
  store i8* %call198, i8** %s, align 8, !tbaa !6
  br label %if.end199

if.end199:                                        ; preds = %if.then196, %if.end192
  %136 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !tbaa !6
  %echar200 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %136, i32 0, i32 3
  %137 = load i64, i64* %echar200, align 8, !tbaa !27
  %tobool201 = icmp ne i64 %137, 0
  br i1 %tobool201, label %if.end207, label %land.lhs.true202

land.lhs.true202:                                 ; preds = %if.end199
  %138 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !tbaa !6
  %eword203 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %138, i32 0, i32 2
  %139 = load i64, i64* %eword203, align 8, !tbaa !28
  %tobool204 = icmp ne i64 %139, 0
  br i1 %tobool204, label %if.then205, label %if.end207

if.then205:                                       ; preds = %land.lhs.true202
  %140 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !tbaa !6
  %eword206 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %140, i32 0, i32 2
  %141 = load i64, i64* %eword206, align 8, !tbaa !28
  %dec = add i64 %141, -1
  store i64 %dec, i64* %eword206, align 8, !tbaa !28
  br label %if.end207

if.end207:                                        ; preds = %if.then205, %land.lhs.true202, %if.end199
  %142 = load i8*, i8** %s, align 8, !tbaa !6
  %143 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !tbaa !6
  %call208 = call i8* @set_ordering(i8* %142, %struct.keyfield* %143, i32 1)
  %144 = load i8, i8* %call208, align 1, !tbaa !13
  %tobool209 = icmp ne i8 %144, 0
  br i1 %tobool209, label %if.then210, label %if.end211

if.then210:                                       ; preds = %if.end207
  %145 = load i8*, i8** %optarg1, align 8, !tbaa !6
  call void @badfieldspec(i8* %145, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.29, i64 0, i64 0))
  br label %if.end211

if.end211:                                        ; preds = %if.then210, %if.end207
  %146 = bitcast i8** %optarg1 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %146) #13
  br label %if.end212

if.end212:                                        ; preds = %if.end211, %if.else181
  %147 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !tbaa !6
  %traditional_used = getelementptr inbounds %struct.keyfield, %struct.keyfield* %147, i32 0, i32 15
  store i8 1, i8* %traditional_used, align 1, !tbaa !29
  %148 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !tbaa !6
  call void @insertkey(%struct.keyfield* %148)
  br label %if.end213

if.end213:                                        ; preds = %if.end212, %if.then180
  br label %if.end214

if.end214:                                        ; preds = %if.end213, %land.end148
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %minus_pos_usage) #13
  br label %if.end215

if.end215:                                        ; preds = %if.end214, %sw.bb
  %149 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !tbaa !6
  %tobool216 = icmp ne %struct.keyfield* %149, null
  br i1 %tobool216, label %if.end220, label %if.then217

if.then217:                                       ; preds = %if.end215
  %150 = load i8*, i8** @optarg, align 8, !tbaa !6
  %151 = load i8**, i8*** %files, align 8, !tbaa !6
  %152 = load i64, i64* %nfiles, align 8, !tbaa !14
  %inc218 = add i64 %152, 1
  store i64 %inc218, i64* %nfiles, align 8, !tbaa !14
  %arrayidx219 = getelementptr inbounds i8*, i8** %151, i64 %152
  store i8* %150, i8** %arrayidx219, align 8, !tbaa !6
  br label %if.end220

if.end220:                                        ; preds = %if.then217, %if.end215
  br label %sw.epilog

sw.bb221:                                         ; preds = %if.else
  %153 = load i8*, i8** @optarg, align 8, !tbaa !6
  %154 = load void ()*, void ()** @argmatch_die, align 8, !tbaa !6
  %call222 = call i64 @__xargmatch_internal(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.30, i64 0, i64 0), i8* %153, i8** getelementptr inbounds ([7 x i8*], [7 x i8*]* @sort_args, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @sort_types, i64 0, i64 0), i64 1, void ()* %154)
  %arrayidx223 = getelementptr inbounds [6 x i8], [6 x i8]* @sort_types, i64 0, i64 %call222
  %155 = load i8, i8* %arrayidx223, align 1, !tbaa !13
  %conv224 = sext i8 %155 to i32
  store i32 %conv224, i32* %c, align 4, !tbaa !2
  br label %sw.bb225

sw.bb225:                                         ; preds = %if.else, %if.else, %if.else, %if.else, %if.else, %if.else, %if.else, %if.else, %if.else, %if.else, %if.else, %sw.bb221
  %156 = bitcast [2 x i8]* %str to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* %156) #13
  %157 = load i32, i32* %c, align 4, !tbaa !2
  %conv226 = trunc i32 %157 to i8
  %arrayidx227 = getelementptr inbounds [2 x i8], [2 x i8]* %str, i64 0, i64 0
  store i8 %conv226, i8* %arrayidx227, align 1, !tbaa !13
  %arrayidx228 = getelementptr inbounds [2 x i8], [2 x i8]* %str, i64 0, i64 1
  store i8 0, i8* %arrayidx228, align 1, !tbaa !13
  %arraydecay = getelementptr inbounds [2 x i8], [2 x i8]* %str, i64 0, i64 0
  %call229 = call i8* @set_ordering(i8* %arraydecay, %struct.keyfield* %gkey, i32 2)
  %158 = bitcast [2 x i8]* %str to i8*
  call void @llvm.lifetime.end.p0i8(i64 2, i8* %158) #13
  br label %sw.epilog

sw.bb230:                                         ; preds = %if.else
  %159 = load i8*, i8** @optarg, align 8, !tbaa !6
  %tobool231 = icmp ne i8* %159, null
  br i1 %tobool231, label %cond.true, label %cond.false

cond.true:                                        ; preds = %sw.bb230
  %160 = load i8*, i8** @optarg, align 8, !tbaa !6
  %161 = load void ()*, void ()** @argmatch_die, align 8, !tbaa !6
  %call232 = call i64 @__xargmatch_internal(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.31, i64 0, i64 0), i8* %160, i8** getelementptr inbounds ([4 x i8*], [4 x i8*]* @check_args, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @check_types, i64 0, i64 0), i64 1, void ()* %161)
  %arrayidx233 = getelementptr inbounds [3 x i8], [3 x i8]* @check_types, i64 0, i64 %call232
  %162 = load i8, i8* %arrayidx233, align 1, !tbaa !13
  %conv234 = sext i8 %162 to i32
  br label %cond.end

cond.false:                                       ; preds = %sw.bb230
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv234, %cond.true ], [ 99, %cond.false ]
  store i32 %cond, i32* %c, align 4, !tbaa !2
  br label %sw.bb235

sw.bb235:                                         ; preds = %if.else, %if.else, %cond.end
  %163 = load i8, i8* %checkonly, align 1, !tbaa !13
  %conv236 = sext i8 %163 to i32
  %tobool237 = icmp ne i32 %conv236, 0
  br i1 %tobool237, label %land.lhs.true238, label %if.end243

land.lhs.true238:                                 ; preds = %sw.bb235
  %164 = load i8, i8* %checkonly, align 1, !tbaa !13
  %conv239 = sext i8 %164 to i32
  %165 = load i32, i32* %c, align 4, !tbaa !2
  %cmp240 = icmp ne i32 %conv239, %165
  br i1 %cmp240, label %if.then242, label %if.end243

if.then242:                                       ; preds = %land.lhs.true238
  call void @incompatible_options(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.32, i64 0, i64 0))
  br label %if.end243

if.end243:                                        ; preds = %if.then242, %land.lhs.true238, %sw.bb235
  %166 = load i32, i32* %c, align 4, !tbaa !2
  %conv244 = trunc i32 %166 to i8
  store i8 %conv244, i8* %checkonly, align 1, !tbaa !13
  br label %sw.epilog

sw.bb245:                                         ; preds = %if.else
  %167 = load i8*, i8** @compress_program, align 8, !tbaa !6
  %tobool246 = icmp ne i8* %167, null
  br i1 %tobool246, label %land.lhs.true247, label %if.end252

land.lhs.true247:                                 ; preds = %sw.bb245
  %168 = load i8*, i8** @compress_program, align 8, !tbaa !6
  %169 = load i8*, i8** @optarg, align 8, !tbaa !6
  %call248 = call i32 @strcmp(i8* %168, i8* %169) #22
  %cmp249 = icmp eq i32 %call248, 0
  br i1 %cmp249, label %if.end252, label %if.then251

if.then251:                                       ; preds = %land.lhs.true247
  call void (i32, i32, i8*, ...) @error(i32 2, i32 0, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.33, i64 0, i64 0))
  unreachable

if.end252:                                        ; preds = %land.lhs.true247, %sw.bb245
  %170 = load i8*, i8** @optarg, align 8, !tbaa !6
  store i8* %170, i8** @compress_program, align 8, !tbaa !6
  br label %sw.epilog

sw.bb253:                                         ; preds = %if.else
  store i8 1, i8* @debug, align 1, !tbaa !11
  br label %sw.epilog

sw.bb254:                                         ; preds = %if.else
  %171 = load i8*, i8** @optarg, align 8, !tbaa !6
  store i8* %171, i8** %files_from, align 8, !tbaa !6
  br label %sw.epilog

sw.bb255:                                         ; preds = %if.else
  %call256 = call %struct.keyfield* @key_init(%struct.keyfield* %key_buf)
  store %struct.keyfield* %call256, %struct.keyfield** %key, align 8, !tbaa !6
  %172 = load i8*, i8** @optarg, align 8, !tbaa !6
  %173 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !tbaa !6
  %sword257 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %173, i32 0, i32 0
  %call258 = call i8* @parse_field_count(i8* %172, i64* %sword257, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.34, i64 0, i64 0))
  store i8* %call258, i8** %s, align 8, !tbaa !6
  %174 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !tbaa !6
  %sword259 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %174, i32 0, i32 0
  %175 = load i64, i64* %sword259, align 8, !tbaa !23
  %dec260 = add i64 %175, -1
  store i64 %dec260, i64* %sword259, align 8, !tbaa !23
  %tobool261 = icmp ne i64 %175, 0
  br i1 %tobool261, label %if.end263, label %if.then262

if.then262:                                       ; preds = %sw.bb255
  %176 = load i8*, i8** @optarg, align 8, !tbaa !6
  call void @badfieldspec(i8* %176, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.35, i64 0, i64 0))
  br label %if.end263

if.end263:                                        ; preds = %if.then262, %sw.bb255
  %177 = load i8*, i8** %s, align 8, !tbaa !6
  %178 = load i8, i8* %177, align 1, !tbaa !13
  %conv264 = sext i8 %178 to i32
  %cmp265 = icmp eq i32 %conv264, 46
  br i1 %cmp265, label %if.then267, label %if.end276

if.then267:                                       ; preds = %if.end263
  %179 = load i8*, i8** %s, align 8, !tbaa !6
  %add.ptr268 = getelementptr inbounds i8, i8* %179, i64 1
  %180 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !tbaa !6
  %schar269 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %180, i32 0, i32 1
  %call270 = call i8* @parse_field_count(i8* %add.ptr268, i64* %schar269, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.28, i64 0, i64 0))
  store i8* %call270, i8** %s, align 8, !tbaa !6
  %181 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !tbaa !6
  %schar271 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %181, i32 0, i32 1
  %182 = load i64, i64* %schar271, align 8, !tbaa !26
  %dec272 = add i64 %182, -1
  store i64 %dec272, i64* %schar271, align 8, !tbaa !26
  %tobool273 = icmp ne i64 %182, 0
  br i1 %tobool273, label %if.end275, label %if.then274

if.then274:                                       ; preds = %if.then267
  %183 = load i8*, i8** @optarg, align 8, !tbaa !6
  call void @badfieldspec(i8* %183, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.36, i64 0, i64 0))
  br label %if.end275

if.end275:                                        ; preds = %if.then274, %if.then267
  br label %if.end276

if.end276:                                        ; preds = %if.end275, %if.end263
  %184 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !tbaa !6
  %sword277 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %184, i32 0, i32 0
  %185 = load i64, i64* %sword277, align 8, !tbaa !23
  %tobool278 = icmp ne i64 %185, 0
  br i1 %tobool278, label %if.end284, label %lor.lhs.false279

lor.lhs.false279:                                 ; preds = %if.end276
  %186 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !tbaa !6
  %schar280 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %186, i32 0, i32 1
  %187 = load i64, i64* %schar280, align 8, !tbaa !26
  %tobool281 = icmp ne i64 %187, 0
  br i1 %tobool281, label %if.end284, label %if.then282

if.then282:                                       ; preds = %lor.lhs.false279
  %188 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !tbaa !6
  %sword283 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %188, i32 0, i32 0
  store i64 -1, i64* %sword283, align 8, !tbaa !23
  br label %if.end284

if.end284:                                        ; preds = %if.then282, %lor.lhs.false279, %if.end276
  %189 = load i8*, i8** %s, align 8, !tbaa !6
  %190 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !tbaa !6
  %call285 = call i8* @set_ordering(i8* %189, %struct.keyfield* %190, i32 0)
  store i8* %call285, i8** %s, align 8, !tbaa !6
  %191 = load i8*, i8** %s, align 8, !tbaa !6
  %192 = load i8, i8* %191, align 1, !tbaa !13
  %conv286 = sext i8 %192 to i32
  %cmp287 = icmp ne i32 %conv286, 44
  br i1 %cmp287, label %if.then289, label %if.else292

if.then289:                                       ; preds = %if.end284
  %193 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !tbaa !6
  %eword290 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %193, i32 0, i32 2
  store i64 -1, i64* %eword290, align 8, !tbaa !28
  %194 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !tbaa !6
  %echar291 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %194, i32 0, i32 3
  store i64 0, i64* %echar291, align 8, !tbaa !27
  br label %if.end310

if.else292:                                       ; preds = %if.end284
  %195 = load i8*, i8** %s, align 8, !tbaa !6
  %add.ptr293 = getelementptr inbounds i8, i8* %195, i64 1
  %196 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !tbaa !6
  %eword294 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %196, i32 0, i32 2
  %call295 = call i8* @parse_field_count(i8* %add.ptr293, i64* %eword294, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.37, i64 0, i64 0))
  store i8* %call295, i8** %s, align 8, !tbaa !6
  %197 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !tbaa !6
  %eword296 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %197, i32 0, i32 2
  %198 = load i64, i64* %eword296, align 8, !tbaa !28
  %dec297 = add i64 %198, -1
  store i64 %dec297, i64* %eword296, align 8, !tbaa !28
  %tobool298 = icmp ne i64 %198, 0
  br i1 %tobool298, label %if.end300, label %if.then299

if.then299:                                       ; preds = %if.else292
  %199 = load i8*, i8** @optarg, align 8, !tbaa !6
  call void @badfieldspec(i8* %199, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.35, i64 0, i64 0))
  br label %if.end300

if.end300:                                        ; preds = %if.then299, %if.else292
  %200 = load i8*, i8** %s, align 8, !tbaa !6
  %201 = load i8, i8* %200, align 1, !tbaa !13
  %conv301 = sext i8 %201 to i32
  %cmp302 = icmp eq i32 %conv301, 46
  br i1 %cmp302, label %if.then304, label %if.end308

if.then304:                                       ; preds = %if.end300
  %202 = load i8*, i8** %s, align 8, !tbaa !6
  %add.ptr305 = getelementptr inbounds i8, i8* %202, i64 1
  %203 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !tbaa !6
  %echar306 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %203, i32 0, i32 3
  %call307 = call i8* @parse_field_count(i8* %add.ptr305, i64* %echar306, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.28, i64 0, i64 0))
  store i8* %call307, i8** %s, align 8, !tbaa !6
  br label %if.end308

if.end308:                                        ; preds = %if.then304, %if.end300
  %204 = load i8*, i8** %s, align 8, !tbaa !6
  %205 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !tbaa !6
  %call309 = call i8* @set_ordering(i8* %204, %struct.keyfield* %205, i32 1)
  store i8* %call309, i8** %s, align 8, !tbaa !6
  br label %if.end310

if.end310:                                        ; preds = %if.end308, %if.then289
  %206 = load i8*, i8** %s, align 8, !tbaa !6
  %207 = load i8, i8* %206, align 1, !tbaa !13
  %tobool311 = icmp ne i8 %207, 0
  br i1 %tobool311, label %if.then312, label %if.end313

if.then312:                                       ; preds = %if.end310
  %208 = load i8*, i8** @optarg, align 8, !tbaa !6
  call void @badfieldspec(i8* %208, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.29, i64 0, i64 0))
  br label %if.end313

if.end313:                                        ; preds = %if.then312, %if.end310
  %209 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !tbaa !6
  call void @insertkey(%struct.keyfield* %209)
  br label %sw.epilog

sw.bb314:                                         ; preds = %if.else
  store i8 1, i8* %mergeonly, align 1, !tbaa !11
  br label %sw.epilog

sw.bb315:                                         ; preds = %if.else
  %210 = load i32, i32* %oi, align 4, !tbaa !2
  %211 = load i32, i32* %c, align 4, !tbaa !2
  %conv316 = trunc i32 %211 to i8
  %212 = load i8*, i8** @optarg, align 8, !tbaa !6
  call void @specify_nmerge(i32 %210, i8 signext %conv316, i8* %212)
  br label %sw.epilog

sw.bb317:                                         ; preds = %if.else
  %213 = load i8*, i8** %outfile, align 8, !tbaa !6
  %tobool318 = icmp ne i8* %213, null
  br i1 %tobool318, label %land.lhs.true319, label %if.end324

land.lhs.true319:                                 ; preds = %sw.bb317
  %214 = load i8*, i8** %outfile, align 8, !tbaa !6
  %215 = load i8*, i8** @optarg, align 8, !tbaa !6
  %call320 = call i32 @strcmp(i8* %214, i8* %215) #22
  %cmp321 = icmp eq i32 %call320, 0
  br i1 %cmp321, label %if.end324, label %if.then323

if.then323:                                       ; preds = %land.lhs.true319
  call void (i32, i32, i8*, ...) @error(i32 2, i32 0, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.38, i64 0, i64 0))
  unreachable

if.end324:                                        ; preds = %land.lhs.true319, %sw.bb317
  %216 = load i8*, i8** @optarg, align 8, !tbaa !6
  store i8* %216, i8** %outfile, align 8, !tbaa !6
  br label %sw.epilog

sw.bb325:                                         ; preds = %if.else
  %217 = load i8*, i8** %random_source, align 8, !tbaa !6
  %tobool326 = icmp ne i8* %217, null
  br i1 %tobool326, label %land.lhs.true327, label %if.end332

land.lhs.true327:                                 ; preds = %sw.bb325
  %218 = load i8*, i8** %random_source, align 8, !tbaa !6
  %219 = load i8*, i8** @optarg, align 8, !tbaa !6
  %call328 = call i32 @strcmp(i8* %218, i8* %219) #22
  %cmp329 = icmp eq i32 %call328, 0
  br i1 %cmp329, label %if.end332, label %if.then331

if.then331:                                       ; preds = %land.lhs.true327
  call void (i32, i32, i8*, ...) @error(i32 2, i32 0, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.39, i64 0, i64 0))
  unreachable

if.end332:                                        ; preds = %land.lhs.true327, %sw.bb325
  %220 = load i8*, i8** @optarg, align 8, !tbaa !6
  store i8* %220, i8** %random_source, align 8, !tbaa !6
  br label %sw.epilog

sw.bb333:                                         ; preds = %if.else
  store i8 1, i8* @stable, align 1, !tbaa !11
  br label %sw.epilog

sw.bb334:                                         ; preds = %if.else
  %221 = load i32, i32* %oi, align 4, !tbaa !2
  %222 = load i32, i32* %c, align 4, !tbaa !2
  %conv335 = trunc i32 %222 to i8
  %223 = load i8*, i8** @optarg, align 8, !tbaa !6
  call void @specify_sort_size(i32 %221, i8 signext %conv335, i8* %223)
  br label %sw.epilog

sw.bb336:                                         ; preds = %if.else
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %newtab) #13
  %224 = load i8*, i8** @optarg, align 8, !tbaa !6
  %arrayidx337 = getelementptr inbounds i8, i8* %224, i64 0
  %225 = load i8, i8* %arrayidx337, align 1, !tbaa !13
  store i8 %225, i8* %newtab, align 1, !tbaa !13
  %226 = load i8, i8* %newtab, align 1, !tbaa !13
  %tobool338 = icmp ne i8 %226, 0
  br i1 %tobool338, label %if.end340, label %if.then339

if.then339:                                       ; preds = %sw.bb336
  call void (i32, i32, i8*, ...) @error(i32 2, i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.40, i64 0, i64 0))
  unreachable

if.end340:                                        ; preds = %sw.bb336
  %227 = load i8*, i8** @optarg, align 8, !tbaa !6
  %arrayidx341 = getelementptr inbounds i8, i8* %227, i64 1
  %228 = load i8, i8* %arrayidx341, align 1, !tbaa !13
  %tobool342 = icmp ne i8 %228, 0
  br i1 %tobool342, label %if.then343, label %if.end351

if.then343:                                       ; preds = %if.end340
  %229 = load i8*, i8** @optarg, align 8, !tbaa !6
  %call344 = call i32 @strcmp(i8* %229, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.41, i64 0, i64 0)) #22
  %cmp345 = icmp eq i32 %call344, 0
  br i1 %cmp345, label %if.then347, label %if.else348

if.then347:                                       ; preds = %if.then343
  store i8 0, i8* %newtab, align 1, !tbaa !13
  br label %if.end350

if.else348:                                       ; preds = %if.then343
  %230 = load i8*, i8** @optarg, align 8, !tbaa !6
  %call349 = call i8* @quote(i8* %230)
  call void (i32, i32, i8*, ...) @error(i32 2, i32 0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.42, i64 0, i64 0), i8* %call349)
  unreachable

if.end350:                                        ; preds = %if.then347
  br label %if.end351

if.end351:                                        ; preds = %if.end350, %if.end340
  %231 = load i32, i32* @tab, align 4, !tbaa !2
  %cmp352 = icmp ne i32 %231, 128
  br i1 %cmp352, label %land.lhs.true354, label %if.end359

land.lhs.true354:                                 ; preds = %if.end351
  %232 = load i32, i32* @tab, align 4, !tbaa !2
  %233 = load i8, i8* %newtab, align 1, !tbaa !13
  %conv355 = sext i8 %233 to i32
  %cmp356 = icmp ne i32 %232, %conv355
  br i1 %cmp356, label %if.then358, label %if.end359

if.then358:                                       ; preds = %land.lhs.true354
  call void (i32, i32, i8*, ...) @error(i32 2, i32 0, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.43, i64 0, i64 0))
  unreachable

if.end359:                                        ; preds = %land.lhs.true354, %if.end351
  %234 = load i8, i8* %newtab, align 1, !tbaa !13
  %conv360 = sext i8 %234 to i32
  store i32 %conv360, i32* @tab, align 4, !tbaa !2
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %newtab) #13
  br label %sw.epilog

sw.bb361:                                         ; preds = %if.else
  %235 = load i8*, i8** @optarg, align 8, !tbaa !6
  call void @add_temp_dir(i8* %235)
  br label %sw.epilog

sw.bb362:                                         ; preds = %if.else
  %236 = load i32, i32* %oi, align 4, !tbaa !2
  %237 = load i32, i32* %c, align 4, !tbaa !2
  %conv363 = trunc i32 %237 to i8
  %238 = load i8*, i8** @optarg, align 8, !tbaa !6
  %call364 = call i64 @specify_nthreads(i32 %236, i8 signext %conv363, i8* %238)
  store i64 %call364, i64* %nthreads, align 8, !tbaa !14
  br label %sw.epilog

sw.bb365:                                         ; preds = %if.else
  store i8 1, i8* @unique, align 1, !tbaa !11
  br label %sw.epilog

sw.bb366:                                         ; preds = %if.else
  %239 = load i8*, i8** @optarg, align 8, !tbaa !6
  %240 = load i8**, i8*** %argv.addr, align 8, !tbaa !6
  %241 = load i32, i32* @optind, align 4, !tbaa !2
  %sub367 = sub nsw i32 %241, 1
  %idxprom368 = sext i32 %sub367 to i64
  %arrayidx369 = getelementptr inbounds i8*, i8** %240, i64 %idxprom368
  %242 = load i8*, i8** %arrayidx369, align 8, !tbaa !6
  %cmp370 = icmp eq i8* %239, %242
  br i1 %cmp370, label %if.then372, label %if.end385

if.then372:                                       ; preds = %sw.bb366
  %243 = bitcast i8** %p to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %243) #13
  %244 = load i8*, i8** @optarg, align 8, !tbaa !6
  store i8* %244, i8** %p, align 8, !tbaa !6
  br label %for.cond373

for.cond373:                                      ; preds = %for.inc379, %if.then372
  %245 = load i8*, i8** %p, align 8, !tbaa !6
  %246 = load i8, i8* %245, align 1, !tbaa !13
  %conv374 = sext i8 %246 to i32
  %sub375 = sub i32 %conv374, 48
  %cmp376 = icmp ule i32 %sub375, 9
  br i1 %cmp376, label %for.body378, label %for.end380

for.body378:                                      ; preds = %for.cond373
  br label %for.inc379

for.inc379:                                       ; preds = %for.body378
  %247 = load i8*, i8** %p, align 8, !tbaa !6
  %incdec.ptr = getelementptr inbounds i8, i8* %247, i32 1
  store i8* %incdec.ptr, i8** %p, align 8, !tbaa !6
  br label %for.cond373

for.end380:                                       ; preds = %for.cond373
  %248 = load i8*, i8** %p, align 8, !tbaa !6
  %249 = load i8, i8* %248, align 1, !tbaa !13
  %conv381 = sext i8 %249 to i32
  %cmp382 = icmp ne i32 %conv381, 0
  %conv383 = zext i1 %cmp382 to i32
  %250 = load i32, i32* @optind, align 4, !tbaa !2
  %sub384 = sub nsw i32 %250, %conv383
  store i32 %sub384, i32* @optind, align 4, !tbaa !2
  %251 = bitcast i8** %p to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %251) #13
  br label %if.end385

if.end385:                                        ; preds = %for.end380, %sw.bb366
  br label %sw.epilog

sw.bb386:                                         ; preds = %if.else
  store i8 0, i8* @eolchar, align 1, !tbaa !13
  br label %sw.epilog

sw.bb387:                                         ; preds = %if.else
  call void @usage(i32 0) #24
  unreachable

sw.bb388:                                         ; preds = %if.else
  %252 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !6
  %253 = load i8*, i8** @Version, align 8, !tbaa !6
  call void (%struct._IO_FILE*, i8*, i8*, i8*, ...) @version_etc(%struct._IO_FILE* %252, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.22, i64 0, i64 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.44, i64 0, i64 0), i8* %253, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.45, i64 0, i64 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.46, i64 0, i64 0), i8* null)
  call void @exit(i32 0) #21
  unreachable

sw.default:                                       ; preds = %if.else
  call void @usage(i32 2) #24
  unreachable

sw.epilog:                                        ; preds = %sw.bb386, %if.end385, %sw.bb365, %sw.bb362, %sw.bb361, %if.end359, %sw.bb334, %sw.bb333, %if.end332, %if.end324, %sw.bb315, %sw.bb314, %if.end313, %sw.bb254, %sw.bb253, %if.end252, %if.end243, %sw.bb225, %if.end220
  br label %if.end389

if.end389:                                        ; preds = %sw.epilog, %if.end114
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end389, %if.then113
  %254 = bitcast i32* %oi to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %254) #13
  %cleanup.dest = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest, label %unreachable [
    i32 0, label %cleanup.cont
    i32 9, label %while.end
  ]

cleanup.cont:                                     ; preds = %cleanup
  br label %while.cond

while.end:                                        ; preds = %cleanup
  %255 = load i8*, i8** %files_from, align 8, !tbaa !6
  %tobool390 = icmp ne i8* %255, null
  br i1 %tobool390, label %if.then391, label %if.end437

if.then391:                                       ; preds = %while.end
  %256 = load i64, i64* %nfiles, align 8, !tbaa !14
  %tobool392 = icmp ne i64 %256, 0
  br i1 %tobool392, label %if.then393, label %if.end397

if.then393:                                       ; preds = %if.then391
  %257 = load i8**, i8*** %files, align 8, !tbaa !6
  %arrayidx394 = getelementptr inbounds i8*, i8** %257, i64 0
  %258 = load i8*, i8** %arrayidx394, align 8, !tbaa !6
  %call395 = call i8* @quotearg_style(i32 4, i8* %258)
  call void (i32, i32, i8*, ...) @error(i32 0, i32 0, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.47, i64 0, i64 0), i8* %call395)
  %259 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !6
  %call396 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %259, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.48, i64 0, i64 0), i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.49, i64 0, i64 0))
  call void @usage(i32 2) #24
  unreachable

if.end397:                                        ; preds = %if.then391
  %260 = bitcast %struct._IO_FILE** %stream to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %260) #13
  %261 = load i8*, i8** %files_from, align 8, !tbaa !6
  %call398 = call %struct._IO_FILE* @xfopen(i8* %261, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.50, i64 0, i64 0))
  store %struct._IO_FILE* %call398, %struct._IO_FILE** %stream, align 8, !tbaa !6
  call void @readtokens0_init(%struct.Tokens* %tok)
  %262 = load %struct._IO_FILE*, %struct._IO_FILE** %stream, align 8, !tbaa !6
  %call399 = call zeroext i1 @readtokens0(%struct._IO_FILE* %262, %struct.Tokens* %tok)
  br i1 %call399, label %if.end402, label %if.then400

if.then400:                                       ; preds = %if.end397
  %263 = load i8*, i8** %files_from, align 8, !tbaa !6
  %call401 = call i8* @quotearg_style(i32 4, i8* %263)
  call void (i32, i32, i8*, ...) @error(i32 2, i32 0, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.51, i64 0, i64 0), i8* %call401)
  unreachable

if.end402:                                        ; preds = %if.end397
  %264 = load %struct._IO_FILE*, %struct._IO_FILE** %stream, align 8, !tbaa !6
  %265 = load i8*, i8** %files_from, align 8, !tbaa !6
  call void @xfclose(%struct._IO_FILE* %264, i8* %265)
  %n_tok = getelementptr inbounds %struct.Tokens, %struct.Tokens* %tok, i32 0, i32 0
  %266 = load i64, i64* %n_tok, align 8, !tbaa !30
  %tobool403 = icmp ne i64 %266, 0
  br i1 %tobool403, label %if.then404, label %if.else434

if.then404:                                       ; preds = %if.end402
  %267 = load i8**, i8*** %files, align 8, !tbaa !6
  %268 = bitcast i8** %267 to i8*
  call void @rpl_free(i8* %268)
  %tok405 = getelementptr inbounds %struct.Tokens, %struct.Tokens* %tok, i32 0, i32 1
  %269 = load i8**, i8*** %tok405, align 8, !tbaa !33
  store i8** %269, i8*** %files, align 8, !tbaa !6
  %n_tok406 = getelementptr inbounds %struct.Tokens, %struct.Tokens* %tok, i32 0, i32 0
  %270 = load i64, i64* %n_tok406, align 8, !tbaa !30
  store i64 %270, i64* %nfiles, align 8, !tbaa !14
  %271 = bitcast i64* %i407 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %271) #13
  store i64 0, i64* %i407, align 8, !tbaa !14
  br label %for.cond408

for.cond408:                                      ; preds = %for.inc430, %if.then404
  %272 = load i64, i64* %i407, align 8, !tbaa !14
  %273 = load i64, i64* %nfiles, align 8, !tbaa !14
  %cmp409 = icmp ult i64 %272, %273
  br i1 %cmp409, label %for.body411, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond408
  store i32 14, i32* %cleanup.dest.slot, align 4
  %274 = bitcast i64* %i407 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %274) #13
  br label %for.end433

for.body411:                                      ; preds = %for.cond408
  %275 = load i8**, i8*** %files, align 8, !tbaa !6
  %276 = load i64, i64* %i407, align 8, !tbaa !14
  %arrayidx412 = getelementptr inbounds i8*, i8** %275, i64 %276
  %277 = load i8*, i8** %arrayidx412, align 8, !tbaa !6
  %call413 = call i32 @strcmp(i8* %277, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.52, i64 0, i64 0)) #22
  %cmp414 = icmp eq i32 %call413, 0
  br i1 %cmp414, label %if.then416, label %if.else419

if.then416:                                       ; preds = %for.body411
  %278 = load i8**, i8*** %files, align 8, !tbaa !6
  %279 = load i64, i64* %i407, align 8, !tbaa !14
  %arrayidx417 = getelementptr inbounds i8*, i8** %278, i64 %279
  %280 = load i8*, i8** %arrayidx417, align 8, !tbaa !6
  %call418 = call i8* @quotearg_style(i32 4, i8* %280)
  call void (i32, i32, i8*, ...) @error(i32 2, i32 0, i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.53, i64 0, i64 0), i8* %call418)
  unreachable

if.else419:                                       ; preds = %for.body411
  %281 = load i8**, i8*** %files, align 8, !tbaa !6
  %282 = load i64, i64* %i407, align 8, !tbaa !14
  %arrayidx420 = getelementptr inbounds i8*, i8** %281, i64 %282
  %283 = load i8*, i8** %arrayidx420, align 8, !tbaa !6
  %arrayidx421 = getelementptr inbounds i8, i8* %283, i64 0
  %284 = load i8, i8* %arrayidx421, align 1, !tbaa !13
  %conv422 = sext i8 %284 to i32
  %cmp423 = icmp eq i32 %conv422, 0
  br i1 %cmp423, label %if.then425, label %if.end428

if.then425:                                       ; preds = %if.else419
  %285 = bitcast i64* %file_number to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %285) #13
  %286 = load i64, i64* %i407, align 8, !tbaa !14
  %add426 = add i64 %286, 1
  store i64 %add426, i64* %file_number, align 8, !tbaa !14
  %287 = load i8*, i8** %files_from, align 8, !tbaa !6
  %call427 = call i8* @quotearg_n_style_colon(i32 0, i32 3, i8* %287)
  %288 = load i64, i64* %file_number, align 8, !tbaa !14
  call void (i32, i32, i8*, ...) @error(i32 2, i32 0, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.54, i64 0, i64 0), i8* %call427, i64 %288)
  unreachable

if.end428:                                        ; preds = %if.else419
  br label %if.end429

if.end429:                                        ; preds = %if.end428
  br label %for.inc430

for.inc430:                                       ; preds = %if.end429
  %289 = load i64, i64* %i407, align 8, !tbaa !14
  %inc431 = add i64 %289, 1
  store i64 %inc431, i64* %i407, align 8, !tbaa !14
  br label %for.cond408

for.end433:                                       ; preds = %for.cond.cleanup
  br label %if.end436

if.else434:                                       ; preds = %if.end402
  %290 = load i8*, i8** %files_from, align 8, !tbaa !6
  %call435 = call i8* @quotearg_style(i32 4, i8* %290)
  call void (i32, i32, i8*, ...) @error(i32 2, i32 0, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.55, i64 0, i64 0), i8* %call435)
  unreachable

if.end436:                                        ; preds = %for.end433
  %291 = bitcast %struct._IO_FILE** %stream to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %291) #13
  br label %if.end437

if.end437:                                        ; preds = %if.end436, %while.end
  %292 = load %struct.keyfield*, %struct.keyfield** @keylist, align 8, !tbaa !6
  store %struct.keyfield* %292, %struct.keyfield** %key, align 8, !tbaa !6
  br label %for.cond438

for.cond438:                                      ; preds = %for.inc485, %if.end437
  %293 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !tbaa !6
  %tobool439 = icmp ne %struct.keyfield* %293, null
  br i1 %tobool439, label %for.body440, label %for.end486

for.body440:                                      ; preds = %for.cond438
  %294 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !tbaa !6
  %call441 = call zeroext i1 @default_key_compare(%struct.keyfield* %294)
  br i1 %call441, label %land.lhs.true443, label %if.end476

land.lhs.true443:                                 ; preds = %for.body440
  %295 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !tbaa !6
  %reverse = getelementptr inbounds %struct.keyfield, %struct.keyfield* %295, i32 0, i32 13
  %296 = load i8, i8* %reverse, align 1, !tbaa !34, !range !25
  %tobool444 = trunc i8 %296 to i1
  br i1 %tobool444, label %if.end476, label %if.then445

if.then445:                                       ; preds = %land.lhs.true443
  %ignore = getelementptr inbounds %struct.keyfield, %struct.keyfield* %gkey, i32 0, i32 4
  %297 = load i8*, i8** %ignore, align 8, !tbaa !35
  %298 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !tbaa !6
  %ignore446 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %298, i32 0, i32 4
  store i8* %297, i8** %ignore446, align 8, !tbaa !35
  %translate = getelementptr inbounds %struct.keyfield, %struct.keyfield* %gkey, i32 0, i32 5
  %299 = load i8*, i8** %translate, align 8, !tbaa !36
  %300 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !tbaa !6
  %translate447 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %300, i32 0, i32 5
  store i8* %299, i8** %translate447, align 8, !tbaa !36
  %skipsblanks = getelementptr inbounds %struct.keyfield, %struct.keyfield* %gkey, i32 0, i32 6
  %301 = load i8, i8* %skipsblanks, align 8, !tbaa !37, !range !25
  %tobool448 = trunc i8 %301 to i1
  %302 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !tbaa !6
  %skipsblanks449 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %302, i32 0, i32 6
  %frombool450 = zext i1 %tobool448 to i8
  store i8 %frombool450, i8* %skipsblanks449, align 8, !tbaa !37
  %skipeblanks = getelementptr inbounds %struct.keyfield, %struct.keyfield* %gkey, i32 0, i32 7
  %303 = load i8, i8* %skipeblanks, align 1, !tbaa !38, !range !25
  %tobool451 = trunc i8 %303 to i1
  %304 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !tbaa !6
  %skipeblanks452 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %304, i32 0, i32 7
  %frombool453 = zext i1 %tobool451 to i8
  store i8 %frombool453, i8* %skipeblanks452, align 1, !tbaa !38
  %month = getelementptr inbounds %struct.keyfield, %struct.keyfield* %gkey, i32 0, i32 12
  %305 = load i8, i8* %month, align 2, !tbaa !39, !range !25
  %tobool454 = trunc i8 %305 to i1
  %306 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !tbaa !6
  %month455 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %306, i32 0, i32 12
  %frombool456 = zext i1 %tobool454 to i8
  store i8 %frombool456, i8* %month455, align 2, !tbaa !39
  %numeric = getelementptr inbounds %struct.keyfield, %struct.keyfield* %gkey, i32 0, i32 8
  %307 = load i8, i8* %numeric, align 2, !tbaa !40, !range !25
  %tobool457 = trunc i8 %307 to i1
  %308 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !tbaa !6
  %numeric458 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %308, i32 0, i32 8
  %frombool459 = zext i1 %tobool457 to i8
  store i8 %frombool459, i8* %numeric458, align 2, !tbaa !40
  %general_numeric = getelementptr inbounds %struct.keyfield, %struct.keyfield* %gkey, i32 0, i32 10
  %309 = load i8, i8* %general_numeric, align 4, !tbaa !41, !range !25
  %tobool460 = trunc i8 %309 to i1
  %310 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !tbaa !6
  %general_numeric461 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %310, i32 0, i32 10
  %frombool462 = zext i1 %tobool460 to i8
  store i8 %frombool462, i8* %general_numeric461, align 4, !tbaa !41
  %human_numeric = getelementptr inbounds %struct.keyfield, %struct.keyfield* %gkey, i32 0, i32 11
  %311 = load i8, i8* %human_numeric, align 1, !tbaa !42, !range !25
  %tobool463 = trunc i8 %311 to i1
  %312 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !tbaa !6
  %human_numeric464 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %312, i32 0, i32 11
  %frombool465 = zext i1 %tobool463 to i8
  store i8 %frombool465, i8* %human_numeric464, align 1, !tbaa !42
  %version = getelementptr inbounds %struct.keyfield, %struct.keyfield* %gkey, i32 0, i32 14
  %313 = load i8, i8* %version, align 8, !tbaa !43, !range !25
  %tobool466 = trunc i8 %313 to i1
  %314 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !tbaa !6
  %version467 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %314, i32 0, i32 14
  %frombool468 = zext i1 %tobool466 to i8
  store i8 %frombool468, i8* %version467, align 8, !tbaa !43
  %random = getelementptr inbounds %struct.keyfield, %struct.keyfield* %gkey, i32 0, i32 9
  %315 = load i8, i8* %random, align 1, !tbaa !44, !range !25
  %tobool469 = trunc i8 %315 to i1
  %316 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !tbaa !6
  %random470 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %316, i32 0, i32 9
  %frombool471 = zext i1 %tobool469 to i8
  store i8 %frombool471, i8* %random470, align 1, !tbaa !44
  %reverse472 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %gkey, i32 0, i32 13
  %317 = load i8, i8* %reverse472, align 1, !tbaa !34, !range !25
  %tobool473 = trunc i8 %317 to i1
  %318 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !tbaa !6
  %reverse474 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %318, i32 0, i32 13
  %frombool475 = zext i1 %tobool473 to i8
  store i8 %frombool475, i8* %reverse474, align 1, !tbaa !34
  br label %if.end476

if.end476:                                        ; preds = %if.then445, %land.lhs.true443, %for.body440
  %319 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !tbaa !6
  %random477 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %319, i32 0, i32 9
  %320 = load i8, i8* %random477, align 1, !tbaa !44, !range !25
  %tobool478 = trunc i8 %320 to i1
  %conv479 = zext i1 %tobool478 to i32
  %321 = load i8, i8* %need_random, align 1, !tbaa !11, !range !25
  %tobool480 = trunc i8 %321 to i1
  %conv481 = zext i1 %tobool480 to i32
  %or482 = or i32 %conv481, %conv479
  %tobool483 = icmp ne i32 %or482, 0
  %frombool484 = zext i1 %tobool483 to i8
  store i8 %frombool484, i8* %need_random, align 1, !tbaa !11
  br label %for.inc485

for.inc485:                                       ; preds = %if.end476
  %322 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !tbaa !6
  %next = getelementptr inbounds %struct.keyfield, %struct.keyfield* %322, i32 0, i32 16
  %323 = load %struct.keyfield*, %struct.keyfield** %next, align 8, !tbaa !45
  store %struct.keyfield* %323, %struct.keyfield** %key, align 8, !tbaa !6
  br label %for.cond438

for.end486:                                       ; preds = %for.cond438
  %324 = load %struct.keyfield*, %struct.keyfield** @keylist, align 8, !tbaa !6
  %tobool487 = icmp ne %struct.keyfield* %324, null
  br i1 %tobool487, label %if.end499, label %land.lhs.true488

land.lhs.true488:                                 ; preds = %for.end486
  %call489 = call zeroext i1 @default_key_compare(%struct.keyfield* %gkey)
  br i1 %call489, label %if.end499, label %if.then490

if.then490:                                       ; preds = %land.lhs.true488
  store i8 1, i8* %gkey_only, align 1, !tbaa !11
  call void @insertkey(%struct.keyfield* %gkey)
  %random491 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %gkey, i32 0, i32 9
  %325 = load i8, i8* %random491, align 1, !tbaa !44, !range !25
  %tobool492 = trunc i8 %325 to i1
  %conv493 = zext i1 %tobool492 to i32
  %326 = load i8, i8* %need_random, align 1, !tbaa !11, !range !25
  %tobool494 = trunc i8 %326 to i1
  %conv495 = zext i1 %tobool494 to i32
  %or496 = or i32 %conv495, %conv493
  %tobool497 = icmp ne i32 %or496, 0
  %frombool498 = zext i1 %tobool497 to i8
  store i8 %frombool498, i8* %need_random, align 1, !tbaa !11
  br label %if.end499

if.end499:                                        ; preds = %if.then490, %land.lhs.true488, %for.end486
  call void @check_ordering_compatibility()
  %327 = load i8, i8* @debug, align 1, !tbaa !11, !range !25
  %tobool500 = trunc i8 %327 to i1
  br i1 %tobool500, label %if.then501, label %if.end534

if.then501:                                       ; preds = %if.end499
  %328 = load i8, i8* %checkonly, align 1, !tbaa !13
  %conv502 = sext i8 %328 to i32
  %tobool503 = icmp ne i32 %conv502, 0
  br i1 %tobool503, label %if.then506, label %lor.lhs.false504

lor.lhs.false504:                                 ; preds = %if.then501
  %329 = load i8*, i8** %outfile, align 8, !tbaa !6
  %tobool505 = icmp ne i8* %329, null
  br i1 %tobool505, label %if.then506, label %if.end515

if.then506:                                       ; preds = %lor.lhs.false504, %if.then501
  %330 = load i8, i8* %checkonly, align 1, !tbaa !13
  %conv507 = sext i8 %330 to i32
  %tobool508 = icmp ne i32 %conv507, 0
  br i1 %tobool508, label %cond.true509, label %cond.false511

cond.true509:                                     ; preds = %if.then506
  %331 = load i8, i8* %checkonly, align 1, !tbaa !13
  %conv510 = sext i8 %331 to i32
  br label %cond.end512

cond.false511:                                    ; preds = %if.then506
  br label %cond.end512

cond.end512:                                      ; preds = %cond.false511, %cond.true509
  %cond513 = phi i32 [ %conv510, %cond.true509 ], [ 111, %cond.false511 ]
  %conv514 = trunc i32 %cond513 to i8
  store i8 %conv514, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @main.opts, i64 0, i64 0), align 1, !tbaa !13
  call void @incompatible_options(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @main.opts, i64 0, i64 0))
  br label %if.end515

if.end515:                                        ; preds = %cond.end512, %lor.lhs.false504
  %332 = load i8, i8* %locale_ok, align 1, !tbaa !11, !range !25
  %tobool516 = trunc i8 %332 to i1
  br i1 %tobool516, label %if.then517, label %if.end523

if.then517:                                       ; preds = %if.end515
  %call518 = call i8* @setlocale(i32 3, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.24, i64 0, i64 0)) #13
  %tobool519 = icmp ne i8* %call518, null
  %lnot520 = xor i1 %tobool519, true
  %lnot521 = xor i1 %lnot520, true
  %frombool522 = zext i1 %lnot521 to i8
  store i8 %frombool522, i8* %locale_ok, align 1, !tbaa !11
  br label %if.end523

if.end523:                                        ; preds = %if.then517, %if.end515
  %333 = load i8, i8* %locale_ok, align 1, !tbaa !11, !range !25
  %tobool524 = trunc i8 %333 to i1
  br i1 %tobool524, label %if.end526, label %if.then525

if.then525:                                       ; preds = %if.end523
  call void (i32, i32, i8*, ...) @error(i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.56, i64 0, i64 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.57, i64 0, i64 0))
  br label %if.end526

if.end526:                                        ; preds = %if.then525, %if.end523
  %334 = load i8, i8* @hard_LC_COLLATE, align 1, !tbaa !11, !range !25
  %tobool527 = trunc i8 %334 to i1
  br i1 %tobool527, label %if.then528, label %if.else531

if.then528:                                       ; preds = %if.end526
  %call529 = call i8* @setlocale(i32 3, i8* null) #13
  %call530 = call i8* @quote(i8* %call529)
  call void (i32, i32, i8*, ...) @error(i32 0, i32 0, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.58, i64 0, i64 0), i8* %call530)
  br label %if.end532

if.else531:                                       ; preds = %if.end526
  call void (i32, i32, i8*, ...) @error(i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.56, i64 0, i64 0), i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.59, i64 0, i64 0))
  br label %if.end532

if.end532:                                        ; preds = %if.else531, %if.then528
  %335 = load i8, i8* %gkey_only, align 1, !tbaa !11, !range !25
  %tobool533 = trunc i8 %335 to i1
  call void @key_warnings(%struct.keyfield* %gkey, i1 zeroext %tobool533)
  br label %if.end534

if.end534:                                        ; preds = %if.end532, %if.end499
  %reverse535 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %gkey, i32 0, i32 13
  %336 = load i8, i8* %reverse535, align 1, !tbaa !34, !range !25
  %tobool536 = trunc i8 %336 to i1
  %frombool537 = zext i1 %tobool536 to i8
  store i8 %frombool537, i8* @reverse, align 1, !tbaa !11
  %337 = load i8, i8* %need_random, align 1, !tbaa !11, !range !25
  %tobool538 = trunc i8 %337 to i1
  br i1 %tobool538, label %if.then539, label %if.end540

if.then539:                                       ; preds = %if.end534
  %338 = load i8*, i8** %random_source, align 8, !tbaa !6
  call void @random_md5_state_init(i8* %338)
  br label %if.end540

if.end540:                                        ; preds = %if.then539, %if.end534
  %339 = load i64, i64* @temp_dir_count, align 8, !tbaa !14
  %cmp541 = icmp eq i64 %339, 0
  br i1 %cmp541, label %if.then543, label %if.end550

if.then543:                                       ; preds = %if.end540
  %340 = bitcast i8** %tmp_dir to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %340) #13
  %call544 = call i8* @getenv(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.60, i64 0, i64 0)) #13
  store i8* %call544, i8** %tmp_dir, align 8, !tbaa !6
  %341 = load i8*, i8** %tmp_dir, align 8, !tbaa !6
  %tobool545 = icmp ne i8* %341, null
  br i1 %tobool545, label %cond.true546, label %cond.false547

cond.true546:                                     ; preds = %if.then543
  %342 = load i8*, i8** %tmp_dir, align 8, !tbaa !6
  br label %cond.end548

cond.false547:                                    ; preds = %if.then543
  br label %cond.end548

cond.end548:                                      ; preds = %cond.false547, %cond.true546
  %cond549 = phi i8* [ %342, %cond.true546 ], [ getelementptr inbounds ([5 x i8], [5 x i8]* @.str.16, i64 0, i64 0), %cond.false547 ]
  call void @add_temp_dir(i8* %cond549)
  %343 = bitcast i8** %tmp_dir to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %343) #13
  br label %if.end550

if.end550:                                        ; preds = %cond.end548, %if.end540
  %344 = load i64, i64* %nfiles, align 8, !tbaa !14
  %cmp551 = icmp eq i64 %344, 0
  br i1 %cmp551, label %if.then553, label %if.end555

if.then553:                                       ; preds = %if.end550
  store i64 1, i64* %nfiles, align 8, !tbaa !14
  %345 = load i8**, i8*** %files, align 8, !tbaa !6
  %346 = bitcast i8** %345 to i8*
  call void @rpl_free(i8* %346)
  %call554 = call noalias nonnull i8* @xmalloc(i64 8) #25
  %347 = bitcast i8* %call554 to i8**
  store i8** %347, i8*** %files, align 8, !tbaa !6
  %348 = load i8**, i8*** %files, align 8, !tbaa !6
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.52, i64 0, i64 0), i8** %348, align 8, !tbaa !6
  br label %if.end555

if.end555:                                        ; preds = %if.then553, %if.end550
  %349 = load i64, i64* @sort_size, align 8, !tbaa !14
  %cmp556 = icmp ult i64 0, %349
  br i1 %cmp556, label %if.then558, label %if.end568

if.then558:                                       ; preds = %if.end555
  %350 = load i64, i64* @sort_size, align 8, !tbaa !14
  %351 = load i32, i32* @nmerge, align 4, !tbaa !2
  %conv559 = zext i32 %351 to i64
  %mul = mul i64 %conv559, 34
  %cmp560 = icmp ugt i64 %350, %mul
  br i1 %cmp560, label %cond.true562, label %cond.false563

cond.true562:                                     ; preds = %if.then558
  %352 = load i64, i64* @sort_size, align 8, !tbaa !14
  br label %cond.end566

cond.false563:                                    ; preds = %if.then558
  %353 = load i32, i32* @nmerge, align 4, !tbaa !2
  %conv564 = zext i32 %353 to i64
  %mul565 = mul i64 %conv564, 34
  br label %cond.end566

cond.end566:                                      ; preds = %cond.false563, %cond.true562
  %cond567 = phi i64 [ %352, %cond.true562 ], [ %mul565, %cond.false563 ]
  store i64 %cond567, i64* @sort_size, align 8, !tbaa !14
  br label %if.end568

if.end568:                                        ; preds = %cond.end566, %if.end555
  %354 = load i8, i8* %checkonly, align 1, !tbaa !13
  %tobool569 = icmp ne i8 %354, 0
  br i1 %tobool569, label %if.then570, label %if.end585

if.then570:                                       ; preds = %if.end568
  %355 = load i64, i64* %nfiles, align 8, !tbaa !14
  %cmp571 = icmp ugt i64 %355, 1
  br i1 %cmp571, label %if.then573, label %if.end577

if.then573:                                       ; preds = %if.then570
  %356 = load i8**, i8*** %files, align 8, !tbaa !6
  %arrayidx574 = getelementptr inbounds i8*, i8** %356, i64 1
  %357 = load i8*, i8** %arrayidx574, align 8, !tbaa !6
  %call575 = call i8* @quotearg_style(i32 4, i8* %357)
  %358 = load i8, i8* %checkonly, align 1, !tbaa !13
  %conv576 = sext i8 %358 to i32
  call void (i32, i32, i8*, ...) @error(i32 2, i32 0, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.61, i64 0, i64 0), i8* %call575, i32 %conv576)
  unreachable

if.end577:                                        ; preds = %if.then570
  %359 = load i8*, i8** %outfile, align 8, !tbaa !6
  %tobool578 = icmp ne i8* %359, null
  br i1 %tobool578, label %if.then579, label %if.end580

if.then579:                                       ; preds = %if.end577
  %360 = load i8, i8* %checkonly, align 1, !tbaa !13
  store i8 %360, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @main.opts.62, i64 0, i64 0), align 1, !tbaa !13
  call void @incompatible_options(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @main.opts.62, i64 0, i64 0))
  br label %if.end580

if.end580:                                        ; preds = %if.then579, %if.end577
  %361 = load i8**, i8*** %files, align 8, !tbaa !6
  %arrayidx581 = getelementptr inbounds i8*, i8** %361, i64 0
  %362 = load i8*, i8** %arrayidx581, align 8, !tbaa !6
  %363 = load i8, i8* %checkonly, align 1, !tbaa !13
  %call582 = call zeroext i1 @check(i8* %362, i8 signext %363)
  %364 = zext i1 %call582 to i64
  %cond584 = select i1 %call582, i32 0, i32 1
  store i32 %cond584, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup627

if.end585:                                        ; preds = %if.end568
  %365 = load i8**, i8*** %files, align 8, !tbaa !6
  %366 = load i64, i64* %nfiles, align 8, !tbaa !14
  call void @check_inputs(i8** %365, i64 %366)
  %367 = load i8*, i8** %outfile, align 8, !tbaa !6
  call void @check_output(i8* %367)
  %368 = load i8, i8* %mergeonly, align 1, !tbaa !11, !range !25
  %tobool586 = trunc i8 %368 to i1
  br i1 %tobool586, label %if.then587, label %if.else601

if.then587:                                       ; preds = %if.end585
  %369 = bitcast %struct.sortfile** %sortfiles to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %369) #13
  %370 = load i64, i64* %nfiles, align 8, !tbaa !14
  %call588 = call noalias nonnull i8* @xcalloc(i64 %370, i64 16) #23
  %371 = bitcast i8* %call588 to %struct.sortfile*
  store %struct.sortfile* %371, %struct.sortfile** %sortfiles, align 8, !tbaa !6
  %372 = bitcast i64* %i589 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %372) #13
  store i64 0, i64* %i589, align 8, !tbaa !14
  br label %for.cond590

for.cond590:                                      ; preds = %for.inc597, %if.then587
  %373 = load i64, i64* %i589, align 8, !tbaa !14
  %374 = load i64, i64* %nfiles, align 8, !tbaa !14
  %cmp591 = icmp ult i64 %373, %374
  br i1 %cmp591, label %for.body594, label %for.cond.cleanup593

for.cond.cleanup593:                              ; preds = %for.cond590
  store i32 20, i32* %cleanup.dest.slot, align 4
  %375 = bitcast i64* %i589 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %375) #13
  br label %for.end600

for.body594:                                      ; preds = %for.cond590
  %376 = load i8**, i8*** %files, align 8, !tbaa !6
  %377 = load i64, i64* %i589, align 8, !tbaa !14
  %arrayidx595 = getelementptr inbounds i8*, i8** %376, i64 %377
  %378 = load i8*, i8** %arrayidx595, align 8, !tbaa !6
  %379 = load %struct.sortfile*, %struct.sortfile** %sortfiles, align 8, !tbaa !6
  %380 = load i64, i64* %i589, align 8, !tbaa !14
  %arrayidx596 = getelementptr inbounds %struct.sortfile, %struct.sortfile* %379, i64 %380
  %name = getelementptr inbounds %struct.sortfile, %struct.sortfile* %arrayidx596, i32 0, i32 0
  store i8* %378, i8** %name, align 8, !tbaa !46
  br label %for.inc597

for.inc597:                                       ; preds = %for.body594
  %381 = load i64, i64* %i589, align 8, !tbaa !14
  %inc598 = add i64 %381, 1
  store i64 %inc598, i64* %i589, align 8, !tbaa !14
  br label %for.cond590

for.end600:                                       ; preds = %for.cond.cleanup593
  %382 = load %struct.sortfile*, %struct.sortfile** %sortfiles, align 8, !tbaa !6
  %383 = load i64, i64* %nfiles, align 8, !tbaa !14
  %384 = load i8*, i8** %outfile, align 8, !tbaa !6
  call void @merge(%struct.sortfile* %382, i64 0, i64 %383, i8* %384)
  %385 = bitcast %struct.sortfile** %sortfiles to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %385) #13
  br label %if.end618

if.else601:                                       ; preds = %if.end585
  %386 = load i64, i64* %nthreads, align 8, !tbaa !14
  %tobool602 = icmp ne i64 %386, 0
  br i1 %tobool602, label %if.end611, label %if.then603

if.then603:                                       ; preds = %if.else601
  %387 = bitcast i64* %np to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %387) #13
  %call604 = call i64 @num_processors(i32 2)
  store i64 %call604, i64* %np, align 8, !tbaa !14
  %388 = load i64, i64* %np, align 8, !tbaa !14
  %cmp605 = icmp ult i64 %388, 8
  br i1 %cmp605, label %cond.true607, label %cond.false608

cond.true607:                                     ; preds = %if.then603
  %389 = load i64, i64* %np, align 8, !tbaa !14
  br label %cond.end609

cond.false608:                                    ; preds = %if.then603
  br label %cond.end609

cond.end609:                                      ; preds = %cond.false608, %cond.true607
  %cond610 = phi i64 [ %389, %cond.true607 ], [ 8, %cond.false608 ]
  store i64 %cond610, i64* %nthreads, align 8, !tbaa !14
  %390 = bitcast i64* %np to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %390) #13
  br label %if.end611

if.end611:                                        ; preds = %cond.end609, %if.else601
  %391 = bitcast i64* %nthreads_max to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %391) #13
  store i64 72057594037927935, i64* %nthreads_max, align 8, !tbaa !14
  %392 = load i64, i64* %nthreads, align 8, !tbaa !14
  %393 = load i64, i64* %nthreads_max, align 8, !tbaa !14
  %cmp612 = icmp ult i64 %392, %393
  br i1 %cmp612, label %cond.true614, label %cond.false615

cond.true614:                                     ; preds = %if.end611
  %394 = load i64, i64* %nthreads, align 8, !tbaa !14
  br label %cond.end616

cond.false615:                                    ; preds = %if.end611
  %395 = load i64, i64* %nthreads_max, align 8, !tbaa !14
  br label %cond.end616

cond.end616:                                      ; preds = %cond.false615, %cond.true614
  %cond617 = phi i64 [ %394, %cond.true614 ], [ %395, %cond.false615 ]
  store i64 %cond617, i64* %nthreads, align 8, !tbaa !14
  %396 = load i8**, i8*** %files, align 8, !tbaa !6
  %397 = load i64, i64* %nfiles, align 8, !tbaa !14
  %398 = load i8*, i8** %outfile, align 8, !tbaa !6
  %399 = load i64, i64* %nthreads, align 8, !tbaa !14
  call void @sort(i8** %396, i64 %397, i8* %398, i64 %399)
  %400 = bitcast i64* %nthreads_max to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %400) #13
  br label %if.end618

if.end618:                                        ; preds = %cond.end616, %for.end600
  %401 = load i8, i8* @have_read_stdin, align 1, !tbaa !11, !range !25
  %tobool619 = trunc i8 %401 to i1
  br i1 %tobool619, label %land.lhs.true621, label %if.end626

land.lhs.true621:                                 ; preds = %if.end618
  %402 = load %struct._IO_FILE*, %struct._IO_FILE** @stdin, align 8, !tbaa !6
  %call622 = call i32 @rpl_fclose(%struct._IO_FILE* %402)
  %cmp623 = icmp eq i32 %call622, -1
  br i1 %cmp623, label %if.then625, label %if.end626

if.then625:                                       ; preds = %land.lhs.true621
  call void @sort_die(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.63, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.52, i64 0, i64 0))
  br label %if.end626

if.end626:                                        ; preds = %if.then625, %land.lhs.true621, %if.end618
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup627

cleanup627:                                       ; preds = %if.end626, %if.end580
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %locale_ok) #13
  %403 = bitcast i8** %outfile to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %403) #13
  %404 = bitcast %struct.Tokens* %tok to i8*
  call void @llvm.lifetime.end.p0i8(i64 288, i8* %404) #13
  %405 = bitcast i8** %files_from to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %405) #13
  %406 = bitcast i8*** %files to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %406) #13
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %traditional_usage) #13
  %407 = bitcast i32* %posix_ver to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %407) #13
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %posixly_correct) #13
  %408 = bitcast i64* %nfiles to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %408) #13
  %409 = bitcast i64* %nthreads to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %409) #13
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %need_random) #13
  %410 = bitcast i8** %random_source to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %410) #13
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %mergeonly) #13
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %checkonly) #13
  %411 = bitcast i32* %c to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %411) #13
  %412 = bitcast i8** %s to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %412) #13
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %gkey_only) #13
  %413 = bitcast %struct.keyfield* %gkey to i8*
  call void @llvm.lifetime.end.p0i8(i64 72, i8* %413) #13
  %414 = bitcast %struct.keyfield* %key_buf to i8*
  call void @llvm.lifetime.end.p0i8(i64 72, i8* %414) #13
  %415 = bitcast %struct.keyfield** %key to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %415) #13
  %416 = load i32, i32* %retval, align 4
  ret i32 %416

unreachable:                                      ; preds = %cleanup
  unreachable
}

; Function Attrs: nounwind
declare dso_local i8* @getenv(i8*) #6

; Function Attrs: inlinehint nounwind uwtable
define internal void @initialize_exit_failure(i32 %status) #2 {
entry:
  %status.addr = alloca i32, align 4
  store i32 %status, i32* %status.addr, align 4, !tbaa !2
  %0 = load i32, i32* %status.addr, align 4, !tbaa !2
  %cmp = icmp ne i32 %0, 1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i32, i32* %status.addr, align 4, !tbaa !2
  store volatile i32 %1, i32* @exit_failure, align 4, !tbaa !2
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind
declare dso_local %struct.lconv* @localeconv() #6

; Function Attrs: nounwind uwtable
define internal void @inittables() #7 {
entry:
  %i = alloca i64, align 8
  %s = alloca i8*, align 8
  %s_len = alloca i64, align 8
  %j = alloca i64, align 8
  %k = alloca i64, align 8
  %name = alloca i8*, align 8
  %0 = bitcast i64* %i to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #13
  store i64 0, i64* %i, align 8, !tbaa !14
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i64, i64* %i, align 8, !tbaa !14
  %cmp = icmp ult i64 %1, 256
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i64, i64* %i, align 8, !tbaa !14
  %conv = trunc i64 %2 to i8
  %call = call zeroext i1 @field_sep(i8 zeroext %conv)
  %3 = load i64, i64* %i, align 8, !tbaa !14
  %arrayidx = getelementptr inbounds [256 x i8], [256 x i8]* @blanks, i64 0, i64 %3
  %frombool = zext i1 %call to i8
  store i8 %frombool, i8* %arrayidx, align 1, !tbaa !11
  %call1 = call i16** @__ctype_b_loc() #26
  %4 = load i16*, i16** %call1, align 8, !tbaa !6
  %5 = load i64, i64* %i, align 8, !tbaa !14
  %conv2 = trunc i64 %5 to i32
  %idxprom = sext i32 %conv2 to i64
  %arrayidx3 = getelementptr inbounds i16, i16* %4, i64 %idxprom
  %6 = load i16, i16* %arrayidx3, align 2, !tbaa !48
  %conv4 = zext i16 %6 to i32
  %and = and i32 %conv4, 16384
  %tobool = icmp ne i32 %and, 0
  %lnot = xor i1 %tobool, true
  %7 = load i64, i64* %i, align 8, !tbaa !14
  %arrayidx5 = getelementptr inbounds [256 x i8], [256 x i8]* @nonprinting, i64 0, i64 %7
  %frombool6 = zext i1 %lnot to i8
  store i8 %frombool6, i8* %arrayidx5, align 1, !tbaa !11
  %call7 = call i16** @__ctype_b_loc() #26
  %8 = load i16*, i16** %call7, align 8, !tbaa !6
  %9 = load i64, i64* %i, align 8, !tbaa !14
  %conv8 = trunc i64 %9 to i32
  %idxprom9 = sext i32 %conv8 to i64
  %arrayidx10 = getelementptr inbounds i16, i16* %8, i64 %idxprom9
  %10 = load i16, i16* %arrayidx10, align 2, !tbaa !48
  %conv11 = zext i16 %10 to i32
  %and12 = and i32 %conv11, 8
  %tobool13 = icmp ne i32 %and12, 0
  br i1 %tobool13, label %land.end, label %land.rhs

land.rhs:                                         ; preds = %for.body
  %11 = load i64, i64* %i, align 8, !tbaa !14
  %conv14 = trunc i64 %11 to i8
  %call15 = call zeroext i1 @field_sep(i8 zeroext %conv14)
  %lnot16 = xor i1 %call15, true
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.body
  %12 = phi i1 [ false, %for.body ], [ %lnot16, %land.rhs ]
  %13 = load i64, i64* %i, align 8, !tbaa !14
  %arrayidx17 = getelementptr inbounds [256 x i8], [256 x i8]* @nondictionary, i64 0, i64 %13
  %frombool18 = zext i1 %12 to i8
  store i8 %frombool18, i8* %arrayidx17, align 1, !tbaa !11
  %14 = load i64, i64* %i, align 8, !tbaa !14
  %conv19 = trunc i64 %14 to i32
  %call20 = call i32 @toupper(i32 %conv19) #22
  %conv21 = trunc i32 %call20 to i8
  %15 = load i64, i64* %i, align 8, !tbaa !14
  %arrayidx22 = getelementptr inbounds [256 x i8], [256 x i8]* @fold_toupper, i64 0, i64 %15
  store i8 %conv21, i8* %arrayidx22, align 1, !tbaa !13
  br label %for.inc

for.inc:                                          ; preds = %land.end
  %16 = load i64, i64* %i, align 8, !tbaa !14
  %inc = add i64 %16, 1
  store i64 %inc, i64* %i, align 8, !tbaa !14
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %17 = load i8, i8* @hard_LC_TIME, align 1, !tbaa !11, !range !25
  %tobool23 = trunc i8 %17 to i1
  br i1 %tobool23, label %if.then, label %if.end65

if.then:                                          ; preds = %for.end
  store i64 0, i64* %i, align 8, !tbaa !14
  br label %for.cond24

for.cond24:                                       ; preds = %for.inc62, %if.then
  %18 = load i64, i64* %i, align 8, !tbaa !14
  %cmp25 = icmp ult i64 %18, 12
  br i1 %cmp25, label %for.body27, label %for.end64

for.body27:                                       ; preds = %for.cond24
  %19 = bitcast i8** %s to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %19) #13
  %20 = bitcast i64* %s_len to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %20) #13
  %21 = bitcast i64* %j to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %21) #13
  %22 = bitcast i64* %k to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %22) #13
  %23 = bitcast i8** %name to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %23) #13
  %24 = load i64, i64* %i, align 8, !tbaa !14
  %add = add i64 131086, %24
  %conv28 = trunc i64 %add to i32
  %call29 = call i8* @nl_langinfo(i32 %conv28) #13
  store i8* %call29, i8** %s, align 8, !tbaa !6
  %25 = load i8*, i8** %s, align 8, !tbaa !6
  %call30 = call i64 @strlen(i8* %25) #22
  store i64 %call30, i64* %s_len, align 8, !tbaa !14
  %26 = load i64, i64* %s_len, align 8, !tbaa !14
  %add31 = add i64 %26, 1
  %call32 = call noalias nonnull i8* @xmalloc(i64 %add31) #25
  store i8* %call32, i8** %name, align 8, !tbaa !6
  %27 = load i64, i64* %i, align 8, !tbaa !14
  %arrayidx33 = getelementptr inbounds [12 x %struct.month], [12 x %struct.month]* @monthtab, i64 0, i64 %27
  %name34 = getelementptr inbounds %struct.month, %struct.month* %arrayidx33, i32 0, i32 0
  store i8* %call32, i8** %name34, align 16, !tbaa !50
  %28 = load i64, i64* %i, align 8, !tbaa !14
  %add35 = add i64 %28, 1
  %conv36 = trunc i64 %add35 to i32
  %29 = load i64, i64* %i, align 8, !tbaa !14
  %arrayidx37 = getelementptr inbounds [12 x %struct.month], [12 x %struct.month]* @monthtab, i64 0, i64 %29
  %val = getelementptr inbounds %struct.month, %struct.month* %arrayidx37, i32 0, i32 1
  store i32 %conv36, i32* %val, align 8, !tbaa !52
  store i64 0, i64* %k, align 8, !tbaa !14
  store i64 0, i64* %j, align 8, !tbaa !14
  br label %for.cond38

for.cond38:                                       ; preds = %for.inc58, %for.body27
  %30 = load i64, i64* %j, align 8, !tbaa !14
  %31 = load i64, i64* %s_len, align 8, !tbaa !14
  %cmp39 = icmp ult i64 %30, %31
  br i1 %cmp39, label %for.body41, label %for.end60

for.body41:                                       ; preds = %for.cond38
  %call42 = call i16** @__ctype_b_loc() #26
  %32 = load i16*, i16** %call42, align 8, !tbaa !6
  %33 = load i8*, i8** %s, align 8, !tbaa !6
  %34 = load i64, i64* %j, align 8, !tbaa !14
  %arrayidx43 = getelementptr inbounds i8, i8* %33, i64 %34
  %35 = load i8, i8* %arrayidx43, align 1, !tbaa !13
  %call44 = call zeroext i8 @to_uchar(i8 signext %35)
  %conv45 = zext i8 %call44 to i32
  %idxprom46 = sext i32 %conv45 to i64
  %arrayidx47 = getelementptr inbounds i16, i16* %32, i64 %idxprom46
  %36 = load i16, i16* %arrayidx47, align 2, !tbaa !48
  %conv48 = zext i16 %36 to i32
  %and49 = and i32 %conv48, 1
  %tobool50 = icmp ne i32 %and49, 0
  br i1 %tobool50, label %if.end, label %if.then51

if.then51:                                        ; preds = %for.body41
  %37 = load i8*, i8** %s, align 8, !tbaa !6
  %38 = load i64, i64* %j, align 8, !tbaa !14
  %arrayidx52 = getelementptr inbounds i8, i8* %37, i64 %38
  %39 = load i8, i8* %arrayidx52, align 1, !tbaa !13
  %call53 = call zeroext i8 @to_uchar(i8 signext %39)
  %idxprom54 = zext i8 %call53 to i64
  %arrayidx55 = getelementptr inbounds [256 x i8], [256 x i8]* @fold_toupper, i64 0, i64 %idxprom54
  %40 = load i8, i8* %arrayidx55, align 1, !tbaa !13
  %41 = load i8*, i8** %name, align 8, !tbaa !6
  %42 = load i64, i64* %k, align 8, !tbaa !14
  %inc56 = add i64 %42, 1
  store i64 %inc56, i64* %k, align 8, !tbaa !14
  %arrayidx57 = getelementptr inbounds i8, i8* %41, i64 %42
  store i8 %40, i8* %arrayidx57, align 1, !tbaa !13
  br label %if.end

if.end:                                           ; preds = %if.then51, %for.body41
  br label %for.inc58

for.inc58:                                        ; preds = %if.end
  %43 = load i64, i64* %j, align 8, !tbaa !14
  %inc59 = add i64 %43, 1
  store i64 %inc59, i64* %j, align 8, !tbaa !14
  br label %for.cond38

for.end60:                                        ; preds = %for.cond38
  %44 = load i8*, i8** %name, align 8, !tbaa !6
  %45 = load i64, i64* %k, align 8, !tbaa !14
  %arrayidx61 = getelementptr inbounds i8, i8* %44, i64 %45
  store i8 0, i8* %arrayidx61, align 1, !tbaa !13
  %46 = bitcast i8** %name to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %46) #13
  %47 = bitcast i64* %k to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %47) #13
  %48 = bitcast i64* %j to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %48) #13
  %49 = bitcast i64* %s_len to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %49) #13
  %50 = bitcast i8** %s to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %50) #13
  br label %for.inc62

for.inc62:                                        ; preds = %for.end60
  %51 = load i64, i64* %i, align 8, !tbaa !14
  %inc63 = add i64 %51, 1
  store i64 %inc63, i64* %i, align 8, !tbaa !14
  br label %for.cond24

for.end64:                                        ; preds = %for.cond24
  call void @qsort(i8* bitcast ([12 x %struct.month]* @monthtab to i8*), i64 12, i64 16, i32 (i8*, i8*)* @struct_month_cmp)
  br label %if.end65

if.end65:                                         ; preds = %for.end64, %for.end
  %52 = bitcast i64* %i to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %52) #13
  ret void
}

; Function Attrs: nounwind
declare dso_local i32 @sigemptyset(%struct.__sigset_t*) #6

; Function Attrs: nounwind
declare dso_local i32 @sigaction(i32, %struct.sigaction*, %struct.sigaction*) #6

; Function Attrs: nounwind
declare dso_local i32 @sigaddset(%struct.__sigset_t*, i32) #6

; Function Attrs: nounwind uwtable
define internal void @sighandler(i32 %sig) #7 {
entry:
  %sig.addr = alloca i32, align 4
  store i32 %sig, i32* %sig.addr, align 4, !tbaa !2
  call void @cleanup()
  %0 = load i32, i32* %sig.addr, align 4, !tbaa !2
  %call = call void (i32)* @signal(i32 %0, void (i32)* null) #13
  %1 = load i32, i32* %sig.addr, align 4, !tbaa !2
  %call1 = call i32 @raise(i32 %1) #13
  ret void
}

; Function Attrs: nounwind
declare dso_local i32 @sigismember(%struct.__sigset_t*, i32) #6

; Function Attrs: nounwind
declare dso_local void (i32)* @signal(i32, void (i32)*) #6

; Function Attrs: nounwind uwtable
define internal void @exit_cleanup() #7 {
entry:
  %cs = alloca %struct.cs_status, align 8
  %0 = load volatile %struct.tempnode*, %struct.tempnode** @temphead, align 8, !tbaa !6
  %tobool = icmp ne %struct.tempnode* %0, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = bitcast %struct.cs_status* %cs to i8*
  call void @llvm.lifetime.start.p0i8(i64 136, i8* %1) #13
  call void @cs_enter(%struct.cs_status* %cs)
  call void @cleanup()
  call void @cs_leave(%struct.cs_status* %cs)
  %2 = bitcast %struct.cs_status* %cs to i8*
  call void @llvm.lifetime.end.p0i8(i64 136, i8* %2) #13
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  call void @close_stdout()
  ret void
}

; Function Attrs: nounwind
declare dso_local i32 @atexit(void ()*) #6

; Function Attrs: nounwind uwtable
define internal %struct.keyfield* @key_init(%struct.keyfield* %key) #7 {
entry:
  %key.addr = alloca %struct.keyfield*, align 8
  store %struct.keyfield* %key, %struct.keyfield** %key.addr, align 8, !tbaa !6
  %0 = load %struct.keyfield*, %struct.keyfield** %key.addr, align 8, !tbaa !6
  %1 = bitcast %struct.keyfield* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %1, i8 0, i64 72, i1 false)
  %2 = load %struct.keyfield*, %struct.keyfield** %key.addr, align 8, !tbaa !6
  %eword = getelementptr inbounds %struct.keyfield, %struct.keyfield* %2, i32 0, i32 2
  store i64 -1, i64* %eword, align 8, !tbaa !28
  %3 = load %struct.keyfield*, %struct.keyfield** %key.addr, align 8, !tbaa !6
  ret %struct.keyfield* %3
}

; Function Attrs: nounwind
declare dso_local i32 @getopt_long(i32, i8**, i8*, %struct.option*, i32*) #6

; Function Attrs: nounwind uwtable
define internal i8* @parse_field_count(i8* %string, i64* %val, i8* %msgid) #7 {
entry:
  %retval = alloca i8*, align 8
  %string.addr = alloca i8*, align 8
  %val.addr = alloca i64*, align 8
  %msgid.addr = alloca i8*, align 8
  %suffix = alloca i8*, align 8
  %n = alloca i64, align 8
  %cleanup.dest.slot = alloca i32, align 4
  store i8* %string, i8** %string.addr, align 8, !tbaa !6
  store i64* %val, i64** %val.addr, align 8, !tbaa !6
  store i8* %msgid, i8** %msgid.addr, align 8, !tbaa !6
  %0 = bitcast i8** %suffix to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #13
  %1 = bitcast i64* %n to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %1) #13
  %2 = load i8*, i8** %string.addr, align 8, !tbaa !6
  %call = call i32 @xstrtoumax(i8* %2, i8** %suffix, i32 10, i64* %n, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.24, i64 0, i64 0))
  switch i32 %call, label %sw.epilog [
    i32 0, label %sw.bb
    i32 2, label %sw.bb
    i32 1, label %sw.bb1
    i32 3, label %sw.bb1
    i32 4, label %sw.bb2
  ]

sw.bb:                                            ; preds = %entry, %entry
  %3 = load i64, i64* %n, align 8, !tbaa !14
  %4 = load i64*, i64** %val.addr, align 8, !tbaa !6
  store i64 %3, i64* %4, align 8, !tbaa !14
  %5 = load i64*, i64** %val.addr, align 8, !tbaa !6
  %6 = load i64, i64* %5, align 8, !tbaa !14
  %7 = load i64, i64* %n, align 8, !tbaa !14
  %cmp = icmp eq i64 %6, %7
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %sw.bb
  br label %sw.epilog

if.end:                                           ; preds = %sw.bb
  br label %sw.bb1

sw.bb1:                                           ; preds = %entry, %entry, %if.end
  %8 = load i64*, i64** %val.addr, align 8, !tbaa !6
  store i64 -1, i64* %8, align 8, !tbaa !14
  br label %sw.epilog

sw.bb2:                                           ; preds = %entry
  %9 = load i8*, i8** %msgid.addr, align 8, !tbaa !6
  %tobool = icmp ne i8* %9, null
  br i1 %tobool, label %if.then3, label %if.end5

if.then3:                                         ; preds = %sw.bb2
  %10 = load i8*, i8** %msgid.addr, align 8, !tbaa !6
  %11 = load i8*, i8** %string.addr, align 8, !tbaa !6
  %call4 = call i8* @quote(i8* %11)
  call void (i32, i32, i8*, ...) @error(i32 2, i32 0, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.123, i64 0, i64 0), i8* %10, i8* %call4)
  unreachable

if.end5:                                          ; preds = %sw.bb2
  store i8* null, i8** %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

sw.epilog:                                        ; preds = %entry, %sw.bb1, %if.then
  %12 = load i8*, i8** %suffix, align 8, !tbaa !6
  store i8* %12, i8** %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %sw.epilog, %if.end5
  %13 = bitcast i64* %n to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %13) #13
  %14 = bitcast i8** %suffix to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %14) #13
  %15 = load i8*, i8** %retval, align 8
  ret i8* %15
}

; Function Attrs: nounwind uwtable
define internal i8* @set_ordering(i8* %s, %struct.keyfield* %key, i32 %blanktype) #7 {
entry:
  %retval = alloca i8*, align 8
  %s.addr = alloca i8*, align 8
  %key.addr = alloca %struct.keyfield*, align 8
  %blanktype.addr = alloca i32, align 4
  store i8* %s, i8** %s.addr, align 8, !tbaa !6
  store %struct.keyfield* %key, %struct.keyfield** %key.addr, align 8, !tbaa !6
  store i32 %blanktype, i32* %blanktype.addr, align 4, !tbaa !13
  br label %while.cond

while.cond:                                       ; preds = %sw.epilog, %entry
  %0 = load i8*, i8** %s.addr, align 8, !tbaa !6
  %1 = load i8, i8* %0, align 1, !tbaa !13
  %tobool = icmp ne i8 %1, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %2 = load i8*, i8** %s.addr, align 8, !tbaa !6
  %3 = load i8, i8* %2, align 1, !tbaa !13
  %conv = sext i8 %3 to i32
  switch i32 %conv, label %sw.default [
    i32 98, label %sw.bb
    i32 100, label %sw.bb11
    i32 102, label %sw.bb12
    i32 103, label %sw.bb13
    i32 104, label %sw.bb14
    i32 105, label %sw.bb15
    i32 77, label %sw.bb21
    i32 110, label %sw.bb22
    i32 82, label %sw.bb23
    i32 114, label %sw.bb24
    i32 86, label %sw.bb25
  ]

sw.bb:                                            ; preds = %while.body
  %4 = load i32, i32* %blanktype.addr, align 4, !tbaa !13
  %cmp = icmp eq i32 %4, 0
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %sw.bb
  %5 = load i32, i32* %blanktype.addr, align 4, !tbaa !13
  %cmp2 = icmp eq i32 %5, 2
  br i1 %cmp2, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %sw.bb
  %6 = load %struct.keyfield*, %struct.keyfield** %key.addr, align 8, !tbaa !6
  %skipsblanks = getelementptr inbounds %struct.keyfield, %struct.keyfield* %6, i32 0, i32 6
  store i8 1, i8* %skipsblanks, align 8, !tbaa !37
  br label %if.end

if.end:                                           ; preds = %if.then, %lor.lhs.false
  %7 = load i32, i32* %blanktype.addr, align 4, !tbaa !13
  %cmp4 = icmp eq i32 %7, 1
  br i1 %cmp4, label %if.then9, label %lor.lhs.false6

lor.lhs.false6:                                   ; preds = %if.end
  %8 = load i32, i32* %blanktype.addr, align 4, !tbaa !13
  %cmp7 = icmp eq i32 %8, 2
  br i1 %cmp7, label %if.then9, label %if.end10

if.then9:                                         ; preds = %lor.lhs.false6, %if.end
  %9 = load %struct.keyfield*, %struct.keyfield** %key.addr, align 8, !tbaa !6
  %skipeblanks = getelementptr inbounds %struct.keyfield, %struct.keyfield* %9, i32 0, i32 7
  store i8 1, i8* %skipeblanks, align 1, !tbaa !38
  br label %if.end10

if.end10:                                         ; preds = %if.then9, %lor.lhs.false6
  br label %sw.epilog

sw.bb11:                                          ; preds = %while.body
  %10 = load %struct.keyfield*, %struct.keyfield** %key.addr, align 8, !tbaa !6
  %ignore = getelementptr inbounds %struct.keyfield, %struct.keyfield* %10, i32 0, i32 4
  store i8* getelementptr inbounds ([256 x i8], [256 x i8]* @nondictionary, i64 0, i64 0), i8** %ignore, align 8, !tbaa !35
  br label %sw.epilog

sw.bb12:                                          ; preds = %while.body
  %11 = load %struct.keyfield*, %struct.keyfield** %key.addr, align 8, !tbaa !6
  %translate = getelementptr inbounds %struct.keyfield, %struct.keyfield* %11, i32 0, i32 5
  store i8* getelementptr inbounds ([256 x i8], [256 x i8]* @fold_toupper, i64 0, i64 0), i8** %translate, align 8, !tbaa !36
  br label %sw.epilog

sw.bb13:                                          ; preds = %while.body
  %12 = load %struct.keyfield*, %struct.keyfield** %key.addr, align 8, !tbaa !6
  %general_numeric = getelementptr inbounds %struct.keyfield, %struct.keyfield* %12, i32 0, i32 10
  store i8 1, i8* %general_numeric, align 4, !tbaa !41
  br label %sw.epilog

sw.bb14:                                          ; preds = %while.body
  %13 = load %struct.keyfield*, %struct.keyfield** %key.addr, align 8, !tbaa !6
  %human_numeric = getelementptr inbounds %struct.keyfield, %struct.keyfield* %13, i32 0, i32 11
  store i8 1, i8* %human_numeric, align 1, !tbaa !42
  br label %sw.epilog

sw.bb15:                                          ; preds = %while.body
  %14 = load %struct.keyfield*, %struct.keyfield** %key.addr, align 8, !tbaa !6
  %ignore16 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %14, i32 0, i32 4
  %15 = load i8*, i8** %ignore16, align 8, !tbaa !35
  %tobool17 = icmp ne i8* %15, null
  br i1 %tobool17, label %if.end20, label %if.then18

if.then18:                                        ; preds = %sw.bb15
  %16 = load %struct.keyfield*, %struct.keyfield** %key.addr, align 8, !tbaa !6
  %ignore19 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %16, i32 0, i32 4
  store i8* getelementptr inbounds ([256 x i8], [256 x i8]* @nonprinting, i64 0, i64 0), i8** %ignore19, align 8, !tbaa !35
  br label %if.end20

if.end20:                                         ; preds = %if.then18, %sw.bb15
  br label %sw.epilog

sw.bb21:                                          ; preds = %while.body
  %17 = load %struct.keyfield*, %struct.keyfield** %key.addr, align 8, !tbaa !6
  %month = getelementptr inbounds %struct.keyfield, %struct.keyfield* %17, i32 0, i32 12
  store i8 1, i8* %month, align 2, !tbaa !39
  br label %sw.epilog

sw.bb22:                                          ; preds = %while.body
  %18 = load %struct.keyfield*, %struct.keyfield** %key.addr, align 8, !tbaa !6
  %numeric = getelementptr inbounds %struct.keyfield, %struct.keyfield* %18, i32 0, i32 8
  store i8 1, i8* %numeric, align 2, !tbaa !40
  br label %sw.epilog

sw.bb23:                                          ; preds = %while.body
  %19 = load %struct.keyfield*, %struct.keyfield** %key.addr, align 8, !tbaa !6
  %random = getelementptr inbounds %struct.keyfield, %struct.keyfield* %19, i32 0, i32 9
  store i8 1, i8* %random, align 1, !tbaa !44
  br label %sw.epilog

sw.bb24:                                          ; preds = %while.body
  %20 = load %struct.keyfield*, %struct.keyfield** %key.addr, align 8, !tbaa !6
  %reverse = getelementptr inbounds %struct.keyfield, %struct.keyfield* %20, i32 0, i32 13
  store i8 1, i8* %reverse, align 1, !tbaa !34
  br label %sw.epilog

sw.bb25:                                          ; preds = %while.body
  %21 = load %struct.keyfield*, %struct.keyfield** %key.addr, align 8, !tbaa !6
  %version = getelementptr inbounds %struct.keyfield, %struct.keyfield* %21, i32 0, i32 14
  store i8 1, i8* %version, align 8, !tbaa !43
  br label %sw.epilog

sw.default:                                       ; preds = %while.body
  %22 = load i8*, i8** %s.addr, align 8, !tbaa !6
  store i8* %22, i8** %retval, align 8
  br label %return

sw.epilog:                                        ; preds = %sw.bb25, %sw.bb24, %sw.bb23, %sw.bb22, %sw.bb21, %if.end20, %sw.bb14, %sw.bb13, %sw.bb12, %sw.bb11, %if.end10
  %23 = load i8*, i8** %s.addr, align 8, !tbaa !6
  %incdec.ptr = getelementptr inbounds i8, i8* %23, i32 1
  store i8* %incdec.ptr, i8** %s.addr, align 8, !tbaa !6
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %24 = load i8*, i8** %s.addr, align 8, !tbaa !6
  store i8* %24, i8** %retval, align 8
  br label %return

return:                                           ; preds = %while.end, %sw.default
  %25 = load i8*, i8** %retval, align 8
  ret i8* %25
}

; Function Attrs: noreturn nounwind
declare dso_local void @__assert_fail(i8*, i8*, i32, i8*) #3

; Function Attrs: nounwind uwtable
define internal void @badfieldspec(i8* %spec, i8* %msgid) #7 {
entry:
  %spec.addr = alloca i8*, align 8
  %msgid.addr = alloca i8*, align 8
  store i8* %spec, i8** %spec.addr, align 8, !tbaa !6
  store i8* %msgid, i8** %msgid.addr, align 8, !tbaa !6
  %0 = load i8*, i8** %msgid.addr, align 8, !tbaa !6
  %1 = load i8*, i8** %spec.addr, align 8, !tbaa !6
  %call = call i8* @quote(i8* %1)
  call void (i32, i32, i8*, ...) @error(i32 2, i32 0, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.124, i64 0, i64 0), i8* %0, i8* %call)
  unreachable
}

; Function Attrs: nounwind uwtable
define internal void @insertkey(%struct.keyfield* %key_arg) #7 {
entry:
  %key_arg.addr = alloca %struct.keyfield*, align 8
  %p = alloca %struct.keyfield**, align 8
  %key = alloca %struct.keyfield*, align 8
  store %struct.keyfield* %key_arg, %struct.keyfield** %key_arg.addr, align 8, !tbaa !6
  %0 = bitcast %struct.keyfield*** %p to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #13
  %1 = bitcast %struct.keyfield** %key to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %1) #13
  %2 = load %struct.keyfield*, %struct.keyfield** %key_arg.addr, align 8, !tbaa !6
  %3 = bitcast %struct.keyfield* %2 to i8*
  %call = call noalias nonnull i8* @xmemdup(i8* %3, i64 72) #27
  %4 = bitcast i8* %call to %struct.keyfield*
  store %struct.keyfield* %4, %struct.keyfield** %key, align 8, !tbaa !6
  store %struct.keyfield** @keylist, %struct.keyfield*** %p, align 8, !tbaa !6
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %5 = load %struct.keyfield**, %struct.keyfield*** %p, align 8, !tbaa !6
  %6 = load %struct.keyfield*, %struct.keyfield** %5, align 8, !tbaa !6
  %tobool = icmp ne %struct.keyfield* %6, null
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %7 = load %struct.keyfield**, %struct.keyfield*** %p, align 8, !tbaa !6
  %8 = load %struct.keyfield*, %struct.keyfield** %7, align 8, !tbaa !6
  %next = getelementptr inbounds %struct.keyfield, %struct.keyfield* %8, i32 0, i32 16
  store %struct.keyfield** %next, %struct.keyfield*** %p, align 8, !tbaa !6
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %9 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !tbaa !6
  %10 = load %struct.keyfield**, %struct.keyfield*** %p, align 8, !tbaa !6
  store %struct.keyfield* %9, %struct.keyfield** %10, align 8, !tbaa !6
  %11 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !tbaa !6
  %next1 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %11, i32 0, i32 16
  store %struct.keyfield* null, %struct.keyfield** %next1, align 8, !tbaa !45
  %12 = bitcast %struct.keyfield** %key to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %12) #13
  %13 = bitcast %struct.keyfield*** %p to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %13) #13
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @incompatible_options(i8* %opts) #7 {
entry:
  %opts.addr = alloca i8*, align 8
  store i8* %opts, i8** %opts.addr, align 8, !tbaa !6
  %0 = load i8*, i8** %opts.addr, align 8, !tbaa !6
  call void (i32, i32, i8*, ...) @error(i32 2, i32 0, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.133, i64 0, i64 0), i8* %0)
  unreachable
}

declare dso_local void @error(i32, i32, i8*, ...) #1

; Function Attrs: nounwind uwtable
define internal void @specify_nmerge(i32 %oi, i8 signext %c, i8* %s) #7 {
entry:
  %oi.addr = alloca i32, align 4
  %c.addr = alloca i8, align 1
  %s.addr = alloca i8*, align 8
  %n = alloca i64, align 8
  %rlimit = alloca %struct.timespec, align 8
  %e = alloca i32, align 4
  %max_nmerge = alloca i32, align 4
  %max_nmerge_buf = alloca [11 x i8], align 1
  store i32 %oi, i32* %oi.addr, align 4, !tbaa !2
  store i8 %c, i8* %c.addr, align 1, !tbaa !13
  store i8* %s, i8** %s.addr, align 8, !tbaa !6
  %0 = bitcast i64* %n to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #13
  %1 = bitcast %struct.timespec* %rlimit to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %1) #13
  %2 = bitcast i32* %e to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %2) #13
  %3 = load i8*, i8** %s.addr, align 8, !tbaa !6
  %call = call i32 @xstrtoumax(i8* %3, i8** null, i32 10, i64* %n, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.24, i64 0, i64 0))
  store i32 %call, i32* %e, align 4, !tbaa !13
  %4 = bitcast i32* %max_nmerge to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %4) #13
  %call1 = call i32 @getrlimit(i32 7, %struct.timespec* %rlimit) #13
  %cmp = icmp eq i32 %call1, 0
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %rlim_cur = getelementptr inbounds %struct.timespec, %struct.timespec* %rlimit, i32 0, i32 0
  %5 = load i64, i64* %rlim_cur, align 8, !tbaa !53
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %5, %cond.true ], [ 20, %cond.false ]
  %sub = sub i64 %cond, 3
  %conv = trunc i64 %sub to i32
  store i32 %conv, i32* %max_nmerge, align 4, !tbaa !2
  %6 = load i32, i32* %e, align 4, !tbaa !13
  %cmp2 = icmp eq i32 %6, 0
  br i1 %cmp2, label %if.then, label %if.end24

if.then:                                          ; preds = %cond.end
  %7 = load i64, i64* %n, align 8, !tbaa !14
  %conv4 = trunc i64 %7 to i32
  store i32 %conv4, i32* @nmerge, align 4, !tbaa !2
  %8 = load i32, i32* @nmerge, align 4, !tbaa !2
  %conv5 = zext i32 %8 to i64
  %9 = load i64, i64* %n, align 8, !tbaa !14
  %cmp6 = icmp ne i64 %conv5, %9
  br i1 %cmp6, label %if.then8, label %if.else

if.then8:                                         ; preds = %if.then
  store i32 1, i32* %e, align 4, !tbaa !13
  br label %if.end23

if.else:                                          ; preds = %if.then
  %10 = load i32, i32* @nmerge, align 4, !tbaa !2
  %cmp9 = icmp ult i32 %10, 2
  br i1 %cmp9, label %if.then11, label %if.else17

if.then11:                                        ; preds = %if.else
  %11 = load i32, i32* %oi.addr, align 4, !tbaa !2
  %idxprom = sext i32 %11 to i64
  %arrayidx = getelementptr inbounds [31 x %struct.option], [31 x %struct.option]* @long_options, i64 0, i64 %idxprom
  %name = getelementptr inbounds %struct.option, %struct.option* %arrayidx, i32 0, i32 0
  %12 = load i8*, i8** %name, align 16, !tbaa !55
  %13 = load i8*, i8** %s.addr, align 8, !tbaa !6
  %call12 = call i8* @quote(i8* %13)
  call void (i32, i32, i8*, ...) @error(i32 0, i32 0, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.134, i64 0, i64 0), i8* %12, i8* %call12)
  %14 = load i32, i32* %oi.addr, align 4, !tbaa !2
  %idxprom13 = sext i32 %14 to i64
  %arrayidx14 = getelementptr inbounds [31 x %struct.option], [31 x %struct.option]* @long_options, i64 0, i64 %idxprom13
  %name15 = getelementptr inbounds %struct.option, %struct.option* %arrayidx14, i32 0, i32 0
  %15 = load i8*, i8** %name15, align 16, !tbaa !55
  %call16 = call i8* @quote(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.136, i64 0, i64 0))
  call void (i32, i32, i8*, ...) @error(i32 2, i32 0, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.135, i64 0, i64 0), i8* %15, i8* %call16)
  unreachable

if.else17:                                        ; preds = %if.else
  %16 = load i32, i32* %max_nmerge, align 4, !tbaa !2
  %17 = load i32, i32* @nmerge, align 4, !tbaa !2
  %cmp18 = icmp ult i32 %16, %17
  br i1 %cmp18, label %if.then20, label %if.else21

if.then20:                                        ; preds = %if.else17
  store i32 1, i32* %e, align 4, !tbaa !13
  br label %if.end

if.else21:                                        ; preds = %if.else17
  %18 = bitcast i32* %max_nmerge to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %18) #13
  %19 = bitcast i32* %e to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %19) #13
  %20 = bitcast %struct.timespec* %rlimit to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %20) #13
  %21 = bitcast i64* %n to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %21) #13
  ret void

if.end:                                           ; preds = %if.then20
  br label %if.end22

if.end22:                                         ; preds = %if.end
  br label %if.end23

if.end23:                                         ; preds = %if.end22, %if.then8
  br label %if.end24

if.end24:                                         ; preds = %if.end23, %cond.end
  %22 = load i32, i32* %e, align 4, !tbaa !13
  %cmp25 = icmp eq i32 %22, 1
  br i1 %cmp25, label %if.then27, label %if.else36

if.then27:                                        ; preds = %if.end24
  %23 = bitcast [11 x i8]* %max_nmerge_buf to i8*
  call void @llvm.lifetime.start.p0i8(i64 11, i8* %23) #13
  %24 = load i32, i32* %oi.addr, align 4, !tbaa !2
  %idxprom28 = sext i32 %24 to i64
  %arrayidx29 = getelementptr inbounds [31 x %struct.option], [31 x %struct.option]* @long_options, i64 0, i64 %idxprom28
  %name30 = getelementptr inbounds %struct.option, %struct.option* %arrayidx29, i32 0, i32 0
  %25 = load i8*, i8** %name30, align 16, !tbaa !55
  %26 = load i8*, i8** %s.addr, align 8, !tbaa !6
  %call31 = call i8* @quote(i8* %26)
  call void (i32, i32, i8*, ...) @error(i32 0, i32 0, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.137, i64 0, i64 0), i8* %25, i8* %call31)
  %27 = load i32, i32* %oi.addr, align 4, !tbaa !2
  %idxprom32 = sext i32 %27 to i64
  %arrayidx33 = getelementptr inbounds [31 x %struct.option], [31 x %struct.option]* @long_options, i64 0, i64 %idxprom32
  %name34 = getelementptr inbounds %struct.option, %struct.option* %arrayidx33, i32 0, i32 0
  %28 = load i8*, i8** %name34, align 16, !tbaa !55
  %29 = load i32, i32* %max_nmerge, align 4, !tbaa !2
  %arraydecay = getelementptr inbounds [11 x i8], [11 x i8]* %max_nmerge_buf, i64 0, i64 0
  %call35 = call i8* @uinttostr(i32 %29, i8* %arraydecay)
  call void (i32, i32, i8*, ...) @error(i32 2, i32 0, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.138, i64 0, i64 0), i8* %28, i8* %call35)
  unreachable

if.else36:                                        ; preds = %if.end24
  %30 = load i32, i32* %e, align 4, !tbaa !13
  %31 = load i32, i32* %oi.addr, align 4, !tbaa !2
  %32 = load i8, i8* %c.addr, align 1, !tbaa !13
  %33 = load i8*, i8** %s.addr, align 8, !tbaa !6
  call void @xstrtol_fatal(i32 %30, i32 %31, i8 signext %32, %struct.option* getelementptr inbounds ([31 x %struct.option], [31 x %struct.option]* @long_options, i64 0, i64 0), i8* %33) #24
  unreachable
}

; Function Attrs: nounwind uwtable
define internal void @specify_sort_size(i32 %oi, i8 signext %c, i8* %s) #7 {
entry:
  %oi.addr = alloca i32, align 4
  %c.addr = alloca i8, align 1
  %s.addr = alloca i8*, align 8
  %n = alloca i64, align 8
  %suffix = alloca i8*, align 8
  %e = alloca i32, align 4
  %mem = alloca double, align 8
  %cleanup.dest.slot = alloca i32, align 4
  store i32 %oi, i32* %oi.addr, align 4, !tbaa !2
  store i8 %c, i8* %c.addr, align 1, !tbaa !13
  store i8* %s, i8** %s.addr, align 8, !tbaa !6
  %0 = bitcast i64* %n to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #13
  %1 = bitcast i8** %suffix to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %1) #13
  %2 = bitcast i32* %e to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %2) #13
  %3 = load i8*, i8** %s.addr, align 8, !tbaa !6
  %call = call i32 @xstrtoumax(i8* %3, i8** %suffix, i32 10, i64* %n, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.139, i64 0, i64 0))
  store i32 %call, i32* %e, align 4, !tbaa !13
  %4 = load i32, i32* %e, align 4, !tbaa !13
  %cmp = icmp eq i32 %4, 0
  br i1 %cmp, label %land.lhs.true, label %if.end6

land.lhs.true:                                    ; preds = %entry
  %5 = load i8*, i8** %suffix, align 8, !tbaa !6
  %arrayidx = getelementptr inbounds i8, i8* %5, i64 -1
  %6 = load i8, i8* %arrayidx, align 1, !tbaa !13
  %conv = sext i8 %6 to i32
  %sub = sub i32 %conv, 48
  %cmp1 = icmp ule i32 %sub, 9
  br i1 %cmp1, label %if.then, label %if.end6

if.then:                                          ; preds = %land.lhs.true
  %7 = load i64, i64* %n, align 8, !tbaa !14
  %cmp3 = icmp ule i64 %7, 18014398509481983
  br i1 %cmp3, label %if.then5, label %if.else

if.then5:                                         ; preds = %if.then
  %8 = load i64, i64* %n, align 8, !tbaa !14
  %mul = mul i64 %8, 1024
  store i64 %mul, i64* %n, align 8, !tbaa !14
  br label %if.end

if.else:                                          ; preds = %if.then
  store i32 1, i32* %e, align 4, !tbaa !13
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then5
  br label %if.end6

if.end6:                                          ; preds = %if.end, %land.lhs.true, %entry
  %9 = load i32, i32* %e, align 4, !tbaa !13
  %cmp7 = icmp eq i32 %9, 2
  br i1 %cmp7, label %land.lhs.true9, label %if.end30

land.lhs.true9:                                   ; preds = %if.end6
  %10 = load i8*, i8** %suffix, align 8, !tbaa !6
  %arrayidx10 = getelementptr inbounds i8, i8* %10, i64 -1
  %11 = load i8, i8* %arrayidx10, align 1, !tbaa !13
  %conv11 = sext i8 %11 to i32
  %sub12 = sub i32 %conv11, 48
  %cmp13 = icmp ule i32 %sub12, 9
  br i1 %cmp13, label %land.lhs.true15, label %if.end30

land.lhs.true15:                                  ; preds = %land.lhs.true9
  %12 = load i8*, i8** %suffix, align 8, !tbaa !6
  %arrayidx16 = getelementptr inbounds i8, i8* %12, i64 1
  %13 = load i8, i8* %arrayidx16, align 1, !tbaa !13
  %tobool = icmp ne i8 %13, 0
  br i1 %tobool, label %if.end30, label %if.then17

if.then17:                                        ; preds = %land.lhs.true15
  %14 = load i8*, i8** %suffix, align 8, !tbaa !6
  %arrayidx18 = getelementptr inbounds i8, i8* %14, i64 0
  %15 = load i8, i8* %arrayidx18, align 1, !tbaa !13
  %conv19 = sext i8 %15 to i32
  switch i32 %conv19, label %sw.epilog [
    i32 98, label %sw.bb
    i32 37, label %sw.bb20
  ]

sw.bb:                                            ; preds = %if.then17
  store i32 0, i32* %e, align 4, !tbaa !13
  br label %sw.epilog

sw.bb20:                                          ; preds = %if.then17
  %16 = bitcast double* %mem to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %16) #13
  %call21 = call double @physmem_total()
  %17 = load i64, i64* %n, align 8, !tbaa !14
  %conv22 = uitofp i64 %17 to double
  %mul23 = fmul double %call21, %conv22
  %div = fdiv double %mul23, 1.000000e+02
  store double %div, double* %mem, align 8, !tbaa !57
  %18 = load double, double* %mem, align 8, !tbaa !57
  %cmp24 = fcmp olt double %18, 0x43F0000000000000
  br i1 %cmp24, label %if.then26, label %if.else28

if.then26:                                        ; preds = %sw.bb20
  %19 = load double, double* %mem, align 8, !tbaa !57
  %conv27 = fptoui double %19 to i64
  store i64 %conv27, i64* %n, align 8, !tbaa !14
  store i32 0, i32* %e, align 4, !tbaa !13
  br label %if.end29

if.else28:                                        ; preds = %sw.bb20
  store i32 1, i32* %e, align 4, !tbaa !13
  br label %if.end29

if.end29:                                         ; preds = %if.else28, %if.then26
  %20 = bitcast double* %mem to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %20) #13
  br label %sw.epilog

sw.epilog:                                        ; preds = %if.then17, %if.end29, %sw.bb
  br label %if.end30

if.end30:                                         ; preds = %sw.epilog, %land.lhs.true15, %land.lhs.true9, %if.end6
  %21 = load i32, i32* %e, align 4, !tbaa !13
  %cmp31 = icmp eq i32 %21, 0
  br i1 %cmp31, label %if.then33, label %if.end48

if.then33:                                        ; preds = %if.end30
  %22 = load i64, i64* %n, align 8, !tbaa !14
  %23 = load i64, i64* @sort_size, align 8, !tbaa !14
  %cmp34 = icmp ult i64 %22, %23
  br i1 %cmp34, label %if.then36, label %if.end37

if.then36:                                        ; preds = %if.then33
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end37:                                         ; preds = %if.then33
  %24 = load i64, i64* %n, align 8, !tbaa !14
  store i64 %24, i64* @sort_size, align 8, !tbaa !14
  %25 = load i64, i64* @sort_size, align 8, !tbaa !14
  %26 = load i64, i64* %n, align 8, !tbaa !14
  %cmp38 = icmp eq i64 %25, %26
  br i1 %cmp38, label %if.then40, label %if.end47

if.then40:                                        ; preds = %if.end37
  %27 = load i64, i64* @sort_size, align 8, !tbaa !14
  %28 = load i32, i32* @nmerge, align 4, !tbaa !2
  %conv41 = zext i32 %28 to i64
  %mul42 = mul i64 %conv41, 34
  %cmp43 = icmp ugt i64 %27, %mul42
  br i1 %cmp43, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then40
  %29 = load i64, i64* @sort_size, align 8, !tbaa !14
  br label %cond.end

cond.false:                                       ; preds = %if.then40
  %30 = load i32, i32* @nmerge, align 4, !tbaa !2
  %conv45 = zext i32 %30 to i64
  %mul46 = mul i64 %conv45, 34
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %29, %cond.true ], [ %mul46, %cond.false ]
  store i64 %cond, i64* @sort_size, align 8, !tbaa !14
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end47:                                         ; preds = %if.end37
  store i32 1, i32* %e, align 4, !tbaa !13
  br label %if.end48

if.end48:                                         ; preds = %if.end47, %if.end30
  %31 = load i32, i32* %e, align 4, !tbaa !13
  %32 = load i32, i32* %oi.addr, align 4, !tbaa !2
  %33 = load i8, i8* %c.addr, align 1, !tbaa !13
  %34 = load i8*, i8** %s.addr, align 8, !tbaa !6
  call void @xstrtol_fatal(i32 %31, i32 %32, i8 signext %33, %struct.option* getelementptr inbounds ([31 x %struct.option], [31 x %struct.option]* @long_options, i64 0, i64 0), i8* %34) #24
  unreachable

cleanup:                                          ; preds = %cond.end, %if.then36
  %35 = bitcast i32* %e to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %35) #13
  %36 = bitcast i8** %suffix to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %36) #13
  %37 = bitcast i64* %n to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %37) #13
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @add_temp_dir(i8* %dir) #7 {
entry:
  %dir.addr = alloca i8*, align 8
  store i8* %dir, i8** %dir.addr, align 8, !tbaa !6
  %0 = load i64, i64* @temp_dir_count, align 8, !tbaa !14
  %1 = load i64, i64* @temp_dir_alloc, align 8, !tbaa !14
  %cmp = icmp eq i64 %0, %1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load i8**, i8*** @temp_dirs, align 8, !tbaa !6
  %3 = bitcast i8** %2 to i8*
  %call = call nonnull i8* @x2nrealloc(i8* %3, i64* @temp_dir_alloc, i64 8)
  %4 = bitcast i8* %call to i8**
  store i8** %4, i8*** @temp_dirs, align 8, !tbaa !6
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %5 = load i8*, i8** %dir.addr, align 8, !tbaa !6
  %6 = load i8**, i8*** @temp_dirs, align 8, !tbaa !6
  %7 = load i64, i64* @temp_dir_count, align 8, !tbaa !14
  %inc = add i64 %7, 1
  store i64 %inc, i64* @temp_dir_count, align 8, !tbaa !14
  %arrayidx = getelementptr inbounds i8*, i8** %6, i64 %7
  store i8* %5, i8** %arrayidx, align 8, !tbaa !6
  ret void
}

; Function Attrs: nounwind uwtable
define internal i64 @specify_nthreads(i32 %oi, i8 signext %c, i8* %s) #7 {
entry:
  %retval = alloca i64, align 8
  %oi.addr = alloca i32, align 4
  %c.addr = alloca i8, align 1
  %s.addr = alloca i8*, align 8
  %nthreads = alloca i64, align 8
  %e = alloca i32, align 4
  %cleanup.dest.slot = alloca i32, align 4
  store i32 %oi, i32* %oi.addr, align 4, !tbaa !2
  store i8 %c, i8* %c.addr, align 1, !tbaa !13
  store i8* %s, i8** %s.addr, align 8, !tbaa !6
  %0 = bitcast i64* %nthreads to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #13
  %1 = bitcast i32* %e to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %1) #13
  %2 = load i8*, i8** %s.addr, align 8, !tbaa !6
  %call = call i32 @xstrtoumax(i8* %2, i8** null, i32 10, i64* %nthreads, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.24, i64 0, i64 0))
  store i32 %call, i32* %e, align 4, !tbaa !13
  %3 = load i32, i32* %e, align 4, !tbaa !13
  %cmp = icmp eq i32 %3, 1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i64 -1, i64* %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %entry
  %4 = load i32, i32* %e, align 4, !tbaa !13
  %cmp1 = icmp ne i32 %4, 0
  br i1 %cmp1, label %if.then2, label %if.end3

if.then2:                                         ; preds = %if.end
  %5 = load i32, i32* %e, align 4, !tbaa !13
  %6 = load i32, i32* %oi.addr, align 4, !tbaa !2
  %7 = load i8, i8* %c.addr, align 1, !tbaa !13
  %8 = load i8*, i8** %s.addr, align 8, !tbaa !6
  call void @xstrtol_fatal(i32 %5, i32 %6, i8 signext %7, %struct.option* getelementptr inbounds ([31 x %struct.option], [31 x %struct.option]* @long_options, i64 0, i64 0), i8* %8) #24
  unreachable

if.end3:                                          ; preds = %if.end
  %9 = load i64, i64* %nthreads, align 8, !tbaa !14
  %cmp4 = icmp ult i64 -1, %9
  br i1 %cmp4, label %if.then5, label %if.end6

if.then5:                                         ; preds = %if.end3
  store i64 -1, i64* %nthreads, align 8, !tbaa !14
  br label %if.end6

if.end6:                                          ; preds = %if.then5, %if.end3
  %10 = load i64, i64* %nthreads, align 8, !tbaa !14
  %cmp7 = icmp eq i64 %10, 0
  br i1 %cmp7, label %if.then8, label %if.end9

if.then8:                                         ; preds = %if.end6
  call void (i32, i32, i8*, ...) @error(i32 2, i32 0, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.140, i64 0, i64 0))
  unreachable

if.end9:                                          ; preds = %if.end6
  %11 = load i64, i64* %nthreads, align 8, !tbaa !14
  store i64 %11, i64* %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end9, %if.then
  %12 = bitcast i32* %e to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %12) #13
  %13 = bitcast i64* %nthreads to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %13) #13
  %14 = load i64, i64* %retval, align 8
  ret i64 %14
}

; Function Attrs: nounwind uwtable
define internal %struct._IO_FILE* @xfopen(i8* %file, i8* %how) #7 {
entry:
  %file.addr = alloca i8*, align 8
  %how.addr = alloca i8*, align 8
  %fp = alloca %struct._IO_FILE*, align 8
  store i8* %file, i8** %file.addr, align 8, !tbaa !6
  store i8* %how, i8** %how.addr, align 8, !tbaa !6
  %0 = bitcast %struct._IO_FILE** %fp to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #13
  %1 = load i8*, i8** %file.addr, align 8, !tbaa !6
  %2 = load i8*, i8** %how.addr, align 8, !tbaa !6
  %call = call %struct._IO_FILE* @stream_open(i8* %1, i8* %2)
  store %struct._IO_FILE* %call, %struct._IO_FILE** %fp, align 8, !tbaa !6
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** %fp, align 8, !tbaa !6
  %tobool = icmp ne %struct._IO_FILE* %3, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %4 = load i8*, i8** %file.addr, align 8, !tbaa !6
  call void @sort_die(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.141, i64 0, i64 0), i8* %4)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** %fp, align 8, !tbaa !6
  %6 = bitcast %struct._IO_FILE** %fp to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %6) #13
  ret %struct._IO_FILE* %5
}

; Function Attrs: nounwind uwtable
define internal void @xfclose(%struct._IO_FILE* %fp, i8* %file) #7 {
entry:
  %fp.addr = alloca %struct._IO_FILE*, align 8
  %file.addr = alloca i8*, align 8
  store %struct._IO_FILE* %fp, %struct._IO_FILE** %fp.addr, align 8, !tbaa !6
  store i8* %file, i8** %file.addr, align 8, !tbaa !6
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** %fp.addr, align 8, !tbaa !6
  %call = call i32 @fileno(%struct._IO_FILE* %0) #13
  switch i32 %call, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ]

sw.bb:                                            ; preds = %entry
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** %fp.addr, align 8, !tbaa !6
  call void @clearerr_unlocked(%struct._IO_FILE* %1) #13
  br label %sw.epilog

sw.bb1:                                           ; preds = %entry
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** %fp.addr, align 8, !tbaa !6
  %call2 = call i32 @fflush_unlocked(%struct._IO_FILE* %2)
  %cmp = icmp ne i32 %call2, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %sw.bb1
  %3 = load i8*, i8** %file.addr, align 8, !tbaa !6
  call void @sort_die(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.144, i64 0, i64 0), i8* %3)
  br label %if.end

if.end:                                           ; preds = %if.then, %sw.bb1
  br label %sw.epilog

sw.default:                                       ; preds = %entry
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** %fp.addr, align 8, !tbaa !6
  %call3 = call i32 @rpl_fclose(%struct._IO_FILE* %4)
  %cmp4 = icmp ne i32 %call3, 0
  br i1 %cmp4, label %if.then5, label %if.end6

if.then5:                                         ; preds = %sw.default
  %5 = load i8*, i8** %file.addr, align 8, !tbaa !6
  call void @sort_die(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.63, i64 0, i64 0), i8* %5)
  br label %if.end6

if.end6:                                          ; preds = %if.then5, %sw.default
  br label %sw.epilog

sw.epilog:                                        ; preds = %if.end6, %if.end, %sw.bb
  ret void
}

; Function Attrs: nounwind uwtable
define internal zeroext i1 @default_key_compare(%struct.keyfield* %key) #7 {
entry:
  %key.addr = alloca %struct.keyfield*, align 8
  store %struct.keyfield* %key, %struct.keyfield** %key.addr, align 8, !tbaa !6
  %0 = load %struct.keyfield*, %struct.keyfield** %key.addr, align 8, !tbaa !6
  %ignore = getelementptr inbounds %struct.keyfield, %struct.keyfield* %0, i32 0, i32 4
  %1 = load i8*, i8** %ignore, align 8, !tbaa !35
  %tobool = icmp ne i8* %1, null
  br i1 %tobool, label %lor.end, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.keyfield*, %struct.keyfield** %key.addr, align 8, !tbaa !6
  %translate = getelementptr inbounds %struct.keyfield, %struct.keyfield* %2, i32 0, i32 5
  %3 = load i8*, i8** %translate, align 8, !tbaa !36
  %tobool1 = icmp ne i8* %3, null
  br i1 %tobool1, label %lor.end, label %lor.lhs.false2

lor.lhs.false2:                                   ; preds = %lor.lhs.false
  %4 = load %struct.keyfield*, %struct.keyfield** %key.addr, align 8, !tbaa !6
  %skipsblanks = getelementptr inbounds %struct.keyfield, %struct.keyfield* %4, i32 0, i32 6
  %5 = load i8, i8* %skipsblanks, align 8, !tbaa !37, !range !25
  %tobool3 = trunc i8 %5 to i1
  br i1 %tobool3, label %lor.end, label %lor.lhs.false4

lor.lhs.false4:                                   ; preds = %lor.lhs.false2
  %6 = load %struct.keyfield*, %struct.keyfield** %key.addr, align 8, !tbaa !6
  %skipeblanks = getelementptr inbounds %struct.keyfield, %struct.keyfield* %6, i32 0, i32 7
  %7 = load i8, i8* %skipeblanks, align 1, !tbaa !38, !range !25
  %tobool5 = trunc i8 %7 to i1
  br i1 %tobool5, label %lor.end, label %lor.lhs.false6

lor.lhs.false6:                                   ; preds = %lor.lhs.false4
  %8 = load %struct.keyfield*, %struct.keyfield** %key.addr, align 8, !tbaa !6
  %call = call zeroext i1 @key_numeric(%struct.keyfield* %8)
  br i1 %call, label %lor.end, label %lor.lhs.false7

lor.lhs.false7:                                   ; preds = %lor.lhs.false6
  %9 = load %struct.keyfield*, %struct.keyfield** %key.addr, align 8, !tbaa !6
  %month = getelementptr inbounds %struct.keyfield, %struct.keyfield* %9, i32 0, i32 12
  %10 = load i8, i8* %month, align 2, !tbaa !39, !range !25
  %tobool8 = trunc i8 %10 to i1
  br i1 %tobool8, label %lor.end, label %lor.lhs.false9

lor.lhs.false9:                                   ; preds = %lor.lhs.false7
  %11 = load %struct.keyfield*, %struct.keyfield** %key.addr, align 8, !tbaa !6
  %version = getelementptr inbounds %struct.keyfield, %struct.keyfield* %11, i32 0, i32 14
  %12 = load i8, i8* %version, align 8, !tbaa !43, !range !25
  %tobool10 = trunc i8 %12 to i1
  br i1 %tobool10, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %lor.lhs.false9
  %13 = load %struct.keyfield*, %struct.keyfield** %key.addr, align 8, !tbaa !6
  %random = getelementptr inbounds %struct.keyfield, %struct.keyfield* %13, i32 0, i32 9
  %14 = load i8, i8* %random, align 1, !tbaa !44, !range !25
  %tobool11 = trunc i8 %14 to i1
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %lor.lhs.false9, %lor.lhs.false7, %lor.lhs.false6, %lor.lhs.false4, %lor.lhs.false2, %lor.lhs.false, %entry
  %15 = phi i1 [ true, %lor.lhs.false9 ], [ true, %lor.lhs.false7 ], [ true, %lor.lhs.false6 ], [ true, %lor.lhs.false4 ], [ true, %lor.lhs.false2 ], [ true, %lor.lhs.false ], [ true, %entry ], [ %tobool11, %lor.rhs ]
  %lnot = xor i1 %15, true
  ret i1 %lnot
}

; Function Attrs: nounwind uwtable
define internal void @check_ordering_compatibility() #7 {
entry:
  %key = alloca %struct.keyfield*, align 8
  %opts = alloca [31 x i8], align 16
  %0 = bitcast %struct.keyfield** %key to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #13
  %1 = load %struct.keyfield*, %struct.keyfield** @keylist, align 8, !tbaa !6
  store %struct.keyfield* %1, %struct.keyfield** %key, align 8, !tbaa !6
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !tbaa !6
  %tobool = icmp ne %struct.keyfield* %2, null
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !tbaa !6
  %numeric = getelementptr inbounds %struct.keyfield, %struct.keyfield* %3, i32 0, i32 8
  %4 = load i8, i8* %numeric, align 2, !tbaa !40, !range !25
  %tobool1 = trunc i8 %4 to i1
  %conv = zext i1 %tobool1 to i32
  %5 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !tbaa !6
  %general_numeric = getelementptr inbounds %struct.keyfield, %struct.keyfield* %5, i32 0, i32 10
  %6 = load i8, i8* %general_numeric, align 4, !tbaa !41, !range !25
  %tobool2 = trunc i8 %6 to i1
  %conv3 = zext i1 %tobool2 to i32
  %add = add nsw i32 %conv, %conv3
  %7 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !tbaa !6
  %human_numeric = getelementptr inbounds %struct.keyfield, %struct.keyfield* %7, i32 0, i32 11
  %8 = load i8, i8* %human_numeric, align 1, !tbaa !42, !range !25
  %tobool4 = trunc i8 %8 to i1
  %conv5 = zext i1 %tobool4 to i32
  %add6 = add nsw i32 %add, %conv5
  %9 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !tbaa !6
  %month = getelementptr inbounds %struct.keyfield, %struct.keyfield* %9, i32 0, i32 12
  %10 = load i8, i8* %month, align 2, !tbaa !39, !range !25
  %tobool7 = trunc i8 %10 to i1
  %conv8 = zext i1 %tobool7 to i32
  %add9 = add nsw i32 %add6, %conv8
  %11 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !tbaa !6
  %version = getelementptr inbounds %struct.keyfield, %struct.keyfield* %11, i32 0, i32 14
  %12 = load i8, i8* %version, align 8, !tbaa !43, !range !25
  %tobool10 = trunc i8 %12 to i1
  %conv11 = zext i1 %tobool10 to i32
  %13 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !tbaa !6
  %random = getelementptr inbounds %struct.keyfield, %struct.keyfield* %13, i32 0, i32 9
  %14 = load i8, i8* %random, align 1, !tbaa !44, !range !25
  %tobool12 = trunc i8 %14 to i1
  %conv13 = zext i1 %tobool12 to i32
  %or = or i32 %conv11, %conv13
  %15 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !tbaa !6
  %ignore = getelementptr inbounds %struct.keyfield, %struct.keyfield* %15, i32 0, i32 4
  %16 = load i8*, i8** %ignore, align 8, !tbaa !35
  %tobool14 = icmp ne i8* %16, null
  %lnot = xor i1 %tobool14, true
  %lnot15 = xor i1 %lnot, true
  %lnot.ext = zext i1 %lnot15 to i32
  %or16 = or i32 %or, %lnot.ext
  %add17 = add nsw i32 %add9, %or16
  %cmp = icmp slt i32 1, %add17
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %17 = bitcast [31 x i8]* %opts to i8*
  call void @llvm.lifetime.start.p0i8(i64 31, i8* %17) #13
  %18 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !tbaa !6
  %reverse = getelementptr inbounds %struct.keyfield, %struct.keyfield* %18, i32 0, i32 13
  store i8 0, i8* %reverse, align 1, !tbaa !34
  %19 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !tbaa !6
  %skipeblanks = getelementptr inbounds %struct.keyfield, %struct.keyfield* %19, i32 0, i32 7
  store i8 0, i8* %skipeblanks, align 1, !tbaa !38
  %20 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !tbaa !6
  %skipsblanks = getelementptr inbounds %struct.keyfield, %struct.keyfield* %20, i32 0, i32 6
  store i8 0, i8* %skipsblanks, align 8, !tbaa !37
  %21 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !tbaa !6
  %arraydecay = getelementptr inbounds [31 x i8], [31 x i8]* %opts, i64 0, i64 0
  call void @key_to_opts(%struct.keyfield* %21, i8* %arraydecay)
  %arraydecay19 = getelementptr inbounds [31 x i8], [31 x i8]* %opts, i64 0, i64 0
  call void @incompatible_options(i8* %arraydecay19)
  %22 = bitcast [31 x i8]* %opts to i8*
  call void @llvm.lifetime.end.p0i8(i64 31, i8* %22) #13
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %23 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !tbaa !6
  %next = getelementptr inbounds %struct.keyfield, %struct.keyfield* %23, i32 0, i32 16
  %24 = load %struct.keyfield*, %struct.keyfield** %next, align 8, !tbaa !45
  store %struct.keyfield* %24, %struct.keyfield** %key, align 8, !tbaa !6
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %25 = bitcast %struct.keyfield** %key to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %25) #13
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @key_warnings(%struct.keyfield* %gkey, i1 zeroext %gkey_only) #7 {
entry:
  %gkey.addr = alloca %struct.keyfield*, align 8
  %gkey_only.addr = alloca i8, align 1
  %key = alloca %struct.keyfield*, align 8
  %ugkey = alloca %struct.keyfield, align 8
  %keynum = alloca i64, align 8
  %basic_numeric_field = alloca i8, align 1
  %general_numeric_field = alloca i8, align 1
  %basic_numeric_field_span = alloca i8, align 1
  %general_numeric_field_span = alloca i8, align 1
  %sword = alloca i64, align 8
  %eword = alloca i64, align 8
  %tmp = alloca [21 x i8], align 16
  %obuf = alloca [46 x i8], align 16
  %nbuf = alloca [47 x i8], align 16
  %po = alloca i8*, align 8
  %pn = alloca i8*, align 8
  %zero_width = alloca i8, align 1
  %implicit_skip = alloca i8, align 1
  %line_offset = alloca i8, align 1
  %sword93 = alloca i64, align 8
  %eword96 = alloca i64, align 8
  %number_locale_warned = alloca i8, align 1
  %.compoundliteral = alloca [2 x i8], align 1
  %.compoundliteral263 = alloca [2 x i8], align 1
  %.compoundliteral272 = alloca [2 x i8], align 1
  %.compoundliteral285 = alloca [2 x i8], align 1
  %.compoundliteral306 = alloca [2 x i8], align 1
  %ugkey_reverse = alloca i8, align 1
  %opts = alloca [31 x i8], align 16
  store %struct.keyfield* %gkey, %struct.keyfield** %gkey.addr, align 8, !tbaa !6
  %frombool = zext i1 %gkey_only to i8
  store i8 %frombool, i8* %gkey_only.addr, align 1, !tbaa !11
  %0 = bitcast %struct.keyfield** %key to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #13
  %1 = bitcast %struct.keyfield* %ugkey to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* %1) #13
  %2 = load %struct.keyfield*, %struct.keyfield** %gkey.addr, align 8, !tbaa !6
  %3 = bitcast %struct.keyfield* %ugkey to i8*
  %4 = bitcast %struct.keyfield* %2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %3, i8* align 8 %4, i64 72, i1 false), !tbaa.struct !59
  %5 = bitcast i64* %keynum to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %5) #13
  store i64 1, i64* %keynum, align 8, !tbaa !14
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %basic_numeric_field) #13
  store i8 0, i8* %basic_numeric_field, align 1, !tbaa !11
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %general_numeric_field) #13
  store i8 0, i8* %general_numeric_field, align 1, !tbaa !11
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %basic_numeric_field_span) #13
  store i8 0, i8* %basic_numeric_field_span, align 1, !tbaa !11
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %general_numeric_field_span) #13
  store i8 0, i8* %general_numeric_field_span, align 1, !tbaa !11
  %6 = load %struct.keyfield*, %struct.keyfield** @keylist, align 8, !tbaa !6
  store %struct.keyfield* %6, %struct.keyfield** %key, align 8, !tbaa !6
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %7 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !tbaa !6
  %tobool = icmp ne %struct.keyfield* %7, null
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %8 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !tbaa !6
  %call = call zeroext i1 @key_numeric(%struct.keyfield* %8)
  br i1 %call, label %if.then, label %if.end3

if.then:                                          ; preds = %for.body
  %9 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !tbaa !6
  %general_numeric = getelementptr inbounds %struct.keyfield, %struct.keyfield* %9, i32 0, i32 10
  %10 = load i8, i8* %general_numeric, align 4, !tbaa !41, !range !25
  %tobool1 = trunc i8 %10 to i1
  br i1 %tobool1, label %if.then2, label %if.else

if.then2:                                         ; preds = %if.then
  store i8 1, i8* %general_numeric_field, align 1, !tbaa !11
  br label %if.end

if.else:                                          ; preds = %if.then
  store i8 1, i8* %basic_numeric_field, align 1, !tbaa !11
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then2
  br label %if.end3

if.end3:                                          ; preds = %if.end, %for.body
  %11 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !tbaa !6
  %traditional_used = getelementptr inbounds %struct.keyfield, %struct.keyfield* %11, i32 0, i32 15
  %12 = load i8, i8* %traditional_used, align 1, !tbaa !29, !range !25
  %tobool4 = trunc i8 %12 to i1
  br i1 %tobool4, label %if.then5, label %if.end40

if.then5:                                         ; preds = %if.end3
  %13 = bitcast i64* %sword to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %13) #13
  %14 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !tbaa !6
  %sword6 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %14, i32 0, i32 0
  %15 = load i64, i64* %sword6, align 8, !tbaa !23
  store i64 %15, i64* %sword, align 8, !tbaa !14
  %16 = bitcast i64* %eword to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %16) #13
  %17 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !tbaa !6
  %eword7 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %17, i32 0, i32 2
  %18 = load i64, i64* %eword7, align 8, !tbaa !28
  store i64 %18, i64* %eword, align 8, !tbaa !14
  %19 = bitcast [21 x i8]* %tmp to i8*
  call void @llvm.lifetime.start.p0i8(i64 21, i8* %19) #13
  %20 = bitcast [46 x i8]* %obuf to i8*
  call void @llvm.lifetime.start.p0i8(i64 46, i8* %20) #13
  %21 = bitcast [47 x i8]* %nbuf to i8*
  call void @llvm.lifetime.start.p0i8(i64 47, i8* %21) #13
  %22 = bitcast i8** %po to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %22) #13
  %arraydecay = getelementptr inbounds [46 x i8], [46 x i8]* %obuf, i64 0, i64 0
  store i8* %arraydecay, i8** %po, align 8, !tbaa !6
  %23 = bitcast i8** %pn to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %23) #13
  %arraydecay8 = getelementptr inbounds [47 x i8], [47 x i8]* %nbuf, i64 0, i64 0
  store i8* %arraydecay8, i8** %pn, align 8, !tbaa !6
  %24 = load i64, i64* %sword, align 8, !tbaa !14
  %cmp = icmp eq i64 %24, -1
  br i1 %cmp, label %if.then9, label %if.end10

if.then9:                                         ; preds = %if.then5
  %25 = load i64, i64* %sword, align 8, !tbaa !14
  %inc = add i64 %25, 1
  store i64 %inc, i64* %sword, align 8, !tbaa !14
  br label %if.end10

if.end10:                                         ; preds = %if.then9, %if.then5
  %26 = load i8*, i8** %po, align 8, !tbaa !6
  %call11 = call i8* @stpcpy(i8* %26, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.145, i64 0, i64 0)) #13
  %27 = load i64, i64* %sword, align 8, !tbaa !14
  %arraydecay12 = getelementptr inbounds [21 x i8], [21 x i8]* %tmp, i64 0, i64 0
  %call13 = call i8* @umaxtostr(i64 %27, i8* %arraydecay12)
  %call14 = call i8* @stpcpy(i8* %call11, i8* %call13) #13
  store i8* %call14, i8** %po, align 8, !tbaa !6
  %28 = load i8*, i8** %pn, align 8, !tbaa !6
  %call15 = call i8* @stpcpy(i8* %28, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.146, i64 0, i64 0)) #13
  %29 = load i64, i64* %sword, align 8, !tbaa !14
  %add = add i64 %29, 1
  %arraydecay16 = getelementptr inbounds [21 x i8], [21 x i8]* %tmp, i64 0, i64 0
  %call17 = call i8* @umaxtostr(i64 %add, i8* %arraydecay16)
  %call18 = call i8* @stpcpy(i8* %call15, i8* %call17) #13
  store i8* %call18, i8** %pn, align 8, !tbaa !6
  %30 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !tbaa !6
  %eword19 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %30, i32 0, i32 2
  %31 = load i64, i64* %eword19, align 8, !tbaa !28
  %cmp20 = icmp ne i64 %31, -1
  br i1 %cmp20, label %if.then21, label %if.end35

if.then21:                                        ; preds = %if.end10
  %32 = load i8*, i8** %po, align 8, !tbaa !6
  %call22 = call i8* @stpcpy(i8* %32, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.147, i64 0, i64 0)) #13
  %33 = load i64, i64* %eword, align 8, !tbaa !14
  %add23 = add i64 %33, 1
  %arraydecay24 = getelementptr inbounds [21 x i8], [21 x i8]* %tmp, i64 0, i64 0
  %call25 = call i8* @umaxtostr(i64 %add23, i8* %arraydecay24)
  %call26 = call i8* @stpcpy(i8* %call22, i8* %call25) #13
  %34 = load i8*, i8** %pn, align 8, !tbaa !6
  %call27 = call i8* @stpcpy(i8* %34, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.148, i64 0, i64 0)) #13
  %35 = load i64, i64* %eword, align 8, !tbaa !14
  %add28 = add i64 %35, 1
  %36 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !tbaa !6
  %echar = getelementptr inbounds %struct.keyfield, %struct.keyfield* %36, i32 0, i32 3
  %37 = load i64, i64* %echar, align 8, !tbaa !27
  %cmp29 = icmp eq i64 %37, -1
  %conv = zext i1 %cmp29 to i32
  %conv30 = sext i32 %conv to i64
  %add31 = add i64 %add28, %conv30
  %arraydecay32 = getelementptr inbounds [21 x i8], [21 x i8]* %tmp, i64 0, i64 0
  %call33 = call i8* @umaxtostr(i64 %add31, i8* %arraydecay32)
  %call34 = call i8* @stpcpy(i8* %call27, i8* %call33) #13
  br label %if.end35

if.end35:                                         ; preds = %if.then21, %if.end10
  %arraydecay36 = getelementptr inbounds [46 x i8], [46 x i8]* %obuf, i64 0, i64 0
  %call37 = call i8* @quote_n(i32 0, i8* %arraydecay36)
  %arraydecay38 = getelementptr inbounds [47 x i8], [47 x i8]* %nbuf, i64 0, i64 0
  %call39 = call i8* @quote_n(i32 1, i8* %arraydecay38)
  call void (i32, i32, i8*, ...) @error(i32 0, i32 0, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.149, i64 0, i64 0), i8* %call37, i8* %call39)
  %38 = bitcast i8** %pn to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %38) #13
  %39 = bitcast i8** %po to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %39) #13
  %40 = bitcast [47 x i8]* %nbuf to i8*
  call void @llvm.lifetime.end.p0i8(i64 47, i8* %40) #13
  %41 = bitcast [46 x i8]* %obuf to i8*
  call void @llvm.lifetime.end.p0i8(i64 46, i8* %41) #13
  %42 = bitcast [21 x i8]* %tmp to i8*
  call void @llvm.lifetime.end.p0i8(i64 21, i8* %42) #13
  %43 = bitcast i64* %eword to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %43) #13
  %44 = bitcast i64* %sword to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %44) #13
  br label %if.end40

if.end40:                                         ; preds = %if.end35, %if.end3
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %zero_width) #13
  %45 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !tbaa !6
  %sword41 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %45, i32 0, i32 0
  %46 = load i64, i64* %sword41, align 8, !tbaa !23
  %cmp42 = icmp ne i64 %46, -1
  br i1 %cmp42, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %if.end40
  %47 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !tbaa !6
  %eword44 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %47, i32 0, i32 2
  %48 = load i64, i64* %eword44, align 8, !tbaa !28
  %49 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !tbaa !6
  %sword45 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %49, i32 0, i32 0
  %50 = load i64, i64* %sword45, align 8, !tbaa !23
  %cmp46 = icmp ult i64 %48, %50
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.end40
  %51 = phi i1 [ false, %if.end40 ], [ %cmp46, %land.rhs ]
  %frombool48 = zext i1 %51 to i8
  store i8 %frombool48, i8* %zero_width, align 1, !tbaa !11
  %52 = load i8, i8* %zero_width, align 1, !tbaa !11, !range !25
  %tobool49 = trunc i8 %52 to i1
  br i1 %tobool49, label %if.then50, label %if.end51

if.then50:                                        ; preds = %land.end
  %53 = load i64, i64* %keynum, align 8, !tbaa !14
  call void (i32, i32, i8*, ...) @error(i32 0, i32 0, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.150, i64 0, i64 0), i64 %53)
  br label %if.end51

if.end51:                                         ; preds = %if.then50, %land.end
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %implicit_skip) #13
  %54 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !tbaa !6
  %call52 = call zeroext i1 @key_numeric(%struct.keyfield* %54)
  br i1 %call52, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %if.end51
  %55 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !tbaa !6
  %month = getelementptr inbounds %struct.keyfield, %struct.keyfield* %55, i32 0, i32 12
  %56 = load i8, i8* %month, align 2, !tbaa !39, !range !25
  %tobool54 = trunc i8 %56 to i1
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %if.end51
  %57 = phi i1 [ true, %if.end51 ], [ %tobool54, %lor.rhs ]
  %frombool56 = zext i1 %57 to i8
  store i8 %frombool56, i8* %implicit_skip, align 1, !tbaa !11
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %line_offset) #13
  %58 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !tbaa !6
  %eword57 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %58, i32 0, i32 2
  %59 = load i64, i64* %eword57, align 8, !tbaa !28
  %cmp58 = icmp eq i64 %59, 0
  br i1 %cmp58, label %land.rhs60, label %land.end64

land.rhs60:                                       ; preds = %lor.end
  %60 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !tbaa !6
  %echar61 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %60, i32 0, i32 3
  %61 = load i64, i64* %echar61, align 8, !tbaa !27
  %cmp62 = icmp ne i64 %61, 0
  br label %land.end64

land.end64:                                       ; preds = %land.rhs60, %lor.end
  %62 = phi i1 [ false, %lor.end ], [ %cmp62, %land.rhs60 ]
  %frombool65 = zext i1 %62 to i8
  store i8 %frombool65, i8* %line_offset, align 1, !tbaa !11
  %63 = load i8, i8* %zero_width, align 1, !tbaa !11, !range !25
  %tobool66 = trunc i8 %63 to i1
  br i1 %tobool66, label %if.end87, label %land.lhs.true

land.lhs.true:                                    ; preds = %land.end64
  %64 = load i8, i8* %gkey_only.addr, align 1, !tbaa !11, !range !25
  %tobool67 = trunc i8 %64 to i1
  br i1 %tobool67, label %if.end87, label %land.lhs.true68

land.lhs.true68:                                  ; preds = %land.lhs.true
  %65 = load i32, i32* @tab, align 4, !tbaa !2
  %cmp69 = icmp eq i32 %65, 128
  br i1 %cmp69, label %land.lhs.true71, label %if.end87

land.lhs.true71:                                  ; preds = %land.lhs.true68
  %66 = load i8, i8* %line_offset, align 1, !tbaa !11, !range !25
  %tobool72 = trunc i8 %66 to i1
  br i1 %tobool72, label %if.end87, label %land.lhs.true73

land.lhs.true73:                                  ; preds = %land.lhs.true71
  %67 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !tbaa !6
  %skipsblanks = getelementptr inbounds %struct.keyfield, %struct.keyfield* %67, i32 0, i32 6
  %68 = load i8, i8* %skipsblanks, align 8, !tbaa !37, !range !25
  %tobool74 = trunc i8 %68 to i1
  br i1 %tobool74, label %lor.lhs.false, label %land.lhs.true75

land.lhs.true75:                                  ; preds = %land.lhs.true73
  %69 = load i8, i8* %implicit_skip, align 1, !tbaa !11, !range !25
  %tobool76 = trunc i8 %69 to i1
  br i1 %tobool76, label %lor.lhs.false, label %if.then86

lor.lhs.false:                                    ; preds = %land.lhs.true75, %land.lhs.true73
  %70 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !tbaa !6
  %skipsblanks77 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %70, i32 0, i32 6
  %71 = load i8, i8* %skipsblanks77, align 8, !tbaa !37, !range !25
  %tobool78 = trunc i8 %71 to i1
  br i1 %tobool78, label %lor.lhs.false81, label %land.lhs.true79

land.lhs.true79:                                  ; preds = %lor.lhs.false
  %72 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !tbaa !6
  %schar = getelementptr inbounds %struct.keyfield, %struct.keyfield* %72, i32 0, i32 1
  %73 = load i64, i64* %schar, align 8, !tbaa !26
  %tobool80 = icmp ne i64 %73, 0
  br i1 %tobool80, label %if.then86, label %lor.lhs.false81

lor.lhs.false81:                                  ; preds = %land.lhs.true79, %lor.lhs.false
  %74 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !tbaa !6
  %skipeblanks = getelementptr inbounds %struct.keyfield, %struct.keyfield* %74, i32 0, i32 7
  %75 = load i8, i8* %skipeblanks, align 1, !tbaa !38, !range !25
  %tobool82 = trunc i8 %75 to i1
  br i1 %tobool82, label %if.end87, label %land.lhs.true83

land.lhs.true83:                                  ; preds = %lor.lhs.false81
  %76 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !tbaa !6
  %echar84 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %76, i32 0, i32 3
  %77 = load i64, i64* %echar84, align 8, !tbaa !27
  %tobool85 = icmp ne i64 %77, 0
  br i1 %tobool85, label %if.then86, label %if.end87

if.then86:                                        ; preds = %land.lhs.true83, %land.lhs.true79, %land.lhs.true75
  %78 = load i64, i64* %keynum, align 8, !tbaa !14
  call void (i32, i32, i8*, ...) @error(i32 0, i32 0, i8* getelementptr inbounds ([72 x i8], [72 x i8]* @.str.151, i64 0, i64 0), i64 %78)
  br label %if.end87

if.end87:                                         ; preds = %if.then86, %land.lhs.true83, %lor.lhs.false81, %land.lhs.true71, %land.lhs.true68, %land.lhs.true, %land.end64
  %79 = load i8, i8* %gkey_only.addr, align 1, !tbaa !11, !range !25
  %tobool88 = trunc i8 %79 to i1
  br i1 %tobool88, label %if.end114, label %land.lhs.true89

land.lhs.true89:                                  ; preds = %if.end87
  %80 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !tbaa !6
  %call90 = call zeroext i1 @key_numeric(%struct.keyfield* %80)
  br i1 %call90, label %if.then92, label %if.end114

if.then92:                                        ; preds = %land.lhs.true89
  %81 = bitcast i64* %sword93 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %81) #13
  %82 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !tbaa !6
  %sword94 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %82, i32 0, i32 0
  %83 = load i64, i64* %sword94, align 8, !tbaa !23
  %add95 = add i64 %83, 1
  store i64 %add95, i64* %sword93, align 8, !tbaa !14
  %84 = bitcast i64* %eword96 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %84) #13
  %85 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !tbaa !6
  %eword97 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %85, i32 0, i32 2
  %86 = load i64, i64* %eword97, align 8, !tbaa !28
  %add98 = add i64 %86, 1
  store i64 %add98, i64* %eword96, align 8, !tbaa !14
  %87 = load i64, i64* %sword93, align 8, !tbaa !14
  %tobool99 = icmp ne i64 %87, 0
  br i1 %tobool99, label %if.end102, label %if.then100

if.then100:                                       ; preds = %if.then92
  %88 = load i64, i64* %sword93, align 8, !tbaa !14
  %inc101 = add i64 %88, 1
  store i64 %inc101, i64* %sword93, align 8, !tbaa !14
  br label %if.end102

if.end102:                                        ; preds = %if.then100, %if.then92
  %89 = load i64, i64* %eword96, align 8, !tbaa !14
  %tobool103 = icmp ne i64 %89, 0
  br i1 %tobool103, label %lor.lhs.false104, label %if.then107

lor.lhs.false104:                                 ; preds = %if.end102
  %90 = load i64, i64* %sword93, align 8, !tbaa !14
  %91 = load i64, i64* %eword96, align 8, !tbaa !14
  %cmp105 = icmp ult i64 %90, %91
  br i1 %cmp105, label %if.then107, label %if.end113

if.then107:                                       ; preds = %lor.lhs.false104, %if.end102
  %92 = load i64, i64* %keynum, align 8, !tbaa !14
  call void (i32, i32, i8*, ...) @error(i32 0, i32 0, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.152, i64 0, i64 0), i64 %92)
  %93 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !tbaa !6
  %general_numeric108 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %93, i32 0, i32 10
  %94 = load i8, i8* %general_numeric108, align 4, !tbaa !41, !range !25
  %tobool109 = trunc i8 %94 to i1
  br i1 %tobool109, label %if.then110, label %if.else111

if.then110:                                       ; preds = %if.then107
  store i8 1, i8* %general_numeric_field_span, align 1, !tbaa !11
  br label %if.end112

if.else111:                                       ; preds = %if.then107
  store i8 1, i8* %basic_numeric_field_span, align 1, !tbaa !11
  br label %if.end112

if.end112:                                        ; preds = %if.else111, %if.then110
  br label %if.end113

if.end113:                                        ; preds = %if.end112, %lor.lhs.false104
  %95 = bitcast i64* %eword96 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %95) #13
  %96 = bitcast i64* %sword93 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %96) #13
  br label %if.end114

if.end114:                                        ; preds = %if.end113, %land.lhs.true89, %if.end87
  %ignore = getelementptr inbounds %struct.keyfield, %struct.keyfield* %ugkey, i32 0, i32 4
  %97 = load i8*, i8** %ignore, align 8, !tbaa !35
  %tobool115 = icmp ne i8* %97, null
  br i1 %tobool115, label %land.lhs.true116, label %if.end123

land.lhs.true116:                                 ; preds = %if.end114
  %ignore117 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %ugkey, i32 0, i32 4
  %98 = load i8*, i8** %ignore117, align 8, !tbaa !35
  %99 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !tbaa !6
  %ignore118 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %99, i32 0, i32 4
  %100 = load i8*, i8** %ignore118, align 8, !tbaa !35
  %cmp119 = icmp eq i8* %98, %100
  br i1 %cmp119, label %if.then121, label %if.end123

if.then121:                                       ; preds = %land.lhs.true116
  %ignore122 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %ugkey, i32 0, i32 4
  store i8* null, i8** %ignore122, align 8, !tbaa !35
  br label %if.end123

if.end123:                                        ; preds = %if.then121, %land.lhs.true116, %if.end114
  %translate = getelementptr inbounds %struct.keyfield, %struct.keyfield* %ugkey, i32 0, i32 5
  %101 = load i8*, i8** %translate, align 8, !tbaa !36
  %tobool124 = icmp ne i8* %101, null
  br i1 %tobool124, label %land.lhs.true125, label %if.end132

land.lhs.true125:                                 ; preds = %if.end123
  %translate126 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %ugkey, i32 0, i32 5
  %102 = load i8*, i8** %translate126, align 8, !tbaa !36
  %103 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !tbaa !6
  %translate127 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %103, i32 0, i32 5
  %104 = load i8*, i8** %translate127, align 8, !tbaa !36
  %cmp128 = icmp eq i8* %102, %104
  br i1 %cmp128, label %if.then130, label %if.end132

if.then130:                                       ; preds = %land.lhs.true125
  %translate131 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %ugkey, i32 0, i32 5
  store i8* null, i8** %translate131, align 8, !tbaa !36
  br label %if.end132

if.end132:                                        ; preds = %if.then130, %land.lhs.true125, %if.end123
  %105 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !tbaa !6
  %skipsblanks133 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %105, i32 0, i32 6
  %106 = load i8, i8* %skipsblanks133, align 8, !tbaa !37, !range !25
  %tobool134 = trunc i8 %106 to i1
  %lnot = xor i1 %tobool134, true
  %lnot.ext = zext i1 %lnot to i32
  %skipsblanks135 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %ugkey, i32 0, i32 6
  %107 = load i8, i8* %skipsblanks135, align 8, !tbaa !37, !range !25
  %tobool136 = trunc i8 %107 to i1
  %conv137 = zext i1 %tobool136 to i32
  %and = and i32 %conv137, %lnot.ext
  %tobool138 = icmp ne i32 %and, 0
  %frombool139 = zext i1 %tobool138 to i8
  store i8 %frombool139, i8* %skipsblanks135, align 8, !tbaa !37
  %108 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !tbaa !6
  %skipeblanks140 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %108, i32 0, i32 7
  %109 = load i8, i8* %skipeblanks140, align 1, !tbaa !38, !range !25
  %tobool141 = trunc i8 %109 to i1
  %lnot142 = xor i1 %tobool141, true
  %lnot.ext143 = zext i1 %lnot142 to i32
  %skipeblanks144 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %ugkey, i32 0, i32 7
  %110 = load i8, i8* %skipeblanks144, align 1, !tbaa !38, !range !25
  %tobool145 = trunc i8 %110 to i1
  %conv146 = zext i1 %tobool145 to i32
  %and147 = and i32 %conv146, %lnot.ext143
  %tobool148 = icmp ne i32 %and147, 0
  %frombool149 = zext i1 %tobool148 to i8
  store i8 %frombool149, i8* %skipeblanks144, align 1, !tbaa !38
  %111 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !tbaa !6
  %month150 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %111, i32 0, i32 12
  %112 = load i8, i8* %month150, align 2, !tbaa !39, !range !25
  %tobool151 = trunc i8 %112 to i1
  %lnot152 = xor i1 %tobool151, true
  %lnot.ext153 = zext i1 %lnot152 to i32
  %month154 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %ugkey, i32 0, i32 12
  %113 = load i8, i8* %month154, align 2, !tbaa !39, !range !25
  %tobool155 = trunc i8 %113 to i1
  %conv156 = zext i1 %tobool155 to i32
  %and157 = and i32 %conv156, %lnot.ext153
  %tobool158 = icmp ne i32 %and157, 0
  %frombool159 = zext i1 %tobool158 to i8
  store i8 %frombool159, i8* %month154, align 2, !tbaa !39
  %114 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !tbaa !6
  %numeric = getelementptr inbounds %struct.keyfield, %struct.keyfield* %114, i32 0, i32 8
  %115 = load i8, i8* %numeric, align 2, !tbaa !40, !range !25
  %tobool160 = trunc i8 %115 to i1
  %lnot161 = xor i1 %tobool160, true
  %lnot.ext162 = zext i1 %lnot161 to i32
  %numeric163 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %ugkey, i32 0, i32 8
  %116 = load i8, i8* %numeric163, align 2, !tbaa !40, !range !25
  %tobool164 = trunc i8 %116 to i1
  %conv165 = zext i1 %tobool164 to i32
  %and166 = and i32 %conv165, %lnot.ext162
  %tobool167 = icmp ne i32 %and166, 0
  %frombool168 = zext i1 %tobool167 to i8
  store i8 %frombool168, i8* %numeric163, align 2, !tbaa !40
  %117 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !tbaa !6
  %general_numeric169 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %117, i32 0, i32 10
  %118 = load i8, i8* %general_numeric169, align 4, !tbaa !41, !range !25
  %tobool170 = trunc i8 %118 to i1
  %lnot171 = xor i1 %tobool170, true
  %lnot.ext172 = zext i1 %lnot171 to i32
  %general_numeric173 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %ugkey, i32 0, i32 10
  %119 = load i8, i8* %general_numeric173, align 4, !tbaa !41, !range !25
  %tobool174 = trunc i8 %119 to i1
  %conv175 = zext i1 %tobool174 to i32
  %and176 = and i32 %conv175, %lnot.ext172
  %tobool177 = icmp ne i32 %and176, 0
  %frombool178 = zext i1 %tobool177 to i8
  store i8 %frombool178, i8* %general_numeric173, align 4, !tbaa !41
  %120 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !tbaa !6
  %human_numeric = getelementptr inbounds %struct.keyfield, %struct.keyfield* %120, i32 0, i32 11
  %121 = load i8, i8* %human_numeric, align 1, !tbaa !42, !range !25
  %tobool179 = trunc i8 %121 to i1
  %lnot180 = xor i1 %tobool179, true
  %lnot.ext181 = zext i1 %lnot180 to i32
  %human_numeric182 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %ugkey, i32 0, i32 11
  %122 = load i8, i8* %human_numeric182, align 1, !tbaa !42, !range !25
  %tobool183 = trunc i8 %122 to i1
  %conv184 = zext i1 %tobool183 to i32
  %and185 = and i32 %conv184, %lnot.ext181
  %tobool186 = icmp ne i32 %and185, 0
  %frombool187 = zext i1 %tobool186 to i8
  store i8 %frombool187, i8* %human_numeric182, align 1, !tbaa !42
  %123 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !tbaa !6
  %random = getelementptr inbounds %struct.keyfield, %struct.keyfield* %123, i32 0, i32 9
  %124 = load i8, i8* %random, align 1, !tbaa !44, !range !25
  %tobool188 = trunc i8 %124 to i1
  %lnot189 = xor i1 %tobool188, true
  %lnot.ext190 = zext i1 %lnot189 to i32
  %random191 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %ugkey, i32 0, i32 9
  %125 = load i8, i8* %random191, align 1, !tbaa !44, !range !25
  %tobool192 = trunc i8 %125 to i1
  %conv193 = zext i1 %tobool192 to i32
  %and194 = and i32 %conv193, %lnot.ext190
  %tobool195 = icmp ne i32 %and194, 0
  %frombool196 = zext i1 %tobool195 to i8
  store i8 %frombool196, i8* %random191, align 1, !tbaa !44
  %126 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !tbaa !6
  %version = getelementptr inbounds %struct.keyfield, %struct.keyfield* %126, i32 0, i32 14
  %127 = load i8, i8* %version, align 8, !tbaa !43, !range !25
  %tobool197 = trunc i8 %127 to i1
  %lnot198 = xor i1 %tobool197, true
  %lnot.ext199 = zext i1 %lnot198 to i32
  %version200 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %ugkey, i32 0, i32 14
  %128 = load i8, i8* %version200, align 8, !tbaa !43, !range !25
  %tobool201 = trunc i8 %128 to i1
  %conv202 = zext i1 %tobool201 to i32
  %and203 = and i32 %conv202, %lnot.ext199
  %tobool204 = icmp ne i32 %and203, 0
  %frombool205 = zext i1 %tobool204 to i8
  store i8 %frombool205, i8* %version200, align 8, !tbaa !43
  %129 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !tbaa !6
  %reverse = getelementptr inbounds %struct.keyfield, %struct.keyfield* %129, i32 0, i32 13
  %130 = load i8, i8* %reverse, align 1, !tbaa !34, !range !25
  %tobool206 = trunc i8 %130 to i1
  %lnot207 = xor i1 %tobool206, true
  %lnot.ext208 = zext i1 %lnot207 to i32
  %reverse209 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %ugkey, i32 0, i32 13
  %131 = load i8, i8* %reverse209, align 1, !tbaa !34, !range !25
  %tobool210 = trunc i8 %131 to i1
  %conv211 = zext i1 %tobool210 to i32
  %and212 = and i32 %conv211, %lnot.ext208
  %tobool213 = icmp ne i32 %and212, 0
  %frombool214 = zext i1 %tobool213 to i8
  store i8 %frombool214, i8* %reverse209, align 1, !tbaa !34
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %line_offset) #13
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %implicit_skip) #13
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %zero_width) #13
  br label %for.inc

for.inc:                                          ; preds = %if.end132
  %132 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !tbaa !6
  %next = getelementptr inbounds %struct.keyfield, %struct.keyfield* %132, i32 0, i32 16
  %133 = load %struct.keyfield*, %struct.keyfield** %next, align 8, !tbaa !45
  store %struct.keyfield* %133, %struct.keyfield** %key, align 8, !tbaa !6
  %134 = load i64, i64* %keynum, align 8, !tbaa !14
  %inc215 = add i64 %134, 1
  store i64 %inc215, i64* %keynum, align 8, !tbaa !14
  br label %for.cond

for.end:                                          ; preds = %for.cond
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %number_locale_warned) #13
  store i8 0, i8* %number_locale_warned, align 1, !tbaa !11
  %135 = load i8, i8* %basic_numeric_field_span, align 1, !tbaa !11, !range !25
  %tobool216 = trunc i8 %135 to i1
  br i1 %tobool216, label %if.then217, label %if.end237

if.then217:                                       ; preds = %for.end
  %136 = load i32, i32* @tab, align 4, !tbaa !2
  %cmp218 = icmp eq i32 %136, 128
  br i1 %cmp218, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then217
  %137 = load i32, i32* @thousands_sep, align 4, !tbaa !2
  %cmp220 = icmp ne i32 %137, 128
  br i1 %cmp220, label %land.lhs.true222, label %if.end236

land.lhs.true222:                                 ; preds = %cond.true
  %call223 = call i16** @__ctype_b_loc() #26
  %138 = load i16*, i16** %call223, align 8, !tbaa !6
  %139 = load i32, i32* @thousands_sep, align 4, !tbaa !2
  %conv224 = trunc i32 %139 to i8
  %call225 = call zeroext i8 @to_uchar(i8 signext %conv224)
  %conv226 = zext i8 %call225 to i32
  %idxprom = sext i32 %conv226 to i64
  %arrayidx = getelementptr inbounds i16, i16* %138, i64 %idxprom
  %140 = load i16, i16* %arrayidx, align 2, !tbaa !48
  %conv227 = zext i16 %140 to i32
  %and228 = and i32 %conv227, 1
  %tobool229 = icmp ne i32 %and228, 0
  br i1 %tobool229, label %if.then232, label %if.end236

cond.false:                                       ; preds = %if.then217
  %141 = load i32, i32* @tab, align 4, !tbaa !2
  %142 = load i32, i32* @thousands_sep, align 4, !tbaa !2
  %cmp230 = icmp eq i32 %141, %142
  br i1 %cmp230, label %if.then232, label %if.end236

if.then232:                                       ; preds = %cond.false, %land.lhs.true222
  %arrayinit.begin = getelementptr inbounds [2 x i8], [2 x i8]* %.compoundliteral, i64 0, i64 0
  %143 = load i32, i32* @thousands_sep, align 4, !tbaa !2
  %conv233 = trunc i32 %143 to i8
  store i8 %conv233, i8* %arrayinit.begin, align 1, !tbaa !13
  %arrayinit.element = getelementptr inbounds i8, i8* %arrayinit.begin, i64 1
  store i8 0, i8* %arrayinit.element, align 1, !tbaa !13
  %arraydecay234 = getelementptr inbounds [2 x i8], [2 x i8]* %.compoundliteral, i64 0, i64 0
  %call235 = call i8* @quote(i8* %arraydecay234)
  call void (i32, i32, i8*, ...) @error(i32 0, i32 0, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.153, i64 0, i64 0), i8* %call235)
  store i8 1, i8* %number_locale_warned, align 1, !tbaa !11
  br label %if.end236

if.end236:                                        ; preds = %if.then232, %cond.false, %land.lhs.true222, %cond.true
  br label %if.end237

if.end237:                                        ; preds = %if.end236, %for.end
  %144 = load i8, i8* %basic_numeric_field_span, align 1, !tbaa !11, !range !25
  %tobool238 = trunc i8 %144 to i1
  br i1 %tobool238, label %if.then243, label %lor.lhs.false240

lor.lhs.false240:                                 ; preds = %if.end237
  %145 = load i8, i8* %general_numeric_field_span, align 1, !tbaa !11, !range !25
  %tobool241 = trunc i8 %145 to i1
  br i1 %tobool241, label %if.then243, label %if.end294

if.then243:                                       ; preds = %lor.lhs.false240, %if.end237
  %146 = load i32, i32* @tab, align 4, !tbaa !2
  %cmp244 = icmp eq i32 %146, 128
  br i1 %cmp244, label %cond.true246, label %cond.false258

cond.true246:                                     ; preds = %if.then243
  %147 = load i32, i32* @thousands_sep, align 4, !tbaa !2
  %cmp247 = icmp ne i32 %147, 128
  br i1 %cmp247, label %land.lhs.true249, label %if.else268

land.lhs.true249:                                 ; preds = %cond.true246
  %call250 = call i16** @__ctype_b_loc() #26
  %148 = load i16*, i16** %call250, align 8, !tbaa !6
  %149 = load i8, i8* @decimal_point, align 1, !tbaa !13
  %call251 = call zeroext i8 @to_uchar(i8 signext %149)
  %conv252 = zext i8 %call251 to i32
  %idxprom253 = sext i32 %conv252 to i64
  %arrayidx254 = getelementptr inbounds i16, i16* %148, i64 %idxprom253
  %150 = load i16, i16* %arrayidx254, align 2, !tbaa !48
  %conv255 = zext i16 %150 to i32
  %and256 = and i32 %conv255, 1
  %tobool257 = icmp ne i32 %and256, 0
  br i1 %tobool257, label %if.then262, label %if.else268

cond.false258:                                    ; preds = %if.then243
  %151 = load i32, i32* @tab, align 4, !tbaa !2
  %152 = load i8, i8* @decimal_point, align 1, !tbaa !13
  %conv259 = sext i8 %152 to i32
  %cmp260 = icmp eq i32 %151, %conv259
  br i1 %cmp260, label %if.then262, label %if.else268

if.then262:                                       ; preds = %cond.false258, %land.lhs.true249
  %arrayinit.begin264 = getelementptr inbounds [2 x i8], [2 x i8]* %.compoundliteral263, i64 0, i64 0
  %153 = load i8, i8* @decimal_point, align 1, !tbaa !13
  store i8 %153, i8* %arrayinit.begin264, align 1, !tbaa !13
  %arrayinit.element265 = getelementptr inbounds i8, i8* %arrayinit.begin264, i64 1
  store i8 0, i8* %arrayinit.element265, align 1, !tbaa !13
  %arraydecay266 = getelementptr inbounds [2 x i8], [2 x i8]* %.compoundliteral263, i64 0, i64 0
  %call267 = call i8* @quote(i8* %arraydecay266)
  call void (i32, i32, i8*, ...) @error(i32 0, i32 0, i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.154, i64 0, i64 0), i8* %call267)
  store i8 1, i8* %number_locale_warned, align 1, !tbaa !11
  br label %if.end293

if.else268:                                       ; preds = %cond.false258, %land.lhs.true249, %cond.true246
  %154 = load i32, i32* @tab, align 4, !tbaa !2
  %cmp269 = icmp eq i32 %154, 45
  br i1 %cmp269, label %if.then271, label %if.else278

if.then271:                                       ; preds = %if.else268
  %arrayinit.begin273 = getelementptr inbounds [2 x i8], [2 x i8]* %.compoundliteral272, i64 0, i64 0
  %155 = load i32, i32* @tab, align 4, !tbaa !2
  %conv274 = trunc i32 %155 to i8
  store i8 %conv274, i8* %arrayinit.begin273, align 1, !tbaa !13
  %arrayinit.element275 = getelementptr inbounds i8, i8* %arrayinit.begin273, i64 1
  store i8 0, i8* %arrayinit.element275, align 1, !tbaa !13
  %arraydecay276 = getelementptr inbounds [2 x i8], [2 x i8]* %.compoundliteral272, i64 0, i64 0
  %call277 = call i8* @quote(i8* %arraydecay276)
  call void (i32, i32, i8*, ...) @error(i32 0, i32 0, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.155, i64 0, i64 0), i8* %call277)
  br label %if.end292

if.else278:                                       ; preds = %if.else268
  %156 = load i8, i8* %general_numeric_field_span, align 1, !tbaa !11, !range !25
  %tobool279 = trunc i8 %156 to i1
  br i1 %tobool279, label %land.lhs.true281, label %if.end291

land.lhs.true281:                                 ; preds = %if.else278
  %157 = load i32, i32* @tab, align 4, !tbaa !2
  %cmp282 = icmp eq i32 %157, 43
  br i1 %cmp282, label %if.then284, label %if.end291

if.then284:                                       ; preds = %land.lhs.true281
  %arrayinit.begin286 = getelementptr inbounds [2 x i8], [2 x i8]* %.compoundliteral285, i64 0, i64 0
  %158 = load i32, i32* @tab, align 4, !tbaa !2
  %conv287 = trunc i32 %158 to i8
  store i8 %conv287, i8* %arrayinit.begin286, align 1, !tbaa !13
  %arrayinit.element288 = getelementptr inbounds i8, i8* %arrayinit.begin286, i64 1
  store i8 0, i8* %arrayinit.element288, align 1, !tbaa !13
  %arraydecay289 = getelementptr inbounds [2 x i8], [2 x i8]* %.compoundliteral285, i64 0, i64 0
  %call290 = call i8* @quote(i8* %arraydecay289)
  call void (i32, i32, i8*, ...) @error(i32 0, i32 0, i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.156, i64 0, i64 0), i8* %call290)
  br label %if.end291

if.end291:                                        ; preds = %if.then284, %land.lhs.true281, %if.else278
  br label %if.end292

if.end292:                                        ; preds = %if.end291, %if.then271
  br label %if.end293

if.end293:                                        ; preds = %if.end292, %if.then262
  br label %if.end294

if.end294:                                        ; preds = %if.end293, %lor.lhs.false240
  %159 = load i8, i8* %basic_numeric_field, align 1, !tbaa !11, !range !25
  %tobool295 = trunc i8 %159 to i1
  br i1 %tobool295, label %land.lhs.true300, label %lor.lhs.false297

lor.lhs.false297:                                 ; preds = %if.end294
  %160 = load i8, i8* %general_numeric_field, align 1, !tbaa !11, !range !25
  %tobool298 = trunc i8 %160 to i1
  br i1 %tobool298, label %land.lhs.true300, label %if.end311

land.lhs.true300:                                 ; preds = %lor.lhs.false297, %if.end294
  %161 = load i8, i8* %number_locale_warned, align 1, !tbaa !11, !range !25
  %tobool301 = trunc i8 %161 to i1
  br i1 %tobool301, label %if.end311, label %if.then302

if.then302:                                       ; preds = %land.lhs.true300
  %162 = load i32, i32* @tab, align 4, !tbaa !2
  %163 = load i8, i8* @decimal_point, align 1, !tbaa !13
  %conv303 = sext i8 %163 to i32
  %cmp304 = icmp eq i32 %162, %conv303
  %164 = zext i1 %cmp304 to i64
  %cond = select i1 %cmp304, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.24, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.158, i64 0, i64 0)
  %arrayinit.begin307 = getelementptr inbounds [2 x i8], [2 x i8]* %.compoundliteral306, i64 0, i64 0
  %165 = load i8, i8* @decimal_point, align 1, !tbaa !13
  store i8 %165, i8* %arrayinit.begin307, align 1, !tbaa !13
  %arrayinit.element308 = getelementptr inbounds i8, i8* %arrayinit.begin307, i64 1
  store i8 0, i8* %arrayinit.element308, align 1, !tbaa !13
  %arraydecay309 = getelementptr inbounds [2 x i8], [2 x i8]* %.compoundliteral306, i64 0, i64 0
  %call310 = call i8* @quote(i8* %arraydecay309)
  call void (i32, i32, i8*, ...) @error(i32 0, i32 0, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.157, i64 0, i64 0), i8* %cond, i8* %call310)
  br label %if.end311

if.end311:                                        ; preds = %if.then302, %land.lhs.true300, %lor.lhs.false297
  %166 = load i8, i8* %basic_numeric_field, align 1, !tbaa !11, !range !25
  %tobool312 = trunc i8 %166 to i1
  br i1 %tobool312, label %land.lhs.true314, label %if.end318

land.lhs.true314:                                 ; preds = %if.end311
  %167 = load i8, i8* @thousands_sep_ignored, align 1, !tbaa !11, !range !25
  %tobool315 = trunc i8 %167 to i1
  br i1 %tobool315, label %if.then317, label %if.end318

if.then317:                                       ; preds = %land.lhs.true314
  call void (i32, i32, i8*, ...) @error(i32 0, i32 0, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.159, i64 0, i64 0))
  br label %if.end318

if.end318:                                        ; preds = %if.then317, %land.lhs.true314, %if.end311
  %call319 = call zeroext i1 @default_key_compare(%struct.keyfield* %ugkey)
  br i1 %call319, label %lor.lhs.false320, label %if.then332

lor.lhs.false320:                                 ; preds = %if.end318
  %reverse321 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %ugkey, i32 0, i32 13
  %168 = load i8, i8* %reverse321, align 1, !tbaa !34, !range !25
  %tobool322 = trunc i8 %168 to i1
  br i1 %tobool322, label %land.lhs.true324, label %if.end355

land.lhs.true324:                                 ; preds = %lor.lhs.false320
  %169 = load i8, i8* @stable, align 1, !tbaa !11, !range !25
  %tobool325 = trunc i8 %169 to i1
  br i1 %tobool325, label %land.lhs.true330, label %lor.lhs.false327

lor.lhs.false327:                                 ; preds = %land.lhs.true324
  %170 = load i8, i8* @unique, align 1, !tbaa !11, !range !25
  %tobool328 = trunc i8 %170 to i1
  br i1 %tobool328, label %land.lhs.true330, label %if.end355

land.lhs.true330:                                 ; preds = %lor.lhs.false327, %land.lhs.true324
  %171 = load %struct.keyfield*, %struct.keyfield** @keylist, align 8, !tbaa !6
  %tobool331 = icmp ne %struct.keyfield* %171, null
  br i1 %tobool331, label %if.then332, label %if.end355

if.then332:                                       ; preds = %land.lhs.true330, %if.end318
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %ugkey_reverse) #13
  %reverse333 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %ugkey, i32 0, i32 13
  %172 = load i8, i8* %reverse333, align 1, !tbaa !34, !range !25
  %tobool334 = trunc i8 %172 to i1
  %frombool335 = zext i1 %tobool334 to i8
  store i8 %frombool335, i8* %ugkey_reverse, align 1, !tbaa !11
  %173 = load i8, i8* @stable, align 1, !tbaa !11, !range !25
  %tobool336 = trunc i8 %173 to i1
  br i1 %tobool336, label %if.end343, label %lor.lhs.false338

lor.lhs.false338:                                 ; preds = %if.then332
  %174 = load i8, i8* @unique, align 1, !tbaa !11, !range !25
  %tobool339 = trunc i8 %174 to i1
  br i1 %tobool339, label %if.end343, label %if.then341

if.then341:                                       ; preds = %lor.lhs.false338
  %reverse342 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %ugkey, i32 0, i32 13
  store i8 0, i8* %reverse342, align 1, !tbaa !34
  br label %if.end343

if.end343:                                        ; preds = %if.then341, %lor.lhs.false338, %if.then332
  %175 = bitcast [31 x i8]* %opts to i8*
  call void @llvm.lifetime.start.p0i8(i64 31, i8* %175) #13
  %arraydecay344 = getelementptr inbounds [31 x i8], [31 x i8]* %opts, i64 0, i64 0
  call void @key_to_opts(%struct.keyfield* %ugkey, i8* %arraydecay344)
  %arraydecay345 = getelementptr inbounds [31 x i8], [31 x i8]* %opts, i64 0, i64 0
  %call346 = call i64 @strlen(i8* %arraydecay345) #22
  %call347 = call i64 @select_plural(i64 %call346)
  %cmp348 = icmp eq i64 %call347, 1
  %176 = zext i1 %cmp348 to i64
  %cond350 = select i1 %cmp348, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.161, i64 0, i64 0), i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.160, i64 0, i64 0)
  %arraydecay351 = getelementptr inbounds [31 x i8], [31 x i8]* %opts, i64 0, i64 0
  call void (i32, i32, i8*, ...) @error(i32 0, i32 0, i8* %cond350, i8* %arraydecay351)
  %177 = load i8, i8* %ugkey_reverse, align 1, !tbaa !11, !range !25
  %tobool352 = trunc i8 %177 to i1
  %reverse353 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %ugkey, i32 0, i32 13
  %frombool354 = zext i1 %tobool352 to i8
  store i8 %frombool354, i8* %reverse353, align 1, !tbaa !34
  %178 = bitcast [31 x i8]* %opts to i8*
  call void @llvm.lifetime.end.p0i8(i64 31, i8* %178) #13
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %ugkey_reverse) #13
  br label %if.end355

if.end355:                                        ; preds = %if.end343, %land.lhs.true330, %lor.lhs.false327, %lor.lhs.false320
  %reverse356 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %ugkey, i32 0, i32 13
  %179 = load i8, i8* %reverse356, align 1, !tbaa !34, !range !25
  %tobool357 = trunc i8 %179 to i1
  br i1 %tobool357, label %land.lhs.true359, label %if.end368

land.lhs.true359:                                 ; preds = %if.end355
  %180 = load i8, i8* @stable, align 1, !tbaa !11, !range !25
  %tobool360 = trunc i8 %180 to i1
  br i1 %tobool360, label %if.end368, label %lor.lhs.false362

lor.lhs.false362:                                 ; preds = %land.lhs.true359
  %181 = load i8, i8* @unique, align 1, !tbaa !11, !range !25
  %tobool363 = trunc i8 %181 to i1
  br i1 %tobool363, label %if.end368, label %land.lhs.true365

land.lhs.true365:                                 ; preds = %lor.lhs.false362
  %182 = load %struct.keyfield*, %struct.keyfield** @keylist, align 8, !tbaa !6
  %tobool366 = icmp ne %struct.keyfield* %182, null
  br i1 %tobool366, label %if.then367, label %if.end368

if.then367:                                       ; preds = %land.lhs.true365
  call void (i32, i32, i8*, ...) @error(i32 0, i32 0, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.162, i64 0, i64 0))
  br label %if.end368

if.end368:                                        ; preds = %if.then367, %land.lhs.true365, %lor.lhs.false362, %land.lhs.true359, %if.end355
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %number_locale_warned) #13
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %general_numeric_field_span) #13
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %basic_numeric_field_span) #13
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %general_numeric_field) #13
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %basic_numeric_field) #13
  %183 = bitcast i64* %keynum to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %183) #13
  %184 = bitcast %struct.keyfield* %ugkey to i8*
  call void @llvm.lifetime.end.p0i8(i64 72, i8* %184) #13
  %185 = bitcast %struct.keyfield** %key to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %185) #13
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @random_md5_state_init(i8* %random_source) #7 {
entry:
  %random_source.addr = alloca i8*, align 8
  %buf = alloca [16 x i8], align 16
  %r = alloca %struct.randread_source*, align 8
  store i8* %random_source, i8** %random_source.addr, align 8, !tbaa !6
  %0 = bitcast [16 x i8]* %buf to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %0) #13
  %1 = bitcast %struct.randread_source** %r to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %1) #13
  %2 = load i8*, i8** %random_source.addr, align 8, !tbaa !6
  %call = call noalias %struct.randread_source* @randread_new(i8* %2, i64 16)
  store %struct.randread_source* %call, %struct.randread_source** %r, align 8, !tbaa !6
  %3 = load %struct.randread_source*, %struct.randread_source** %r, align 8, !tbaa !6
  %tobool = icmp ne %struct.randread_source* %3, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %4 = load i8*, i8** %random_source.addr, align 8, !tbaa !6
  %tobool1 = icmp ne i8* %4, null
  br i1 %tobool1, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then
  %5 = load i8*, i8** %random_source.addr, align 8, !tbaa !6
  br label %cond.end

cond.false:                                       ; preds = %if.then
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %5, %cond.true ], [ getelementptr inbounds ([10 x i8], [10 x i8]* @.str.163, i64 0, i64 0), %cond.false ]
  call void @sort_die(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.141, i64 0, i64 0), i8* %cond)
  br label %if.end

if.end:                                           ; preds = %cond.end, %entry
  %6 = load %struct.randread_source*, %struct.randread_source** %r, align 8, !tbaa !6
  %arraydecay = getelementptr inbounds [16 x i8], [16 x i8]* %buf, i64 0, i64 0
  call void @randread(%struct.randread_source* %6, i8* %arraydecay, i64 16)
  %7 = load %struct.randread_source*, %struct.randread_source** %r, align 8, !tbaa !6
  %call2 = call i32 @randread_free(%struct.randread_source* %7)
  %cmp = icmp ne i32 %call2, 0
  br i1 %cmp, label %if.then3, label %if.end4

if.then3:                                         ; preds = %if.end
  %8 = load i8*, i8** %random_source.addr, align 8, !tbaa !6
  call void @sort_die(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.63, i64 0, i64 0), i8* %8)
  br label %if.end4

if.end4:                                          ; preds = %if.then3, %if.end
  call void @md5_init_ctx(%struct.md5_ctx* @random_md5_state) #13
  %arraydecay5 = getelementptr inbounds [16 x i8], [16 x i8]* %buf, i64 0, i64 0
  call void @md5_process_bytes(i8* %arraydecay5, i64 16, %struct.md5_ctx* @random_md5_state) #13
  %9 = bitcast %struct.randread_source** %r to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %9) #13
  %10 = bitcast [16 x i8]* %buf to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %10) #13
  ret void
}

; Function Attrs: nounwind uwtable
define internal zeroext i1 @check(i8* %file_name, i8 signext %checkonly) #7 {
entry:
  %file_name.addr = alloca i8*, align 8
  %checkonly.addr = alloca i8, align 1
  %fp = alloca %struct._IO_FILE*, align 8
  %buf = alloca %struct.buffer, align 8
  %temp = alloca %struct.line, align 8
  %alloc = alloca i64, align 8
  %line_number = alloca i64, align 8
  %key = alloca %struct.keyfield*, align 8
  %nonunique = alloca i8, align 1
  %ordered = alloca i8, align 1
  %line = alloca %struct.line*, align 8
  %linebase = alloca %struct.line*, align 8
  %disorder_line = alloca %struct.line*, align 8
  %disorder_line_number = alloca i64, align 8
  %hr_buf = alloca [21 x i8], align 16
  %cleanup.dest.slot = alloca i32, align 4
  store i8* %file_name, i8** %file_name.addr, align 8, !tbaa !6
  store i8 %checkonly, i8* %checkonly.addr, align 1, !tbaa !13
  %0 = bitcast %struct._IO_FILE** %fp to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #13
  %1 = load i8*, i8** %file_name.addr, align 8, !tbaa !6
  %call = call %struct._IO_FILE* @xfopen(i8* %1, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.50, i64 0, i64 0))
  store %struct._IO_FILE* %call, %struct._IO_FILE** %fp, align 8, !tbaa !6
  %2 = bitcast %struct.buffer* %buf to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* %2) #13
  %3 = bitcast %struct.line* %temp to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* %3) #13
  %4 = bitcast i64* %alloc to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %4) #13
  store i64 0, i64* %alloc, align 8, !tbaa !14
  %5 = bitcast i64* %line_number to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %5) #13
  store i64 0, i64* %line_number, align 8, !tbaa !14
  %6 = bitcast %struct.keyfield** %key to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %6) #13
  %7 = load %struct.keyfield*, %struct.keyfield** @keylist, align 8, !tbaa !6
  store %struct.keyfield* %7, %struct.keyfield** %key, align 8, !tbaa !6
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %nonunique) #13
  %8 = load i8, i8* @unique, align 1, !tbaa !11, !range !25
  %tobool = trunc i8 %8 to i1
  %lnot = xor i1 %tobool, true
  %frombool = zext i1 %lnot to i8
  store i8 %frombool, i8* %nonunique, align 1, !tbaa !11
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %ordered) #13
  store i8 1, i8* %ordered, align 1, !tbaa !11
  %9 = load i64, i64* @merge_buffer_size, align 8, !tbaa !14
  %10 = load i64, i64* @sort_size, align 8, !tbaa !14
  %cmp = icmp ugt i64 %9, %10
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %11 = load i64, i64* @merge_buffer_size, align 8, !tbaa !14
  br label %cond.end

cond.false:                                       ; preds = %entry
  %12 = load i64, i64* @sort_size, align 8, !tbaa !14
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %11, %cond.true ], [ %12, %cond.false ]
  call void @initbuf(%struct.buffer* %buf, i64 32, i64 %cond)
  %text = getelementptr inbounds %struct.line, %struct.line* %temp, i32 0, i32 0
  store i8* null, i8** %text, align 8, !tbaa !60
  br label %while.cond

while.cond:                                       ; preds = %cleanup.cont, %cond.end
  %13 = load %struct._IO_FILE*, %struct._IO_FILE** %fp, align 8, !tbaa !6
  %14 = load i8*, i8** %file_name.addr, align 8, !tbaa !6
  %call1 = call zeroext i1 @fillbuf(%struct.buffer* %buf, %struct._IO_FILE* %13, i8* %14)
  br i1 %call1, label %while.body, label %while.end69

while.body:                                       ; preds = %while.cond
  %15 = bitcast %struct.line** %line to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %15) #13
  %call2 = call %struct.line* @buffer_linelim(%struct.buffer* %buf)
  store %struct.line* %call2, %struct.line** %line, align 8, !tbaa !6
  %16 = bitcast %struct.line** %linebase to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %16) #13
  %17 = load %struct.line*, %struct.line** %line, align 8, !tbaa !6
  %nlines = getelementptr inbounds %struct.buffer, %struct.buffer* %buf, i32 0, i32 2
  %18 = load i64, i64* %nlines, align 8, !tbaa !62
  %idx.neg = sub i64 0, %18
  %add.ptr = getelementptr inbounds %struct.line, %struct.line* %17, i64 %idx.neg
  store %struct.line* %add.ptr, %struct.line** %linebase, align 8, !tbaa !6
  %19 = load i64, i64* %alloc, align 8, !tbaa !14
  %tobool3 = icmp ne i64 %19, 0
  br i1 %tobool3, label %land.lhs.true, label %if.end17

land.lhs.true:                                    ; preds = %while.body
  %20 = load i8, i8* %nonunique, align 1, !tbaa !11, !range !25
  %tobool4 = trunc i8 %20 to i1
  %conv = zext i1 %tobool4 to i32
  %21 = load %struct.line*, %struct.line** %line, align 8, !tbaa !6
  %add.ptr5 = getelementptr inbounds %struct.line, %struct.line* %21, i64 -1
  %call6 = call i32 @compare(%struct.line* %temp, %struct.line* %add.ptr5)
  %cmp7 = icmp sle i32 %conv, %call6
  br i1 %cmp7, label %if.then, label %if.end17

if.then:                                          ; preds = %land.lhs.true
  br label %found_disorder

found_disorder:                                   ; preds = %if.then28, %if.then
  %22 = load i8, i8* %checkonly.addr, align 1, !tbaa !13
  %conv9 = sext i8 %22 to i32
  %cmp10 = icmp eq i32 %conv9, 99
  br i1 %cmp10, label %if.then12, label %if.end

if.then12:                                        ; preds = %found_disorder
  %23 = bitcast %struct.line** %disorder_line to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %23) #13
  %24 = load %struct.line*, %struct.line** %line, align 8, !tbaa !6
  %add.ptr13 = getelementptr inbounds %struct.line, %struct.line* %24, i64 -1
  store %struct.line* %add.ptr13, %struct.line** %disorder_line, align 8, !tbaa !6
  %25 = bitcast i64* %disorder_line_number to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %25) #13
  %call14 = call %struct.line* @buffer_linelim(%struct.buffer* %buf)
  %26 = load %struct.line*, %struct.line** %disorder_line, align 8, !tbaa !6
  %sub.ptr.lhs.cast = ptrtoint %struct.line* %call14 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.line* %26 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 32
  %27 = load i64, i64* %line_number, align 8, !tbaa !14
  %add = add i64 %sub.ptr.div, %27
  store i64 %add, i64* %disorder_line_number, align 8, !tbaa !14
  %28 = bitcast [21 x i8]* %hr_buf to i8*
  call void @llvm.lifetime.start.p0i8(i64 21, i8* %28) #13
  %29 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !6
  ; %30 = load i8*, i8** @program_name, align 8, !tbaa !6
  %31 = load i8*, i8** %file_name.addr, align 8, !tbaa !6
  %32 = load i64, i64* %disorder_line_number, align 8, !tbaa !14
  %arraydecay = getelementptr inbounds [21 x i8], [21 x i8]* %hr_buf, i64 0, i64 0
  %call15 = call i8* @umaxtostr(i64 %32, i8* %arraydecay)
  %call16 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %29, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.164, i64 0, i64 0), i8* %30, i8* %31, i8* %call15)
  %33 = load %struct.line*, %struct.line** %disorder_line, align 8, !tbaa !6
  %34 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !6
  call void @write_line(%struct.line* %33, %struct._IO_FILE* %34, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.165, i64 0, i64 0))
  %35 = bitcast [21 x i8]* %hr_buf to i8*
  call void @llvm.lifetime.end.p0i8(i64 21, i8* %35) #13
  %36 = bitcast i64* %disorder_line_number to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %36) #13
  %37 = bitcast %struct.line** %disorder_line to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %37) #13
  br label %if.end

if.end:                                           ; preds = %if.then12, %found_disorder
  store i8 0, i8* %ordered, align 1, !tbaa !11
  store i32 3, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end17:                                         ; preds = %land.lhs.true, %while.body
  br label %while.cond18

while.cond18:                                     ; preds = %if.end29, %if.end17
  %38 = load %struct.line*, %struct.line** %linebase, align 8, !tbaa !6
  %39 = load %struct.line*, %struct.line** %line, align 8, !tbaa !6
  %incdec.ptr = getelementptr inbounds %struct.line, %struct.line* %39, i32 -1
  store %struct.line* %incdec.ptr, %struct.line** %line, align 8, !tbaa !6
  %cmp19 = icmp ult %struct.line* %38, %incdec.ptr
  br i1 %cmp19, label %while.body21, label %while.end

while.body21:                                     ; preds = %while.cond18
  %40 = load i8, i8* %nonunique, align 1, !tbaa !11, !range !25
  %tobool22 = trunc i8 %40 to i1
  %conv23 = zext i1 %tobool22 to i32
  %41 = load %struct.line*, %struct.line** %line, align 8, !tbaa !6
  %42 = load %struct.line*, %struct.line** %line, align 8, !tbaa !6
  %add.ptr24 = getelementptr inbounds %struct.line, %struct.line* %42, i64 -1
  %call25 = call i32 @compare(%struct.line* %41, %struct.line* %add.ptr24)
  %cmp26 = icmp sle i32 %conv23, %call25
  br i1 %cmp26, label %if.then28, label %if.end29

if.then28:                                        ; preds = %while.body21
  br label %found_disorder

if.end29:                                         ; preds = %while.body21
  br label %while.cond18

while.end:                                        ; preds = %while.cond18
  %nlines30 = getelementptr inbounds %struct.buffer, %struct.buffer* %buf, i32 0, i32 2
  %43 = load i64, i64* %nlines30, align 8, !tbaa !62
  %44 = load i64, i64* %line_number, align 8, !tbaa !14
  %add31 = add i64 %44, %43
  store i64 %add31, i64* %line_number, align 8, !tbaa !14
  %45 = load i64, i64* %alloc, align 8, !tbaa !14
  %46 = load %struct.line*, %struct.line** %line, align 8, !tbaa !6
  %length = getelementptr inbounds %struct.line, %struct.line* %46, i32 0, i32 1
  %47 = load i64, i64* %length, align 8, !tbaa !64
  %cmp32 = icmp ult i64 %45, %47
  br i1 %cmp32, label %if.then34, label %if.end45

if.then34:                                        ; preds = %while.end
  br label %do.body

do.body:                                          ; preds = %do.cond, %if.then34
  %48 = load i64, i64* %alloc, align 8, !tbaa !14
  %mul = mul i64 %48, 2
  store i64 %mul, i64* %alloc, align 8, !tbaa !14
  %49 = load i64, i64* %alloc, align 8, !tbaa !14
  %tobool35 = icmp ne i64 %49, 0
  br i1 %tobool35, label %if.end38, label %if.then36

if.then36:                                        ; preds = %do.body
  %50 = load %struct.line*, %struct.line** %line, align 8, !tbaa !6
  %length37 = getelementptr inbounds %struct.line, %struct.line* %50, i32 0, i32 1
  %51 = load i64, i64* %length37, align 8, !tbaa !64
  store i64 %51, i64* %alloc, align 8, !tbaa !14
  br label %do.end

if.end38:                                         ; preds = %do.body
  br label %do.cond

do.cond:                                          ; preds = %if.end38
  %52 = load i64, i64* %alloc, align 8, !tbaa !14
  %53 = load %struct.line*, %struct.line** %line, align 8, !tbaa !6
  %length39 = getelementptr inbounds %struct.line, %struct.line* %53, i32 0, i32 1
  %54 = load i64, i64* %length39, align 8, !tbaa !64
  %cmp40 = icmp ult i64 %52, %54
  br i1 %cmp40, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond, %if.then36
  %text42 = getelementptr inbounds %struct.line, %struct.line* %temp, i32 0, i32 0
  %55 = load i8*, i8** %text42, align 8, !tbaa !60
  call void @rpl_free(i8* %55)
  %56 = load i64, i64* %alloc, align 8, !tbaa !14
  %call43 = call noalias nonnull i8* @xmalloc(i64 %56) #25
  %text44 = getelementptr inbounds %struct.line, %struct.line* %temp, i32 0, i32 0
  store i8* %call43, i8** %text44, align 8, !tbaa !60
  br label %if.end45

if.end45:                                         ; preds = %do.end, %while.end
  %text46 = getelementptr inbounds %struct.line, %struct.line* %temp, i32 0, i32 0
  %57 = load i8*, i8** %text46, align 8, !tbaa !60
  %58 = load %struct.line*, %struct.line** %line, align 8, !tbaa !6
  %text47 = getelementptr inbounds %struct.line, %struct.line* %58, i32 0, i32 0
  %59 = load i8*, i8** %text47, align 8, !tbaa !60
  %60 = load %struct.line*, %struct.line** %line, align 8, !tbaa !6
  %length48 = getelementptr inbounds %struct.line, %struct.line* %60, i32 0, i32 1
  %61 = load i64, i64* %length48, align 8, !tbaa !64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %57, i8* align 1 %59, i64 %61, i1 false)
  %62 = load %struct.line*, %struct.line** %line, align 8, !tbaa !6
  %length49 = getelementptr inbounds %struct.line, %struct.line* %62, i32 0, i32 1
  %63 = load i64, i64* %length49, align 8, !tbaa !64
  %length50 = getelementptr inbounds %struct.line, %struct.line* %temp, i32 0, i32 1
  store i64 %63, i64* %length50, align 8, !tbaa !64
  %64 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !tbaa !6
  %tobool51 = icmp ne %struct.keyfield* %64, null
  br i1 %tobool51, label %if.then52, label %if.end67

if.then52:                                        ; preds = %if.end45
  %text53 = getelementptr inbounds %struct.line, %struct.line* %temp, i32 0, i32 0
  %65 = load i8*, i8** %text53, align 8, !tbaa !60
  %66 = load %struct.line*, %struct.line** %line, align 8, !tbaa !6
  %keybeg = getelementptr inbounds %struct.line, %struct.line* %66, i32 0, i32 2
  %67 = load i8*, i8** %keybeg, align 8, !tbaa !65
  %68 = load %struct.line*, %struct.line** %line, align 8, !tbaa !6
  %text54 = getelementptr inbounds %struct.line, %struct.line* %68, i32 0, i32 0
  %69 = load i8*, i8** %text54, align 8, !tbaa !60
  %sub.ptr.lhs.cast55 = ptrtoint i8* %67 to i64
  %sub.ptr.rhs.cast56 = ptrtoint i8* %69 to i64
  %sub.ptr.sub57 = sub i64 %sub.ptr.lhs.cast55, %sub.ptr.rhs.cast56
  %add.ptr58 = getelementptr inbounds i8, i8* %65, i64 %sub.ptr.sub57
  %keybeg59 = getelementptr inbounds %struct.line, %struct.line* %temp, i32 0, i32 2
  store i8* %add.ptr58, i8** %keybeg59, align 8, !tbaa !65
  %text60 = getelementptr inbounds %struct.line, %struct.line* %temp, i32 0, i32 0
  %70 = load i8*, i8** %text60, align 8, !tbaa !60
  %71 = load %struct.line*, %struct.line** %line, align 8, !tbaa !6
  %keylim = getelementptr inbounds %struct.line, %struct.line* %71, i32 0, i32 3
  %72 = load i8*, i8** %keylim, align 8, !tbaa !66
  %73 = load %struct.line*, %struct.line** %line, align 8, !tbaa !6
  %text61 = getelementptr inbounds %struct.line, %struct.line* %73, i32 0, i32 0
  %74 = load i8*, i8** %text61, align 8, !tbaa !60
  %sub.ptr.lhs.cast62 = ptrtoint i8* %72 to i64
  %sub.ptr.rhs.cast63 = ptrtoint i8* %74 to i64
  %sub.ptr.sub64 = sub i64 %sub.ptr.lhs.cast62, %sub.ptr.rhs.cast63
  %add.ptr65 = getelementptr inbounds i8, i8* %70, i64 %sub.ptr.sub64
  %keylim66 = getelementptr inbounds %struct.line, %struct.line* %temp, i32 0, i32 3
  store i8* %add.ptr65, i8** %keylim66, align 8, !tbaa !66
  br label %if.end67

if.end67:                                         ; preds = %if.then52, %if.end45
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end67, %if.end
  %75 = bitcast %struct.line** %linebase to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %75) #13
  %76 = bitcast %struct.line** %line to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %76) #13
  %cleanup.dest = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest, label %unreachable [
    i32 0, label %cleanup.cont
    i32 3, label %while.end69
  ]

cleanup.cont:                                     ; preds = %cleanup
  br label %while.cond

while.end69:                                      ; preds = %cleanup, %while.cond
  %77 = load %struct._IO_FILE*, %struct._IO_FILE** %fp, align 8, !tbaa !6
  %78 = load i8*, i8** %file_name.addr, align 8, !tbaa !6
  call void @xfclose(%struct._IO_FILE* %77, i8* %78)
  %buf70 = getelementptr inbounds %struct.buffer, %struct.buffer* %buf, i32 0, i32 0
  %79 = load i8*, i8** %buf70, align 8, !tbaa !67
  call void @rpl_free(i8* %79)
  %text71 = getelementptr inbounds %struct.line, %struct.line* %temp, i32 0, i32 0
  %80 = load i8*, i8** %text71, align 8, !tbaa !60
  call void @rpl_free(i8* %80)
  %81 = load i8, i8* %ordered, align 1, !tbaa !11, !range !25
  %tobool72 = trunc i8 %81 to i1
  store i32 1, i32* %cleanup.dest.slot, align 4
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %ordered) #13
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %nonunique) #13
  %82 = bitcast %struct.keyfield** %key to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %82) #13
  %83 = bitcast i64* %line_number to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %83) #13
  %84 = bitcast i64* %alloc to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %84) #13
  %85 = bitcast %struct.line* %temp to i8*
  call void @llvm.lifetime.end.p0i8(i64 32, i8* %85) #13
  %86 = bitcast %struct.buffer* %buf to i8*
  call void @llvm.lifetime.end.p0i8(i64 56, i8* %86) #13
  %87 = bitcast %struct._IO_FILE** %fp to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %87) #13
  ret i1 %tobool72

unreachable:                                      ; preds = %cleanup
  unreachable
}

; Function Attrs: nounwind uwtable
define internal void @check_inputs(i8** %files, i64 %nfiles) #7 {
entry:
  %files.addr = alloca i8**, align 8
  %nfiles.addr = alloca i64, align 8
  %i = alloca i64, align 8
  store i8** %files, i8*** %files.addr, align 8, !tbaa !6
  store i64 %nfiles, i64* %nfiles.addr, align 8, !tbaa !14
  %0 = bitcast i64* %i to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #13
  store i64 0, i64* %i, align 8, !tbaa !14
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i64, i64* %i, align 8, !tbaa !14
  %2 = load i64, i64* %nfiles.addr, align 8, !tbaa !14
  %cmp = icmp ult i64 %1, %2
  br i1 %cmp, label %for.body, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond
  %3 = bitcast i64* %i to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %3) #13
  br label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i8**, i8*** %files.addr, align 8, !tbaa !6
  %5 = load i64, i64* %i, align 8, !tbaa !14
  %arrayidx = getelementptr inbounds i8*, i8** %4, i64 %5
  %6 = load i8*, i8** %arrayidx, align 8, !tbaa !6
  %call = call i32 @strcmp(i8* %6, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.52, i64 0, i64 0)) #22
  %cmp1 = icmp eq i32 %call, 0
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  br label %for.inc

if.end:                                           ; preds = %for.body
  %7 = load i8**, i8*** %files.addr, align 8, !tbaa !6
  %8 = load i64, i64* %i, align 8, !tbaa !14
  %arrayidx2 = getelementptr inbounds i8*, i8** %7, i64 %8
  %9 = load i8*, i8** %arrayidx2, align 8, !tbaa !6
  %call3 = call i32 @euidaccess(i8* %9, i32 4) #13
  %cmp4 = icmp ne i32 %call3, 0
  br i1 %cmp4, label %if.then5, label %if.end7

if.then5:                                         ; preds = %if.end
  %10 = load i8**, i8*** %files.addr, align 8, !tbaa !6
  %11 = load i64, i64* %i, align 8, !tbaa !14
  %arrayidx6 = getelementptr inbounds i8*, i8** %10, i64 %11
  %12 = load i8*, i8** %arrayidx6, align 8, !tbaa !6
  call void @sort_die(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.173, i64 0, i64 0), i8* %12)
  br label %if.end7

if.end7:                                          ; preds = %if.then5, %if.end
  br label %for.inc

for.inc:                                          ; preds = %if.end7, %if.then
  %13 = load i64, i64* %i, align 8, !tbaa !14
  %inc = add i64 %13, 1
  store i64 %inc, i64* %i, align 8, !tbaa !14
  br label %for.cond

for.end:                                          ; preds = %for.cond.cleanup
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @check_output(i8* %outfile) #7 {
entry:
  %outfile.addr = alloca i8*, align 8
  %oflags = alloca i32, align 4
  %outfd = alloca i32, align 4
  store i8* %outfile, i8** %outfile.addr, align 8, !tbaa !6
  %0 = load i8*, i8** %outfile.addr, align 8, !tbaa !6
  %tobool = icmp ne i8* %0, null
  br i1 %tobool, label %if.then, label %if.end2

if.then:                                          ; preds = %entry
  %1 = bitcast i32* %oflags to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %1) #13
  store i32 524353, i32* %oflags, align 4, !tbaa !2
  %2 = bitcast i32* %outfd to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %2) #13
  %3 = load i8*, i8** %outfile.addr, align 8, !tbaa !6
  %4 = load i32, i32* %oflags, align 4, !tbaa !2
  %call = call i32 (i8*, i32, ...) @open(i8* %3, i32 %4, i32 438)
  store i32 %call, i32* %outfd, align 4, !tbaa !2
  %5 = load i32, i32* %outfd, align 4, !tbaa !2
  %cmp = icmp slt i32 %5, 0
  br i1 %cmp, label %if.then1, label %if.end

if.then1:                                         ; preds = %if.then
  %6 = load i8*, i8** %outfile.addr, align 8, !tbaa !6
  call void @sort_die(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.141, i64 0, i64 0), i8* %6)
  br label %if.end

if.end:                                           ; preds = %if.then1, %if.then
  %7 = load i32, i32* %outfd, align 4, !tbaa !2
  call void @move_fd(i32 %7, i32 1)
  %8 = bitcast i32* %outfd to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %8) #13
  %9 = bitcast i32* %oflags to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %9) #13
  br label %if.end2

if.end2:                                          ; preds = %if.end, %entry
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @merge(%struct.sortfile* %files, i64 %ntemps, i64 %nfiles, i8* %output_file) #7 {
entry:
  %files.addr = alloca %struct.sortfile*, align 8
  %ntemps.addr = alloca i64, align 8
  %nfiles.addr = alloca i64, align 8
  %output_file.addr = alloca i8*, align 8
  %in = alloca i64, align 8
  %out = alloca i64, align 8
  %remainder = alloca i64, align 8
  %cheap_slots = alloca i64, align 8
  %tfp = alloca %struct._IO_FILE*, align 8
  %temp = alloca %struct.tempnode*, align 8
  %num_merged = alloca i64, align 8
  %nshortmerge = alloca i64, align 8
  %tfp32 = alloca %struct._IO_FILE*, align 8
  %temp33 = alloca %struct.tempnode*, align 8
  %num_merged35 = alloca i64, align 8
  %fps = alloca %struct._IO_FILE**, align 8
  %nopened = alloca i64, align 8
  %ofp = alloca %struct._IO_FILE*, align 8
  %cleanup.dest.slot = alloca i32, align 4
  %tfp90 = alloca %struct._IO_FILE*, align 8
  %temp91 = alloca %struct.tempnode*, align 8
  store %struct.sortfile* %files, %struct.sortfile** %files.addr, align 8, !tbaa !6
  store i64 %ntemps, i64* %ntemps.addr, align 8, !tbaa !14
  store i64 %nfiles, i64* %nfiles.addr, align 8, !tbaa !14
  store i8* %output_file, i8** %output_file.addr, align 8, !tbaa !6
  br label %while.cond

while.cond:                                       ; preds = %if.end, %entry
  %0 = load i32, i32* @nmerge, align 4, !tbaa !2
  %conv = zext i32 %0 to i64
  %1 = load i64, i64* %nfiles.addr, align 8, !tbaa !14
  %cmp = icmp ult i64 %conv, %1
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %2 = bitcast i64* %in to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %2) #13
  %3 = bitcast i64* %out to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %3) #13
  %4 = bitcast i64* %remainder to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %4) #13
  %5 = bitcast i64* %cheap_slots to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %5) #13
  store i64 0, i64* %in, align 8, !tbaa !14
  store i64 0, i64* %out, align 8, !tbaa !14
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %while.body
  %6 = load i32, i32* @nmerge, align 4, !tbaa !2
  %conv2 = zext i32 %6 to i64
  %7 = load i64, i64* %nfiles.addr, align 8, !tbaa !14
  %8 = load i64, i64* %in, align 8, !tbaa !14
  %sub = sub i64 %7, %8
  %cmp3 = icmp ule i64 %conv2, %sub
  br i1 %cmp3, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %9 = bitcast %struct._IO_FILE** %tfp to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %9) #13
  %10 = bitcast %struct.tempnode** %temp to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %10) #13
  %call = call %struct.tempnode* @create_temp(%struct._IO_FILE** %tfp)
  store %struct.tempnode* %call, %struct.tempnode** %temp, align 8, !tbaa !6
  %11 = bitcast i64* %num_merged to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %11) #13
  %12 = load %struct.sortfile*, %struct.sortfile** %files.addr, align 8, !tbaa !6
  %13 = load i64, i64* %in, align 8, !tbaa !14
  %arrayidx = getelementptr inbounds %struct.sortfile, %struct.sortfile* %12, i64 %13
  %14 = load i64, i64* %ntemps.addr, align 8, !tbaa !14
  %15 = load i32, i32* @nmerge, align 4, !tbaa !2
  %conv5 = zext i32 %15 to i64
  %cmp6 = icmp ult i64 %14, %conv5
  br i1 %cmp6, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.body
  %16 = load i64, i64* %ntemps.addr, align 8, !tbaa !14
  br label %cond.end

cond.false:                                       ; preds = %for.body
  %17 = load i32, i32* @nmerge, align 4, !tbaa !2
  %conv8 = zext i32 %17 to i64
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %16, %cond.true ], [ %conv8, %cond.false ]
  %18 = load i32, i32* @nmerge, align 4, !tbaa !2
  %conv9 = zext i32 %18 to i64
  %19 = load %struct._IO_FILE*, %struct._IO_FILE** %tfp, align 8, !tbaa !6
  %20 = load %struct.tempnode*, %struct.tempnode** %temp, align 8, !tbaa !6
  %name = getelementptr inbounds %struct.tempnode, %struct.tempnode* %20, i32 0, i32 3
  %arraydecay = getelementptr inbounds [0 x i8], [0 x i8]* %name, i64 0, i64 0
  %call10 = call i64 @mergefiles(%struct.sortfile* %arrayidx, i64 %cond, i64 %conv9, %struct._IO_FILE* %19, i8* %arraydecay)
  store i64 %call10, i64* %num_merged, align 8, !tbaa !14
  %21 = load i64, i64* %ntemps.addr, align 8, !tbaa !14
  %22 = load i64, i64* %num_merged, align 8, !tbaa !14
  %cmp11 = icmp ult i64 %21, %22
  br i1 %cmp11, label %cond.true13, label %cond.false14

cond.true13:                                      ; preds = %cond.end
  %23 = load i64, i64* %ntemps.addr, align 8, !tbaa !14
  br label %cond.end15

cond.false14:                                     ; preds = %cond.end
  %24 = load i64, i64* %num_merged, align 8, !tbaa !14
  br label %cond.end15

cond.end15:                                       ; preds = %cond.false14, %cond.true13
  %cond16 = phi i64 [ %23, %cond.true13 ], [ %24, %cond.false14 ]
  %25 = load i64, i64* %ntemps.addr, align 8, !tbaa !14
  %sub17 = sub i64 %25, %cond16
  store i64 %sub17, i64* %ntemps.addr, align 8, !tbaa !14
  %26 = load %struct.tempnode*, %struct.tempnode** %temp, align 8, !tbaa !6
  %name18 = getelementptr inbounds %struct.tempnode, %struct.tempnode* %26, i32 0, i32 3
  %arraydecay19 = getelementptr inbounds [0 x i8], [0 x i8]* %name18, i64 0, i64 0
  %27 = load %struct.sortfile*, %struct.sortfile** %files.addr, align 8, !tbaa !6
  %28 = load i64, i64* %out, align 8, !tbaa !14
  %arrayidx20 = getelementptr inbounds %struct.sortfile, %struct.sortfile* %27, i64 %28
  %name21 = getelementptr inbounds %struct.sortfile, %struct.sortfile* %arrayidx20, i32 0, i32 0
  store i8* %arraydecay19, i8** %name21, align 8, !tbaa !46
  %29 = load %struct.tempnode*, %struct.tempnode** %temp, align 8, !tbaa !6
  %30 = load %struct.sortfile*, %struct.sortfile** %files.addr, align 8, !tbaa !6
  %31 = load i64, i64* %out, align 8, !tbaa !14
  %arrayidx22 = getelementptr inbounds %struct.sortfile, %struct.sortfile* %30, i64 %31
  %temp23 = getelementptr inbounds %struct.sortfile, %struct.sortfile* %arrayidx22, i32 0, i32 1
  store %struct.tempnode* %29, %struct.tempnode** %temp23, align 8, !tbaa !68
  %32 = load i64, i64* %num_merged, align 8, !tbaa !14
  %33 = load i64, i64* %in, align 8, !tbaa !14
  %add = add i64 %33, %32
  store i64 %add, i64* %in, align 8, !tbaa !14
  %34 = bitcast i64* %num_merged to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %34) #13
  %35 = bitcast %struct.tempnode** %temp to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %35) #13
  %36 = bitcast %struct._IO_FILE** %tfp to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %36) #13
  br label %for.inc

for.inc:                                          ; preds = %cond.end15
  %37 = load i64, i64* %out, align 8, !tbaa !14
  %inc = add i64 %37, 1
  store i64 %inc, i64* %out, align 8, !tbaa !14
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %38 = load i64, i64* %nfiles.addr, align 8, !tbaa !14
  %39 = load i64, i64* %in, align 8, !tbaa !14
  %sub24 = sub i64 %38, %39
  store i64 %sub24, i64* %remainder, align 8, !tbaa !14
  %40 = load i32, i32* @nmerge, align 4, !tbaa !2
  %conv25 = zext i32 %40 to i64
  %41 = load i64, i64* %out, align 8, !tbaa !14
  %42 = load i32, i32* @nmerge, align 4, !tbaa !2
  %conv26 = zext i32 %42 to i64
  %rem = urem i64 %41, %conv26
  %sub27 = sub i64 %conv25, %rem
  store i64 %sub27, i64* %cheap_slots, align 8, !tbaa !14
  %43 = load i64, i64* %cheap_slots, align 8, !tbaa !14
  %44 = load i64, i64* %remainder, align 8, !tbaa !14
  %cmp28 = icmp ult i64 %43, %44
  br i1 %cmp28, label %if.then, label %if.end

if.then:                                          ; preds = %for.end
  %45 = bitcast i64* %nshortmerge to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %45) #13
  %46 = load i64, i64* %remainder, align 8, !tbaa !14
  %47 = load i64, i64* %cheap_slots, align 8, !tbaa !14
  %sub30 = sub i64 %46, %47
  %add31 = add i64 %sub30, 1
  store i64 %add31, i64* %nshortmerge, align 8, !tbaa !14
  %48 = bitcast %struct._IO_FILE** %tfp32 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %48) #13
  %49 = bitcast %struct.tempnode** %temp33 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %49) #13
  %call34 = call %struct.tempnode* @create_temp(%struct._IO_FILE** %tfp32)
  store %struct.tempnode* %call34, %struct.tempnode** %temp33, align 8, !tbaa !6
  %50 = bitcast i64* %num_merged35 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %50) #13
  %51 = load %struct.sortfile*, %struct.sortfile** %files.addr, align 8, !tbaa !6
  %52 = load i64, i64* %in, align 8, !tbaa !14
  %arrayidx36 = getelementptr inbounds %struct.sortfile, %struct.sortfile* %51, i64 %52
  %53 = load i64, i64* %ntemps.addr, align 8, !tbaa !14
  %54 = load i64, i64* %nshortmerge, align 8, !tbaa !14
  %cmp37 = icmp ult i64 %53, %54
  br i1 %cmp37, label %cond.true39, label %cond.false40

cond.true39:                                      ; preds = %if.then
  %55 = load i64, i64* %ntemps.addr, align 8, !tbaa !14
  br label %cond.end41

cond.false40:                                     ; preds = %if.then
  %56 = load i64, i64* %nshortmerge, align 8, !tbaa !14
  br label %cond.end41

cond.end41:                                       ; preds = %cond.false40, %cond.true39
  %cond42 = phi i64 [ %55, %cond.true39 ], [ %56, %cond.false40 ]
  %57 = load i64, i64* %nshortmerge, align 8, !tbaa !14
  %58 = load %struct._IO_FILE*, %struct._IO_FILE** %tfp32, align 8, !tbaa !6
  %59 = load %struct.tempnode*, %struct.tempnode** %temp33, align 8, !tbaa !6
  %name43 = getelementptr inbounds %struct.tempnode, %struct.tempnode* %59, i32 0, i32 3
  %arraydecay44 = getelementptr inbounds [0 x i8], [0 x i8]* %name43, i64 0, i64 0
  %call45 = call i64 @mergefiles(%struct.sortfile* %arrayidx36, i64 %cond42, i64 %57, %struct._IO_FILE* %58, i8* %arraydecay44)
  store i64 %call45, i64* %num_merged35, align 8, !tbaa !14
  %60 = load i64, i64* %ntemps.addr, align 8, !tbaa !14
  %61 = load i64, i64* %num_merged35, align 8, !tbaa !14
  %cmp46 = icmp ult i64 %60, %61
  br i1 %cmp46, label %cond.true48, label %cond.false49

cond.true48:                                      ; preds = %cond.end41
  %62 = load i64, i64* %ntemps.addr, align 8, !tbaa !14
  br label %cond.end50

cond.false49:                                     ; preds = %cond.end41
  %63 = load i64, i64* %num_merged35, align 8, !tbaa !14
  br label %cond.end50

cond.end50:                                       ; preds = %cond.false49, %cond.true48
  %cond51 = phi i64 [ %62, %cond.true48 ], [ %63, %cond.false49 ]
  %64 = load i64, i64* %ntemps.addr, align 8, !tbaa !14
  %sub52 = sub i64 %64, %cond51
  store i64 %sub52, i64* %ntemps.addr, align 8, !tbaa !14
  %65 = load %struct.tempnode*, %struct.tempnode** %temp33, align 8, !tbaa !6
  %name53 = getelementptr inbounds %struct.tempnode, %struct.tempnode* %65, i32 0, i32 3
  %arraydecay54 = getelementptr inbounds [0 x i8], [0 x i8]* %name53, i64 0, i64 0
  %66 = load %struct.sortfile*, %struct.sortfile** %files.addr, align 8, !tbaa !6
  %67 = load i64, i64* %out, align 8, !tbaa !14
  %arrayidx55 = getelementptr inbounds %struct.sortfile, %struct.sortfile* %66, i64 %67
  %name56 = getelementptr inbounds %struct.sortfile, %struct.sortfile* %arrayidx55, i32 0, i32 0
  store i8* %arraydecay54, i8** %name56, align 8, !tbaa !46
  %68 = load %struct.tempnode*, %struct.tempnode** %temp33, align 8, !tbaa !6
  %69 = load %struct.sortfile*, %struct.sortfile** %files.addr, align 8, !tbaa !6
  %70 = load i64, i64* %out, align 8, !tbaa !14
  %inc57 = add i64 %70, 1
  store i64 %inc57, i64* %out, align 8, !tbaa !14
  %arrayidx58 = getelementptr inbounds %struct.sortfile, %struct.sortfile* %69, i64 %70
  %temp59 = getelementptr inbounds %struct.sortfile, %struct.sortfile* %arrayidx58, i32 0, i32 1
  store %struct.tempnode* %68, %struct.tempnode** %temp59, align 8, !tbaa !68
  %71 = load i64, i64* %num_merged35, align 8, !tbaa !14
  %72 = load i64, i64* %in, align 8, !tbaa !14
  %add60 = add i64 %72, %71
  store i64 %add60, i64* %in, align 8, !tbaa !14
  %73 = bitcast i64* %num_merged35 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %73) #13
  %74 = bitcast %struct.tempnode** %temp33 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %74) #13
  %75 = bitcast %struct._IO_FILE** %tfp32 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %75) #13
  %76 = bitcast i64* %nshortmerge to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %76) #13
  br label %if.end

if.end:                                           ; preds = %cond.end50, %for.end
  %77 = load %struct.sortfile*, %struct.sortfile** %files.addr, align 8, !tbaa !6
  %78 = load i64, i64* %out, align 8, !tbaa !14
  %arrayidx61 = getelementptr inbounds %struct.sortfile, %struct.sortfile* %77, i64 %78
  %79 = bitcast %struct.sortfile* %arrayidx61 to i8*
  %80 = load %struct.sortfile*, %struct.sortfile** %files.addr, align 8, !tbaa !6
  %81 = load i64, i64* %in, align 8, !tbaa !14
  %arrayidx62 = getelementptr inbounds %struct.sortfile, %struct.sortfile* %80, i64 %81
  %82 = bitcast %struct.sortfile* %arrayidx62 to i8*
  %83 = load i64, i64* %nfiles.addr, align 8, !tbaa !14
  %84 = load i64, i64* %in, align 8, !tbaa !14
  %sub63 = sub i64 %83, %84
  %mul = mul i64 %sub63, 16
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %79, i8* align 8 %82, i64 %mul, i1 false)
  %85 = load i64, i64* %out, align 8, !tbaa !14
  %86 = load i64, i64* %ntemps.addr, align 8, !tbaa !14
  %add64 = add i64 %86, %85
  store i64 %add64, i64* %ntemps.addr, align 8, !tbaa !14
  %87 = load i64, i64* %in, align 8, !tbaa !14
  %88 = load i64, i64* %out, align 8, !tbaa !14
  %sub65 = sub i64 %87, %88
  %89 = load i64, i64* %nfiles.addr, align 8, !tbaa !14
  %sub66 = sub i64 %89, %sub65
  store i64 %sub66, i64* %nfiles.addr, align 8, !tbaa !14
  %90 = bitcast i64* %cheap_slots to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %90) #13
  %91 = bitcast i64* %remainder to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %91) #13
  %92 = bitcast i64* %out to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %92) #13
  %93 = bitcast i64* %in to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %93) #13
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %94 = load %struct.sortfile*, %struct.sortfile** %files.addr, align 8, !tbaa !6
  %95 = load i64, i64* %ntemps.addr, align 8, !tbaa !14
  %96 = load i64, i64* %nfiles.addr, align 8, !tbaa !14
  %97 = load i8*, i8** %output_file.addr, align 8, !tbaa !6
  call void @avoid_trashing_input(%struct.sortfile* %94, i64 %95, i64 %96, i8* %97)
  br label %while.body68

while.body68:                                     ; preds = %while.end, %cleanup.cont132
  %98 = bitcast %struct._IO_FILE*** %fps to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %98) #13
  %99 = bitcast i64* %nopened to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %99) #13
  %100 = load %struct.sortfile*, %struct.sortfile** %files.addr, align 8, !tbaa !6
  %101 = load i64, i64* %nfiles.addr, align 8, !tbaa !14
  %call69 = call i64 @open_input_files(%struct.sortfile* %100, i64 %101, %struct._IO_FILE*** %fps)
  store i64 %call69, i64* %nopened, align 8, !tbaa !14
  %102 = load i64, i64* %nopened, align 8, !tbaa !14
  %103 = load i64, i64* %nfiles.addr, align 8, !tbaa !14
  %cmp70 = icmp eq i64 %102, %103
  br i1 %cmp70, label %if.then72, label %if.else

if.then72:                                        ; preds = %while.body68
  %104 = bitcast %struct._IO_FILE** %ofp to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %104) #13
  %105 = load i8*, i8** %output_file.addr, align 8, !tbaa !6
  %call73 = call %struct._IO_FILE* @stream_open(i8* %105, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.174, i64 0, i64 0))
  store %struct._IO_FILE* %call73, %struct._IO_FILE** %ofp, align 8, !tbaa !6
  %106 = load %struct._IO_FILE*, %struct._IO_FILE** %ofp, align 8, !tbaa !6
  %tobool = icmp ne %struct._IO_FILE* %106, null
  br i1 %tobool, label %if.then74, label %if.end75

if.then74:                                        ; preds = %if.then72
  %107 = load %struct.sortfile*, %struct.sortfile** %files.addr, align 8, !tbaa !6
  %108 = load i64, i64* %ntemps.addr, align 8, !tbaa !14
  %109 = load i64, i64* %nfiles.addr, align 8, !tbaa !14
  %110 = load %struct._IO_FILE*, %struct._IO_FILE** %ofp, align 8, !tbaa !6
  %111 = load i8*, i8** %output_file.addr, align 8, !tbaa !6
  %112 = load %struct._IO_FILE**, %struct._IO_FILE*** %fps, align 8, !tbaa !6
  call void @mergefps(%struct.sortfile* %107, i64 %108, i64 %109, %struct._IO_FILE* %110, i8* %111, %struct._IO_FILE** %112)
  store i32 8, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end75:                                         ; preds = %if.then72
  %call76 = call i32* @__errno_location() #26
  %113 = load i32, i32* %call76, align 4, !tbaa !2
  %cmp77 = icmp ne i32 %113, 24
  br i1 %cmp77, label %if.then81, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end75
  %114 = load i64, i64* %nopened, align 8, !tbaa !14
  %cmp79 = icmp ule i64 %114, 2
  br i1 %cmp79, label %if.then81, label %if.end82

if.then81:                                        ; preds = %lor.lhs.false, %if.end75
  %115 = load i8*, i8** %output_file.addr, align 8, !tbaa !6
  call void @sort_die(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.141, i64 0, i64 0), i8* %115)
  br label %if.end82

if.end82:                                         ; preds = %if.then81, %lor.lhs.false
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end82, %if.then74
  %116 = bitcast %struct._IO_FILE** %ofp to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %116) #13
  %cleanup.dest = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest, label %cleanup129 [
    i32 0, label %cleanup.cont
  ]

cleanup.cont:                                     ; preds = %cleanup
  br label %if.end89

if.else:                                          ; preds = %while.body68
  %117 = load i64, i64* %nopened, align 8, !tbaa !14
  %cmp83 = icmp ule i64 %117, 2
  br i1 %cmp83, label %if.then85, label %if.end88

if.then85:                                        ; preds = %if.else
  %118 = load %struct.sortfile*, %struct.sortfile** %files.addr, align 8, !tbaa !6
  %119 = load i64, i64* %nopened, align 8, !tbaa !14
  %arrayidx86 = getelementptr inbounds %struct.sortfile, %struct.sortfile* %118, i64 %119
  %name87 = getelementptr inbounds %struct.sortfile, %struct.sortfile* %arrayidx86, i32 0, i32 0
  %120 = load i8*, i8** %name87, align 8, !tbaa !46
  call void @sort_die(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.141, i64 0, i64 0), i8* %120)
  br label %if.end88

if.end88:                                         ; preds = %if.then85, %if.else
  br label %if.end89

if.end89:                                         ; preds = %if.end88, %cleanup.cont
  %121 = bitcast %struct._IO_FILE** %tfp90 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %121) #13
  %122 = bitcast %struct.tempnode** %temp91 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %122) #13
  br label %do.body

do.body:                                          ; preds = %do.cond, %if.end89
  %123 = load i64, i64* %nopened, align 8, !tbaa !14
  %dec = add i64 %123, -1
  store i64 %dec, i64* %nopened, align 8, !tbaa !14
  %124 = load %struct._IO_FILE**, %struct._IO_FILE*** %fps, align 8, !tbaa !6
  %125 = load i64, i64* %nopened, align 8, !tbaa !14
  %arrayidx92 = getelementptr inbounds %struct._IO_FILE*, %struct._IO_FILE** %124, i64 %125
  %126 = load %struct._IO_FILE*, %struct._IO_FILE** %arrayidx92, align 8, !tbaa !6
  %127 = load %struct.sortfile*, %struct.sortfile** %files.addr, align 8, !tbaa !6
  %128 = load i64, i64* %nopened, align 8, !tbaa !14
  %arrayidx93 = getelementptr inbounds %struct.sortfile, %struct.sortfile* %127, i64 %128
  %name94 = getelementptr inbounds %struct.sortfile, %struct.sortfile* %arrayidx93, i32 0, i32 0
  %129 = load i8*, i8** %name94, align 8, !tbaa !46
  call void @xfclose(%struct._IO_FILE* %126, i8* %129)
  %130 = load i64, i64* %nopened, align 8, !tbaa !14
  %cmp95 = icmp ule i64 %130, 2
  %lnot = xor i1 %cmp95, true
  %call97 = call %struct.tempnode* @maybe_create_temp(%struct._IO_FILE** %tfp90, i1 zeroext %lnot)
  store %struct.tempnode* %call97, %struct.tempnode** %temp91, align 8, !tbaa !6
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %131 = load %struct.tempnode*, %struct.tempnode** %temp91, align 8, !tbaa !6
  %tobool98 = icmp ne %struct.tempnode* %131, null
  %lnot99 = xor i1 %tobool98, true
  br i1 %lnot99, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %132 = load %struct.sortfile*, %struct.sortfile** %files.addr, align 8, !tbaa !6
  %arrayidx100 = getelementptr inbounds %struct.sortfile, %struct.sortfile* %132, i64 0
  %133 = load i64, i64* %ntemps.addr, align 8, !tbaa !14
  %134 = load i64, i64* %nopened, align 8, !tbaa !14
  %cmp101 = icmp ult i64 %133, %134
  br i1 %cmp101, label %cond.true103, label %cond.false104

cond.true103:                                     ; preds = %do.end
  %135 = load i64, i64* %ntemps.addr, align 8, !tbaa !14
  br label %cond.end105

cond.false104:                                    ; preds = %do.end
  %136 = load i64, i64* %nopened, align 8, !tbaa !14
  br label %cond.end105

cond.end105:                                      ; preds = %cond.false104, %cond.true103
  %cond106 = phi i64 [ %135, %cond.true103 ], [ %136, %cond.false104 ]
  %137 = load i64, i64* %nopened, align 8, !tbaa !14
  %138 = load %struct._IO_FILE*, %struct._IO_FILE** %tfp90, align 8, !tbaa !6
  %139 = load %struct.tempnode*, %struct.tempnode** %temp91, align 8, !tbaa !6
  %name107 = getelementptr inbounds %struct.tempnode, %struct.tempnode* %139, i32 0, i32 3
  %arraydecay108 = getelementptr inbounds [0 x i8], [0 x i8]* %name107, i64 0, i64 0
  %140 = load %struct._IO_FILE**, %struct._IO_FILE*** %fps, align 8, !tbaa !6
  call void @mergefps(%struct.sortfile* %arrayidx100, i64 %cond106, i64 %137, %struct._IO_FILE* %138, i8* %arraydecay108, %struct._IO_FILE** %140)
  %141 = load i64, i64* %ntemps.addr, align 8, !tbaa !14
  %142 = load i64, i64* %nopened, align 8, !tbaa !14
  %cmp109 = icmp ult i64 %141, %142
  br i1 %cmp109, label %cond.true111, label %cond.false112

cond.true111:                                     ; preds = %cond.end105
  %143 = load i64, i64* %ntemps.addr, align 8, !tbaa !14
  br label %cond.end113

cond.false112:                                    ; preds = %cond.end105
  %144 = load i64, i64* %nopened, align 8, !tbaa !14
  br label %cond.end113

cond.end113:                                      ; preds = %cond.false112, %cond.true111
  %cond114 = phi i64 [ %143, %cond.true111 ], [ %144, %cond.false112 ]
  %145 = load i64, i64* %ntemps.addr, align 8, !tbaa !14
  %sub115 = sub i64 %145, %cond114
  store i64 %sub115, i64* %ntemps.addr, align 8, !tbaa !14
  %146 = load %struct.tempnode*, %struct.tempnode** %temp91, align 8, !tbaa !6
  %name116 = getelementptr inbounds %struct.tempnode, %struct.tempnode* %146, i32 0, i32 3
  %arraydecay117 = getelementptr inbounds [0 x i8], [0 x i8]* %name116, i64 0, i64 0
  %147 = load %struct.sortfile*, %struct.sortfile** %files.addr, align 8, !tbaa !6
  %arrayidx118 = getelementptr inbounds %struct.sortfile, %struct.sortfile* %147, i64 0
  %name119 = getelementptr inbounds %struct.sortfile, %struct.sortfile* %arrayidx118, i32 0, i32 0
  store i8* %arraydecay117, i8** %name119, align 8, !tbaa !46
  %148 = load %struct.tempnode*, %struct.tempnode** %temp91, align 8, !tbaa !6
  %149 = load %struct.sortfile*, %struct.sortfile** %files.addr, align 8, !tbaa !6
  %arrayidx120 = getelementptr inbounds %struct.sortfile, %struct.sortfile* %149, i64 0
  %temp121 = getelementptr inbounds %struct.sortfile, %struct.sortfile* %arrayidx120, i32 0, i32 1
  store %struct.tempnode* %148, %struct.tempnode** %temp121, align 8, !tbaa !68
  %150 = load %struct.sortfile*, %struct.sortfile** %files.addr, align 8, !tbaa !6
  %arrayidx122 = getelementptr inbounds %struct.sortfile, %struct.sortfile* %150, i64 1
  %151 = bitcast %struct.sortfile* %arrayidx122 to i8*
  %152 = load %struct.sortfile*, %struct.sortfile** %files.addr, align 8, !tbaa !6
  %153 = load i64, i64* %nopened, align 8, !tbaa !14
  %arrayidx123 = getelementptr inbounds %struct.sortfile, %struct.sortfile* %152, i64 %153
  %154 = bitcast %struct.sortfile* %arrayidx123 to i8*
  %155 = load i64, i64* %nfiles.addr, align 8, !tbaa !14
  %156 = load i64, i64* %nopened, align 8, !tbaa !14
  %sub124 = sub i64 %155, %156
  %mul125 = mul i64 %sub124, 16
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %151, i8* align 8 %154, i64 %mul125, i1 false)
  %157 = load i64, i64* %ntemps.addr, align 8, !tbaa !14
  %inc126 = add i64 %157, 1
  store i64 %inc126, i64* %ntemps.addr, align 8, !tbaa !14
  %158 = load i64, i64* %nopened, align 8, !tbaa !14
  %sub127 = sub i64 %158, 1
  %159 = load i64, i64* %nfiles.addr, align 8, !tbaa !14
  %sub128 = sub i64 %159, %sub127
  store i64 %sub128, i64* %nfiles.addr, align 8, !tbaa !14
  %160 = bitcast %struct.tempnode** %temp91 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %160) #13
  %161 = bitcast %struct._IO_FILE** %tfp90 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %161) #13
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup129

cleanup129:                                       ; preds = %cond.end113, %cleanup
  %162 = bitcast i64* %nopened to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %162) #13
  %163 = bitcast %struct._IO_FILE*** %fps to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %163) #13
  %cleanup.dest131 = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest131, label %unreachable [
    i32 0, label %cleanup.cont132
    i32 8, label %while.end133
  ]

cleanup.cont132:                                  ; preds = %cleanup129
  br label %while.body68

while.end133:                                     ; preds = %cleanup129
  ret void

unreachable:                                      ; preds = %cleanup129
  unreachable
}

; Function Attrs: nounwind uwtable
define internal void @sort(i8** %files, i64 %nfiles, i8* %output_file, i64 %nthreads) #7 {
entry:
  %files.addr = alloca i8**, align 8
  %nfiles.addr = alloca i64, align 8
  %output_file.addr = alloca i8*, align 8
  %nthreads.addr = alloca i64, align 8
  %buf = alloca %struct.buffer, align 8
  %ntemps = alloca i64, align 8
  %output_file_created = alloca i8, align 1
  %temp_output = alloca i8*, align 8
  %file = alloca i8*, align 8
  %fp = alloca %struct._IO_FILE*, align 8
  %tfp = alloca %struct._IO_FILE*, align 8
  %bytes_per_line = alloca i64, align 8
  %tmp = alloca i64, align 8
  %mult = alloca i64, align 8
  %line = alloca %struct.line*, align 8
  %cleanup.dest.slot = alloca i32, align 4
  %queue = alloca %struct.merge_node_queue, align 8
  %merge_tree = alloca %struct.merge_node*, align 8
  %node = alloca %struct.tempnode*, align 8
  %tempfiles = alloca %struct.sortfile*, align 8
  %i = alloca i64, align 8
  store i8** %files, i8*** %files.addr, align 8, !tbaa !6
  store i64 %nfiles, i64* %nfiles.addr, align 8, !tbaa !14
  store i8* %output_file, i8** %output_file.addr, align 8, !tbaa !6
  store i64 %nthreads, i64* %nthreads.addr, align 8, !tbaa !14
  %0 = bitcast %struct.buffer* %buf to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* %0) #13
  %1 = bitcast i64* %ntemps to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %1) #13
  store i64 0, i64* %ntemps, align 8, !tbaa !14
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %output_file_created) #13
  store i8 0, i8* %output_file_created, align 1, !tbaa !11
  %alloc = getelementptr inbounds %struct.buffer, %struct.buffer* %buf, i32 0, i32 3
  store i64 0, i64* %alloc, align 8, !tbaa !69
  br label %while.cond

while.cond:                                       ; preds = %cleanup.cont59, %entry
  %2 = load i64, i64* %nfiles.addr, align 8, !tbaa !14
  %tobool = icmp ne i64 %2, 0
  br i1 %tobool, label %while.body, label %while.end60

while.body:                                       ; preds = %while.cond
  %3 = bitcast i8** %temp_output to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %3) #13
  %4 = bitcast i8** %file to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %4) #13
  %5 = load i8**, i8*** %files.addr, align 8, !tbaa !6
  %6 = load i8*, i8** %5, align 8, !tbaa !6
  store i8* %6, i8** %file, align 8, !tbaa !6
  %7 = bitcast %struct._IO_FILE** %fp to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %7) #13
  %8 = load i8*, i8** %file, align 8, !tbaa !6
  %call = call %struct._IO_FILE* @xfopen(i8* %8, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.50, i64 0, i64 0))
  store %struct._IO_FILE* %call, %struct._IO_FILE** %fp, align 8, !tbaa !6
  %9 = bitcast %struct._IO_FILE** %tfp to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %9) #13
  %10 = bitcast i64* %bytes_per_line to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %10) #13
  %11 = load i64, i64* %nthreads.addr, align 8, !tbaa !14
  %cmp = icmp ugt i64 %11, 1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %while.body
  %12 = bitcast i64* %tmp to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %12) #13
  store i64 1, i64* %tmp, align 8, !tbaa !14
  %13 = bitcast i64* %mult to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %13) #13
  store i64 1, i64* %mult, align 8, !tbaa !14
  br label %while.cond1

while.cond1:                                      ; preds = %while.body3, %if.then
  %14 = load i64, i64* %tmp, align 8, !tbaa !14
  %15 = load i64, i64* %nthreads.addr, align 8, !tbaa !14
  %cmp2 = icmp ult i64 %14, %15
  br i1 %cmp2, label %while.body3, label %while.end

while.body3:                                      ; preds = %while.cond1
  %16 = load i64, i64* %tmp, align 8, !tbaa !14
  %mul = mul i64 %16, 2
  store i64 %mul, i64* %tmp, align 8, !tbaa !14
  %17 = load i64, i64* %mult, align 8, !tbaa !14
  %inc = add i64 %17, 1
  store i64 %inc, i64* %mult, align 8, !tbaa !14
  br label %while.cond1

while.end:                                        ; preds = %while.cond1
  %18 = load i64, i64* %mult, align 8, !tbaa !14
  %mul4 = mul i64 %18, 32
  store i64 %mul4, i64* %bytes_per_line, align 8, !tbaa !14
  %19 = bitcast i64* %mult to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %19) #13
  %20 = bitcast i64* %tmp to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %20) #13
  br label %if.end

if.else:                                          ; preds = %while.body
  store i64 48, i64* %bytes_per_line, align 8, !tbaa !14
  br label %if.end

if.end:                                           ; preds = %if.else, %while.end
  %alloc5 = getelementptr inbounds %struct.buffer, %struct.buffer* %buf, i32 0, i32 3
  %21 = load i64, i64* %alloc5, align 8, !tbaa !69
  %tobool6 = icmp ne i64 %21, 0
  br i1 %tobool6, label %if.end9, label %if.then7

if.then7:                                         ; preds = %if.end
  %22 = load i64, i64* %bytes_per_line, align 8, !tbaa !14
  %23 = load i8**, i8*** %files.addr, align 8, !tbaa !6
  %24 = load i64, i64* %nfiles.addr, align 8, !tbaa !14
  %25 = load i64, i64* %bytes_per_line, align 8, !tbaa !14
  %call8 = call i64 @sort_buffer_size(%struct._IO_FILE** %fp, i64 1, i8** %23, i64 %24, i64 %25)
  call void @initbuf(%struct.buffer* %buf, i64 %22, i64 %call8)
  br label %if.end9

if.end9:                                          ; preds = %if.then7, %if.end
  %eof = getelementptr inbounds %struct.buffer, %struct.buffer* %buf, i32 0, i32 6
  store i8 0, i8* %eof, align 8, !tbaa !70
  %26 = load i8**, i8*** %files.addr, align 8, !tbaa !6
  %incdec.ptr = getelementptr inbounds i8*, i8** %26, i32 1
  store i8** %incdec.ptr, i8*** %files.addr, align 8, !tbaa !6
  %27 = load i64, i64* %nfiles.addr, align 8, !tbaa !14
  %dec = add i64 %27, -1
  store i64 %dec, i64* %nfiles.addr, align 8, !tbaa !14
  br label %while.cond10

while.cond10:                                     ; preds = %cleanup.cont, %if.end9
  %28 = load %struct._IO_FILE*, %struct._IO_FILE** %fp, align 8, !tbaa !6
  %29 = load i8*, i8** %file, align 8, !tbaa !6
  %call11 = call zeroext i1 @fillbuf(%struct.buffer* %buf, %struct._IO_FILE* %28, i8* %29)
  br i1 %call11, label %while.body12, label %while.end52

while.body12:                                     ; preds = %while.cond10
  %30 = bitcast %struct.line** %line to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %30) #13
  %eof13 = getelementptr inbounds %struct.buffer, %struct.buffer* %buf, i32 0, i32 6
  %31 = load i8, i8* %eof13, align 8, !tbaa !70, !range !25
  %tobool14 = trunc i8 %31 to i1
  br i1 %tobool14, label %land.lhs.true, label %if.end23

land.lhs.true:                                    ; preds = %while.body12
  %32 = load i64, i64* %nfiles.addr, align 8, !tbaa !14
  %tobool15 = icmp ne i64 %32, 0
  br i1 %tobool15, label %land.lhs.true16, label %if.end23

land.lhs.true16:                                  ; preds = %land.lhs.true
  %33 = load i64, i64* %bytes_per_line, align 8, !tbaa !14
  %add = add i64 %33, 1
  %alloc17 = getelementptr inbounds %struct.buffer, %struct.buffer* %buf, i32 0, i32 3
  %34 = load i64, i64* %alloc17, align 8, !tbaa !69
  %used = getelementptr inbounds %struct.buffer, %struct.buffer* %buf, i32 0, i32 1
  %35 = load i64, i64* %used, align 8, !tbaa !71
  %sub = sub i64 %34, %35
  %36 = load i64, i64* %bytes_per_line, align 8, !tbaa !14
  %nlines = getelementptr inbounds %struct.buffer, %struct.buffer* %buf, i32 0, i32 2
  %37 = load i64, i64* %nlines, align 8, !tbaa !62
  %mul18 = mul i64 %36, %37
  %sub19 = sub i64 %sub, %mul18
  %cmp20 = icmp ult i64 %add, %sub19
  br i1 %cmp20, label %if.then21, label %if.end23

if.then21:                                        ; preds = %land.lhs.true16
  %used22 = getelementptr inbounds %struct.buffer, %struct.buffer* %buf, i32 0, i32 1
  %38 = load i64, i64* %used22, align 8, !tbaa !71
  %left = getelementptr inbounds %struct.buffer, %struct.buffer* %buf, i32 0, i32 4
  store i64 %38, i64* %left, align 8, !tbaa !72
  store i32 7, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end23:                                         ; preds = %land.lhs.true16, %land.lhs.true, %while.body12
  store i8* null, i8** getelementptr inbounds (%struct.line, %struct.line* @saved_line, i32 0, i32 0), align 8, !tbaa !60
  %call24 = call %struct.line* @buffer_linelim(%struct.buffer* %buf)
  store %struct.line* %call24, %struct.line** %line, align 8, !tbaa !6
  %eof25 = getelementptr inbounds %struct.buffer, %struct.buffer* %buf, i32 0, i32 6
  %39 = load i8, i8* %eof25, align 8, !tbaa !70, !range !25
  %tobool26 = trunc i8 %39 to i1
  br i1 %tobool26, label %land.lhs.true27, label %if.else36

land.lhs.true27:                                  ; preds = %if.end23
  %40 = load i64, i64* %nfiles.addr, align 8, !tbaa !14
  %tobool28 = icmp ne i64 %40, 0
  br i1 %tobool28, label %if.else36, label %land.lhs.true29

land.lhs.true29:                                  ; preds = %land.lhs.true27
  %41 = load i64, i64* %ntemps, align 8, !tbaa !14
  %tobool30 = icmp ne i64 %41, 0
  br i1 %tobool30, label %if.else36, label %land.lhs.true31

land.lhs.true31:                                  ; preds = %land.lhs.true29
  %left32 = getelementptr inbounds %struct.buffer, %struct.buffer* %buf, i32 0, i32 4
  %42 = load i64, i64* %left32, align 8, !tbaa !72
  %tobool33 = icmp ne i64 %42, 0
  br i1 %tobool33, label %if.else36, label %if.then34

if.then34:                                        ; preds = %land.lhs.true31
  %43 = load %struct._IO_FILE*, %struct._IO_FILE** %fp, align 8, !tbaa !6
  %44 = load i8*, i8** %file, align 8, !tbaa !6
  call void @xfclose(%struct._IO_FILE* %43, i8* %44)
  %45 = load i8*, i8** %output_file.addr, align 8, !tbaa !6
  %call35 = call %struct._IO_FILE* @xfopen(i8* %45, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.174, i64 0, i64 0))
  store %struct._IO_FILE* %call35, %struct._IO_FILE** %tfp, align 8, !tbaa !6
  %46 = load i8*, i8** %output_file.addr, align 8, !tbaa !6
  store i8* %46, i8** %temp_output, align 8, !tbaa !6
  store i8 1, i8* %output_file_created, align 1, !tbaa !11
  br label %if.end39

if.else36:                                        ; preds = %land.lhs.true31, %land.lhs.true29, %land.lhs.true27, %if.end23
  %47 = load i64, i64* %ntemps, align 8, !tbaa !14
  %inc37 = add i64 %47, 1
  store i64 %inc37, i64* %ntemps, align 8, !tbaa !14
  %call38 = call %struct.tempnode* @create_temp(%struct._IO_FILE** %tfp)
  %name = getelementptr inbounds %struct.tempnode, %struct.tempnode* %call38, i32 0, i32 3
  %arraydecay = getelementptr inbounds [0 x i8], [0 x i8]* %name, i64 0, i64 0
  store i8* %arraydecay, i8** %temp_output, align 8, !tbaa !6
  br label %if.end39

if.end39:                                         ; preds = %if.else36, %if.then34
  %nlines40 = getelementptr inbounds %struct.buffer, %struct.buffer* %buf, i32 0, i32 2
  %48 = load i64, i64* %nlines40, align 8, !tbaa !62
  %cmp41 = icmp ult i64 1, %48
  br i1 %cmp41, label %if.then42, label %if.else46

if.then42:                                        ; preds = %if.end39
  %49 = bitcast %struct.merge_node_queue* %queue to i8*
  call void @llvm.lifetime.start.p0i8(i64 96, i8* %49) #13
  %50 = load i64, i64* %nthreads.addr, align 8, !tbaa !14
  call void @queue_init(%struct.merge_node_queue* %queue, i64 %50)
  %51 = bitcast %struct.merge_node** %merge_tree to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %51) #13
  %52 = load i64, i64* %nthreads.addr, align 8, !tbaa !14
  %nlines43 = getelementptr inbounds %struct.buffer, %struct.buffer* %buf, i32 0, i32 2
  %53 = load i64, i64* %nlines43, align 8, !tbaa !62
  %54 = load %struct.line*, %struct.line** %line, align 8, !tbaa !6
  %call44 = call %struct.merge_node* @merge_tree_init(i64 %52, i64 %53, %struct.line* %54)
  store %struct.merge_node* %call44, %struct.merge_node** %merge_tree, align 8, !tbaa !6
  %55 = load %struct.line*, %struct.line** %line, align 8, !tbaa !6
  %56 = load i64, i64* %nthreads.addr, align 8, !tbaa !14
  %nlines45 = getelementptr inbounds %struct.buffer, %struct.buffer* %buf, i32 0, i32 2
  %57 = load i64, i64* %nlines45, align 8, !tbaa !62
  %58 = load %struct.merge_node*, %struct.merge_node** %merge_tree, align 8, !tbaa !6
  %add.ptr = getelementptr inbounds %struct.merge_node, %struct.merge_node* %58, i64 1
  %59 = load %struct._IO_FILE*, %struct._IO_FILE** %tfp, align 8, !tbaa !6
  %60 = load i8*, i8** %temp_output, align 8, !tbaa !6
  call void @sortlines(%struct.line* %55, i64 %56, i64 %57, %struct.merge_node* %add.ptr, %struct.merge_node_queue* %queue, %struct._IO_FILE* %59, i8* %60)
  %61 = bitcast %struct.merge_node** %merge_tree to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %61) #13
  %62 = bitcast %struct.merge_node_queue* %queue to i8*
  call void @llvm.lifetime.end.p0i8(i64 96, i8* %62) #13
  br label %if.end48

if.else46:                                        ; preds = %if.end39
  %63 = load %struct.line*, %struct.line** %line, align 8, !tbaa !6
  %add.ptr47 = getelementptr inbounds %struct.line, %struct.line* %63, i64 -1
  %64 = load %struct._IO_FILE*, %struct._IO_FILE** %tfp, align 8, !tbaa !6
  %65 = load i8*, i8** %temp_output, align 8, !tbaa !6
  call void @write_unique(%struct.line* %add.ptr47, %struct._IO_FILE* %64, i8* %65)
  br label %if.end48

if.end48:                                         ; preds = %if.else46, %if.then42
  %66 = load %struct._IO_FILE*, %struct._IO_FILE** %tfp, align 8, !tbaa !6
  %67 = load i8*, i8** %temp_output, align 8, !tbaa !6
  call void @xfclose(%struct._IO_FILE* %66, i8* %67)
  %68 = load i8, i8* %output_file_created, align 1, !tbaa !11, !range !25
  %tobool49 = trunc i8 %68 to i1
  br i1 %tobool49, label %if.then50, label %if.end51

if.then50:                                        ; preds = %if.end48
  store i32 8, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end51:                                         ; preds = %if.end48
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.then50, %if.end51, %if.then21
  %69 = bitcast %struct.line** %line to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %69) #13
  %cleanup.dest = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest, label %cleanup53 [
    i32 0, label %cleanup.cont
    i32 7, label %while.end52
  ]

cleanup.cont:                                     ; preds = %cleanup
  br label %while.cond10

while.end52:                                      ; preds = %cleanup, %while.cond10
  %70 = load %struct._IO_FILE*, %struct._IO_FILE** %fp, align 8, !tbaa !6
  %71 = load i8*, i8** %file, align 8, !tbaa !6
  call void @xfclose(%struct._IO_FILE* %70, i8* %71)
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup53

cleanup53:                                        ; preds = %while.end52, %cleanup
  %72 = bitcast i64* %bytes_per_line to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %72) #13
  %73 = bitcast %struct._IO_FILE** %tfp to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %73) #13
  %74 = bitcast %struct._IO_FILE** %fp to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %74) #13
  %75 = bitcast i8** %file to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %75) #13
  %76 = bitcast i8** %temp_output to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %76) #13
  %cleanup.dest58 = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest58, label %unreachable [
    i32 0, label %cleanup.cont59
    i32 8, label %finish
  ]

cleanup.cont59:                                   ; preds = %cleanup53
  br label %while.cond

while.end60:                                      ; preds = %while.cond
  br label %finish

finish:                                           ; preds = %while.end60, %cleanup53
  %buf61 = getelementptr inbounds %struct.buffer, %struct.buffer* %buf, i32 0, i32 0
  %77 = load i8*, i8** %buf61, align 8, !tbaa !67
  call void @rpl_free(i8* %77)
  %78 = load i8, i8* %output_file_created, align 1, !tbaa !11, !range !25
  %tobool62 = trunc i8 %78 to i1
  br i1 %tobool62, label %if.end72, label %if.then63

if.then63:                                        ; preds = %finish
  %79 = bitcast %struct.tempnode** %node to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %79) #13
  %80 = load volatile %struct.tempnode*, %struct.tempnode** @temphead, align 8, !tbaa !6
  store %struct.tempnode* %80, %struct.tempnode** %node, align 8, !tbaa !6
  %81 = bitcast %struct.sortfile** %tempfiles to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %81) #13
  %82 = load i64, i64* %ntemps, align 8, !tbaa !14
  %call64 = call noalias nonnull i8* @xnmalloc(i64 %82, i64 16) #23
  %83 = bitcast i8* %call64 to %struct.sortfile*
  store %struct.sortfile* %83, %struct.sortfile** %tempfiles, align 8, !tbaa !6
  %84 = bitcast i64* %i to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %84) #13
  store i64 0, i64* %i, align 8, !tbaa !14
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then63
  %85 = load %struct.tempnode*, %struct.tempnode** %node, align 8, !tbaa !6
  %tobool65 = icmp ne %struct.tempnode* %85, null
  br i1 %tobool65, label %for.body, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond
  store i32 9, i32* %cleanup.dest.slot, align 4
  %86 = bitcast i64* %i to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %86) #13
  br label %for.end

for.body:                                         ; preds = %for.cond
  %87 = load %struct.tempnode*, %struct.tempnode** %node, align 8, !tbaa !6
  %name66 = getelementptr inbounds %struct.tempnode, %struct.tempnode* %87, i32 0, i32 3
  %arraydecay67 = getelementptr inbounds [0 x i8], [0 x i8]* %name66, i64 0, i64 0
  %88 = load %struct.sortfile*, %struct.sortfile** %tempfiles, align 8, !tbaa !6
  %89 = load i64, i64* %i, align 8, !tbaa !14
  %arrayidx = getelementptr inbounds %struct.sortfile, %struct.sortfile* %88, i64 %89
  %name68 = getelementptr inbounds %struct.sortfile, %struct.sortfile* %arrayidx, i32 0, i32 0
  store i8* %arraydecay67, i8** %name68, align 8, !tbaa !46
  %90 = load %struct.tempnode*, %struct.tempnode** %node, align 8, !tbaa !6
  %91 = load %struct.sortfile*, %struct.sortfile** %tempfiles, align 8, !tbaa !6
  %92 = load i64, i64* %i, align 8, !tbaa !14
  %arrayidx69 = getelementptr inbounds %struct.sortfile, %struct.sortfile* %91, i64 %92
  %temp = getelementptr inbounds %struct.sortfile, %struct.sortfile* %arrayidx69, i32 0, i32 1
  store %struct.tempnode* %90, %struct.tempnode** %temp, align 8, !tbaa !68
  %93 = load %struct.tempnode*, %struct.tempnode** %node, align 8, !tbaa !6
  %next = getelementptr inbounds %struct.tempnode, %struct.tempnode* %93, i32 0, i32 0
  %94 = load volatile %struct.tempnode*, %struct.tempnode** %next, align 8, !tbaa !6
  store %struct.tempnode* %94, %struct.tempnode** %node, align 8, !tbaa !6
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %95 = load i64, i64* %i, align 8, !tbaa !14
  %inc70 = add i64 %95, 1
  store i64 %inc70, i64* %i, align 8, !tbaa !14
  br label %for.cond

for.end:                                          ; preds = %for.cond.cleanup
  %96 = load %struct.sortfile*, %struct.sortfile** %tempfiles, align 8, !tbaa !6
  %97 = load i64, i64* %ntemps, align 8, !tbaa !14
  %98 = load i64, i64* %ntemps, align 8, !tbaa !14
  %99 = load i8*, i8** %output_file.addr, align 8, !tbaa !6
  call void @merge(%struct.sortfile* %96, i64 %97, i64 %98, i8* %99)
  %100 = load %struct.sortfile*, %struct.sortfile** %tempfiles, align 8, !tbaa !6
  %101 = bitcast %struct.sortfile* %100 to i8*
  call void @rpl_free(i8* %101)
  %102 = bitcast %struct.sortfile** %tempfiles to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %102) #13
  %103 = bitcast %struct.tempnode** %node to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %103) #13
  br label %if.end72

if.end72:                                         ; preds = %for.end, %finish
  call void @reap_all()
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %output_file_created) #13
  %104 = bitcast i64* %ntemps to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %104) #13
  %105 = bitcast %struct.buffer* %buf to i8*
  call void @llvm.lifetime.end.p0i8(i64 56, i8* %105) #13
  ret void

unreachable:                                      ; preds = %cleanup53
  unreachable
}

; Function Attrs: nounwind uwtable
define internal void @sort_die(i8* %message, i8* %file) #7 {
entry:
  %message.addr = alloca i8*, align 8
  %file.addr = alloca i8*, align 8
  store i8* %message, i8** %message.addr, align 8, !tbaa !6
  store i8* %file, i8** %file.addr, align 8, !tbaa !6
  %call = call i32* @__errno_location() #26
  %0 = load i32, i32* %call, align 4, !tbaa !2
  %1 = load i8*, i8** %message.addr, align 8, !tbaa !6
  %2 = load i8*, i8** %file.addr, align 8, !tbaa !6
  %tobool = icmp ne i8* %2, null
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %3 = load i8*, i8** %file.addr, align 8, !tbaa !6
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %3, %cond.true ], [ getelementptr inbounds ([16 x i8], [16 x i8]* @.str.188, i64 0, i64 0), %cond.false ]
  %call1 = call i8* @quotearg_n_style_colon(i32 0, i32 3, i8* %cond)
  call void (i32, i32, i8*, ...) @error(i32 2, i32 %0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.187, i64 0, i64 0), i8* %1, i8* %call1)
  unreachable
}

; Function Attrs: nounwind readnone
declare dso_local i32* @__errno_location() #8

; Function Attrs: nounwind uwtable
define internal i64 @sort_buffer_size(%struct._IO_FILE** %fps, i64 %nfps, i8** %files, i64 %nfiles, i64 %line_bytes) #7 {
entry:
  %retval = alloca i64, align 8
  %fps.addr = alloca %struct._IO_FILE**, align 8
  %nfps.addr = alloca i64, align 8
  %files.addr = alloca i8**, align 8
  %nfiles.addr = alloca i64, align 8
  %line_bytes.addr = alloca i64, align 8
  %worst_case_per_input_byte = alloca i64, align 8
  %size = alloca i64, align 8
  %i = alloca i64, align 8
  %cleanup.dest.slot = alloca i32, align 4
  %st = alloca %struct.stat, align 8
  %file_size = alloca i64, align 8
  %worst_case = alloca i64, align 8
  store %struct._IO_FILE** %fps, %struct._IO_FILE*** %fps.addr, align 8, !tbaa !6
  store i64 %nfps, i64* %nfps.addr, align 8, !tbaa !14
  store i8** %files, i8*** %files.addr, align 8, !tbaa !6
  store i64 %nfiles, i64* %nfiles.addr, align 8, !tbaa !14
  store i64 %line_bytes, i64* %line_bytes.addr, align 8, !tbaa !14
  %0 = bitcast i64* %worst_case_per_input_byte to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #13
  %1 = load i64, i64* %line_bytes.addr, align 8, !tbaa !14
  %add = add i64 %1, 1
  store i64 %add, i64* %worst_case_per_input_byte, align 8, !tbaa !14
  %2 = bitcast i64* %size to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %2) #13
  %3 = load i64, i64* %worst_case_per_input_byte, align 8, !tbaa !14
  %add1 = add i64 %3, 1
  store i64 %add1, i64* %size, align 8, !tbaa !14
  %4 = bitcast i64* %i to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %4) #13
  store i64 0, i64* %i, align 8, !tbaa !14
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %5 = load i64, i64* %i, align 8, !tbaa !14
  %6 = load i64, i64* %nfiles.addr, align 8, !tbaa !14
  %cmp = icmp ult i64 %5, %6
  br i1 %cmp, label %for.body, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond
  store i32 2, i32* %cleanup.dest.slot, align 4
  br label %cleanup36

for.body:                                         ; preds = %for.cond
  %7 = bitcast %struct.stat* %st to i8*
  call void @llvm.lifetime.start.p0i8(i64 144, i8* %7) #13
  %8 = bitcast i64* %file_size to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %8) #13
  %9 = bitcast i64* %worst_case to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %9) #13
  %10 = load i64, i64* %i, align 8, !tbaa !14
  %11 = load i64, i64* %nfps.addr, align 8, !tbaa !14
  %cmp2 = icmp ult i64 %10, %11
  br i1 %cmp2, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.body
  %12 = load %struct._IO_FILE**, %struct._IO_FILE*** %fps.addr, align 8, !tbaa !6
  %13 = load i64, i64* %i, align 8, !tbaa !14
  %arrayidx = getelementptr inbounds %struct._IO_FILE*, %struct._IO_FILE** %12, i64 %13
  %14 = load %struct._IO_FILE*, %struct._IO_FILE** %arrayidx, align 8, !tbaa !6
  %call = call i32 @fileno(%struct._IO_FILE* %14) #13
  %call3 = call i32 @fstat(i32 %call, %struct.stat* %st) #13
  br label %cond.end12

cond.false:                                       ; preds = %for.body
  %15 = load i8**, i8*** %files.addr, align 8, !tbaa !6
  %16 = load i64, i64* %i, align 8, !tbaa !14
  %arrayidx4 = getelementptr inbounds i8*, i8** %15, i64 %16
  %17 = load i8*, i8** %arrayidx4, align 8, !tbaa !6
  %call5 = call i32 @strcmp(i8* %17, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.52, i64 0, i64 0)) #22
  %cmp6 = icmp eq i32 %call5, 0
  br i1 %cmp6, label %cond.true7, label %cond.false9

cond.true7:                                       ; preds = %cond.false
  %call8 = call i32 @fstat(i32 0, %struct.stat* %st) #13
  br label %cond.end

cond.false9:                                      ; preds = %cond.false
  %18 = load i8**, i8*** %files.addr, align 8, !tbaa !6
  %19 = load i64, i64* %i, align 8, !tbaa !14
  %arrayidx10 = getelementptr inbounds i8*, i8** %18, i64 %19
  %20 = load i8*, i8** %arrayidx10, align 8, !tbaa !6
  %call11 = call i32 @stat(i8* %20, %struct.stat* %st) #13
  br label %cond.end

cond.end:                                         ; preds = %cond.false9, %cond.true7
  %cond = phi i32 [ %call8, %cond.true7 ], [ %call11, %cond.false9 ]
  br label %cond.end12

cond.end12:                                       ; preds = %cond.end, %cond.true
  %cond13 = phi i32 [ %call3, %cond.true ], [ %cond, %cond.end ]
  %cmp14 = icmp ne i32 %cond13, 0
  br i1 %cmp14, label %if.then, label %if.end

if.then:                                          ; preds = %cond.end12
  %21 = load i8**, i8*** %files.addr, align 8, !tbaa !6
  %22 = load i64, i64* %i, align 8, !tbaa !14
  %arrayidx15 = getelementptr inbounds i8*, i8** %21, i64 %22
  %23 = load i8*, i8** %arrayidx15, align 8, !tbaa !6
  call void @sort_die(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.186, i64 0, i64 0), i8* %23)
  br label %if.end

if.end:                                           ; preds = %if.then, %cond.end12
  %st_mode = getelementptr inbounds %struct.stat, %struct.stat* %st, i32 0, i32 3
  %24 = load i32, i32* %st_mode, align 8, !tbaa !73
  %and = and i32 %24, 61440
  %cmp16 = icmp eq i32 %and, 32768
  br i1 %cmp16, label %if.then17, label %if.else

if.then17:                                        ; preds = %if.end
  %st_size = getelementptr inbounds %struct.stat, %struct.stat* %st, i32 0, i32 8
  %25 = load i64, i64* %st_size, align 8, !tbaa !76
  store i64 %25, i64* %file_size, align 8, !tbaa !14
  br label %if.end20

if.else:                                          ; preds = %if.end
  %26 = load i64, i64* @sort_size, align 8, !tbaa !14
  %tobool = icmp ne i64 %26, 0
  br i1 %tobool, label %if.then18, label %if.end19

if.then18:                                        ; preds = %if.else
  %27 = load i64, i64* @sort_size, align 8, !tbaa !14
  store i64 %27, i64* %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end19:                                         ; preds = %if.else
  store i64 131072, i64* %file_size, align 8, !tbaa !14
  br label %if.end20

if.end20:                                         ; preds = %if.end19, %if.then17
  %28 = load i64, i64* @sort_buffer_size.size_bound, align 8, !tbaa !14
  %tobool21 = icmp ne i64 %28, 0
  br i1 %tobool21, label %if.end27, label %if.then22

if.then22:                                        ; preds = %if.end20
  %29 = load i64, i64* @sort_size, align 8, !tbaa !14
  store i64 %29, i64* @sort_buffer_size.size_bound, align 8, !tbaa !14
  %30 = load i64, i64* @sort_buffer_size.size_bound, align 8, !tbaa !14
  %tobool23 = icmp ne i64 %30, 0
  br i1 %tobool23, label %if.end26, label %if.then24

if.then24:                                        ; preds = %if.then22
  %call25 = call i64 @default_sort_size()
  store i64 %call25, i64* @sort_buffer_size.size_bound, align 8, !tbaa !14
  br label %if.end26

if.end26:                                         ; preds = %if.then24, %if.then22
  br label %if.end27

if.end27:                                         ; preds = %if.end26, %if.end20
  %31 = load i64, i64* %file_size, align 8, !tbaa !14
  %32 = load i64, i64* %worst_case_per_input_byte, align 8, !tbaa !14
  %mul = mul i64 %31, %32
  %add28 = add i64 %mul, 1
  store i64 %add28, i64* %worst_case, align 8, !tbaa !14
  %33 = load i64, i64* %file_size, align 8, !tbaa !14
  %34 = load i64, i64* %worst_case, align 8, !tbaa !14
  %35 = load i64, i64* %worst_case_per_input_byte, align 8, !tbaa !14
  %div = udiv i64 %34, %35
  %cmp29 = icmp ne i64 %33, %div
  br i1 %cmp29, label %if.then31, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end27
  %36 = load i64, i64* @sort_buffer_size.size_bound, align 8, !tbaa !14
  %37 = load i64, i64* %size, align 8, !tbaa !14
  %sub = sub i64 %36, %37
  %38 = load i64, i64* %worst_case, align 8, !tbaa !14
  %cmp30 = icmp ule i64 %sub, %38
  br i1 %cmp30, label %if.then31, label %if.end32

if.then31:                                        ; preds = %lor.lhs.false, %if.end27
  %39 = load i64, i64* @sort_buffer_size.size_bound, align 8, !tbaa !14
  store i64 %39, i64* %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end32:                                         ; preds = %lor.lhs.false
  %40 = load i64, i64* %worst_case, align 8, !tbaa !14
  %41 = load i64, i64* %size, align 8, !tbaa !14
  %add33 = add i64 %41, %40
  store i64 %add33, i64* %size, align 8, !tbaa !14
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end32, %if.then31, %if.then18
  %42 = bitcast i64* %worst_case to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %42) #13
  %43 = bitcast i64* %file_size to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %43) #13
  %44 = bitcast %struct.stat* %st to i8*
  call void @llvm.lifetime.end.p0i8(i64 144, i8* %44) #13
  %cleanup.dest = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest, label %cleanup36 [
    i32 0, label %cleanup.cont
  ]

cleanup.cont:                                     ; preds = %cleanup
  br label %for.inc

for.inc:                                          ; preds = %cleanup.cont
  %45 = load i64, i64* %i, align 8, !tbaa !14
  %inc = add i64 %45, 1
  store i64 %inc, i64* %i, align 8, !tbaa !14
  br label %for.cond

cleanup36:                                        ; preds = %cleanup, %for.cond.cleanup
  %46 = bitcast i64* %i to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %46) #13
  %cleanup.dest37 = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest37, label %cleanup38 [
    i32 2, label %for.end
  ]

for.end:                                          ; preds = %cleanup36
  %47 = load i64, i64* %size, align 8, !tbaa !14
  store i64 %47, i64* %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup38

cleanup38:                                        ; preds = %for.end, %cleanup36
  %48 = bitcast i64* %size to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %48) #13
  %49 = bitcast i64* %worst_case_per_input_byte to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %49) #13
  %50 = load i64, i64* %retval, align 8
  ret i64 %50
}

; Function Attrs: nounwind uwtable
define internal void @initbuf(%struct.buffer* %buf, i64 %line_bytes, i64 %alloc) #7 {
entry:
  %buf.addr = alloca %struct.buffer*, align 8
  %line_bytes.addr = alloca i64, align 8
  %alloc.addr = alloca i64, align 8
  store %struct.buffer* %buf, %struct.buffer** %buf.addr, align 8, !tbaa !6
  store i64 %line_bytes, i64* %line_bytes.addr, align 8, !tbaa !14
  store i64 %alloc, i64* %alloc.addr, align 8, !tbaa !14
  br label %while.body

while.body:                                       ; preds = %entry, %if.end5
  %0 = load i64, i64* %alloc.addr, align 8, !tbaa !14
  %rem = urem i64 %0, 32
  %sub = sub i64 32, %rem
  %1 = load i64, i64* %alloc.addr, align 8, !tbaa !14
  %add = add i64 %1, %sub
  store i64 %add, i64* %alloc.addr, align 8, !tbaa !14
  %2 = load i64, i64* %alloc.addr, align 8, !tbaa !14
  %call = call noalias i8* @malloc(i64 %2) #13
  %3 = load %struct.buffer*, %struct.buffer** %buf.addr, align 8, !tbaa !6
  %buf1 = getelementptr inbounds %struct.buffer, %struct.buffer* %3, i32 0, i32 0
  store i8* %call, i8** %buf1, align 8, !tbaa !67
  %4 = load %struct.buffer*, %struct.buffer** %buf.addr, align 8, !tbaa !6
  %buf2 = getelementptr inbounds %struct.buffer, %struct.buffer* %4, i32 0, i32 0
  %5 = load i8*, i8** %buf2, align 8, !tbaa !67
  %tobool = icmp ne i8* %5, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  br label %while.end

if.end:                                           ; preds = %while.body
  %6 = load i64, i64* %alloc.addr, align 8, !tbaa !14
  %div = udiv i64 %6, 2
  store i64 %div, i64* %alloc.addr, align 8, !tbaa !14
  %7 = load i64, i64* %alloc.addr, align 8, !tbaa !14
  %8 = load i64, i64* %line_bytes.addr, align 8, !tbaa !14
  %add3 = add i64 %8, 1
  %cmp = icmp ule i64 %7, %add3
  br i1 %cmp, label %if.then4, label %if.end5

if.then4:                                         ; preds = %if.end
  call void @xalloc_die() #24
  unreachable

if.end5:                                          ; preds = %if.end
  br label %while.body

while.end:                                        ; preds = %if.then
  %9 = load i64, i64* %line_bytes.addr, align 8, !tbaa !14
  %10 = load %struct.buffer*, %struct.buffer** %buf.addr, align 8, !tbaa !6
  %line_bytes6 = getelementptr inbounds %struct.buffer, %struct.buffer* %10, i32 0, i32 5
  store i64 %9, i64* %line_bytes6, align 8, !tbaa !77
  %11 = load i64, i64* %alloc.addr, align 8, !tbaa !14
  %12 = load %struct.buffer*, %struct.buffer** %buf.addr, align 8, !tbaa !6
  %alloc7 = getelementptr inbounds %struct.buffer, %struct.buffer* %12, i32 0, i32 3
  store i64 %11, i64* %alloc7, align 8, !tbaa !69
  %13 = load %struct.buffer*, %struct.buffer** %buf.addr, align 8, !tbaa !6
  %nlines = getelementptr inbounds %struct.buffer, %struct.buffer* %13, i32 0, i32 2
  store i64 0, i64* %nlines, align 8, !tbaa !62
  %14 = load %struct.buffer*, %struct.buffer** %buf.addr, align 8, !tbaa !6
  %left = getelementptr inbounds %struct.buffer, %struct.buffer* %14, i32 0, i32 4
  store i64 0, i64* %left, align 8, !tbaa !72
  %15 = load %struct.buffer*, %struct.buffer** %buf.addr, align 8, !tbaa !6
  %used = getelementptr inbounds %struct.buffer, %struct.buffer* %15, i32 0, i32 1
  store i64 0, i64* %used, align 8, !tbaa !71
  %16 = load %struct.buffer*, %struct.buffer** %buf.addr, align 8, !tbaa !6
  %eof = getelementptr inbounds %struct.buffer, %struct.buffer* %16, i32 0, i32 6
  store i8 0, i8* %eof, align 8, !tbaa !70
  ret void
}

; Function Attrs: nounwind uwtable
define internal zeroext i1 @fillbuf(%struct.buffer* %buf, %struct._IO_FILE* %fp, i8* %file) #7 {
entry:
  %retval = alloca i1, align 1
  %buf.addr = alloca %struct.buffer*, align 8
  %fp.addr = alloca %struct._IO_FILE*, align 8
  %file.addr = alloca i8*, align 8
  %key = alloca %struct.keyfield*, align 8
  %eol = alloca i8, align 1
  %line_bytes = alloca i64, align 8
  %mergesize = alloca i64, align 8
  %cleanup.dest.slot = alloca i32, align 4
  %ptr = alloca i8*, align 8
  %linelim = alloca %struct.line*, align 8
  %line = alloca %struct.line*, align 8
  %avail = alloca i64, align 8
  %line_start = alloca i8*, align 8
  %readsize = alloca i64, align 8
  %bytes_read = alloca i64, align 8
  %ptrlim = alloca i8*, align 8
  %p = alloca i8*, align 8
  %line_alloc = alloca i64, align 8
  store %struct.buffer* %buf, %struct.buffer** %buf.addr, align 8, !tbaa !6
  store %struct._IO_FILE* %fp, %struct._IO_FILE** %fp.addr, align 8, !tbaa !6
  store i8* %file, i8** %file.addr, align 8, !tbaa !6
  %0 = bitcast %struct.keyfield** %key to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #13
  %1 = load %struct.keyfield*, %struct.keyfield** @keylist, align 8, !tbaa !6
  store %struct.keyfield* %1, %struct.keyfield** %key, align 8, !tbaa !6
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %eol) #13
  %2 = load i8, i8* @eolchar, align 1, !tbaa !13
  store i8 %2, i8* %eol, align 1, !tbaa !13
  %3 = bitcast i64* %line_bytes to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %3) #13
  %4 = load %struct.buffer*, %struct.buffer** %buf.addr, align 8, !tbaa !6
  %line_bytes1 = getelementptr inbounds %struct.buffer, %struct.buffer* %4, i32 0, i32 5
  %5 = load i64, i64* %line_bytes1, align 8, !tbaa !77
  store i64 %5, i64* %line_bytes, align 8, !tbaa !14
  %6 = bitcast i64* %mergesize to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %6) #13
  %7 = load i64, i64* @merge_buffer_size, align 8, !tbaa !14
  %sub = sub i64 %7, 34
  store i64 %sub, i64* %mergesize, align 8, !tbaa !14
  %8 = load %struct.buffer*, %struct.buffer** %buf.addr, align 8, !tbaa !6
  %eof = getelementptr inbounds %struct.buffer, %struct.buffer* %8, i32 0, i32 6
  %9 = load i8, i8* %eof, align 8, !tbaa !70, !range !25
  %tobool = trunc i8 %9 to i1
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i1 false, i1* %retval, align 1
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup146

if.end:                                           ; preds = %entry
  %10 = load %struct.buffer*, %struct.buffer** %buf.addr, align 8, !tbaa !6
  %used = getelementptr inbounds %struct.buffer, %struct.buffer* %10, i32 0, i32 1
  %11 = load i64, i64* %used, align 8, !tbaa !71
  %12 = load %struct.buffer*, %struct.buffer** %buf.addr, align 8, !tbaa !6
  %left = getelementptr inbounds %struct.buffer, %struct.buffer* %12, i32 0, i32 4
  %13 = load i64, i64* %left, align 8, !tbaa !72
  %cmp = icmp ne i64 %11, %13
  br i1 %cmp, label %if.then2, label %if.end11

if.then2:                                         ; preds = %if.end
  %14 = load %struct.buffer*, %struct.buffer** %buf.addr, align 8, !tbaa !6
  %buf3 = getelementptr inbounds %struct.buffer, %struct.buffer* %14, i32 0, i32 0
  %15 = load i8*, i8** %buf3, align 8, !tbaa !67
  %16 = load %struct.buffer*, %struct.buffer** %buf.addr, align 8, !tbaa !6
  %buf4 = getelementptr inbounds %struct.buffer, %struct.buffer* %16, i32 0, i32 0
  %17 = load i8*, i8** %buf4, align 8, !tbaa !67
  %18 = load %struct.buffer*, %struct.buffer** %buf.addr, align 8, !tbaa !6
  %used5 = getelementptr inbounds %struct.buffer, %struct.buffer* %18, i32 0, i32 1
  %19 = load i64, i64* %used5, align 8, !tbaa !71
  %add.ptr = getelementptr inbounds i8, i8* %17, i64 %19
  %20 = load %struct.buffer*, %struct.buffer** %buf.addr, align 8, !tbaa !6
  %left6 = getelementptr inbounds %struct.buffer, %struct.buffer* %20, i32 0, i32 4
  %21 = load i64, i64* %left6, align 8, !tbaa !72
  %idx.neg = sub i64 0, %21
  %add.ptr7 = getelementptr inbounds i8, i8* %add.ptr, i64 %idx.neg
  %22 = load %struct.buffer*, %struct.buffer** %buf.addr, align 8, !tbaa !6
  %left8 = getelementptr inbounds %struct.buffer, %struct.buffer* %22, i32 0, i32 4
  %23 = load i64, i64* %left8, align 8, !tbaa !72
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %15, i8* align 1 %add.ptr7, i64 %23, i1 false)
  %24 = load %struct.buffer*, %struct.buffer** %buf.addr, align 8, !tbaa !6
  %left9 = getelementptr inbounds %struct.buffer, %struct.buffer* %24, i32 0, i32 4
  %25 = load i64, i64* %left9, align 8, !tbaa !72
  %26 = load %struct.buffer*, %struct.buffer** %buf.addr, align 8, !tbaa !6
  %used10 = getelementptr inbounds %struct.buffer, %struct.buffer* %26, i32 0, i32 1
  store i64 %25, i64* %used10, align 8, !tbaa !71
  %27 = load %struct.buffer*, %struct.buffer** %buf.addr, align 8, !tbaa !6
  %nlines = getelementptr inbounds %struct.buffer, %struct.buffer* %27, i32 0, i32 2
  store i64 0, i64* %nlines, align 8, !tbaa !62
  br label %if.end11

if.end11:                                         ; preds = %if.then2, %if.end
  br label %while.cond

while.cond:                                       ; preds = %cleanup.cont145, %if.end11
  br label %while.body

while.body:                                       ; preds = %while.cond
  %28 = bitcast i8** %ptr to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %28) #13
  %29 = load %struct.buffer*, %struct.buffer** %buf.addr, align 8, !tbaa !6
  %buf12 = getelementptr inbounds %struct.buffer, %struct.buffer* %29, i32 0, i32 0
  %30 = load i8*, i8** %buf12, align 8, !tbaa !67
  %31 = load %struct.buffer*, %struct.buffer** %buf.addr, align 8, !tbaa !6
  %used13 = getelementptr inbounds %struct.buffer, %struct.buffer* %31, i32 0, i32 1
  %32 = load i64, i64* %used13, align 8, !tbaa !71
  %add.ptr14 = getelementptr inbounds i8, i8* %30, i64 %32
  store i8* %add.ptr14, i8** %ptr, align 8, !tbaa !6
  %33 = bitcast %struct.line** %linelim to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %33) #13
  %34 = load %struct.buffer*, %struct.buffer** %buf.addr, align 8, !tbaa !6
  %call = call %struct.line* @buffer_linelim(%struct.buffer* %34)
  store %struct.line* %call, %struct.line** %linelim, align 8, !tbaa !6
  %35 = bitcast %struct.line** %line to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %35) #13
  %36 = load %struct.line*, %struct.line** %linelim, align 8, !tbaa !6
  %37 = load %struct.buffer*, %struct.buffer** %buf.addr, align 8, !tbaa !6
  %nlines15 = getelementptr inbounds %struct.buffer, %struct.buffer* %37, i32 0, i32 2
  %38 = load i64, i64* %nlines15, align 8, !tbaa !62
  %idx.neg16 = sub i64 0, %38
  %add.ptr17 = getelementptr inbounds %struct.line, %struct.line* %36, i64 %idx.neg16
  store %struct.line* %add.ptr17, %struct.line** %line, align 8, !tbaa !6
  %39 = bitcast i64* %avail to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %39) #13
  %40 = load %struct.line*, %struct.line** %linelim, align 8, !tbaa !6
  %41 = bitcast %struct.line* %40 to i8*
  %42 = load %struct.buffer*, %struct.buffer** %buf.addr, align 8, !tbaa !6
  %nlines18 = getelementptr inbounds %struct.buffer, %struct.buffer* %42, i32 0, i32 2
  %43 = load i64, i64* %nlines18, align 8, !tbaa !62
  %44 = load i64, i64* %line_bytes, align 8, !tbaa !14
  %mul = mul i64 %43, %44
  %idx.neg19 = sub i64 0, %mul
  %add.ptr20 = getelementptr inbounds i8, i8* %41, i64 %idx.neg19
  %45 = load i8*, i8** %ptr, align 8, !tbaa !6
  %sub.ptr.lhs.cast = ptrtoint i8* %add.ptr20 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %45 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  store i64 %sub.ptr.sub, i64* %avail, align 8, !tbaa !14
  %46 = bitcast i8** %line_start to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %46) #13
  %47 = load %struct.buffer*, %struct.buffer** %buf.addr, align 8, !tbaa !6
  %nlines21 = getelementptr inbounds %struct.buffer, %struct.buffer* %47, i32 0, i32 2
  %48 = load i64, i64* %nlines21, align 8, !tbaa !62
  %tobool22 = icmp ne i64 %48, 0
  br i1 %tobool22, label %cond.true, label %cond.false

cond.true:                                        ; preds = %while.body
  %49 = load %struct.line*, %struct.line** %line, align 8, !tbaa !6
  %text = getelementptr inbounds %struct.line, %struct.line* %49, i32 0, i32 0
  %50 = load i8*, i8** %text, align 8, !tbaa !60
  %51 = load %struct.line*, %struct.line** %line, align 8, !tbaa !6
  %length = getelementptr inbounds %struct.line, %struct.line* %51, i32 0, i32 1
  %52 = load i64, i64* %length, align 8, !tbaa !64
  %add.ptr23 = getelementptr inbounds i8, i8* %50, i64 %52
  br label %cond.end

cond.false:                                       ; preds = %while.body
  %53 = load %struct.buffer*, %struct.buffer** %buf.addr, align 8, !tbaa !6
  %buf24 = getelementptr inbounds %struct.buffer, %struct.buffer* %53, i32 0, i32 0
  %54 = load i8*, i8** %buf24, align 8, !tbaa !67
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %add.ptr23, %cond.true ], [ %54, %cond.false ]
  store i8* %cond, i8** %line_start, align 8, !tbaa !6
  br label %while.cond25

while.cond25:                                     ; preds = %cleanup.cont, %cond.end
  %55 = load i64, i64* %line_bytes, align 8, !tbaa !14
  %add = add i64 %55, 1
  %56 = load i64, i64* %avail, align 8, !tbaa !14
  %cmp26 = icmp ult i64 %add, %56
  br i1 %cmp26, label %while.body27, label %while.end112

while.body27:                                     ; preds = %while.cond25
  %57 = bitcast i64* %readsize to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %57) #13
  %58 = load i64, i64* %avail, align 8, !tbaa !14
  %sub28 = sub i64 %58, 1
  %59 = load i64, i64* %line_bytes, align 8, !tbaa !14
  %add29 = add i64 %59, 1
  %div = udiv i64 %sub28, %add29
  store i64 %div, i64* %readsize, align 8, !tbaa !14
  %60 = bitcast i64* %bytes_read to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %60) #13
  %61 = load i8*, i8** %ptr, align 8, !tbaa !6
  %62 = load i64, i64* %readsize, align 8, !tbaa !14
  %63 = load %struct._IO_FILE*, %struct._IO_FILE** %fp.addr, align 8, !tbaa !6
  %call30 = call i64 @fread_unlocked(i8* %61, i64 1, i64 %62, %struct._IO_FILE* %63)
  store i64 %call30, i64* %bytes_read, align 8, !tbaa !14
  %64 = bitcast i8** %ptrlim to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %64) #13
  %65 = load i8*, i8** %ptr, align 8, !tbaa !6
  %66 = load i64, i64* %bytes_read, align 8, !tbaa !14
  %add.ptr31 = getelementptr inbounds i8, i8* %65, i64 %66
  store i8* %add.ptr31, i8** %ptrlim, align 8, !tbaa !6
  %67 = bitcast i8** %p to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %67) #13
  %68 = load i64, i64* %bytes_read, align 8, !tbaa !14
  %69 = load i64, i64* %avail, align 8, !tbaa !14
  %sub32 = sub i64 %69, %68
  store i64 %sub32, i64* %avail, align 8, !tbaa !14
  %70 = load i64, i64* %bytes_read, align 8, !tbaa !14
  %71 = load i64, i64* %readsize, align 8, !tbaa !14
  %cmp33 = icmp ne i64 %70, %71
  br i1 %cmp33, label %if.then34, label %if.end54

if.then34:                                        ; preds = %while.body27
  %72 = load %struct._IO_FILE*, %struct._IO_FILE** %fp.addr, align 8, !tbaa !6
  %call35 = call i32 @ferror_unlocked(%struct._IO_FILE* %72) #13
  %tobool36 = icmp ne i32 %call35, 0
  br i1 %tobool36, label %if.then37, label %if.end38

if.then37:                                        ; preds = %if.then34
  %73 = load i8*, i8** %file.addr, align 8, !tbaa !6
  call void @sort_die(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.166, i64 0, i64 0), i8* %73)
  br label %if.end38

if.end38:                                         ; preds = %if.then37, %if.then34
  %74 = load %struct._IO_FILE*, %struct._IO_FILE** %fp.addr, align 8, !tbaa !6
  %call39 = call i32 @feof_unlocked(%struct._IO_FILE* %74) #13
  %tobool40 = icmp ne i32 %call39, 0
  br i1 %tobool40, label %if.then41, label %if.end53

if.then41:                                        ; preds = %if.end38
  %75 = load %struct.buffer*, %struct.buffer** %buf.addr, align 8, !tbaa !6
  %eof42 = getelementptr inbounds %struct.buffer, %struct.buffer* %75, i32 0, i32 6
  store i8 1, i8* %eof42, align 8, !tbaa !70
  %76 = load %struct.buffer*, %struct.buffer** %buf.addr, align 8, !tbaa !6
  %buf43 = getelementptr inbounds %struct.buffer, %struct.buffer* %76, i32 0, i32 0
  %77 = load i8*, i8** %buf43, align 8, !tbaa !67
  %78 = load i8*, i8** %ptrlim, align 8, !tbaa !6
  %cmp44 = icmp eq i8* %77, %78
  br i1 %cmp44, label %if.then45, label %if.end46

if.then45:                                        ; preds = %if.then41
  store i1 false, i1* %retval, align 1
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end46:                                         ; preds = %if.then41
  %79 = load i8*, i8** %line_start, align 8, !tbaa !6
  %80 = load i8*, i8** %ptrlim, align 8, !tbaa !6
  %cmp47 = icmp ne i8* %79, %80
  br i1 %cmp47, label %land.lhs.true, label %if.end52

land.lhs.true:                                    ; preds = %if.end46
  %81 = load i8*, i8** %ptrlim, align 8, !tbaa !6
  %arrayidx = getelementptr inbounds i8, i8* %81, i64 -1
  %82 = load i8, i8* %arrayidx, align 1, !tbaa !13
  %conv = sext i8 %82 to i32
  %83 = load i8, i8* %eol, align 1, !tbaa !13
  %conv48 = sext i8 %83 to i32
  %cmp49 = icmp ne i32 %conv, %conv48
  br i1 %cmp49, label %if.then51, label %if.end52

if.then51:                                        ; preds = %land.lhs.true
  %84 = load i8, i8* %eol, align 1, !tbaa !13
  %85 = load i8*, i8** %ptrlim, align 8, !tbaa !6
  %incdec.ptr = getelementptr inbounds i8, i8* %85, i32 1
  store i8* %incdec.ptr, i8** %ptrlim, align 8, !tbaa !6
  store i8 %84, i8* %85, align 1, !tbaa !13
  br label %if.end52

if.end52:                                         ; preds = %if.then51, %land.lhs.true, %if.end46
  br label %if.end53

if.end53:                                         ; preds = %if.end52, %if.end38
  br label %if.end54

if.end54:                                         ; preds = %if.end53, %while.body27
  br label %while.cond55

while.cond55:                                     ; preds = %if.end103, %if.end54
  %86 = load i8*, i8** %ptr, align 8, !tbaa !6
  %87 = load i8, i8* %eol, align 1, !tbaa !13
  %conv56 = sext i8 %87 to i32
  %88 = load i8*, i8** %ptrlim, align 8, !tbaa !6
  %89 = load i8*, i8** %ptr, align 8, !tbaa !6
  %sub.ptr.lhs.cast57 = ptrtoint i8* %88 to i64
  %sub.ptr.rhs.cast58 = ptrtoint i8* %89 to i64
  %sub.ptr.sub59 = sub i64 %sub.ptr.lhs.cast57, %sub.ptr.rhs.cast58
  %call60 = call i8* @memchr(i8* %86, i32 %conv56, i64 %sub.ptr.sub59) #22
  store i8* %call60, i8** %p, align 8, !tbaa !6
  %tobool61 = icmp ne i8* %call60, null
  br i1 %tobool61, label %while.body62, label %while.end104

while.body62:                                     ; preds = %while.cond55
  %90 = load i8*, i8** %p, align 8, !tbaa !6
  store i8 0, i8* %90, align 1, !tbaa !13
  %91 = load i8*, i8** %p, align 8, !tbaa !6
  %add.ptr63 = getelementptr inbounds i8, i8* %91, i64 1
  store i8* %add.ptr63, i8** %ptr, align 8, !tbaa !6
  %92 = load %struct.line*, %struct.line** %line, align 8, !tbaa !6
  %incdec.ptr64 = getelementptr inbounds %struct.line, %struct.line* %92, i32 -1
  store %struct.line* %incdec.ptr64, %struct.line** %line, align 8, !tbaa !6
  %93 = load i8*, i8** %line_start, align 8, !tbaa !6
  %94 = load %struct.line*, %struct.line** %line, align 8, !tbaa !6
  %text65 = getelementptr inbounds %struct.line, %struct.line* %94, i32 0, i32 0
  store i8* %93, i8** %text65, align 8, !tbaa !60
  %95 = load i8*, i8** %ptr, align 8, !tbaa !6
  %96 = load i8*, i8** %line_start, align 8, !tbaa !6
  %sub.ptr.lhs.cast66 = ptrtoint i8* %95 to i64
  %sub.ptr.rhs.cast67 = ptrtoint i8* %96 to i64
  %sub.ptr.sub68 = sub i64 %sub.ptr.lhs.cast66, %sub.ptr.rhs.cast67
  %97 = load %struct.line*, %struct.line** %line, align 8, !tbaa !6
  %length69 = getelementptr inbounds %struct.line, %struct.line* %97, i32 0, i32 1
  store i64 %sub.ptr.sub68, i64* %length69, align 8, !tbaa !64
  %98 = load i64, i64* %mergesize, align 8, !tbaa !14
  %99 = load %struct.line*, %struct.line** %line, align 8, !tbaa !6
  %length70 = getelementptr inbounds %struct.line, %struct.line* %99, i32 0, i32 1
  %100 = load i64, i64* %length70, align 8, !tbaa !64
  %cmp71 = icmp ugt i64 %98, %100
  br i1 %cmp71, label %cond.true73, label %cond.false74

cond.true73:                                      ; preds = %while.body62
  %101 = load i64, i64* %mergesize, align 8, !tbaa !14
  br label %cond.end76

cond.false74:                                     ; preds = %while.body62
  %102 = load %struct.line*, %struct.line** %line, align 8, !tbaa !6
  %length75 = getelementptr inbounds %struct.line, %struct.line* %102, i32 0, i32 1
  %103 = load i64, i64* %length75, align 8, !tbaa !64
  br label %cond.end76

cond.end76:                                       ; preds = %cond.false74, %cond.true73
  %cond77 = phi i64 [ %101, %cond.true73 ], [ %103, %cond.false74 ]
  store i64 %cond77, i64* %mergesize, align 8, !tbaa !14
  %104 = load i64, i64* %line_bytes, align 8, !tbaa !14
  %105 = load i64, i64* %avail, align 8, !tbaa !14
  %sub78 = sub i64 %105, %104
  store i64 %sub78, i64* %avail, align 8, !tbaa !14
  %106 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !tbaa !6
  %tobool79 = icmp ne %struct.keyfield* %106, null
  br i1 %tobool79, label %if.then80, label %if.end103

if.then80:                                        ; preds = %cond.end76
  %107 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !tbaa !6
  %eword = getelementptr inbounds %struct.keyfield, %struct.keyfield* %107, i32 0, i32 2
  %108 = load i64, i64* %eword, align 8, !tbaa !28
  %cmp81 = icmp eq i64 %108, -1
  br i1 %cmp81, label %cond.true83, label %cond.false84

cond.true83:                                      ; preds = %if.then80
  %109 = load i8*, i8** %p, align 8, !tbaa !6
  br label %cond.end86

cond.false84:                                     ; preds = %if.then80
  %110 = load %struct.line*, %struct.line** %line, align 8, !tbaa !6
  %111 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !tbaa !6
  %call85 = call i8* @limfield(%struct.line* %110, %struct.keyfield* %111) #22
  br label %cond.end86

cond.end86:                                       ; preds = %cond.false84, %cond.true83
  %cond87 = phi i8* [ %109, %cond.true83 ], [ %call85, %cond.false84 ]
  %112 = load %struct.line*, %struct.line** %line, align 8, !tbaa !6
  %keylim = getelementptr inbounds %struct.line, %struct.line* %112, i32 0, i32 3
  store i8* %cond87, i8** %keylim, align 8, !tbaa !66
  %113 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !tbaa !6
  %sword = getelementptr inbounds %struct.keyfield, %struct.keyfield* %113, i32 0, i32 0
  %114 = load i64, i64* %sword, align 8, !tbaa !23
  %cmp88 = icmp ne i64 %114, -1
  br i1 %cmp88, label %if.then90, label %if.else

if.then90:                                        ; preds = %cond.end86
  %115 = load %struct.line*, %struct.line** %line, align 8, !tbaa !6
  %116 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !tbaa !6
  %call91 = call i8* @begfield(%struct.line* %115, %struct.keyfield* %116)
  %117 = load %struct.line*, %struct.line** %line, align 8, !tbaa !6
  %keybeg = getelementptr inbounds %struct.line, %struct.line* %117, i32 0, i32 2
  store i8* %call91, i8** %keybeg, align 8, !tbaa !65
  br label %if.end102

if.else:                                          ; preds = %cond.end86
  %118 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !tbaa !6
  %skipsblanks = getelementptr inbounds %struct.keyfield, %struct.keyfield* %118, i32 0, i32 6
  %119 = load i8, i8* %skipsblanks, align 8, !tbaa !37, !range !25
  %tobool92 = trunc i8 %119 to i1
  br i1 %tobool92, label %if.then93, label %if.end100

if.then93:                                        ; preds = %if.else
  br label %while.cond94

while.cond94:                                     ; preds = %while.body98, %if.then93
  %120 = load i8*, i8** %line_start, align 8, !tbaa !6
  %121 = load i8, i8* %120, align 1, !tbaa !13
  %call95 = call zeroext i8 @to_uchar(i8 signext %121)
  %idxprom = zext i8 %call95 to i64
  %arrayidx96 = getelementptr inbounds [256 x i8], [256 x i8]* @blanks, i64 0, i64 %idxprom
  %122 = load i8, i8* %arrayidx96, align 1, !tbaa !11, !range !25
  %tobool97 = trunc i8 %122 to i1
  br i1 %tobool97, label %while.body98, label %while.end

while.body98:                                     ; preds = %while.cond94
  %123 = load i8*, i8** %line_start, align 8, !tbaa !6
  %incdec.ptr99 = getelementptr inbounds i8, i8* %123, i32 1
  store i8* %incdec.ptr99, i8** %line_start, align 8, !tbaa !6
  br label %while.cond94

while.end:                                        ; preds = %while.cond94
  br label %if.end100

if.end100:                                        ; preds = %while.end, %if.else
  %124 = load i8*, i8** %line_start, align 8, !tbaa !6
  %125 = load %struct.line*, %struct.line** %line, align 8, !tbaa !6
  %keybeg101 = getelementptr inbounds %struct.line, %struct.line* %125, i32 0, i32 2
  store i8* %124, i8** %keybeg101, align 8, !tbaa !65
  br label %if.end102

if.end102:                                        ; preds = %if.end100, %if.then90
  br label %if.end103

if.end103:                                        ; preds = %if.end102, %cond.end76
  %126 = load i8*, i8** %ptr, align 8, !tbaa !6
  store i8* %126, i8** %line_start, align 8, !tbaa !6
  br label %while.cond55

while.end104:                                     ; preds = %while.cond55
  %127 = load i8*, i8** %ptrlim, align 8, !tbaa !6
  store i8* %127, i8** %ptr, align 8, !tbaa !6
  %128 = load %struct.buffer*, %struct.buffer** %buf.addr, align 8, !tbaa !6
  %eof105 = getelementptr inbounds %struct.buffer, %struct.buffer* %128, i32 0, i32 6
  %129 = load i8, i8* %eof105, align 8, !tbaa !70, !range !25
  %tobool106 = trunc i8 %129 to i1
  br i1 %tobool106, label %if.then107, label %if.end108

if.then107:                                       ; preds = %while.end104
  store i32 5, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end108:                                        ; preds = %while.end104
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end108, %if.then107, %if.then45
  %130 = bitcast i8** %p to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %130) #13
  %131 = bitcast i8** %ptrlim to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %131) #13
  %132 = bitcast i64* %bytes_read to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %132) #13
  %133 = bitcast i64* %readsize to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %133) #13
  %cleanup.dest = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest, label %cleanup139 [
    i32 0, label %cleanup.cont
    i32 5, label %while.end112
  ]

cleanup.cont:                                     ; preds = %cleanup
  br label %while.cond25

while.end112:                                     ; preds = %cleanup, %while.cond25
  %134 = load i8*, i8** %ptr, align 8, !tbaa !6
  %135 = load %struct.buffer*, %struct.buffer** %buf.addr, align 8, !tbaa !6
  %buf113 = getelementptr inbounds %struct.buffer, %struct.buffer* %135, i32 0, i32 0
  %136 = load i8*, i8** %buf113, align 8, !tbaa !67
  %sub.ptr.lhs.cast114 = ptrtoint i8* %134 to i64
  %sub.ptr.rhs.cast115 = ptrtoint i8* %136 to i64
  %sub.ptr.sub116 = sub i64 %sub.ptr.lhs.cast114, %sub.ptr.rhs.cast115
  %137 = load %struct.buffer*, %struct.buffer** %buf.addr, align 8, !tbaa !6
  %used117 = getelementptr inbounds %struct.buffer, %struct.buffer* %137, i32 0, i32 1
  store i64 %sub.ptr.sub116, i64* %used117, align 8, !tbaa !71
  %138 = load %struct.buffer*, %struct.buffer** %buf.addr, align 8, !tbaa !6
  %call118 = call %struct.line* @buffer_linelim(%struct.buffer* %138)
  %139 = load %struct.line*, %struct.line** %line, align 8, !tbaa !6
  %sub.ptr.lhs.cast119 = ptrtoint %struct.line* %call118 to i64
  %sub.ptr.rhs.cast120 = ptrtoint %struct.line* %139 to i64
  %sub.ptr.sub121 = sub i64 %sub.ptr.lhs.cast119, %sub.ptr.rhs.cast120
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub121, 32
  %140 = load %struct.buffer*, %struct.buffer** %buf.addr, align 8, !tbaa !6
  %nlines122 = getelementptr inbounds %struct.buffer, %struct.buffer* %140, i32 0, i32 2
  store i64 %sub.ptr.div, i64* %nlines122, align 8, !tbaa !62
  %141 = load %struct.buffer*, %struct.buffer** %buf.addr, align 8, !tbaa !6
  %nlines123 = getelementptr inbounds %struct.buffer, %struct.buffer* %141, i32 0, i32 2
  %142 = load i64, i64* %nlines123, align 8, !tbaa !62
  %cmp124 = icmp ne i64 %142, 0
  br i1 %cmp124, label %if.then126, label %if.end132

if.then126:                                       ; preds = %while.end112
  %143 = load i8*, i8** %ptr, align 8, !tbaa !6
  %144 = load i8*, i8** %line_start, align 8, !tbaa !6
  %sub.ptr.lhs.cast127 = ptrtoint i8* %143 to i64
  %sub.ptr.rhs.cast128 = ptrtoint i8* %144 to i64
  %sub.ptr.sub129 = sub i64 %sub.ptr.lhs.cast127, %sub.ptr.rhs.cast128
  %145 = load %struct.buffer*, %struct.buffer** %buf.addr, align 8, !tbaa !6
  %left130 = getelementptr inbounds %struct.buffer, %struct.buffer* %145, i32 0, i32 4
  store i64 %sub.ptr.sub129, i64* %left130, align 8, !tbaa !72
  %146 = load i64, i64* %mergesize, align 8, !tbaa !14
  %add131 = add i64 %146, 34
  store i64 %add131, i64* @merge_buffer_size, align 8, !tbaa !14
  store i1 true, i1* %retval, align 1
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup139

if.end132:                                        ; preds = %while.end112
  %147 = bitcast i64* %line_alloc to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %147) #13
  %148 = load %struct.buffer*, %struct.buffer** %buf.addr, align 8, !tbaa !6
  %alloc = getelementptr inbounds %struct.buffer, %struct.buffer* %148, i32 0, i32 3
  %149 = load i64, i64* %alloc, align 8, !tbaa !69
  %div133 = udiv i64 %149, 32
  store i64 %div133, i64* %line_alloc, align 8, !tbaa !14
  %150 = load %struct.buffer*, %struct.buffer** %buf.addr, align 8, !tbaa !6
  %buf134 = getelementptr inbounds %struct.buffer, %struct.buffer* %150, i32 0, i32 0
  %151 = load i8*, i8** %buf134, align 8, !tbaa !67
  %call135 = call nonnull i8* @x2nrealloc(i8* %151, i64* %line_alloc, i64 32)
  %152 = load %struct.buffer*, %struct.buffer** %buf.addr, align 8, !tbaa !6
  %buf136 = getelementptr inbounds %struct.buffer, %struct.buffer* %152, i32 0, i32 0
  store i8* %call135, i8** %buf136, align 8, !tbaa !67
  %153 = load i64, i64* %line_alloc, align 8, !tbaa !14
  %mul137 = mul i64 %153, 32
  %154 = load %struct.buffer*, %struct.buffer** %buf.addr, align 8, !tbaa !6
  %alloc138 = getelementptr inbounds %struct.buffer, %struct.buffer* %154, i32 0, i32 3
  store i64 %mul137, i64* %alloc138, align 8, !tbaa !69
  %155 = bitcast i64* %line_alloc to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %155) #13
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup139

cleanup139:                                       ; preds = %if.end132, %if.then126, %cleanup
  %156 = bitcast i8** %line_start to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %156) #13
  %157 = bitcast i64* %avail to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %157) #13
  %158 = bitcast %struct.line** %line to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %158) #13
  %159 = bitcast %struct.line** %linelim to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %159) #13
  %160 = bitcast i8** %ptr to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %160) #13
  %cleanup.dest144 = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest144, label %cleanup146 [
    i32 0, label %cleanup.cont145
  ]

cleanup.cont145:                                  ; preds = %cleanup139
  br label %while.cond

cleanup146:                                       ; preds = %cleanup139, %if.then
  %161 = bitcast i64* %mergesize to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %161) #13
  %162 = bitcast i64* %line_bytes to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %162) #13
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %eol) #13
  %163 = bitcast %struct.keyfield** %key to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %163) #13
  %164 = load i1, i1* %retval, align 1
  ret i1 %164
}

; Function Attrs: inlinehint nounwind uwtable
define internal %struct.line* @buffer_linelim(%struct.buffer* %buf) #2 {
entry:
  %buf.addr = alloca %struct.buffer*, align 8
  %linelim = alloca i8*, align 8
  store %struct.buffer* %buf, %struct.buffer** %buf.addr, align 8, !tbaa !6
  %0 = bitcast i8** %linelim to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #13
  %1 = load %struct.buffer*, %struct.buffer** %buf.addr, align 8, !tbaa !6
  %buf1 = getelementptr inbounds %struct.buffer, %struct.buffer* %1, i32 0, i32 0
  %2 = load i8*, i8** %buf1, align 8, !tbaa !67
  %3 = load %struct.buffer*, %struct.buffer** %buf.addr, align 8, !tbaa !6
  %alloc = getelementptr inbounds %struct.buffer, %struct.buffer* %3, i32 0, i32 3
  %4 = load i64, i64* %alloc, align 8, !tbaa !69
  %add.ptr = getelementptr inbounds i8, i8* %2, i64 %4
  store i8* %add.ptr, i8** %linelim, align 8, !tbaa !6
  %5 = load i8*, i8** %linelim, align 8, !tbaa !6
  %6 = bitcast i8* %5 to %struct.line*
  %7 = bitcast i8** %linelim to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %7) #13
  ret %struct.line* %6
}

; Function Attrs: nounwind uwtable
define internal %struct.tempnode* @create_temp(%struct._IO_FILE** %pfp) #7 {
entry:
  %pfp.addr = alloca %struct._IO_FILE**, align 8
  store %struct._IO_FILE** %pfp, %struct._IO_FILE*** %pfp.addr, align 8, !tbaa !6
  %0 = load %struct._IO_FILE**, %struct._IO_FILE*** %pfp.addr, align 8, !tbaa !6
  %call = call %struct.tempnode* @maybe_create_temp(%struct._IO_FILE** %0, i1 zeroext false)
  ret %struct.tempnode* %call
}

; Function Attrs: nounwind uwtable
define internal void @queue_init(%struct.merge_node_queue* %queue, i64 %nthreads) #7 {
entry:
  %queue.addr = alloca %struct.merge_node_queue*, align 8
  %nthreads.addr = alloca i64, align 8
  store %struct.merge_node_queue* %queue, %struct.merge_node_queue** %queue.addr, align 8, !tbaa !6
  store i64 %nthreads, i64* %nthreads.addr, align 8, !tbaa !14
  %0 = load i64, i64* %nthreads.addr, align 8, !tbaa !14
  %mul = mul i64 2, %0
  %call = call noalias nonnull %struct.heap* @heap_alloc(i32 (i8*, i8*)* @compare_nodes, i64 %mul)
  %1 = load %struct.merge_node_queue*, %struct.merge_node_queue** %queue.addr, align 8, !tbaa !6
  %priority_queue = getelementptr inbounds %struct.merge_node_queue, %struct.merge_node_queue* %1, i32 0, i32 0
  store %struct.heap* %call, %struct.heap** %priority_queue, align 8, !tbaa !78
  %2 = load %struct.merge_node_queue*, %struct.merge_node_queue** %queue.addr, align 8, !tbaa !6
  %mutex = getelementptr inbounds %struct.merge_node_queue, %struct.merge_node_queue* %2, i32 0, i32 1
  %call1 = call i32 @pthread_mutex_init(%union.pthread_mutex_t* %mutex, %union.pthread_mutexattr_t* null) #13
  %3 = load %struct.merge_node_queue*, %struct.merge_node_queue** %queue.addr, align 8, !tbaa !6
  %cond = getelementptr inbounds %struct.merge_node_queue, %struct.merge_node_queue* %3, i32 0, i32 2
  %call2 = call i32 @pthread_cond_init(%union.pthread_cond_t* %cond, %union.pthread_mutexattr_t* null) #13
  ret void
}

; Function Attrs: nounwind uwtable
define internal %struct.merge_node* @merge_tree_init(i64 %nthreads, i64 %nlines, %struct.line* %dest) #7 {
entry:
  %nthreads.addr = alloca i64, align 8
  %nlines.addr = alloca i64, align 8
  %dest.addr = alloca %struct.line*, align 8
  %merge_tree = alloca %struct.merge_node*, align 8
  %root = alloca %struct.merge_node*, align 8
  store i64 %nthreads, i64* %nthreads.addr, align 8, !tbaa !14
  store i64 %nlines, i64* %nlines.addr, align 8, !tbaa !14
  store %struct.line* %dest, %struct.line** %dest.addr, align 8, !tbaa !6
  %0 = bitcast %struct.merge_node** %merge_tree to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #13
  %1 = load i64, i64* %nthreads.addr, align 8, !tbaa !14
  %mul = mul i64 256, %1
  %call = call noalias nonnull i8* @xmalloc(i64 %mul) #25
  %2 = bitcast i8* %call to %struct.merge_node*
  store %struct.merge_node* %2, %struct.merge_node** %merge_tree, align 8, !tbaa !6
  %3 = bitcast %struct.merge_node** %root to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %3) #13
  %4 = load %struct.merge_node*, %struct.merge_node** %merge_tree, align 8, !tbaa !6
  store %struct.merge_node* %4, %struct.merge_node** %root, align 8, !tbaa !6
  %5 = load %struct.merge_node*, %struct.merge_node** %root, align 8, !tbaa !6
  %end_hi = getelementptr inbounds %struct.merge_node, %struct.merge_node* %5, i32 0, i32 3
  store %struct.line* null, %struct.line** %end_hi, align 8, !tbaa !80
  %6 = load %struct.merge_node*, %struct.merge_node** %root, align 8, !tbaa !6
  %end_lo = getelementptr inbounds %struct.merge_node, %struct.merge_node* %6, i32 0, i32 2
  store %struct.line* null, %struct.line** %end_lo, align 8, !tbaa !82
  %7 = load %struct.merge_node*, %struct.merge_node** %root, align 8, !tbaa !6
  %hi = getelementptr inbounds %struct.merge_node, %struct.merge_node* %7, i32 0, i32 1
  store %struct.line* null, %struct.line** %hi, align 8, !tbaa !83
  %8 = load %struct.merge_node*, %struct.merge_node** %root, align 8, !tbaa !6
  %lo = getelementptr inbounds %struct.merge_node, %struct.merge_node* %8, i32 0, i32 0
  store %struct.line* null, %struct.line** %lo, align 8, !tbaa !84
  %9 = load %struct.merge_node*, %struct.merge_node** %root, align 8, !tbaa !6
  %dest1 = getelementptr inbounds %struct.merge_node, %struct.merge_node* %9, i32 0, i32 4
  store %struct.line** null, %struct.line*** %dest1, align 8, !tbaa !85
  %10 = load i64, i64* %nlines.addr, align 8, !tbaa !14
  %11 = load %struct.merge_node*, %struct.merge_node** %root, align 8, !tbaa !6
  %nhi = getelementptr inbounds %struct.merge_node, %struct.merge_node* %11, i32 0, i32 6
  store i64 %10, i64* %nhi, align 8, !tbaa !86
  %12 = load %struct.merge_node*, %struct.merge_node** %root, align 8, !tbaa !6
  %nlo = getelementptr inbounds %struct.merge_node, %struct.merge_node* %12, i32 0, i32 5
  store i64 %10, i64* %nlo, align 8, !tbaa !87
  %13 = load %struct.merge_node*, %struct.merge_node** %root, align 8, !tbaa !6
  %parent = getelementptr inbounds %struct.merge_node, %struct.merge_node* %13, i32 0, i32 7
  store %struct.merge_node* null, %struct.merge_node** %parent, align 8, !tbaa !88
  %14 = load %struct.merge_node*, %struct.merge_node** %root, align 8, !tbaa !6
  %level = getelementptr inbounds %struct.merge_node, %struct.merge_node* %14, i32 0, i32 10
  store i32 0, i32* %level, align 8, !tbaa !89
  %15 = load %struct.merge_node*, %struct.merge_node** %root, align 8, !tbaa !6
  %queued = getelementptr inbounds %struct.merge_node, %struct.merge_node* %15, i32 0, i32 11
  store i8 0, i8* %queued, align 4, !tbaa !90
  %16 = load %struct.merge_node*, %struct.merge_node** %root, align 8, !tbaa !6
  %lock = getelementptr inbounds %struct.merge_node, %struct.merge_node* %16, i32 0, i32 12
  %call2 = call i32 @pthread_mutex_init(%union.pthread_mutex_t* %lock, %union.pthread_mutexattr_t* null) #13
  %17 = load %struct.merge_node*, %struct.merge_node** %root, align 8, !tbaa !6
  %18 = load %struct.merge_node*, %struct.merge_node** %root, align 8, !tbaa !6
  %add.ptr = getelementptr inbounds %struct.merge_node, %struct.merge_node* %18, i64 1
  %19 = load %struct.line*, %struct.line** %dest.addr, align 8, !tbaa !6
  %20 = load i64, i64* %nthreads.addr, align 8, !tbaa !14
  %21 = load i64, i64* %nlines.addr, align 8, !tbaa !14
  %call3 = call %struct.merge_node* @init_node(%struct.merge_node* %17, %struct.merge_node* %add.ptr, %struct.line* %19, i64 %20, i64 %21, i1 zeroext false)
  %22 = load %struct.merge_node*, %struct.merge_node** %merge_tree, align 8, !tbaa !6
  %23 = bitcast %struct.merge_node** %root to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %23) #13
  %24 = bitcast %struct.merge_node** %merge_tree to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %24) #13
  ret %struct.merge_node* %22
}

; Function Attrs: nounwind uwtable
define internal void @sortlines(%struct.line* noalias %lines, i64 %nthreads, i64 %total_lines, %struct.merge_node* %node, %struct.merge_node_queue* %queue, %struct._IO_FILE* %tfp, i8* %temp_output) #7 {
entry:
  %lines.addr = alloca %struct.line*, align 8
  %nthreads.addr = alloca i64, align 8
  %total_lines.addr = alloca i64, align 8
  %node.addr = alloca %struct.merge_node*, align 8
  %queue.addr = alloca %struct.merge_node_queue*, align 8
  %tfp.addr = alloca %struct._IO_FILE*, align 8
  %temp_output.addr = alloca i8*, align 8
  %nlines = alloca i64, align 8
  %lo_threads = alloca i64, align 8
  %hi_threads = alloca i64, align 8
  %thread = alloca i64, align 8
  %args = alloca %struct.thread_args, align 8
  %nlo12 = alloca i64, align 8
  %nhi14 = alloca i64, align 8
  %temp = alloca %struct.line*, align 8
  store %struct.line* %lines, %struct.line** %lines.addr, align 8, !tbaa !6
  store i64 %nthreads, i64* %nthreads.addr, align 8, !tbaa !14
  store i64 %total_lines, i64* %total_lines.addr, align 8, !tbaa !14
  store %struct.merge_node* %node, %struct.merge_node** %node.addr, align 8, !tbaa !6
  store %struct.merge_node_queue* %queue, %struct.merge_node_queue** %queue.addr, align 8, !tbaa !6
  store %struct._IO_FILE* %tfp, %struct._IO_FILE** %tfp.addr, align 8, !tbaa !6
  store i8* %temp_output, i8** %temp_output.addr, align 8, !tbaa !6
  %0 = bitcast i64* %nlines to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #13
  %1 = load %struct.merge_node*, %struct.merge_node** %node.addr, align 8, !tbaa !6
  %nlo = getelementptr inbounds %struct.merge_node, %struct.merge_node* %1, i32 0, i32 5
  %2 = load i64, i64* %nlo, align 8, !tbaa !87
  %3 = load %struct.merge_node*, %struct.merge_node** %node.addr, align 8, !tbaa !6
  %nhi = getelementptr inbounds %struct.merge_node, %struct.merge_node* %3, i32 0, i32 6
  %4 = load i64, i64* %nhi, align 8, !tbaa !86
  %add = add i64 %2, %4
  store i64 %add, i64* %nlines, align 8, !tbaa !14
  %5 = bitcast i64* %lo_threads to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %5) #13
  %6 = load i64, i64* %nthreads.addr, align 8, !tbaa !14
  %div = udiv i64 %6, 2
  store i64 %div, i64* %lo_threads, align 8, !tbaa !14
  %7 = bitcast i64* %hi_threads to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %7) #13
  %8 = load i64, i64* %nthreads.addr, align 8, !tbaa !14
  %9 = load i64, i64* %lo_threads, align 8, !tbaa !14
  %sub = sub i64 %8, %9
  store i64 %sub, i64* %hi_threads, align 8, !tbaa !14
  %10 = bitcast i64* %thread to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %10) #13
  %11 = bitcast %struct.thread_args* %args to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* %11) #13
  %lines1 = getelementptr inbounds %struct.thread_args, %struct.thread_args* %args, i32 0, i32 0
  %12 = load %struct.line*, %struct.line** %lines.addr, align 8, !tbaa !6
  store %struct.line* %12, %struct.line** %lines1, align 8, !tbaa !91
  %nthreads2 = getelementptr inbounds %struct.thread_args, %struct.thread_args* %args, i32 0, i32 1
  %13 = load i64, i64* %lo_threads, align 8, !tbaa !14
  store i64 %13, i64* %nthreads2, align 8, !tbaa !93
  %total_lines3 = getelementptr inbounds %struct.thread_args, %struct.thread_args* %args, i32 0, i32 2
  %14 = load i64, i64* %total_lines.addr, align 8, !tbaa !14
  store i64 %14, i64* %total_lines3, align 8, !tbaa !94
  %node4 = getelementptr inbounds %struct.thread_args, %struct.thread_args* %args, i32 0, i32 3
  %15 = load %struct.merge_node*, %struct.merge_node** %node.addr, align 8, !tbaa !6
  %lo_child = getelementptr inbounds %struct.merge_node, %struct.merge_node* %15, i32 0, i32 8
  %16 = load %struct.merge_node*, %struct.merge_node** %lo_child, align 8, !tbaa !95
  store %struct.merge_node* %16, %struct.merge_node** %node4, align 8, !tbaa !96
  %queue5 = getelementptr inbounds %struct.thread_args, %struct.thread_args* %args, i32 0, i32 4
  %17 = load %struct.merge_node_queue*, %struct.merge_node_queue** %queue.addr, align 8, !tbaa !6
  store %struct.merge_node_queue* %17, %struct.merge_node_queue** %queue5, align 8, !tbaa !97
  %tfp6 = getelementptr inbounds %struct.thread_args, %struct.thread_args* %args, i32 0, i32 5
  %18 = load %struct._IO_FILE*, %struct._IO_FILE** %tfp.addr, align 8, !tbaa !6
  store %struct._IO_FILE* %18, %struct._IO_FILE** %tfp6, align 8, !tbaa !98
  %output_temp = getelementptr inbounds %struct.thread_args, %struct.thread_args* %args, i32 0, i32 6
  %19 = load i8*, i8** %temp_output.addr, align 8, !tbaa !6
  store i8* %19, i8** %output_temp, align 8, !tbaa !99
  %20 = load i64, i64* %nthreads.addr, align 8, !tbaa !14
  %cmp = icmp ugt i64 %20, 1
  br i1 %cmp, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %entry
  %21 = load i64, i64* %nlines, align 8, !tbaa !14
  %cmp7 = icmp ule i64 131072, %21
  br i1 %cmp7, label %land.lhs.true8, label %if.else

land.lhs.true8:                                   ; preds = %land.lhs.true
  %22 = bitcast %struct.thread_args* %args to i8*
  %call = call i32 @pthread_create(i64* %thread, %union.pthread_attr_t* null, i8* (i8*)* @sortlines_thread, i8* %22) #13
  %cmp9 = icmp eq i32 %call, 0
  br i1 %cmp9, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true8
  %23 = load %struct.line*, %struct.line** %lines.addr, align 8, !tbaa !6
  %24 = load %struct.merge_node*, %struct.merge_node** %node.addr, align 8, !tbaa !6
  %nlo10 = getelementptr inbounds %struct.merge_node, %struct.merge_node* %24, i32 0, i32 5
  %25 = load i64, i64* %nlo10, align 8, !tbaa !87
  %idx.neg = sub i64 0, %25
  %add.ptr = getelementptr inbounds %struct.line, %struct.line* %23, i64 %idx.neg
  %26 = load i64, i64* %hi_threads, align 8, !tbaa !14
  %27 = load i64, i64* %total_lines.addr, align 8, !tbaa !14
  %28 = load %struct.merge_node*, %struct.merge_node** %node.addr, align 8, !tbaa !6
  %hi_child = getelementptr inbounds %struct.merge_node, %struct.merge_node* %28, i32 0, i32 9
  %29 = load %struct.merge_node*, %struct.merge_node** %hi_child, align 8, !tbaa !100
  %30 = load %struct.merge_node_queue*, %struct.merge_node_queue** %queue.addr, align 8, !tbaa !6
  %31 = load %struct._IO_FILE*, %struct._IO_FILE** %tfp.addr, align 8, !tbaa !6
  %32 = load i8*, i8** %temp_output.addr, align 8, !tbaa !6
  call void @sortlines(%struct.line* %add.ptr, i64 %26, i64 %27, %struct.merge_node* %29, %struct.merge_node_queue* %30, %struct._IO_FILE* %31, i8* %32)
  %33 = load i64, i64* %thread, align 8, !tbaa !14
  %call11 = call i32 @pthread_join(i64 %33, i8** null)
  br label %if.end36

if.else:                                          ; preds = %land.lhs.true8, %land.lhs.true, %entry
  %34 = bitcast i64* %nlo12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %34) #13
  %35 = load %struct.merge_node*, %struct.merge_node** %node.addr, align 8, !tbaa !6
  %nlo13 = getelementptr inbounds %struct.merge_node, %struct.merge_node* %35, i32 0, i32 5
  %36 = load i64, i64* %nlo13, align 8, !tbaa !87
  store i64 %36, i64* %nlo12, align 8, !tbaa !14
  %37 = bitcast i64* %nhi14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %37) #13
  %38 = load %struct.merge_node*, %struct.merge_node** %node.addr, align 8, !tbaa !6
  %nhi15 = getelementptr inbounds %struct.merge_node, %struct.merge_node* %38, i32 0, i32 6
  %39 = load i64, i64* %nhi15, align 8, !tbaa !86
  store i64 %39, i64* %nhi14, align 8, !tbaa !14
  %40 = bitcast %struct.line** %temp to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %40) #13
  %41 = load %struct.line*, %struct.line** %lines.addr, align 8, !tbaa !6
  %42 = load i64, i64* %total_lines.addr, align 8, !tbaa !14
  %idx.neg16 = sub i64 0, %42
  %add.ptr17 = getelementptr inbounds %struct.line, %struct.line* %41, i64 %idx.neg16
  store %struct.line* %add.ptr17, %struct.line** %temp, align 8, !tbaa !6
  %43 = load i64, i64* %nhi14, align 8, !tbaa !14
  %cmp18 = icmp ult i64 1, %43
  br i1 %cmp18, label %if.then19, label %if.end

if.then19:                                        ; preds = %if.else
  %44 = load %struct.line*, %struct.line** %lines.addr, align 8, !tbaa !6
  %45 = load i64, i64* %nlo12, align 8, !tbaa !14
  %idx.neg20 = sub i64 0, %45
  %add.ptr21 = getelementptr inbounds %struct.line, %struct.line* %44, i64 %idx.neg20
  %46 = load i64, i64* %nhi14, align 8, !tbaa !14
  %47 = load %struct.line*, %struct.line** %temp, align 8, !tbaa !6
  %48 = load i64, i64* %nlo12, align 8, !tbaa !14
  %div22 = udiv i64 %48, 2
  %idx.neg23 = sub i64 0, %div22
  %add.ptr24 = getelementptr inbounds %struct.line, %struct.line* %47, i64 %idx.neg23
  call void @sequential_sort(%struct.line* %add.ptr21, i64 %46, %struct.line* %add.ptr24, i1 zeroext false)
  br label %if.end

if.end:                                           ; preds = %if.then19, %if.else
  %49 = load i64, i64* %nlo12, align 8, !tbaa !14
  %cmp25 = icmp ult i64 1, %49
  br i1 %cmp25, label %if.then26, label %if.end27

if.then26:                                        ; preds = %if.end
  %50 = load %struct.line*, %struct.line** %lines.addr, align 8, !tbaa !6
  %51 = load i64, i64* %nlo12, align 8, !tbaa !14
  %52 = load %struct.line*, %struct.line** %temp, align 8, !tbaa !6
  call void @sequential_sort(%struct.line* %50, i64 %51, %struct.line* %52, i1 zeroext false)
  br label %if.end27

if.end27:                                         ; preds = %if.then26, %if.end
  %53 = load %struct.line*, %struct.line** %lines.addr, align 8, !tbaa !6
  %54 = load %struct.merge_node*, %struct.merge_node** %node.addr, align 8, !tbaa !6
  %lo = getelementptr inbounds %struct.merge_node, %struct.merge_node* %54, i32 0, i32 0
  store %struct.line* %53, %struct.line** %lo, align 8, !tbaa !84
  %55 = load %struct.line*, %struct.line** %lines.addr, align 8, !tbaa !6
  %56 = load i64, i64* %nlo12, align 8, !tbaa !14
  %idx.neg28 = sub i64 0, %56
  %add.ptr29 = getelementptr inbounds %struct.line, %struct.line* %55, i64 %idx.neg28
  %57 = load %struct.merge_node*, %struct.merge_node** %node.addr, align 8, !tbaa !6
  %hi = getelementptr inbounds %struct.merge_node, %struct.merge_node* %57, i32 0, i32 1
  store %struct.line* %add.ptr29, %struct.line** %hi, align 8, !tbaa !83
  %58 = load %struct.line*, %struct.line** %lines.addr, align 8, !tbaa !6
  %59 = load i64, i64* %nlo12, align 8, !tbaa !14
  %idx.neg30 = sub i64 0, %59
  %add.ptr31 = getelementptr inbounds %struct.line, %struct.line* %58, i64 %idx.neg30
  %60 = load %struct.merge_node*, %struct.merge_node** %node.addr, align 8, !tbaa !6
  %end_lo = getelementptr inbounds %struct.merge_node, %struct.merge_node* %60, i32 0, i32 2
  store %struct.line* %add.ptr31, %struct.line** %end_lo, align 8, !tbaa !82
  %61 = load %struct.line*, %struct.line** %lines.addr, align 8, !tbaa !6
  %62 = load i64, i64* %nlo12, align 8, !tbaa !14
  %idx.neg32 = sub i64 0, %62
  %add.ptr33 = getelementptr inbounds %struct.line, %struct.line* %61, i64 %idx.neg32
  %63 = load i64, i64* %nhi14, align 8, !tbaa !14
  %idx.neg34 = sub i64 0, %63
  %add.ptr35 = getelementptr inbounds %struct.line, %struct.line* %add.ptr33, i64 %idx.neg34
  %64 = load %struct.merge_node*, %struct.merge_node** %node.addr, align 8, !tbaa !6
  %end_hi = getelementptr inbounds %struct.merge_node, %struct.merge_node* %64, i32 0, i32 3
  store %struct.line* %add.ptr35, %struct.line** %end_hi, align 8, !tbaa !80
  %65 = load %struct.merge_node_queue*, %struct.merge_node_queue** %queue.addr, align 8, !tbaa !6
  %66 = load %struct.merge_node*, %struct.merge_node** %node.addr, align 8, !tbaa !6
  call void @queue_insert(%struct.merge_node_queue* %65, %struct.merge_node* %66)
  %67 = load %struct.merge_node_queue*, %struct.merge_node_queue** %queue.addr, align 8, !tbaa !6
  %68 = load i64, i64* %total_lines.addr, align 8, !tbaa !14
  %69 = load %struct._IO_FILE*, %struct._IO_FILE** %tfp.addr, align 8, !tbaa !6
  %70 = load i8*, i8** %temp_output.addr, align 8, !tbaa !6
  call void @merge_loop(%struct.merge_node_queue* %67, i64 %68, %struct._IO_FILE* %69, i8* %70)
  %71 = bitcast %struct.line** %temp to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %71) #13
  %72 = bitcast i64* %nhi14 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %72) #13
  %73 = bitcast i64* %nlo12 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %73) #13
  br label %if.end36

if.end36:                                         ; preds = %if.end27, %if.then
  %74 = bitcast %struct.thread_args* %args to i8*
  call void @llvm.lifetime.end.p0i8(i64 56, i8* %74) #13
  %75 = bitcast i64* %thread to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %75) #13
  %76 = bitcast i64* %hi_threads to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %76) #13
  %77 = bitcast i64* %lo_threads to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %77) #13
  %78 = bitcast i64* %nlines to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %78) #13
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @write_unique(%struct.line* %line, %struct._IO_FILE* %tfp, i8* %temp_output) #7 {
entry:
  %line.addr = alloca %struct.line*, align 8
  %tfp.addr = alloca %struct._IO_FILE*, align 8
  %temp_output.addr = alloca i8*, align 8
  store %struct.line* %line, %struct.line** %line.addr, align 8, !tbaa !6
  store %struct._IO_FILE* %tfp, %struct._IO_FILE** %tfp.addr, align 8, !tbaa !6
  store i8* %temp_output, i8** %temp_output.addr, align 8, !tbaa !6
  %0 = load i8, i8* @unique, align 1, !tbaa !11, !range !25
  %tobool = trunc i8 %0 to i1
  br i1 %tobool, label %if.then, label %if.end4

if.then:                                          ; preds = %entry
  %1 = load i8*, i8** getelementptr inbounds (%struct.line, %struct.line* @saved_line, i32 0, i32 0), align 8, !tbaa !60
  %tobool1 = icmp ne i8* %1, null
  br i1 %tobool1, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %if.then
  %2 = load %struct.line*, %struct.line** %line.addr, align 8, !tbaa !6
  %call = call i32 @compare(%struct.line* %2, %struct.line* @saved_line)
  %tobool2 = icmp ne i32 %call, 0
  br i1 %tobool2, label %if.end, label %if.then3

if.then3:                                         ; preds = %land.lhs.true
  br label %return

if.end:                                           ; preds = %land.lhs.true, %if.then
  %3 = load %struct.line*, %struct.line** %line.addr, align 8, !tbaa !6
  %4 = bitcast %struct.line* %3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 bitcast (%struct.line* @saved_line to i8*), i8* align 8 %4, i64 32, i1 false), !tbaa.struct !101
  br label %if.end4

if.end4:                                          ; preds = %if.end, %entry
  %5 = load %struct.line*, %struct.line** %line.addr, align 8, !tbaa !6
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** %tfp.addr, align 8, !tbaa !6
  %7 = load i8*, i8** %temp_output.addr, align 8, !tbaa !6
  call void @write_line(%struct.line* %5, %struct._IO_FILE* %6, i8* %7)
  br label %return

return:                                           ; preds = %if.end4, %if.then3
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @reap_all() #7 {
entry:
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i32, i32* @nprocs, align 4, !tbaa !2
  %cmp = icmp slt i32 0, %0
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %call = call i32 @reap(i32 -1)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: nounwind uwtable
define internal i32 @reap(i32 %pid) #7 {
entry:
  %pid.addr = alloca i32, align 4
  %status = alloca i32, align 4
  %cpid = alloca i32, align 4
  store i32 %pid, i32* %pid.addr, align 4, !tbaa !2
  %0 = bitcast i32* %status to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #13
  %1 = bitcast i32* %cpid to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %1) #13
  %2 = load i32, i32* %pid.addr, align 4, !tbaa !2
  %tobool = icmp ne i32 %2, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %3 = load i32, i32* %pid.addr, align 4, !tbaa !2
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %3, %cond.true ], [ -1, %cond.false ]
  %4 = load i32, i32* %pid.addr, align 4, !tbaa !2
  %tobool1 = icmp ne i32 %4, 0
  %5 = zext i1 %tobool1 to i64
  %cond2 = select i1 %tobool1, i32 0, i32 1
  %call = call i32 @waitpid(i32 %cond, i32* %status, i32 %cond2)
  store i32 %call, i32* %cpid, align 4, !tbaa !2
  %6 = load i32, i32* %cpid, align 4, !tbaa !2
  %cmp = icmp slt i32 %6, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %cond.end
  %call3 = call i32* @__errno_location() #26
  %7 = load i32, i32* %call3, align 4, !tbaa !2
  %8 = load i8*, i8** @compress_program, align 8, !tbaa !6
  %call4 = call i8* @quotearg_style(i32 4, i8* %8)
  call void (i32, i32, i8*, ...) @error(i32 2, i32 %7, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.178, i64 0, i64 0), i8* %call4)
  unreachable

if.else:                                          ; preds = %cond.end
  %9 = load i32, i32* %cpid, align 4, !tbaa !2
  %cmp5 = icmp slt i32 0, %9
  br i1 %cmp5, label %land.lhs.true, label %if.end15

land.lhs.true:                                    ; preds = %if.else
  %10 = load i32, i32* %pid.addr, align 4, !tbaa !2
  %cmp6 = icmp slt i32 0, %10
  br i1 %cmp6, label %if.then8, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true
  %11 = load i32, i32* %cpid, align 4, !tbaa !2
  %call7 = call zeroext i1 @delete_proc(i32 %11)
  br i1 %call7, label %if.then8, label %if.end15

if.then8:                                         ; preds = %lor.lhs.false, %land.lhs.true
  %12 = load i32, i32* %status, align 4, !tbaa !2
  %and = and i32 %12, 127
  %cmp9 = icmp eq i32 %and, 0
  br i1 %cmp9, label %lor.lhs.false10, label %if.then13

lor.lhs.false10:                                  ; preds = %if.then8
  %13 = load i32, i32* %status, align 4, !tbaa !2
  %and11 = and i32 %13, 65280
  %shr = ashr i32 %and11, 8
  %tobool12 = icmp ne i32 %shr, 0
  br i1 %tobool12, label %if.then13, label %if.end

if.then13:                                        ; preds = %lor.lhs.false10, %if.then8
  %14 = load i8*, i8** @compress_program, align 8, !tbaa !6
  %call14 = call i8* @quotearg_style(i32 4, i8* %14)
  call void (i32, i32, i8*, ...) @error(i32 2, i32 0, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.179, i64 0, i64 0), i8* %call14)
  unreachable

if.end:                                           ; preds = %lor.lhs.false10
  %15 = load i32, i32* @nprocs, align 4, !tbaa !2
  %dec = add nsw i32 %15, -1
  store i32 %dec, i32* @nprocs, align 4, !tbaa !2
  br label %if.end15

if.end15:                                         ; preds = %if.end, %lor.lhs.false, %if.else
  br label %if.end16

if.end16:                                         ; preds = %if.end15
  %16 = load i32, i32* %cpid, align 4, !tbaa !2
  %17 = bitcast i32* %cpid to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %17) #13
  %18 = bitcast i32* %status to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %18) #13
  ret i32 %16
}

declare dso_local i32 @waitpid(i32, i32*, i32) #1

; Function Attrs: nounwind uwtable
define internal zeroext i1 @delete_proc(i32 %pid) #7 {
entry:
  %retval = alloca i1, align 1
  %pid.addr = alloca i32, align 4
  %test = alloca %struct.tempnode, align 8
  %node = alloca %struct.tempnode*, align 8
  %cleanup.dest.slot = alloca i32, align 4
  store i32 %pid, i32* %pid.addr, align 4, !tbaa !2
  %0 = bitcast %struct.tempnode* %test to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %0) #13
  %1 = load i32, i32* %pid.addr, align 4, !tbaa !2
  %pid1 = getelementptr inbounds %struct.tempnode, %struct.tempnode* %test, i32 0, i32 1
  store i32 %1, i32* %pid1, align 8, !tbaa !2
  %2 = bitcast %struct.tempnode** %node to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %2) #13
  %3 = load %struct.hash_table*, %struct.hash_table** @proctab, align 8, !tbaa !6
  %4 = bitcast %struct.tempnode* %test to i8*
  %call = call i8* @hash_remove(%struct.hash_table* %3, i8* %4)
  %5 = bitcast i8* %call to %struct.tempnode*
  store %struct.tempnode* %5, %struct.tempnode** %node, align 8, !tbaa !6
  %6 = load %struct.tempnode*, %struct.tempnode** %node, align 8, !tbaa !6
  %tobool = icmp ne %struct.tempnode* %6, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i1 false, i1* %retval, align 1
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %entry
  %7 = load %struct.tempnode*, %struct.tempnode** %node, align 8, !tbaa !6
  %state = getelementptr inbounds %struct.tempnode, %struct.tempnode* %7, i32 0, i32 2
  store i8 2, i8* %state, align 4, !tbaa !13
  store i1 true, i1* %retval, align 1
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end, %if.then
  %8 = bitcast %struct.tempnode** %node to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %8) #13
  %9 = bitcast %struct.tempnode* %test to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %9) #13
  %10 = load i1, i1* %retval, align 1
  ret i1 %10
}

; Function Attrs: nounwind uwtable
define internal i32 @compare(%struct.line* %a, %struct.line* %b) #7 {
entry:
  %retval = alloca i32, align 4
  %a.addr = alloca %struct.line*, align 8
  %b.addr = alloca %struct.line*, align 8
  %diff = alloca i32, align 4
  %alen = alloca i64, align 8
  %blen = alloca i64, align 8
  %cleanup.dest.slot = alloca i32, align 4
  store %struct.line* %a, %struct.line** %a.addr, align 8, !tbaa !6
  store %struct.line* %b, %struct.line** %b.addr, align 8, !tbaa !6
  %0 = bitcast i32* %diff to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #13
  %1 = bitcast i64* %alen to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %1) #13
  %2 = bitcast i64* %blen to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %2) #13
  %3 = load %struct.keyfield*, %struct.keyfield** @keylist, align 8, !tbaa !6
  %tobool = icmp ne %struct.keyfield* %3, null
  br i1 %tobool, label %if.then, label %if.end6

if.then:                                          ; preds = %entry
  %4 = load %struct.line*, %struct.line** %a.addr, align 8, !tbaa !6
  %5 = load %struct.line*, %struct.line** %b.addr, align 8, !tbaa !6
  %call = call i32 @keycompare(%struct.line* %4, %struct.line* %5)
  store i32 %call, i32* %diff, align 4, !tbaa !2
  %6 = load i32, i32* %diff, align 4, !tbaa !2
  %tobool1 = icmp ne i32 %6, 0
  br i1 %tobool1, label %if.then5, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then
  %7 = load i8, i8* @unique, align 1, !tbaa !11, !range !25
  %tobool2 = trunc i8 %7 to i1
  br i1 %tobool2, label %if.then5, label %lor.lhs.false3

lor.lhs.false3:                                   ; preds = %lor.lhs.false
  %8 = load i8, i8* @stable, align 1, !tbaa !11, !range !25
  %tobool4 = trunc i8 %8 to i1
  br i1 %tobool4, label %if.then5, label %if.end

if.then5:                                         ; preds = %lor.lhs.false3, %lor.lhs.false, %if.then
  %9 = load i32, i32* %diff, align 4, !tbaa !2
  store i32 %9, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %lor.lhs.false3
  br label %if.end6

if.end6:                                          ; preds = %if.end, %entry
  %10 = load %struct.line*, %struct.line** %a.addr, align 8, !tbaa !6
  %length = getelementptr inbounds %struct.line, %struct.line* %10, i32 0, i32 1
  %11 = load i64, i64* %length, align 8, !tbaa !64
  %sub = sub i64 %11, 1
  store i64 %sub, i64* %alen, align 8, !tbaa !14
  %12 = load %struct.line*, %struct.line** %b.addr, align 8, !tbaa !6
  %length7 = getelementptr inbounds %struct.line, %struct.line* %12, i32 0, i32 1
  %13 = load i64, i64* %length7, align 8, !tbaa !64
  %sub8 = sub i64 %13, 1
  store i64 %sub8, i64* %blen, align 8, !tbaa !14
  %14 = load i64, i64* %alen, align 8, !tbaa !14
  %cmp = icmp eq i64 %14, 0
  br i1 %cmp, label %if.then9, label %if.else

if.then9:                                         ; preds = %if.end6
  %15 = load i64, i64* %blen, align 8, !tbaa !14
  %cmp10 = icmp ne i64 %15, 0
  %conv = zext i1 %cmp10 to i32
  %sub11 = sub nsw i32 0, %conv
  store i32 %sub11, i32* %diff, align 4, !tbaa !2
  br label %if.end40

if.else:                                          ; preds = %if.end6
  %16 = load i64, i64* %blen, align 8, !tbaa !14
  %cmp12 = icmp eq i64 %16, 0
  br i1 %cmp12, label %if.then14, label %if.else15

if.then14:                                        ; preds = %if.else
  store i32 1, i32* %diff, align 4, !tbaa !2
  br label %if.end39

if.else15:                                        ; preds = %if.else
  %17 = load i8, i8* @hard_LC_COLLATE, align 1, !tbaa !11, !range !25
  %tobool16 = trunc i8 %17 to i1
  br i1 %tobool16, label %if.then17, label %if.else21

if.then17:                                        ; preds = %if.else15
  %18 = load %struct.line*, %struct.line** %a.addr, align 8, !tbaa !6
  %text = getelementptr inbounds %struct.line, %struct.line* %18, i32 0, i32 0
  %19 = load i8*, i8** %text, align 8, !tbaa !60
  %20 = load i64, i64* %alen, align 8, !tbaa !14
  %add = add i64 %20, 1
  %21 = load %struct.line*, %struct.line** %b.addr, align 8, !tbaa !6
  %text18 = getelementptr inbounds %struct.line, %struct.line* %21, i32 0, i32 0
  %22 = load i8*, i8** %text18, align 8, !tbaa !60
  %23 = load i64, i64* %blen, align 8, !tbaa !14
  %add19 = add i64 %23, 1
  %call20 = call i32 @xmemcoll0(i8* %19, i64 %add, i8* %22, i64 %add19)
  store i32 %call20, i32* %diff, align 4, !tbaa !2
  br label %if.end38

if.else21:                                        ; preds = %if.else15
  %24 = load %struct.line*, %struct.line** %a.addr, align 8, !tbaa !6
  %text22 = getelementptr inbounds %struct.line, %struct.line* %24, i32 0, i32 0
  %25 = load i8*, i8** %text22, align 8, !tbaa !60
  %26 = load %struct.line*, %struct.line** %b.addr, align 8, !tbaa !6
  %text23 = getelementptr inbounds %struct.line, %struct.line* %26, i32 0, i32 0
  %27 = load i8*, i8** %text23, align 8, !tbaa !60
  %28 = load i64, i64* %alen, align 8, !tbaa !14
  %29 = load i64, i64* %blen, align 8, !tbaa !14
  %cmp24 = icmp ult i64 %28, %29
  br i1 %cmp24, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.else21
  %30 = load i64, i64* %alen, align 8, !tbaa !14
  br label %cond.end

cond.false:                                       ; preds = %if.else21
  %31 = load i64, i64* %blen, align 8, !tbaa !14
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %30, %cond.true ], [ %31, %cond.false ]
  %call26 = call i32 @memcmp(i8* %25, i8* %27, i64 %cond) #22
  store i32 %call26, i32* %diff, align 4, !tbaa !2
  %tobool27 = icmp ne i32 %call26, 0
  br i1 %tobool27, label %if.end37, label %if.then28

if.then28:                                        ; preds = %cond.end
  %32 = load i64, i64* %alen, align 8, !tbaa !14
  %33 = load i64, i64* %blen, align 8, !tbaa !14
  %cmp29 = icmp ult i64 %32, %33
  br i1 %cmp29, label %cond.true31, label %cond.false32

cond.true31:                                      ; preds = %if.then28
  br label %cond.end35

cond.false32:                                     ; preds = %if.then28
  %34 = load i64, i64* %alen, align 8, !tbaa !14
  %35 = load i64, i64* %blen, align 8, !tbaa !14
  %cmp33 = icmp ne i64 %34, %35
  %conv34 = zext i1 %cmp33 to i32
  br label %cond.end35

cond.end35:                                       ; preds = %cond.false32, %cond.true31
  %cond36 = phi i32 [ -1, %cond.true31 ], [ %conv34, %cond.false32 ]
  store i32 %cond36, i32* %diff, align 4, !tbaa !2
  br label %if.end37

if.end37:                                         ; preds = %cond.end35, %cond.end
  br label %if.end38

if.end38:                                         ; preds = %if.end37, %if.then17
  br label %if.end39

if.end39:                                         ; preds = %if.end38, %if.then14
  br label %if.end40

if.end40:                                         ; preds = %if.end39, %if.then9
  %36 = load i8, i8* @reverse, align 1, !tbaa !11, !range !25
  %tobool41 = trunc i8 %36 to i1
  br i1 %tobool41, label %cond.true43, label %cond.false45

cond.true43:                                      ; preds = %if.end40
  %37 = load i32, i32* %diff, align 4, !tbaa !2
  %sub44 = sub nsw i32 0, %37
  br label %cond.end46

cond.false45:                                     ; preds = %if.end40
  %38 = load i32, i32* %diff, align 4, !tbaa !2
  br label %cond.end46

cond.end46:                                       ; preds = %cond.false45, %cond.true43
  %cond47 = phi i32 [ %sub44, %cond.true43 ], [ %38, %cond.false45 ]
  store i32 %cond47, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %cond.end46, %if.then5
  %39 = bitcast i64* %blen to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %39) #13
  %40 = bitcast i64* %alen to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %40) #13
  %41 = bitcast i32* %diff to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %41) #13
  %42 = load i32, i32* %retval, align 4
  ret i32 %42
}

; Function Attrs: nounwind uwtable
define internal void @write_line(%struct.line* %line, %struct._IO_FILE* %fp, i8* %output_file) #7 {
entry:
  %line.addr = alloca %struct.line*, align 8
  %fp.addr = alloca %struct._IO_FILE*, align 8
  %output_file.addr = alloca i8*, align 8
  %buf = alloca i8*, align 8
  %n_bytes = alloca i64, align 8
  %ebuf = alloca i8*, align 8
  %c = alloca i8*, align 8
  %wc = alloca i8, align 1
  store %struct.line* %line, %struct.line** %line.addr, align 8, !tbaa !6
  store %struct._IO_FILE* %fp, %struct._IO_FILE** %fp.addr, align 8, !tbaa !6
  store i8* %output_file, i8** %output_file.addr, align 8, !tbaa !6
  %0 = bitcast i8** %buf to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #13
  %1 = load %struct.line*, %struct.line** %line.addr, align 8, !tbaa !6
  %text = getelementptr inbounds %struct.line, %struct.line* %1, i32 0, i32 0
  %2 = load i8*, i8** %text, align 8, !tbaa !60
  store i8* %2, i8** %buf, align 8, !tbaa !6
  %3 = bitcast i64* %n_bytes to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %3) #13
  %4 = load %struct.line*, %struct.line** %line.addr, align 8, !tbaa !6
  %length = getelementptr inbounds %struct.line, %struct.line* %4, i32 0, i32 1
  %5 = load i64, i64* %length, align 8, !tbaa !64
  store i64 %5, i64* %n_bytes, align 8, !tbaa !14
  %6 = bitcast i8** %ebuf to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %6) #13
  %7 = load i8*, i8** %buf, align 8, !tbaa !6
  %8 = load i64, i64* %n_bytes, align 8, !tbaa !14
  %add.ptr = getelementptr inbounds i8, i8* %7, i64 %8
  store i8* %add.ptr, i8** %ebuf, align 8, !tbaa !6
  %9 = load i8*, i8** %output_file.addr, align 8, !tbaa !6
  %tobool = icmp ne i8* %9, null
  br i1 %tobool, label %if.else14, label %land.lhs.true

land.lhs.true:                                    ; preds = %entry
  %10 = load i8, i8* @debug, align 1, !tbaa !11, !range !25
  %tobool1 = trunc i8 %10 to i1
  br i1 %tobool1, label %if.then, label %if.else14

if.then:                                          ; preds = %land.lhs.true
  %11 = bitcast i8** %c to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %11) #13
  %12 = load i8*, i8** %buf, align 8, !tbaa !6
  store i8* %12, i8** %c, align 8, !tbaa !6
  br label %while.cond

while.cond:                                       ; preds = %if.end13, %if.then
  %13 = load i8*, i8** %c, align 8, !tbaa !6
  %14 = load i8*, i8** %ebuf, align 8, !tbaa !6
  %cmp = icmp ult i8* %13, %14
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %wc) #13
  %15 = load i8*, i8** %c, align 8, !tbaa !6
  %incdec.ptr = getelementptr inbounds i8, i8* %15, i32 1
  store i8* %incdec.ptr, i8** %c, align 8, !tbaa !6
  %16 = load i8, i8* %15, align 1, !tbaa !13
  store i8 %16, i8* %wc, align 1, !tbaa !13
  %17 = load i8, i8* %wc, align 1, !tbaa !13
  %conv = sext i8 %17 to i32
  %cmp2 = icmp eq i32 %conv, 9
  br i1 %cmp2, label %if.then4, label %if.else

if.then4:                                         ; preds = %while.body
  store i8 62, i8* %wc, align 1, !tbaa !13
  br label %if.end8

if.else:                                          ; preds = %while.body
  %18 = load i8*, i8** %c, align 8, !tbaa !6
  %19 = load i8*, i8** %ebuf, align 8, !tbaa !6
  %cmp5 = icmp eq i8* %18, %19
  br i1 %cmp5, label %if.then7, label %if.end

if.then7:                                         ; preds = %if.else
  store i8 10, i8* %wc, align 1, !tbaa !13
  br label %if.end

if.end:                                           ; preds = %if.then7, %if.else
  br label %if.end8

if.end8:                                          ; preds = %if.end, %if.then4
  %20 = load i8, i8* %wc, align 1, !tbaa !13
  %conv9 = sext i8 %20 to i32
  %21 = load %struct._IO_FILE*, %struct._IO_FILE** %fp.addr, align 8, !tbaa !6
  %call = call i32 @fputc_unlocked(i32 %conv9, %struct._IO_FILE* %21)
  %cmp10 = icmp eq i32 %call, -1
  br i1 %cmp10, label %if.then12, label %if.end13

if.then12:                                        ; preds = %if.end8
  %22 = load i8*, i8** %output_file.addr, align 8, !tbaa !6
  call void @sort_die(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.171, i64 0, i64 0), i8* %22)
  br label %if.end13

if.end13:                                         ; preds = %if.then12, %if.end8
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %wc) #13
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %23 = load %struct.line*, %struct.line** %line.addr, align 8, !tbaa !6
  call void @debug_line(%struct.line* %23)
  %24 = bitcast i8** %c to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %24) #13
  br label %if.end21

if.else14:                                        ; preds = %land.lhs.true, %entry
  %25 = load i8, i8* @eolchar, align 1, !tbaa !13
  %26 = load i8*, i8** %ebuf, align 8, !tbaa !6
  %arrayidx = getelementptr inbounds i8, i8* %26, i64 -1
  store i8 %25, i8* %arrayidx, align 1, !tbaa !13
  %27 = load i8*, i8** %buf, align 8, !tbaa !6
  %28 = load i64, i64* %n_bytes, align 8, !tbaa !14
  %29 = load %struct._IO_FILE*, %struct._IO_FILE** %fp.addr, align 8, !tbaa !6
  %call15 = call i64 @fwrite_unlocked(i8* %27, i64 1, i64 %28, %struct._IO_FILE* %29)
  %30 = load i64, i64* %n_bytes, align 8, !tbaa !14
  %cmp16 = icmp ne i64 %call15, %30
  br i1 %cmp16, label %if.then18, label %if.end19

if.then18:                                        ; preds = %if.else14
  %31 = load i8*, i8** %output_file.addr, align 8, !tbaa !6
  call void @sort_die(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.171, i64 0, i64 0), i8* %31)
  br label %if.end19

if.end19:                                         ; preds = %if.then18, %if.else14
  %32 = load i8*, i8** %ebuf, align 8, !tbaa !6
  %arrayidx20 = getelementptr inbounds i8, i8* %32, i64 -1
  store i8 0, i8* %arrayidx20, align 1, !tbaa !13
  br label %if.end21

if.end21:                                         ; preds = %if.end19, %while.end
  %33 = bitcast i8** %ebuf to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %33) #13
  %34 = bitcast i64* %n_bytes to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %34) #13
  %35 = bitcast i8** %buf to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %35) #13
  ret void
}

declare dso_local i32 @fputc_unlocked(i32, %struct._IO_FILE*) #1

; Function Attrs: nounwind uwtable
define internal void @debug_line(%struct.line* %line) #7 {
entry:
  %line.addr = alloca %struct.line*, align 8
  %key = alloca %struct.keyfield*, align 8
  store %struct.line* %line, %struct.line** %line.addr, align 8, !tbaa !6
  %0 = bitcast %struct.keyfield** %key to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #13
  %1 = load %struct.keyfield*, %struct.keyfield** @keylist, align 8, !tbaa !6
  store %struct.keyfield* %1, %struct.keyfield** %key, align 8, !tbaa !6
  br label %do.body

do.body:                                          ; preds = %land.end, %entry
  %2 = load %struct.line*, %struct.line** %line.addr, align 8, !tbaa !6
  %3 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !tbaa !6
  call void @debug_key(%struct.line* %2, %struct.keyfield* %3)
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %4 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !tbaa !6
  %tobool = icmp ne %struct.keyfield* %4, null
  br i1 %tobool, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %do.cond
  %5 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !tbaa !6
  %next = getelementptr inbounds %struct.keyfield, %struct.keyfield* %5, i32 0, i32 16
  %6 = load %struct.keyfield*, %struct.keyfield** %next, align 8, !tbaa !45
  store %struct.keyfield* %6, %struct.keyfield** %key, align 8, !tbaa !6
  %tobool1 = icmp ne %struct.keyfield* %6, null
  br i1 %tobool1, label %lor.end5, label %lor.rhs

lor.rhs:                                          ; preds = %land.rhs
  %7 = load i8, i8* @unique, align 1, !tbaa !11, !range !25
  %tobool2 = trunc i8 %7 to i1
  br i1 %tobool2, label %lor.end, label %lor.rhs3

lor.rhs3:                                         ; preds = %lor.rhs
  %8 = load i8, i8* @stable, align 1, !tbaa !11, !range !25
  %tobool4 = trunc i8 %8 to i1
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs3, %lor.rhs
  %9 = phi i1 [ true, %lor.rhs ], [ %tobool4, %lor.rhs3 ]
  %lnot = xor i1 %9, true
  br label %lor.end5

lor.end5:                                         ; preds = %lor.end, %land.rhs
  %10 = phi i1 [ true, %land.rhs ], [ %lnot, %lor.end ]
  br label %land.end

land.end:                                         ; preds = %lor.end5, %do.cond
  %11 = phi i1 [ false, %do.cond ], [ %10, %lor.end5 ]
  br i1 %11, label %do.body, label %do.end

do.end:                                           ; preds = %land.end
  %12 = bitcast %struct.keyfield** %key to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %12) #13
  ret void
}

declare dso_local i64 @fwrite_unlocked(i8*, i64, i64, %struct._IO_FILE*) #1

; Function Attrs: nounwind uwtable
define internal void @debug_key(%struct.line* %line, %struct.keyfield* %key) #7 {
entry:
  %line.addr = alloca %struct.line*, align 8
  %key.addr = alloca %struct.keyfield*, align 8
  %text = alloca i8*, align 8
  %beg = alloca i8*, align 8
  %lim = alloca i8*, align 8
  %saved = alloca i8, align 1
  %tighter_lim = alloca i8*, align 8
  %p = alloca i8*, align 8
  %max_digit = alloca i8, align 1
  %ch = alloca i8, align 1
  %offset = alloca i64, align 8
  %width = alloca i64, align 8
  store %struct.line* %line, %struct.line** %line.addr, align 8, !tbaa !6
  store %struct.keyfield* %key, %struct.keyfield** %key.addr, align 8, !tbaa !6
  %0 = bitcast i8** %text to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #13
  %1 = load %struct.line*, %struct.line** %line.addr, align 8, !tbaa !6
  %text1 = getelementptr inbounds %struct.line, %struct.line* %1, i32 0, i32 0
  %2 = load i8*, i8** %text1, align 8, !tbaa !60
  store i8* %2, i8** %text, align 8, !tbaa !6
  %3 = bitcast i8** %beg to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %3) #13
  %4 = load i8*, i8** %text, align 8, !tbaa !6
  store i8* %4, i8** %beg, align 8, !tbaa !6
  %5 = bitcast i8** %lim to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %5) #13
  %6 = load i8*, i8** %text, align 8, !tbaa !6
  %7 = load %struct.line*, %struct.line** %line.addr, align 8, !tbaa !6
  %length = getelementptr inbounds %struct.line, %struct.line* %7, i32 0, i32 1
  %8 = load i64, i64* %length, align 8, !tbaa !64
  %add.ptr = getelementptr inbounds i8, i8* %6, i64 %8
  %add.ptr2 = getelementptr inbounds i8, i8* %add.ptr, i64 -1
  store i8* %add.ptr2, i8** %lim, align 8, !tbaa !6
  %9 = load %struct.keyfield*, %struct.keyfield** %key.addr, align 8, !tbaa !6
  %tobool = icmp ne %struct.keyfield* %9, null
  br i1 %tobool, label %if.then, label %if.end60

if.then:                                          ; preds = %entry
  %10 = load %struct.keyfield*, %struct.keyfield** %key.addr, align 8, !tbaa !6
  %sword = getelementptr inbounds %struct.keyfield, %struct.keyfield* %10, i32 0, i32 0
  %11 = load i64, i64* %sword, align 8, !tbaa !23
  %cmp = icmp ne i64 %11, -1
  br i1 %cmp, label %if.then3, label %if.end

if.then3:                                         ; preds = %if.then
  %12 = load %struct.line*, %struct.line** %line.addr, align 8, !tbaa !6
  %13 = load %struct.keyfield*, %struct.keyfield** %key.addr, align 8, !tbaa !6
  %call = call i8* @begfield(%struct.line* %12, %struct.keyfield* %13)
  store i8* %call, i8** %beg, align 8, !tbaa !6
  br label %if.end

if.end:                                           ; preds = %if.then3, %if.then
  %14 = load %struct.keyfield*, %struct.keyfield** %key.addr, align 8, !tbaa !6
  %eword = getelementptr inbounds %struct.keyfield, %struct.keyfield* %14, i32 0, i32 2
  %15 = load i64, i64* %eword, align 8, !tbaa !28
  %cmp4 = icmp ne i64 %15, -1
  br i1 %cmp4, label %if.then5, label %if.end7

if.then5:                                         ; preds = %if.end
  %16 = load %struct.line*, %struct.line** %line.addr, align 8, !tbaa !6
  %17 = load %struct.keyfield*, %struct.keyfield** %key.addr, align 8, !tbaa !6
  %call6 = call i8* @limfield(%struct.line* %16, %struct.keyfield* %17) #22
  store i8* %call6, i8** %lim, align 8, !tbaa !6
  br label %if.end7

if.end7:                                          ; preds = %if.then5, %if.end
  %18 = load %struct.keyfield*, %struct.keyfield** %key.addr, align 8, !tbaa !6
  %skipsblanks = getelementptr inbounds %struct.keyfield, %struct.keyfield* %18, i32 0, i32 6
  %19 = load i8, i8* %skipsblanks, align 8, !tbaa !37, !range !25
  %tobool8 = trunc i8 %19 to i1
  br i1 %tobool8, label %land.lhs.true, label %lor.lhs.false

land.lhs.true:                                    ; preds = %if.end7
  %20 = load %struct.keyfield*, %struct.keyfield** %key.addr, align 8, !tbaa !6
  %sword9 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %20, i32 0, i32 0
  %21 = load i64, i64* %sword9, align 8, !tbaa !23
  %cmp10 = icmp eq i64 %21, -1
  br i1 %cmp10, label %if.then14, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true, %if.end7
  %22 = load %struct.keyfield*, %struct.keyfield** %key.addr, align 8, !tbaa !6
  %month = getelementptr inbounds %struct.keyfield, %struct.keyfield* %22, i32 0, i32 12
  %23 = load i8, i8* %month, align 2, !tbaa !39, !range !25
  %tobool11 = trunc i8 %23 to i1
  br i1 %tobool11, label %if.then14, label %lor.lhs.false12

lor.lhs.false12:                                  ; preds = %lor.lhs.false
  %24 = load %struct.keyfield*, %struct.keyfield** %key.addr, align 8, !tbaa !6
  %call13 = call zeroext i1 @key_numeric(%struct.keyfield* %24)
  br i1 %call13, label %if.then14, label %if.end59

if.then14:                                        ; preds = %lor.lhs.false12, %lor.lhs.false, %land.lhs.true
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %saved) #13
  %25 = load i8*, i8** %lim, align 8, !tbaa !6
  %26 = load i8, i8* %25, align 1, !tbaa !13
  store i8 %26, i8* %saved, align 1, !tbaa !13
  %27 = load i8*, i8** %lim, align 8, !tbaa !6
  store i8 0, i8* %27, align 1, !tbaa !13
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then14
  %28 = load i8*, i8** %beg, align 8, !tbaa !6
  %29 = load i8, i8* %28, align 1, !tbaa !13
  %call15 = call zeroext i8 @to_uchar(i8 signext %29)
  %idxprom = zext i8 %call15 to i64
  %arrayidx = getelementptr inbounds [256 x i8], [256 x i8]* @blanks, i64 0, i64 %idxprom
  %30 = load i8, i8* %arrayidx, align 1, !tbaa !11, !range !25
  %tobool16 = trunc i8 %30 to i1
  br i1 %tobool16, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %31 = load i8*, i8** %beg, align 8, !tbaa !6
  %incdec.ptr = getelementptr inbounds i8, i8* %31, i32 1
  store i8* %incdec.ptr, i8** %beg, align 8, !tbaa !6
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %32 = bitcast i8** %tighter_lim to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %32) #13
  %33 = load i8*, i8** %beg, align 8, !tbaa !6
  store i8* %33, i8** %tighter_lim, align 8, !tbaa !6
  %34 = load i8*, i8** %lim, align 8, !tbaa !6
  %35 = load i8*, i8** %beg, align 8, !tbaa !6
  %cmp17 = icmp ult i8* %34, %35
  br i1 %cmp17, label %if.then18, label %if.else

if.then18:                                        ; preds = %while.end
  %36 = load i8*, i8** %lim, align 8, !tbaa !6
  store i8* %36, i8** %tighter_lim, align 8, !tbaa !6
  br label %if.end58

if.else:                                          ; preds = %while.end
  %37 = load %struct.keyfield*, %struct.keyfield** %key.addr, align 8, !tbaa !6
  %month19 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %37, i32 0, i32 12
  %38 = load i8, i8* %month19, align 2, !tbaa !39, !range !25
  %tobool20 = trunc i8 %38 to i1
  br i1 %tobool20, label %if.then21, label %if.else23

if.then21:                                        ; preds = %if.else
  %39 = load i8*, i8** %beg, align 8, !tbaa !6
  %call22 = call i32 @getmonth(i8* %39, i8** %tighter_lim)
  br label %if.end57

if.else23:                                        ; preds = %if.else
  %40 = load %struct.keyfield*, %struct.keyfield** %key.addr, align 8, !tbaa !6
  %general_numeric = getelementptr inbounds %struct.keyfield, %struct.keyfield* %40, i32 0, i32 10
  %41 = load i8, i8* %general_numeric, align 4, !tbaa !41, !range !25
  %tobool24 = trunc i8 %41 to i1
  br i1 %tobool24, label %if.then25, label %if.else27

if.then25:                                        ; preds = %if.else23
  %42 = load i8*, i8** %beg, align 8, !tbaa !6
  %call26 = call x86_fp80 @strtold(i8* %42, i8** %tighter_lim) #13
  br label %if.end56

if.else27:                                        ; preds = %if.else23
  %43 = load %struct.keyfield*, %struct.keyfield** %key.addr, align 8, !tbaa !6
  %numeric = getelementptr inbounds %struct.keyfield, %struct.keyfield* %43, i32 0, i32 8
  %44 = load i8, i8* %numeric, align 2, !tbaa !40, !range !25
  %tobool28 = trunc i8 %44 to i1
  br i1 %tobool28, label %if.then31, label %lor.lhs.false29

lor.lhs.false29:                                  ; preds = %if.else27
  %45 = load %struct.keyfield*, %struct.keyfield** %key.addr, align 8, !tbaa !6
  %human_numeric = getelementptr inbounds %struct.keyfield, %struct.keyfield* %45, i32 0, i32 11
  %46 = load i8, i8* %human_numeric, align 1, !tbaa !42, !range !25
  %tobool30 = trunc i8 %46 to i1
  br i1 %tobool30, label %if.then31, label %if.else54

if.then31:                                        ; preds = %lor.lhs.false29, %if.else27
  %47 = bitcast i8** %p to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %47) #13
  %48 = load i8*, i8** %beg, align 8, !tbaa !6
  %49 = load i8*, i8** %beg, align 8, !tbaa !6
  %50 = load i8*, i8** %lim, align 8, !tbaa !6
  %cmp32 = icmp ult i8* %49, %50
  br i1 %cmp32, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %if.then31
  %51 = load i8*, i8** %beg, align 8, !tbaa !6
  %52 = load i8, i8* %51, align 1, !tbaa !13
  %conv = sext i8 %52 to i32
  %cmp33 = icmp eq i32 %conv, 45
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.then31
  %53 = phi i1 [ false, %if.then31 ], [ %cmp33, %land.rhs ]
  %land.ext = zext i1 %53 to i32
  %idx.ext = sext i32 %land.ext to i64
  %add.ptr35 = getelementptr inbounds i8, i8* %48, i64 %idx.ext
  store i8* %add.ptr35, i8** %p, align 8, !tbaa !6
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %max_digit) #13
  %call36 = call signext i8 @traverse_raw_number(i8** %p)
  store i8 %call36, i8* %max_digit, align 1, !tbaa !13
  %54 = load i8, i8* %max_digit, align 1, !tbaa !13
  %conv37 = sext i8 %54 to i32
  %cmp38 = icmp sle i32 48, %conv37
  br i1 %cmp38, label %if.then40, label %if.end53

if.then40:                                        ; preds = %land.end
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %ch) #13
  %55 = load i8*, i8** %p, align 8, !tbaa !6
  %56 = load i8, i8* %55, align 1, !tbaa !13
  store i8 %56, i8* %ch, align 1, !tbaa !13
  %57 = load i8*, i8** %p, align 8, !tbaa !6
  %58 = load %struct.keyfield*, %struct.keyfield** %key.addr, align 8, !tbaa !6
  %human_numeric41 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %58, i32 0, i32 11
  %59 = load i8, i8* %human_numeric41, align 1, !tbaa !42, !range !25
  %tobool42 = trunc i8 %59 to i1
  br i1 %tobool42, label %land.rhs44, label %land.end49

land.rhs44:                                       ; preds = %if.then40
  %60 = load i8, i8* %ch, align 1, !tbaa !13
  %idxprom45 = zext i8 %60 to i64
  %arrayidx46 = getelementptr inbounds [256 x i8], [256 x i8]* bitcast (<{ [108 x i8], [148 x i8] }>* @unit_order to [256 x i8]*), i64 0, i64 %idxprom45
  %61 = load i8, i8* %arrayidx46, align 1, !tbaa !13
  %conv47 = sext i8 %61 to i32
  %tobool48 = icmp ne i32 %conv47, 0
  br label %land.end49

land.end49:                                       ; preds = %land.rhs44, %if.then40
  %62 = phi i1 [ false, %if.then40 ], [ %tobool48, %land.rhs44 ]
  %land.ext50 = zext i1 %62 to i32
  %idx.ext51 = sext i32 %land.ext50 to i64
  %add.ptr52 = getelementptr inbounds i8, i8* %57, i64 %idx.ext51
  store i8* %add.ptr52, i8** %tighter_lim, align 8, !tbaa !6
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %ch) #13
  br label %if.end53

if.end53:                                         ; preds = %land.end49, %land.end
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %max_digit) #13
  %63 = bitcast i8** %p to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %63) #13
  br label %if.end55

if.else54:                                        ; preds = %lor.lhs.false29
  %64 = load i8*, i8** %lim, align 8, !tbaa !6
  store i8* %64, i8** %tighter_lim, align 8, !tbaa !6
  br label %if.end55

if.end55:                                         ; preds = %if.else54, %if.end53
  br label %if.end56

if.end56:                                         ; preds = %if.end55, %if.then25
  br label %if.end57

if.end57:                                         ; preds = %if.end56, %if.then21
  br label %if.end58

if.end58:                                         ; preds = %if.end57, %if.then18
  %65 = load i8, i8* %saved, align 1, !tbaa !13
  %66 = load i8*, i8** %lim, align 8, !tbaa !6
  store i8 %65, i8* %66, align 1, !tbaa !13
  %67 = load i8*, i8** %tighter_lim, align 8, !tbaa !6
  store i8* %67, i8** %lim, align 8, !tbaa !6
  %68 = bitcast i8** %tighter_lim to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %68) #13
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %saved) #13
  br label %if.end59

if.end59:                                         ; preds = %if.end58, %lor.lhs.false12
  br label %if.end60

if.end60:                                         ; preds = %if.end59, %entry
  %69 = bitcast i64* %offset to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %69) #13
  %70 = load i8*, i8** %text, align 8, !tbaa !6
  %71 = load i8*, i8** %beg, align 8, !tbaa !6
  %call61 = call i64 @debug_width(i8* %70, i8* %71)
  store i64 %call61, i64* %offset, align 8, !tbaa !14
  %72 = bitcast i64* %width to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %72) #13
  %73 = load i8*, i8** %beg, align 8, !tbaa !6
  %74 = load i8*, i8** %lim, align 8, !tbaa !6
  %call62 = call i64 @debug_width(i8* %73, i8* %74)
  store i64 %call62, i64* %width, align 8, !tbaa !14
  %75 = load i64, i64* %offset, align 8, !tbaa !14
  %76 = load i64, i64* %width, align 8, !tbaa !14
  call void @mark_key(i64 %75, i64 %76)
  %77 = bitcast i64* %width to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %77) #13
  %78 = bitcast i64* %offset to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %78) #13
  %79 = bitcast i8** %lim to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %79) #13
  %80 = bitcast i8** %beg to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %80) #13
  %81 = bitcast i8** %text to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %81) #13
  ret void
}

; Function Attrs: nounwind uwtable
define internal i8* @begfield(%struct.line* %line, %struct.keyfield* %key) #7 {
entry:
  %line.addr = alloca %struct.line*, align 8
  %key.addr = alloca %struct.keyfield*, align 8
  %ptr = alloca i8*, align 8
  %lim = alloca i8*, align 8
  %sword = alloca i64, align 8
  %schar = alloca i64, align 8
  store %struct.line* %line, %struct.line** %line.addr, align 8, !tbaa !6
  store %struct.keyfield* %key, %struct.keyfield** %key.addr, align 8, !tbaa !6
  %0 = bitcast i8** %ptr to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #13
  %1 = load %struct.line*, %struct.line** %line.addr, align 8, !tbaa !6
  %text = getelementptr inbounds %struct.line, %struct.line* %1, i32 0, i32 0
  %2 = load i8*, i8** %text, align 8, !tbaa !60
  store i8* %2, i8** %ptr, align 8, !tbaa !6
  %3 = bitcast i8** %lim to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %3) #13
  %4 = load i8*, i8** %ptr, align 8, !tbaa !6
  %5 = load %struct.line*, %struct.line** %line.addr, align 8, !tbaa !6
  %length = getelementptr inbounds %struct.line, %struct.line* %5, i32 0, i32 1
  %6 = load i64, i64* %length, align 8, !tbaa !64
  %add.ptr = getelementptr inbounds i8, i8* %4, i64 %6
  %add.ptr1 = getelementptr inbounds i8, i8* %add.ptr, i64 -1
  store i8* %add.ptr1, i8** %lim, align 8, !tbaa !6
  %7 = bitcast i64* %sword to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %7) #13
  %8 = load %struct.keyfield*, %struct.keyfield** %key.addr, align 8, !tbaa !6
  %sword2 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %8, i32 0, i32 0
  %9 = load i64, i64* %sword2, align 8, !tbaa !23
  store i64 %9, i64* %sword, align 8, !tbaa !14
  %10 = bitcast i64* %schar to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %10) #13
  %11 = load %struct.keyfield*, %struct.keyfield** %key.addr, align 8, !tbaa !6
  %schar3 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %11, i32 0, i32 1
  %12 = load i64, i64* %schar3, align 8, !tbaa !26
  store i64 %12, i64* %schar, align 8, !tbaa !14
  %13 = load i32, i32* @tab, align 4, !tbaa !2
  %cmp = icmp ne i32 %13, 128
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  br label %while.cond

while.cond:                                       ; preds = %if.end, %if.then
  %14 = load i8*, i8** %ptr, align 8, !tbaa !6
  %15 = load i8*, i8** %lim, align 8, !tbaa !6
  %cmp4 = icmp ult i8* %14, %15
  br i1 %cmp4, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %16 = load i64, i64* %sword, align 8, !tbaa !14
  %dec = add i64 %16, -1
  store i64 %dec, i64* %sword, align 8, !tbaa !14
  %tobool = icmp ne i64 %16, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %17 = phi i1 [ false, %while.cond ], [ %tobool, %land.rhs ]
  br i1 %17, label %while.body, label %while.end16

while.body:                                       ; preds = %land.end
  br label %while.cond5

while.cond5:                                      ; preds = %while.body11, %while.body
  %18 = load i8*, i8** %ptr, align 8, !tbaa !6
  %19 = load i8*, i8** %lim, align 8, !tbaa !6
  %cmp6 = icmp ult i8* %18, %19
  br i1 %cmp6, label %land.rhs7, label %land.end10

land.rhs7:                                        ; preds = %while.cond5
  %20 = load i8*, i8** %ptr, align 8, !tbaa !6
  %21 = load i8, i8* %20, align 1, !tbaa !13
  %conv = sext i8 %21 to i32
  %22 = load i32, i32* @tab, align 4, !tbaa !2
  %cmp8 = icmp ne i32 %conv, %22
  br label %land.end10

land.end10:                                       ; preds = %land.rhs7, %while.cond5
  %23 = phi i1 [ false, %while.cond5 ], [ %cmp8, %land.rhs7 ]
  br i1 %23, label %while.body11, label %while.end

while.body11:                                     ; preds = %land.end10
  %24 = load i8*, i8** %ptr, align 8, !tbaa !6
  %incdec.ptr = getelementptr inbounds i8, i8* %24, i32 1
  store i8* %incdec.ptr, i8** %ptr, align 8, !tbaa !6
  br label %while.cond5

while.end:                                        ; preds = %land.end10
  %25 = load i8*, i8** %ptr, align 8, !tbaa !6
  %26 = load i8*, i8** %lim, align 8, !tbaa !6
  %cmp12 = icmp ult i8* %25, %26
  br i1 %cmp12, label %if.then14, label %if.end

if.then14:                                        ; preds = %while.end
  %27 = load i8*, i8** %ptr, align 8, !tbaa !6
  %incdec.ptr15 = getelementptr inbounds i8, i8* %27, i32 1
  store i8* %incdec.ptr15, i8** %ptr, align 8, !tbaa !6
  br label %if.end

if.end:                                           ; preds = %if.then14, %while.end
  br label %while.cond

while.end16:                                      ; preds = %land.end
  br label %if.end48

if.else:                                          ; preds = %entry
  br label %while.cond17

while.cond17:                                     ; preds = %while.end46, %if.else
  %28 = load i8*, i8** %ptr, align 8, !tbaa !6
  %29 = load i8*, i8** %lim, align 8, !tbaa !6
  %cmp18 = icmp ult i8* %28, %29
  br i1 %cmp18, label %land.rhs20, label %land.end23

land.rhs20:                                       ; preds = %while.cond17
  %30 = load i64, i64* %sword, align 8, !tbaa !14
  %dec21 = add i64 %30, -1
  store i64 %dec21, i64* %sword, align 8, !tbaa !14
  %tobool22 = icmp ne i64 %30, 0
  br label %land.end23

land.end23:                                       ; preds = %land.rhs20, %while.cond17
  %31 = phi i1 [ false, %while.cond17 ], [ %tobool22, %land.rhs20 ]
  br i1 %31, label %while.body24, label %while.end47

while.body24:                                     ; preds = %land.end23
  br label %while.cond25

while.cond25:                                     ; preds = %while.body32, %while.body24
  %32 = load i8*, i8** %ptr, align 8, !tbaa !6
  %33 = load i8*, i8** %lim, align 8, !tbaa !6
  %cmp26 = icmp ult i8* %32, %33
  br i1 %cmp26, label %land.rhs28, label %land.end31

land.rhs28:                                       ; preds = %while.cond25
  %34 = load i8*, i8** %ptr, align 8, !tbaa !6
  %35 = load i8, i8* %34, align 1, !tbaa !13
  %call = call zeroext i8 @to_uchar(i8 signext %35)
  %idxprom = zext i8 %call to i64
  %arrayidx = getelementptr inbounds [256 x i8], [256 x i8]* @blanks, i64 0, i64 %idxprom
  %36 = load i8, i8* %arrayidx, align 1, !tbaa !11, !range !25
  %tobool29 = trunc i8 %36 to i1
  br label %land.end31

land.end31:                                       ; preds = %land.rhs28, %while.cond25
  %37 = phi i1 [ false, %while.cond25 ], [ %tobool29, %land.rhs28 ]
  br i1 %37, label %while.body32, label %while.end34

while.body32:                                     ; preds = %land.end31
  %38 = load i8*, i8** %ptr, align 8, !tbaa !6
  %incdec.ptr33 = getelementptr inbounds i8, i8* %38, i32 1
  store i8* %incdec.ptr33, i8** %ptr, align 8, !tbaa !6
  br label %while.cond25

while.end34:                                      ; preds = %land.end31
  br label %while.cond35

while.cond35:                                     ; preds = %while.body44, %while.end34
  %39 = load i8*, i8** %ptr, align 8, !tbaa !6
  %40 = load i8*, i8** %lim, align 8, !tbaa !6
  %cmp36 = icmp ult i8* %39, %40
  br i1 %cmp36, label %land.rhs38, label %land.end43

land.rhs38:                                       ; preds = %while.cond35
  %41 = load i8*, i8** %ptr, align 8, !tbaa !6
  %42 = load i8, i8* %41, align 1, !tbaa !13
  %call39 = call zeroext i8 @to_uchar(i8 signext %42)
  %idxprom40 = zext i8 %call39 to i64
  %arrayidx41 = getelementptr inbounds [256 x i8], [256 x i8]* @blanks, i64 0, i64 %idxprom40
  %43 = load i8, i8* %arrayidx41, align 1, !tbaa !11, !range !25
  %tobool42 = trunc i8 %43 to i1
  %lnot = xor i1 %tobool42, true
  br label %land.end43

land.end43:                                       ; preds = %land.rhs38, %while.cond35
  %44 = phi i1 [ false, %while.cond35 ], [ %lnot, %land.rhs38 ]
  br i1 %44, label %while.body44, label %while.end46

while.body44:                                     ; preds = %land.end43
  %45 = load i8*, i8** %ptr, align 8, !tbaa !6
  %incdec.ptr45 = getelementptr inbounds i8, i8* %45, i32 1
  store i8* %incdec.ptr45, i8** %ptr, align 8, !tbaa !6
  br label %while.cond35

while.end46:                                      ; preds = %land.end43
  br label %while.cond17

while.end47:                                      ; preds = %land.end23
  br label %if.end48

if.end48:                                         ; preds = %while.end47, %while.end16
  %46 = load %struct.keyfield*, %struct.keyfield** %key.addr, align 8, !tbaa !6
  %skipsblanks = getelementptr inbounds %struct.keyfield, %struct.keyfield* %46, i32 0, i32 6
  %47 = load i8, i8* %skipsblanks, align 8, !tbaa !37, !range !25
  %tobool49 = trunc i8 %47 to i1
  br i1 %tobool49, label %if.then50, label %if.end64

if.then50:                                        ; preds = %if.end48
  br label %while.cond51

while.cond51:                                     ; preds = %while.body61, %if.then50
  %48 = load i8*, i8** %ptr, align 8, !tbaa !6
  %49 = load i8*, i8** %lim, align 8, !tbaa !6
  %cmp52 = icmp ult i8* %48, %49
  br i1 %cmp52, label %land.rhs54, label %land.end60

land.rhs54:                                       ; preds = %while.cond51
  %50 = load i8*, i8** %ptr, align 8, !tbaa !6
  %51 = load i8, i8* %50, align 1, !tbaa !13
  %call55 = call zeroext i8 @to_uchar(i8 signext %51)
  %idxprom56 = zext i8 %call55 to i64
  %arrayidx57 = getelementptr inbounds [256 x i8], [256 x i8]* @blanks, i64 0, i64 %idxprom56
  %52 = load i8, i8* %arrayidx57, align 1, !tbaa !11, !range !25
  %tobool58 = trunc i8 %52 to i1
  br label %land.end60

land.end60:                                       ; preds = %land.rhs54, %while.cond51
  %53 = phi i1 [ false, %while.cond51 ], [ %tobool58, %land.rhs54 ]
  br i1 %53, label %while.body61, label %while.end63

while.body61:                                     ; preds = %land.end60
  %54 = load i8*, i8** %ptr, align 8, !tbaa !6
  %incdec.ptr62 = getelementptr inbounds i8, i8* %54, i32 1
  store i8* %incdec.ptr62, i8** %ptr, align 8, !tbaa !6
  br label %while.cond51

while.end63:                                      ; preds = %land.end60
  br label %if.end64

if.end64:                                         ; preds = %while.end63, %if.end48
  %55 = load i8*, i8** %lim, align 8, !tbaa !6
  %56 = load i8*, i8** %ptr, align 8, !tbaa !6
  %57 = load i64, i64* %schar, align 8, !tbaa !14
  %add.ptr65 = getelementptr inbounds i8, i8* %56, i64 %57
  %cmp66 = icmp ult i8* %55, %add.ptr65
  br i1 %cmp66, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end64
  %58 = load i8*, i8** %lim, align 8, !tbaa !6
  br label %cond.end

cond.false:                                       ; preds = %if.end64
  %59 = load i8*, i8** %ptr, align 8, !tbaa !6
  %60 = load i64, i64* %schar, align 8, !tbaa !14
  %add.ptr68 = getelementptr inbounds i8, i8* %59, i64 %60
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %58, %cond.true ], [ %add.ptr68, %cond.false ]
  store i8* %cond, i8** %ptr, align 8, !tbaa !6
  %61 = load i8*, i8** %ptr, align 8, !tbaa !6
  %62 = bitcast i64* %schar to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %62) #13
  %63 = bitcast i64* %sword to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %63) #13
  %64 = bitcast i8** %lim to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %64) #13
  %65 = bitcast i8** %ptr to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %65) #13
  ret i8* %61
}

; Function Attrs: nounwind readonly uwtable
define internal i8* @limfield(%struct.line* %line, %struct.keyfield* %key) #9 {
entry:
  %line.addr = alloca %struct.line*, align 8
  %key.addr = alloca %struct.keyfield*, align 8
  %ptr = alloca i8*, align 8
  %lim = alloca i8*, align 8
  %eword = alloca i64, align 8
  %echar = alloca i64, align 8
  store %struct.line* %line, %struct.line** %line.addr, align 8, !tbaa !6
  store %struct.keyfield* %key, %struct.keyfield** %key.addr, align 8, !tbaa !6
  %0 = bitcast i8** %ptr to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #13
  %1 = load %struct.line*, %struct.line** %line.addr, align 8, !tbaa !6
  %text = getelementptr inbounds %struct.line, %struct.line* %1, i32 0, i32 0
  %2 = load i8*, i8** %text, align 8, !tbaa !60
  store i8* %2, i8** %ptr, align 8, !tbaa !6
  %3 = bitcast i8** %lim to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %3) #13
  %4 = load i8*, i8** %ptr, align 8, !tbaa !6
  %5 = load %struct.line*, %struct.line** %line.addr, align 8, !tbaa !6
  %length = getelementptr inbounds %struct.line, %struct.line* %5, i32 0, i32 1
  %6 = load i64, i64* %length, align 8, !tbaa !64
  %add.ptr = getelementptr inbounds i8, i8* %4, i64 %6
  %add.ptr1 = getelementptr inbounds i8, i8* %add.ptr, i64 -1
  store i8* %add.ptr1, i8** %lim, align 8, !tbaa !6
  %7 = bitcast i64* %eword to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %7) #13
  %8 = load %struct.keyfield*, %struct.keyfield** %key.addr, align 8, !tbaa !6
  %eword2 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %8, i32 0, i32 2
  %9 = load i64, i64* %eword2, align 8, !tbaa !28
  store i64 %9, i64* %eword, align 8, !tbaa !14
  %10 = bitcast i64* %echar to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %10) #13
  %11 = load %struct.keyfield*, %struct.keyfield** %key.addr, align 8, !tbaa !6
  %echar3 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %11, i32 0, i32 3
  %12 = load i64, i64* %echar3, align 8, !tbaa !27
  store i64 %12, i64* %echar, align 8, !tbaa !14
  %13 = load i64, i64* %echar, align 8, !tbaa !14
  %cmp = icmp eq i64 %13, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %14 = load i64, i64* %eword, align 8, !tbaa !14
  %inc = add i64 %14, 1
  store i64 %inc, i64* %eword, align 8, !tbaa !14
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %15 = load i32, i32* @tab, align 4, !tbaa !2
  %cmp4 = icmp ne i32 %15, 128
  br i1 %cmp4, label %if.then5, label %if.else

if.then5:                                         ; preds = %if.end
  br label %while.cond

while.cond:                                       ; preds = %if.end20, %if.then5
  %16 = load i8*, i8** %ptr, align 8, !tbaa !6
  %17 = load i8*, i8** %lim, align 8, !tbaa !6
  %cmp6 = icmp ult i8* %16, %17
  br i1 %cmp6, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %18 = load i64, i64* %eword, align 8, !tbaa !14
  %dec = add i64 %18, -1
  store i64 %dec, i64* %eword, align 8, !tbaa !14
  %tobool = icmp ne i64 %18, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %19 = phi i1 [ false, %while.cond ], [ %tobool, %land.rhs ]
  br i1 %19, label %while.body, label %while.end21

while.body:                                       ; preds = %land.end
  br label %while.cond7

while.cond7:                                      ; preds = %while.body13, %while.body
  %20 = load i8*, i8** %ptr, align 8, !tbaa !6
  %21 = load i8*, i8** %lim, align 8, !tbaa !6
  %cmp8 = icmp ult i8* %20, %21
  br i1 %cmp8, label %land.rhs9, label %land.end12

land.rhs9:                                        ; preds = %while.cond7
  %22 = load i8*, i8** %ptr, align 8, !tbaa !6
  %23 = load i8, i8* %22, align 1, !tbaa !13
  %conv = sext i8 %23 to i32
  %24 = load i32, i32* @tab, align 4, !tbaa !2
  %cmp10 = icmp ne i32 %conv, %24
  br label %land.end12

land.end12:                                       ; preds = %land.rhs9, %while.cond7
  %25 = phi i1 [ false, %while.cond7 ], [ %cmp10, %land.rhs9 ]
  br i1 %25, label %while.body13, label %while.end

while.body13:                                     ; preds = %land.end12
  %26 = load i8*, i8** %ptr, align 8, !tbaa !6
  %incdec.ptr = getelementptr inbounds i8, i8* %26, i32 1
  store i8* %incdec.ptr, i8** %ptr, align 8, !tbaa !6
  br label %while.cond7

while.end:                                        ; preds = %land.end12
  %27 = load i8*, i8** %ptr, align 8, !tbaa !6
  %28 = load i8*, i8** %lim, align 8, !tbaa !6
  %cmp14 = icmp ult i8* %27, %28
  br i1 %cmp14, label %land.lhs.true, label %if.end20

land.lhs.true:                                    ; preds = %while.end
  %29 = load i64, i64* %eword, align 8, !tbaa !14
  %tobool16 = icmp ne i64 %29, 0
  br i1 %tobool16, label %if.then18, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true
  %30 = load i64, i64* %echar, align 8, !tbaa !14
  %tobool17 = icmp ne i64 %30, 0
  br i1 %tobool17, label %if.then18, label %if.end20

if.then18:                                        ; preds = %lor.lhs.false, %land.lhs.true
  %31 = load i8*, i8** %ptr, align 8, !tbaa !6
  %incdec.ptr19 = getelementptr inbounds i8, i8* %31, i32 1
  store i8* %incdec.ptr19, i8** %ptr, align 8, !tbaa !6
  br label %if.end20

if.end20:                                         ; preds = %if.then18, %lor.lhs.false, %while.end
  br label %while.cond

while.end21:                                      ; preds = %land.end
  br label %if.end53

if.else:                                          ; preds = %if.end
  br label %while.cond22

while.cond22:                                     ; preds = %while.end51, %if.else
  %32 = load i8*, i8** %ptr, align 8, !tbaa !6
  %33 = load i8*, i8** %lim, align 8, !tbaa !6
  %cmp23 = icmp ult i8* %32, %33
  br i1 %cmp23, label %land.rhs25, label %land.end28

land.rhs25:                                       ; preds = %while.cond22
  %34 = load i64, i64* %eword, align 8, !tbaa !14
  %dec26 = add i64 %34, -1
  store i64 %dec26, i64* %eword, align 8, !tbaa !14
  %tobool27 = icmp ne i64 %34, 0
  br label %land.end28

land.end28:                                       ; preds = %land.rhs25, %while.cond22
  %35 = phi i1 [ false, %while.cond22 ], [ %tobool27, %land.rhs25 ]
  br i1 %35, label %while.body29, label %while.end52

while.body29:                                     ; preds = %land.end28
  br label %while.cond30

while.cond30:                                     ; preds = %while.body37, %while.body29
  %36 = load i8*, i8** %ptr, align 8, !tbaa !6
  %37 = load i8*, i8** %lim, align 8, !tbaa !6
  %cmp31 = icmp ult i8* %36, %37
  br i1 %cmp31, label %land.rhs33, label %land.end36

land.rhs33:                                       ; preds = %while.cond30
  %38 = load i8*, i8** %ptr, align 8, !tbaa !6
  %39 = load i8, i8* %38, align 1, !tbaa !13
  %call = call zeroext i8 @to_uchar(i8 signext %39)
  %idxprom = zext i8 %call to i64
  %arrayidx = getelementptr inbounds [256 x i8], [256 x i8]* @blanks, i64 0, i64 %idxprom
  %40 = load i8, i8* %arrayidx, align 1, !tbaa !11, !range !25
  %tobool34 = trunc i8 %40 to i1
  br label %land.end36

land.end36:                                       ; preds = %land.rhs33, %while.cond30
  %41 = phi i1 [ false, %while.cond30 ], [ %tobool34, %land.rhs33 ]
  br i1 %41, label %while.body37, label %while.end39

while.body37:                                     ; preds = %land.end36
  %42 = load i8*, i8** %ptr, align 8, !tbaa !6
  %incdec.ptr38 = getelementptr inbounds i8, i8* %42, i32 1
  store i8* %incdec.ptr38, i8** %ptr, align 8, !tbaa !6
  br label %while.cond30

while.end39:                                      ; preds = %land.end36
  br label %while.cond40

while.cond40:                                     ; preds = %while.body49, %while.end39
  %43 = load i8*, i8** %ptr, align 8, !tbaa !6
  %44 = load i8*, i8** %lim, align 8, !tbaa !6
  %cmp41 = icmp ult i8* %43, %44
  br i1 %cmp41, label %land.rhs43, label %land.end48

land.rhs43:                                       ; preds = %while.cond40
  %45 = load i8*, i8** %ptr, align 8, !tbaa !6
  %46 = load i8, i8* %45, align 1, !tbaa !13
  %call44 = call zeroext i8 @to_uchar(i8 signext %46)
  %idxprom45 = zext i8 %call44 to i64
  %arrayidx46 = getelementptr inbounds [256 x i8], [256 x i8]* @blanks, i64 0, i64 %idxprom45
  %47 = load i8, i8* %arrayidx46, align 1, !tbaa !11, !range !25
  %tobool47 = trunc i8 %47 to i1
  %lnot = xor i1 %tobool47, true
  br label %land.end48

land.end48:                                       ; preds = %land.rhs43, %while.cond40
  %48 = phi i1 [ false, %while.cond40 ], [ %lnot, %land.rhs43 ]
  br i1 %48, label %while.body49, label %while.end51

while.body49:                                     ; preds = %land.end48
  %49 = load i8*, i8** %ptr, align 8, !tbaa !6
  %incdec.ptr50 = getelementptr inbounds i8, i8* %49, i32 1
  store i8* %incdec.ptr50, i8** %ptr, align 8, !tbaa !6
  br label %while.cond40

while.end51:                                      ; preds = %land.end48
  br label %while.cond22

while.end52:                                      ; preds = %land.end28
  br label %if.end53

if.end53:                                         ; preds = %while.end52, %while.end21
  %50 = load i64, i64* %echar, align 8, !tbaa !14
  %cmp54 = icmp ne i64 %50, 0
  br i1 %cmp54, label %if.then56, label %if.end77

if.then56:                                        ; preds = %if.end53
  %51 = load %struct.keyfield*, %struct.keyfield** %key.addr, align 8, !tbaa !6
  %skipeblanks = getelementptr inbounds %struct.keyfield, %struct.keyfield* %51, i32 0, i32 7
  %52 = load i8, i8* %skipeblanks, align 1, !tbaa !38, !range !25
  %tobool57 = trunc i8 %52 to i1
  br i1 %tobool57, label %if.then58, label %if.end72

if.then58:                                        ; preds = %if.then56
  br label %while.cond59

while.cond59:                                     ; preds = %while.body69, %if.then58
  %53 = load i8*, i8** %ptr, align 8, !tbaa !6
  %54 = load i8*, i8** %lim, align 8, !tbaa !6
  %cmp60 = icmp ult i8* %53, %54
  br i1 %cmp60, label %land.rhs62, label %land.end68

land.rhs62:                                       ; preds = %while.cond59
  %55 = load i8*, i8** %ptr, align 8, !tbaa !6
  %56 = load i8, i8* %55, align 1, !tbaa !13
  %call63 = call zeroext i8 @to_uchar(i8 signext %56)
  %idxprom64 = zext i8 %call63 to i64
  %arrayidx65 = getelementptr inbounds [256 x i8], [256 x i8]* @blanks, i64 0, i64 %idxprom64
  %57 = load i8, i8* %arrayidx65, align 1, !tbaa !11, !range !25
  %tobool66 = trunc i8 %57 to i1
  br label %land.end68

land.end68:                                       ; preds = %land.rhs62, %while.cond59
  %58 = phi i1 [ false, %while.cond59 ], [ %tobool66, %land.rhs62 ]
  br i1 %58, label %while.body69, label %while.end71

while.body69:                                     ; preds = %land.end68
  %59 = load i8*, i8** %ptr, align 8, !tbaa !6
  %incdec.ptr70 = getelementptr inbounds i8, i8* %59, i32 1
  store i8* %incdec.ptr70, i8** %ptr, align 8, !tbaa !6
  br label %while.cond59

while.end71:                                      ; preds = %land.end68
  br label %if.end72

if.end72:                                         ; preds = %while.end71, %if.then56
  %60 = load i8*, i8** %lim, align 8, !tbaa !6
  %61 = load i8*, i8** %ptr, align 8, !tbaa !6
  %62 = load i64, i64* %echar, align 8, !tbaa !14
  %add.ptr73 = getelementptr inbounds i8, i8* %61, i64 %62
  %cmp74 = icmp ult i8* %60, %add.ptr73
  br i1 %cmp74, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end72
  %63 = load i8*, i8** %lim, align 8, !tbaa !6
  br label %cond.end

cond.false:                                       ; preds = %if.end72
  %64 = load i8*, i8** %ptr, align 8, !tbaa !6
  %65 = load i64, i64* %echar, align 8, !tbaa !14
  %add.ptr76 = getelementptr inbounds i8, i8* %64, i64 %65
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %63, %cond.true ], [ %add.ptr76, %cond.false ]
  store i8* %cond, i8** %ptr, align 8, !tbaa !6
  br label %if.end77

if.end77:                                         ; preds = %cond.end, %if.end53
  %66 = load i8*, i8** %ptr, align 8, !tbaa !6
  %67 = bitcast i64* %echar to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %67) #13
  %68 = bitcast i64* %eword to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %68) #13
  %69 = bitcast i8** %lim to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %69) #13
  %70 = bitcast i8** %ptr to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %70) #13
  ret i8* %66
}

; Function Attrs: inlinehint nounwind uwtable
define internal zeroext i1 @key_numeric(%struct.keyfield* %key) #2 {
entry:
  %key.addr = alloca %struct.keyfield*, align 8
  store %struct.keyfield* %key, %struct.keyfield** %key.addr, align 8, !tbaa !6
  %0 = load %struct.keyfield*, %struct.keyfield** %key.addr, align 8, !tbaa !6
  %numeric = getelementptr inbounds %struct.keyfield, %struct.keyfield* %0, i32 0, i32 8
  %1 = load i8, i8* %numeric, align 2, !tbaa !40, !range !25
  %tobool = trunc i8 %1 to i1
  br i1 %tobool, label %lor.end, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.keyfield*, %struct.keyfield** %key.addr, align 8, !tbaa !6
  %general_numeric = getelementptr inbounds %struct.keyfield, %struct.keyfield* %2, i32 0, i32 10
  %3 = load i8, i8* %general_numeric, align 4, !tbaa !41, !range !25
  %tobool1 = trunc i8 %3 to i1
  br i1 %tobool1, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %lor.lhs.false
  %4 = load %struct.keyfield*, %struct.keyfield** %key.addr, align 8, !tbaa !6
  %human_numeric = getelementptr inbounds %struct.keyfield, %struct.keyfield* %4, i32 0, i32 11
  %5 = load i8, i8* %human_numeric, align 1, !tbaa !42, !range !25
  %tobool2 = trunc i8 %5 to i1
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %lor.lhs.false, %entry
  %6 = phi i1 [ true, %lor.lhs.false ], [ true, %entry ], [ %tobool2, %lor.rhs ]
  ret i1 %6
}

; Function Attrs: inlinehint nounwind uwtable
define internal zeroext i8 @to_uchar(i8 signext %ch) #2 {
entry:
  %ch.addr = alloca i8, align 1
  store i8 %ch, i8* %ch.addr, align 1, !tbaa !13
  %0 = load i8, i8* %ch.addr, align 1, !tbaa !13
  ret i8 %0
}

; Function Attrs: nounwind uwtable
define internal i32 @getmonth(i8* %month, i8** %ea) #7 {
entry:
  %retval = alloca i32, align 4
  %month.addr = alloca i8*, align 8
  %ea.addr = alloca i8**, align 8
  %lo = alloca i64, align 8
  %hi = alloca i64, align 8
  %ix = alloca i64, align 8
  %m = alloca i8*, align 8
  %n = alloca i8*, align 8
  %cleanup.dest.slot = alloca i32, align 4
  store i8* %month, i8** %month.addr, align 8, !tbaa !6
  store i8** %ea, i8*** %ea.addr, align 8, !tbaa !6
  %0 = bitcast i64* %lo to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #13
  store i64 0, i64* %lo, align 8, !tbaa !14
  %1 = bitcast i64* %hi to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %1) #13
  store i64 12, i64* %hi, align 8, !tbaa !14
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %2 = load i8*, i8** %month.addr, align 8, !tbaa !6
  %3 = load i8, i8* %2, align 1, !tbaa !13
  %call = call zeroext i8 @to_uchar(i8 signext %3)
  %idxprom = zext i8 %call to i64
  %arrayidx = getelementptr inbounds [256 x i8], [256 x i8]* @blanks, i64 0, i64 %idxprom
  %4 = load i8, i8* %arrayidx, align 1, !tbaa !11, !range !25
  %tobool = trunc i8 %4 to i1
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %5 = load i8*, i8** %month.addr, align 8, !tbaa !6
  %incdec.ptr = getelementptr inbounds i8, i8* %5, i32 1
  store i8* %incdec.ptr, i8** %month.addr, align 8, !tbaa !6
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %do.body

do.body:                                          ; preds = %do.cond, %while.end
  %6 = bitcast i64* %ix to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %6) #13
  %7 = load i64, i64* %lo, align 8, !tbaa !14
  %8 = load i64, i64* %hi, align 8, !tbaa !14
  %add = add i64 %7, %8
  %div = udiv i64 %add, 2
  store i64 %div, i64* %ix, align 8, !tbaa !14
  %9 = bitcast i8** %m to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %9) #13
  %10 = load i8*, i8** %month.addr, align 8, !tbaa !6
  store i8* %10, i8** %m, align 8, !tbaa !6
  %11 = bitcast i8** %n to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %11) #13
  %12 = load i64, i64* %ix, align 8, !tbaa !14
  %arrayidx1 = getelementptr inbounds [12 x %struct.month], [12 x %struct.month]* @monthtab, i64 0, i64 %12
  %name = getelementptr inbounds %struct.month, %struct.month* %arrayidx1, i32 0, i32 0
  %13 = load i8*, i8** %name, align 16, !tbaa !50
  store i8* %13, i8** %n, align 8, !tbaa !6
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %do.body
  %14 = load i8*, i8** %n, align 8, !tbaa !6
  %15 = load i8, i8* %14, align 1, !tbaa !13
  %tobool2 = icmp ne i8 %15, 0
  br i1 %tobool2, label %if.end6, label %if.then

if.then:                                          ; preds = %for.cond
  %16 = load i8**, i8*** %ea.addr, align 8, !tbaa !6
  %tobool3 = icmp ne i8** %16, null
  br i1 %tobool3, label %if.then4, label %if.end

if.then4:                                         ; preds = %if.then
  %17 = load i8*, i8** %m, align 8, !tbaa !6
  %18 = load i8**, i8*** %ea.addr, align 8, !tbaa !6
  store i8* %17, i8** %18, align 8, !tbaa !6
  br label %if.end

if.end:                                           ; preds = %if.then4, %if.then
  %19 = load i64, i64* %ix, align 8, !tbaa !14
  %arrayidx5 = getelementptr inbounds [12 x %struct.month], [12 x %struct.month]* @monthtab, i64 0, i64 %19
  %val = getelementptr inbounds %struct.month, %struct.month* %arrayidx5, i32 0, i32 1
  %20 = load i32, i32* %val, align 8, !tbaa !52
  store i32 %20, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end6:                                          ; preds = %for.cond
  %21 = load i8*, i8** %m, align 8, !tbaa !6
  %22 = load i8, i8* %21, align 1, !tbaa !13
  %call7 = call zeroext i8 @to_uchar(i8 signext %22)
  %idxprom8 = zext i8 %call7 to i64
  %arrayidx9 = getelementptr inbounds [256 x i8], [256 x i8]* @fold_toupper, i64 0, i64 %idxprom8
  %23 = load i8, i8* %arrayidx9, align 1, !tbaa !13
  %call10 = call zeroext i8 @to_uchar(i8 signext %23)
  %conv = zext i8 %call10 to i32
  %24 = load i8*, i8** %n, align 8, !tbaa !6
  %25 = load i8, i8* %24, align 1, !tbaa !13
  %call11 = call zeroext i8 @to_uchar(i8 signext %25)
  %conv12 = zext i8 %call11 to i32
  %cmp = icmp slt i32 %conv, %conv12
  br i1 %cmp, label %if.then14, label %if.else

if.then14:                                        ; preds = %if.end6
  %26 = load i64, i64* %ix, align 8, !tbaa !14
  store i64 %26, i64* %hi, align 8, !tbaa !14
  br label %for.end

if.else:                                          ; preds = %if.end6
  %27 = load i8*, i8** %m, align 8, !tbaa !6
  %28 = load i8, i8* %27, align 1, !tbaa !13
  %call15 = call zeroext i8 @to_uchar(i8 signext %28)
  %idxprom16 = zext i8 %call15 to i64
  %arrayidx17 = getelementptr inbounds [256 x i8], [256 x i8]* @fold_toupper, i64 0, i64 %idxprom16
  %29 = load i8, i8* %arrayidx17, align 1, !tbaa !13
  %call18 = call zeroext i8 @to_uchar(i8 signext %29)
  %conv19 = zext i8 %call18 to i32
  %30 = load i8*, i8** %n, align 8, !tbaa !6
  %31 = load i8, i8* %30, align 1, !tbaa !13
  %call20 = call zeroext i8 @to_uchar(i8 signext %31)
  %conv21 = zext i8 %call20 to i32
  %cmp22 = icmp sgt i32 %conv19, %conv21
  br i1 %cmp22, label %if.then24, label %if.end26

if.then24:                                        ; preds = %if.else
  %32 = load i64, i64* %ix, align 8, !tbaa !14
  %add25 = add i64 %32, 1
  store i64 %add25, i64* %lo, align 8, !tbaa !14
  br label %for.end

if.end26:                                         ; preds = %if.else
  br label %if.end27

if.end27:                                         ; preds = %if.end26
  br label %for.inc

for.inc:                                          ; preds = %if.end27
  %33 = load i8*, i8** %m, align 8, !tbaa !6
  %incdec.ptr28 = getelementptr inbounds i8, i8* %33, i32 1
  store i8* %incdec.ptr28, i8** %m, align 8, !tbaa !6
  %34 = load i8*, i8** %n, align 8, !tbaa !6
  %incdec.ptr29 = getelementptr inbounds i8, i8* %34, i32 1
  store i8* %incdec.ptr29, i8** %n, align 8, !tbaa !6
  br label %for.cond

for.end:                                          ; preds = %if.then24, %if.then14
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %for.end, %if.end
  %35 = bitcast i8** %n to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %35) #13
  %36 = bitcast i8** %m to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %36) #13
  %37 = bitcast i64* %ix to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %37) #13
  %cleanup.dest = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest, label %cleanup34 [
    i32 0, label %cleanup.cont
  ]

cleanup.cont:                                     ; preds = %cleanup
  br label %do.cond

do.cond:                                          ; preds = %cleanup.cont
  %38 = load i64, i64* %lo, align 8, !tbaa !14
  %39 = load i64, i64* %hi, align 8, !tbaa !14
  %cmp32 = icmp ult i64 %38, %39
  br i1 %cmp32, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup34

cleanup34:                                        ; preds = %do.end, %cleanup
  %40 = bitcast i64* %hi to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %40) #13
  %41 = bitcast i64* %lo to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %41) #13
  %42 = load i32, i32* %retval, align 4
  ret i32 %42
}

; Function Attrs: nounwind
declare dso_local x86_fp80 @strtold(i8*, i8**) #6

; Function Attrs: nounwind uwtable
define internal signext i8 @traverse_raw_number(i8** %number) #7 {
entry:
  %retval = alloca i8, align 1
  %number.addr = alloca i8**, align 8
  %p = alloca i8*, align 8
  %ch = alloca i8, align 1
  %max_digit = alloca i8, align 1
  %ends_with_thousands_sep = alloca i8, align 1
  %cleanup.dest.slot = alloca i32, align 4
  store i8** %number, i8*** %number.addr, align 8, !tbaa !6
  %0 = bitcast i8** %p to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #13
  %1 = load i8**, i8*** %number.addr, align 8, !tbaa !6
  %2 = load i8*, i8** %1, align 8, !tbaa !6
  store i8* %2, i8** %p, align 8, !tbaa !6
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %ch) #13
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %max_digit) #13
  store i8 0, i8* %max_digit, align 1, !tbaa !13
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %ends_with_thousands_sep) #13
  store i8 0, i8* %ends_with_thousands_sep, align 1, !tbaa !11
  br label %while.cond

while.cond:                                       ; preds = %if.end11, %entry
  %3 = load i8*, i8** %p, align 8, !tbaa !6
  %incdec.ptr = getelementptr inbounds i8, i8* %3, i32 1
  store i8* %incdec.ptr, i8** %p, align 8, !tbaa !6
  %4 = load i8, i8* %3, align 1, !tbaa !13
  store i8 %4, i8* %ch, align 1, !tbaa !13
  %conv = sext i8 %4 to i32
  %sub = sub i32 %conv, 48
  %cmp = icmp ule i32 %sub, 9
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %5 = load i8, i8* %max_digit, align 1, !tbaa !13
  %conv2 = sext i8 %5 to i32
  %6 = load i8, i8* %ch, align 1, !tbaa !13
  %conv3 = sext i8 %6 to i32
  %cmp4 = icmp slt i32 %conv2, %conv3
  br i1 %cmp4, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  %7 = load i8, i8* %ch, align 1, !tbaa !13
  store i8 %7, i8* %max_digit, align 1, !tbaa !13
  br label %if.end

if.end:                                           ; preds = %if.then, %while.body
  %8 = load i8*, i8** %p, align 8, !tbaa !6
  %9 = load i8, i8* %8, align 1, !tbaa !13
  %conv6 = sext i8 %9 to i32
  %10 = load i32, i32* @thousands_sep, align 4, !tbaa !2
  %cmp7 = icmp eq i32 %conv6, %10
  %frombool = zext i1 %cmp7 to i8
  store i8 %frombool, i8* %ends_with_thousands_sep, align 1, !tbaa !11
  %11 = load i8, i8* %ends_with_thousands_sep, align 1, !tbaa !11, !range !25
  %tobool = trunc i8 %11 to i1
  br i1 %tobool, label %if.then9, label %if.end11

if.then9:                                         ; preds = %if.end
  %12 = load i8*, i8** %p, align 8, !tbaa !6
  %incdec.ptr10 = getelementptr inbounds i8, i8* %12, i32 1
  store i8* %incdec.ptr10, i8** %p, align 8, !tbaa !6
  br label %if.end11

if.end11:                                         ; preds = %if.then9, %if.end
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %13 = load i8, i8* %ends_with_thousands_sep, align 1, !tbaa !11, !range !25
  %tobool12 = trunc i8 %13 to i1
  br i1 %tobool12, label %if.then13, label %if.end14

if.then13:                                        ; preds = %while.end
  %14 = load i8*, i8** %p, align 8, !tbaa !6
  %add.ptr = getelementptr inbounds i8, i8* %14, i64 -2
  %15 = load i8**, i8*** %number.addr, align 8, !tbaa !6
  store i8* %add.ptr, i8** %15, align 8, !tbaa !6
  %16 = load i8, i8* %max_digit, align 1, !tbaa !13
  store i8 %16, i8* %retval, align 1
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end14:                                         ; preds = %while.end
  %17 = load i8, i8* %ch, align 1, !tbaa !13
  %conv15 = sext i8 %17 to i32
  %18 = load i8, i8* @decimal_point, align 1, !tbaa !13
  %conv16 = sext i8 %18 to i32
  %cmp17 = icmp eq i32 %conv15, %conv16
  br i1 %cmp17, label %if.then19, label %if.end34

if.then19:                                        ; preds = %if.end14
  br label %while.cond20

while.cond20:                                     ; preds = %if.end32, %if.then19
  %19 = load i8*, i8** %p, align 8, !tbaa !6
  %incdec.ptr21 = getelementptr inbounds i8, i8* %19, i32 1
  store i8* %incdec.ptr21, i8** %p, align 8, !tbaa !6
  %20 = load i8, i8* %19, align 1, !tbaa !13
  store i8 %20, i8* %ch, align 1, !tbaa !13
  %conv22 = sext i8 %20 to i32
  %sub23 = sub i32 %conv22, 48
  %cmp24 = icmp ule i32 %sub23, 9
  br i1 %cmp24, label %while.body26, label %while.end33

while.body26:                                     ; preds = %while.cond20
  %21 = load i8, i8* %max_digit, align 1, !tbaa !13
  %conv27 = sext i8 %21 to i32
  %22 = load i8, i8* %ch, align 1, !tbaa !13
  %conv28 = sext i8 %22 to i32
  %cmp29 = icmp slt i32 %conv27, %conv28
  br i1 %cmp29, label %if.then31, label %if.end32

if.then31:                                        ; preds = %while.body26
  %23 = load i8, i8* %ch, align 1, !tbaa !13
  store i8 %23, i8* %max_digit, align 1, !tbaa !13
  br label %if.end32

if.end32:                                         ; preds = %if.then31, %while.body26
  br label %while.cond20

while.end33:                                      ; preds = %while.cond20
  br label %if.end34

if.end34:                                         ; preds = %while.end33, %if.end14
  %24 = load i8*, i8** %p, align 8, !tbaa !6
  %add.ptr35 = getelementptr inbounds i8, i8* %24, i64 -1
  %25 = load i8**, i8*** %number.addr, align 8, !tbaa !6
  store i8* %add.ptr35, i8** %25, align 8, !tbaa !6
  %26 = load i8, i8* %max_digit, align 1, !tbaa !13
  store i8 %26, i8* %retval, align 1
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end34, %if.then13
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %ends_with_thousands_sep) #13
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %max_digit) #13
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %ch) #13
  %27 = bitcast i8** %p to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %27) #13
  %28 = load i8, i8* %retval, align 1
  ret i8 %28
}

; Function Attrs: nounwind uwtable
define internal i64 @debug_width(i8* %text, i8* %lim) #7 {
entry:
  %text.addr = alloca i8*, align 8
  %lim.addr = alloca i8*, align 8
  %width = alloca i64, align 8
  store i8* %text, i8** %text.addr, align 8, !tbaa !6
  store i8* %lim, i8** %lim.addr, align 8, !tbaa !6
  %0 = bitcast i64* %width to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #13
  %1 = load i8*, i8** %text.addr, align 8, !tbaa !6
  %2 = load i8*, i8** %lim.addr, align 8, !tbaa !6
  %3 = load i8*, i8** %text.addr, align 8, !tbaa !6
  %sub.ptr.lhs.cast = ptrtoint i8* %2 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %3 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %call = call i32 @mbsnwidth(i8* %1, i64 %sub.ptr.sub, i32 0)
  %conv = sext i32 %call to i64
  store i64 %conv, i64* %width, align 8, !tbaa !14
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %4 = load i8*, i8** %text.addr, align 8, !tbaa !6
  %5 = load i8*, i8** %lim.addr, align 8, !tbaa !6
  %cmp = icmp ult i8* %4, %5
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %6 = load i8*, i8** %text.addr, align 8, !tbaa !6
  %incdec.ptr = getelementptr inbounds i8, i8* %6, i32 1
  store i8* %incdec.ptr, i8** %text.addr, align 8, !tbaa !6
  %7 = load i8, i8* %6, align 1, !tbaa !13
  %conv2 = sext i8 %7 to i32
  %cmp3 = icmp eq i32 %conv2, 9
  %conv4 = zext i1 %cmp3 to i32
  %conv5 = sext i32 %conv4 to i64
  %8 = load i64, i64* %width, align 8, !tbaa !14
  %add = add i64 %8, %conv5
  store i64 %add, i64* %width, align 8, !tbaa !14
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %9 = load i64, i64* %width, align 8, !tbaa !14
  %10 = bitcast i64* %width to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %10) #13
  ret i64 %9
}

; Function Attrs: nounwind uwtable
define internal void @mark_key(i64 %offset, i64 %width) #7 {
entry:
  %offset.addr = alloca i64, align 8
  %width.addr = alloca i64, align 8
  store i64 %offset, i64* %offset.addr, align 8, !tbaa !14
  store i64 %width, i64* %width.addr, align 8, !tbaa !14
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i64, i64* %offset.addr, align 8, !tbaa !14
  %dec = add i64 %0, -1
  store i64 %dec, i64* %offset.addr, align 8, !tbaa !14
  %tobool = icmp ne i64 %0, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %call = call i32 @putchar_unlocked(i32 32)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %1 = load i64, i64* %width.addr, align 8, !tbaa !14
  %tobool1 = icmp ne i64 %1, 0
  br i1 %tobool1, label %if.else, label %if.then

if.then:                                          ; preds = %while.end
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.172, i64 0, i64 0))
  br label %if.end

if.else:                                          ; preds = %while.end
  br label %do.body

do.body:                                          ; preds = %do.cond, %if.else
  %call3 = call i32 @putchar_unlocked(i32 95)
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %2 = load i64, i64* %width.addr, align 8, !tbaa !14
  %dec4 = add i64 %2, -1
  store i64 %dec4, i64* %width.addr, align 8, !tbaa !14
  %tobool5 = icmp ne i64 %dec4, 0
  br i1 %tobool5, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %call6 = call i32 @putchar_unlocked(i32 10)
  br label %if.end

if.end:                                           ; preds = %do.end, %if.then
  ret void
}

declare dso_local i32 @putchar_unlocked(i32) #1

; Function Attrs: nounwind uwtable
define internal i32 @keycompare(%struct.line* %a, %struct.line* %b) #7 {
entry:
  %retval = alloca i32, align 4
  %a.addr = alloca %struct.line*, align 8
  %b.addr = alloca %struct.line*, align 8
  %key = alloca %struct.keyfield*, align 8
  %texta = alloca i8*, align 8
  %textb = alloca i8*, align 8
  %lima = alloca i8*, align 8
  %limb = alloca i8*, align 8
  %diff = alloca i32, align 4
  %translate = alloca i8*, align 8
  %ignore = alloca i8*, align 8
  %lena = alloca i64, align 8
  %lenb = alloca i64, align 8
  %ta = alloca i8*, align 8
  %tb = alloca i8*, align 8
  %tlena = alloca i64, align 8
  %tlenb = alloca i64, align 8
  %enda = alloca i8, align 1
  %endb = alloca i8, align 1
  %allocated = alloca i8*, align 8
  %stackbuf = alloca [4000 x i8], align 16
  %i = alloca i64, align 8
  %size = alloca i64, align 8
  %cleanup.dest.slot = alloca i32, align 4
  store %struct.line* %a, %struct.line** %a.addr, align 8, !tbaa !6
  store %struct.line* %b, %struct.line** %b.addr, align 8, !tbaa !6
  %0 = bitcast %struct.keyfield** %key to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #13
  %1 = load %struct.keyfield*, %struct.keyfield** @keylist, align 8, !tbaa !6
  store %struct.keyfield* %1, %struct.keyfield** %key, align 8, !tbaa !6
  %2 = bitcast i8** %texta to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %2) #13
  %3 = load %struct.line*, %struct.line** %a.addr, align 8, !tbaa !6
  %keybeg = getelementptr inbounds %struct.line, %struct.line* %3, i32 0, i32 2
  %4 = load i8*, i8** %keybeg, align 8, !tbaa !65
  store i8* %4, i8** %texta, align 8, !tbaa !6
  %5 = bitcast i8** %textb to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %5) #13
  %6 = load %struct.line*, %struct.line** %b.addr, align 8, !tbaa !6
  %keybeg1 = getelementptr inbounds %struct.line, %struct.line* %6, i32 0, i32 2
  %7 = load i8*, i8** %keybeg1, align 8, !tbaa !65
  store i8* %7, i8** %textb, align 8, !tbaa !6
  %8 = bitcast i8** %lima to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %8) #13
  %9 = load %struct.line*, %struct.line** %a.addr, align 8, !tbaa !6
  %keylim = getelementptr inbounds %struct.line, %struct.line* %9, i32 0, i32 3
  %10 = load i8*, i8** %keylim, align 8, !tbaa !66
  store i8* %10, i8** %lima, align 8, !tbaa !6
  %11 = bitcast i8** %limb to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %11) #13
  %12 = load %struct.line*, %struct.line** %b.addr, align 8, !tbaa !6
  %keylim2 = getelementptr inbounds %struct.line, %struct.line* %12, i32 0, i32 3
  %13 = load i8*, i8** %keylim2, align 8, !tbaa !66
  store i8* %13, i8** %limb, align 8, !tbaa !6
  %14 = bitcast i32* %diff to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %14) #13
  br label %while.cond

while.cond:                                       ; preds = %cleanup.cont, %entry
  br label %while.body

while.body:                                       ; preds = %while.cond
  %15 = bitcast i8** %translate to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %15) #13
  %16 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !tbaa !6
  %translate3 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %16, i32 0, i32 5
  %17 = load i8*, i8** %translate3, align 8, !tbaa !36
  store i8* %17, i8** %translate, align 8, !tbaa !6
  %18 = bitcast i8** %ignore to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %18) #13
  %19 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !tbaa !6
  %ignore4 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %19, i32 0, i32 4
  %20 = load i8*, i8** %ignore4, align 8, !tbaa !35
  store i8* %20, i8** %ignore, align 8, !tbaa !6
  %21 = load i8*, i8** %texta, align 8, !tbaa !6
  %22 = load i8*, i8** %lima, align 8, !tbaa !6
  %cmp = icmp ugt i8* %21, %22
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %while.body
  %23 = load i8*, i8** %texta, align 8, !tbaa !6
  br label %cond.end

cond.false:                                       ; preds = %while.body
  %24 = load i8*, i8** %lima, align 8, !tbaa !6
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %23, %cond.true ], [ %24, %cond.false ]
  store i8* %cond, i8** %lima, align 8, !tbaa !6
  %25 = load i8*, i8** %textb, align 8, !tbaa !6
  %26 = load i8*, i8** %limb, align 8, !tbaa !6
  %cmp5 = icmp ugt i8* %25, %26
  br i1 %cmp5, label %cond.true6, label %cond.false7

cond.true6:                                       ; preds = %cond.end
  %27 = load i8*, i8** %textb, align 8, !tbaa !6
  br label %cond.end8

cond.false7:                                      ; preds = %cond.end
  %28 = load i8*, i8** %limb, align 8, !tbaa !6
  br label %cond.end8

cond.end8:                                        ; preds = %cond.false7, %cond.true6
  %cond9 = phi i8* [ %27, %cond.true6 ], [ %28, %cond.false7 ]
  store i8* %cond9, i8** %limb, align 8, !tbaa !6
  %29 = bitcast i64* %lena to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %29) #13
  %30 = load i8*, i8** %lima, align 8, !tbaa !6
  %31 = load i8*, i8** %texta, align 8, !tbaa !6
  %sub.ptr.lhs.cast = ptrtoint i8* %30 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %31 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  store i64 %sub.ptr.sub, i64* %lena, align 8, !tbaa !14
  %32 = bitcast i64* %lenb to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %32) #13
  %33 = load i8*, i8** %limb, align 8, !tbaa !6
  %34 = load i8*, i8** %textb, align 8, !tbaa !6
  %sub.ptr.lhs.cast10 = ptrtoint i8* %33 to i64
  %sub.ptr.rhs.cast11 = ptrtoint i8* %34 to i64
  %sub.ptr.sub12 = sub i64 %sub.ptr.lhs.cast10, %sub.ptr.rhs.cast11
  store i64 %sub.ptr.sub12, i64* %lenb, align 8, !tbaa !14
  %35 = load i8, i8* @hard_LC_COLLATE, align 1, !tbaa !11, !range !25
  %tobool = trunc i8 %35 to i1
  br i1 %tobool, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %cond.end8
  %36 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !tbaa !6
  %call = call zeroext i1 @key_numeric(%struct.keyfield* %36)
  br i1 %call, label %if.then, label %lor.lhs.false13

lor.lhs.false13:                                  ; preds = %lor.lhs.false
  %37 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !tbaa !6
  %month = getelementptr inbounds %struct.keyfield, %struct.keyfield* %37, i32 0, i32 12
  %38 = load i8, i8* %month, align 2, !tbaa !39, !range !25
  %tobool14 = trunc i8 %38 to i1
  br i1 %tobool14, label %if.then, label %lor.lhs.false15

lor.lhs.false15:                                  ; preds = %lor.lhs.false13
  %39 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !tbaa !6
  %random = getelementptr inbounds %struct.keyfield, %struct.keyfield* %39, i32 0, i32 9
  %40 = load i8, i8* %random, align 1, !tbaa !44, !range !25
  %tobool16 = trunc i8 %40 to i1
  br i1 %tobool16, label %if.then, label %lor.lhs.false17

lor.lhs.false17:                                  ; preds = %lor.lhs.false15
  %41 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !tbaa !6
  %version = getelementptr inbounds %struct.keyfield, %struct.keyfield* %41, i32 0, i32 14
  %42 = load i8, i8* %version, align 8, !tbaa !43, !range !25
  %tobool18 = trunc i8 %42 to i1
  br i1 %tobool18, label %if.then, label %if.else148

if.then:                                          ; preds = %lor.lhs.false17, %lor.lhs.false15, %lor.lhs.false13, %lor.lhs.false, %cond.end8
  %43 = bitcast i8** %ta to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %43) #13
  %44 = bitcast i8** %tb to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %44) #13
  %45 = bitcast i64* %tlena to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %45) #13
  %46 = bitcast i64* %tlenb to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %46) #13
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %enda) #13
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %endb) #13
  %47 = bitcast i8** %allocated to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %47) #13
  %48 = bitcast [4000 x i8]* %stackbuf to i8*
  call void @llvm.lifetime.start.p0i8(i64 4000, i8* %48) #13
  %49 = load i8*, i8** %ignore, align 8, !tbaa !6
  %tobool19 = icmp ne i8* %49, null
  br i1 %tobool19, label %if.then22, label %lor.lhs.false20

lor.lhs.false20:                                  ; preds = %if.then
  %50 = load i8*, i8** %translate, align 8, !tbaa !6
  %tobool21 = icmp ne i8* %50, null
  br i1 %tobool21, label %if.then22, label %if.else84

if.then22:                                        ; preds = %lor.lhs.false20, %if.then
  %51 = bitcast i64* %i to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %51) #13
  %52 = bitcast i64* %size to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %52) #13
  %53 = load i64, i64* %lena, align 8, !tbaa !14
  %add = add i64 %53, 1
  %54 = load i64, i64* %lenb, align 8, !tbaa !14
  %add23 = add i64 %add, %54
  %add24 = add i64 %add23, 1
  store i64 %add24, i64* %size, align 8, !tbaa !14
  %55 = load i64, i64* %size, align 8, !tbaa !14
  %cmp25 = icmp ule i64 %55, 4000
  br i1 %cmp25, label %if.then26, label %if.else

if.then26:                                        ; preds = %if.then22
  %arraydecay = getelementptr inbounds [4000 x i8], [4000 x i8]* %stackbuf, i64 0, i64 0
  store i8* %arraydecay, i8** %ta, align 8, !tbaa !6
  store i8* null, i8** %allocated, align 8, !tbaa !6
  br label %if.end

if.else:                                          ; preds = %if.then22
  %56 = load i64, i64* %size, align 8, !tbaa !14
  %call27 = call noalias nonnull i8* @xmalloc(i64 %56) #25
  store i8* %call27, i8** %allocated, align 8, !tbaa !6
  store i8* %call27, i8** %ta, align 8, !tbaa !6
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then26
  %57 = load i8*, i8** %ta, align 8, !tbaa !6
  %58 = load i64, i64* %lena, align 8, !tbaa !14
  %add.ptr = getelementptr inbounds i8, i8* %57, i64 %58
  %add.ptr28 = getelementptr inbounds i8, i8* %add.ptr, i64 1
  store i8* %add.ptr28, i8** %tb, align 8, !tbaa !6
  store i64 0, i64* %i, align 8, !tbaa !14
  store i64 0, i64* %tlena, align 8, !tbaa !14
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %59 = load i64, i64* %i, align 8, !tbaa !14
  %60 = load i64, i64* %lena, align 8, !tbaa !14
  %cmp29 = icmp ult i64 %59, %60
  br i1 %cmp29, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %61 = load i8*, i8** %ignore, align 8, !tbaa !6
  %tobool30 = icmp ne i8* %61, null
  br i1 %tobool30, label %land.lhs.true, label %if.then34

land.lhs.true:                                    ; preds = %for.body
  %62 = load i8*, i8** %ignore, align 8, !tbaa !6
  %63 = load i8*, i8** %texta, align 8, !tbaa !6
  %64 = load i64, i64* %i, align 8, !tbaa !14
  %arrayidx = getelementptr inbounds i8, i8* %63, i64 %64
  %65 = load i8, i8* %arrayidx, align 1, !tbaa !13
  %call31 = call zeroext i8 @to_uchar(i8 signext %65)
  %idxprom = zext i8 %call31 to i64
  %arrayidx32 = getelementptr inbounds i8, i8* %62, i64 %idxprom
  %66 = load i8, i8* %arrayidx32, align 1, !tbaa !11, !range !25
  %tobool33 = trunc i8 %66 to i1
  br i1 %tobool33, label %if.end48, label %if.then34

if.then34:                                        ; preds = %land.lhs.true, %for.body
  %67 = load i8*, i8** %translate, align 8, !tbaa !6
  %tobool35 = icmp ne i8* %67, null
  br i1 %tobool35, label %cond.true36, label %cond.false41

cond.true36:                                      ; preds = %if.then34
  %68 = load i8*, i8** %translate, align 8, !tbaa !6
  %69 = load i8*, i8** %texta, align 8, !tbaa !6
  %70 = load i64, i64* %i, align 8, !tbaa !14
  %arrayidx37 = getelementptr inbounds i8, i8* %69, i64 %70
  %71 = load i8, i8* %arrayidx37, align 1, !tbaa !13
  %call38 = call zeroext i8 @to_uchar(i8 signext %71)
  %idxprom39 = zext i8 %call38 to i64
  %arrayidx40 = getelementptr inbounds i8, i8* %68, i64 %idxprom39
  %72 = load i8, i8* %arrayidx40, align 1, !tbaa !13
  %conv = sext i8 %72 to i32
  br label %cond.end44

cond.false41:                                     ; preds = %if.then34
  %73 = load i8*, i8** %texta, align 8, !tbaa !6
  %74 = load i64, i64* %i, align 8, !tbaa !14
  %arrayidx42 = getelementptr inbounds i8, i8* %73, i64 %74
  %75 = load i8, i8* %arrayidx42, align 1, !tbaa !13
  %conv43 = sext i8 %75 to i32
  br label %cond.end44

cond.end44:                                       ; preds = %cond.false41, %cond.true36
  %cond45 = phi i32 [ %conv, %cond.true36 ], [ %conv43, %cond.false41 ]
  %conv46 = trunc i32 %cond45 to i8
  %76 = load i8*, i8** %ta, align 8, !tbaa !6
  %77 = load i64, i64* %tlena, align 8, !tbaa !14
  %inc = add i64 %77, 1
  store i64 %inc, i64* %tlena, align 8, !tbaa !14
  %arrayidx47 = getelementptr inbounds i8, i8* %76, i64 %77
  store i8 %conv46, i8* %arrayidx47, align 1, !tbaa !13
  br label %if.end48

if.end48:                                         ; preds = %cond.end44, %land.lhs.true
  br label %for.inc

for.inc:                                          ; preds = %if.end48
  %78 = load i64, i64* %i, align 8, !tbaa !14
  %inc49 = add i64 %78, 1
  store i64 %inc49, i64* %i, align 8, !tbaa !14
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %79 = load i8*, i8** %ta, align 8, !tbaa !6
  %80 = load i64, i64* %tlena, align 8, !tbaa !14
  %arrayidx50 = getelementptr inbounds i8, i8* %79, i64 %80
  store i8 0, i8* %arrayidx50, align 1, !tbaa !13
  store i64 0, i64* %i, align 8, !tbaa !14
  store i64 0, i64* %tlenb, align 8, !tbaa !14
  br label %for.cond51

for.cond51:                                       ; preds = %for.inc80, %for.end
  %81 = load i64, i64* %i, align 8, !tbaa !14
  %82 = load i64, i64* %lenb, align 8, !tbaa !14
  %cmp52 = icmp ult i64 %81, %82
  br i1 %cmp52, label %for.body54, label %for.end82

for.body54:                                       ; preds = %for.cond51
  %83 = load i8*, i8** %ignore, align 8, !tbaa !6
  %tobool55 = icmp ne i8* %83, null
  br i1 %tobool55, label %land.lhs.true56, label %if.then63

land.lhs.true56:                                  ; preds = %for.body54
  %84 = load i8*, i8** %ignore, align 8, !tbaa !6
  %85 = load i8*, i8** %textb, align 8, !tbaa !6
  %86 = load i64, i64* %i, align 8, !tbaa !14
  %arrayidx57 = getelementptr inbounds i8, i8* %85, i64 %86
  %87 = load i8, i8* %arrayidx57, align 1, !tbaa !13
  %call58 = call zeroext i8 @to_uchar(i8 signext %87)
  %idxprom59 = zext i8 %call58 to i64
  %arrayidx60 = getelementptr inbounds i8, i8* %84, i64 %idxprom59
  %88 = load i8, i8* %arrayidx60, align 1, !tbaa !11, !range !25
  %tobool61 = trunc i8 %88 to i1
  br i1 %tobool61, label %if.end79, label %if.then63

if.then63:                                        ; preds = %land.lhs.true56, %for.body54
  %89 = load i8*, i8** %translate, align 8, !tbaa !6
  %tobool64 = icmp ne i8* %89, null
  br i1 %tobool64, label %cond.true65, label %cond.false71

cond.true65:                                      ; preds = %if.then63
  %90 = load i8*, i8** %translate, align 8, !tbaa !6
  %91 = load i8*, i8** %textb, align 8, !tbaa !6
  %92 = load i64, i64* %i, align 8, !tbaa !14
  %arrayidx66 = getelementptr inbounds i8, i8* %91, i64 %92
  %93 = load i8, i8* %arrayidx66, align 1, !tbaa !13
  %call67 = call zeroext i8 @to_uchar(i8 signext %93)
  %idxprom68 = zext i8 %call67 to i64
  %arrayidx69 = getelementptr inbounds i8, i8* %90, i64 %idxprom68
  %94 = load i8, i8* %arrayidx69, align 1, !tbaa !13
  %conv70 = sext i8 %94 to i32
  br label %cond.end74

cond.false71:                                     ; preds = %if.then63
  %95 = load i8*, i8** %textb, align 8, !tbaa !6
  %96 = load i64, i64* %i, align 8, !tbaa !14
  %arrayidx72 = getelementptr inbounds i8, i8* %95, i64 %96
  %97 = load i8, i8* %arrayidx72, align 1, !tbaa !13
  %conv73 = sext i8 %97 to i32
  br label %cond.end74

cond.end74:                                       ; preds = %cond.false71, %cond.true65
  %cond75 = phi i32 [ %conv70, %cond.true65 ], [ %conv73, %cond.false71 ]
  %conv76 = trunc i32 %cond75 to i8
  %98 = load i8*, i8** %tb, align 8, !tbaa !6
  %99 = load i64, i64* %tlenb, align 8, !tbaa !14
  %inc77 = add i64 %99, 1
  store i64 %inc77, i64* %tlenb, align 8, !tbaa !14
  %arrayidx78 = getelementptr inbounds i8, i8* %98, i64 %99
  store i8 %conv76, i8* %arrayidx78, align 1, !tbaa !13
  br label %if.end79

if.end79:                                         ; preds = %cond.end74, %land.lhs.true56
  br label %for.inc80

for.inc80:                                        ; preds = %if.end79
  %100 = load i64, i64* %i, align 8, !tbaa !14
  %inc81 = add i64 %100, 1
  store i64 %inc81, i64* %i, align 8, !tbaa !14
  br label %for.cond51

for.end82:                                        ; preds = %for.cond51
  %101 = load i8*, i8** %tb, align 8, !tbaa !6
  %102 = load i64, i64* %tlenb, align 8, !tbaa !14
  %arrayidx83 = getelementptr inbounds i8, i8* %101, i64 %102
  store i8 0, i8* %arrayidx83, align 1, !tbaa !13
  %103 = bitcast i64* %size to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %103) #13
  %104 = bitcast i64* %i to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %104) #13
  br label %if.end89

if.else84:                                        ; preds = %lor.lhs.false20
  %105 = load i8*, i8** %texta, align 8, !tbaa !6
  store i8* %105, i8** %ta, align 8, !tbaa !6
  %106 = load i64, i64* %lena, align 8, !tbaa !14
  store i64 %106, i64* %tlena, align 8, !tbaa !14
  %107 = load i8*, i8** %ta, align 8, !tbaa !6
  %108 = load i64, i64* %tlena, align 8, !tbaa !14
  %arrayidx85 = getelementptr inbounds i8, i8* %107, i64 %108
  %109 = load i8, i8* %arrayidx85, align 1, !tbaa !13
  store i8 %109, i8* %enda, align 1, !tbaa !13
  %110 = load i8*, i8** %ta, align 8, !tbaa !6
  %111 = load i64, i64* %tlena, align 8, !tbaa !14
  %arrayidx86 = getelementptr inbounds i8, i8* %110, i64 %111
  store i8 0, i8* %arrayidx86, align 1, !tbaa !13
  %112 = load i8*, i8** %textb, align 8, !tbaa !6
  store i8* %112, i8** %tb, align 8, !tbaa !6
  %113 = load i64, i64* %lenb, align 8, !tbaa !14
  store i64 %113, i64* %tlenb, align 8, !tbaa !14
  %114 = load i8*, i8** %tb, align 8, !tbaa !6
  %115 = load i64, i64* %tlenb, align 8, !tbaa !14
  %arrayidx87 = getelementptr inbounds i8, i8* %114, i64 %115
  %116 = load i8, i8* %arrayidx87, align 1, !tbaa !13
  store i8 %116, i8* %endb, align 1, !tbaa !13
  %117 = load i8*, i8** %tb, align 8, !tbaa !6
  %118 = load i64, i64* %tlenb, align 8, !tbaa !14
  %arrayidx88 = getelementptr inbounds i8, i8* %117, i64 %118
  store i8 0, i8* %arrayidx88, align 1, !tbaa !13
  br label %if.end89

if.end89:                                         ; preds = %if.else84, %for.end82
  %119 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !tbaa !6
  %numeric = getelementptr inbounds %struct.keyfield, %struct.keyfield* %119, i32 0, i32 8
  %120 = load i8, i8* %numeric, align 2, !tbaa !40, !range !25
  %tobool90 = trunc i8 %120 to i1
  br i1 %tobool90, label %if.then91, label %if.else93

if.then91:                                        ; preds = %if.end89
  %121 = load i8*, i8** %ta, align 8, !tbaa !6
  %122 = load i8*, i8** %tb, align 8, !tbaa !6
  %call92 = call i32 @numcompare(i8* %121, i8* %122) #22
  store i32 %call92, i32* %diff, align 4, !tbaa !2
  br label %if.end139

if.else93:                                        ; preds = %if.end89
  %123 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !tbaa !6
  %general_numeric = getelementptr inbounds %struct.keyfield, %struct.keyfield* %123, i32 0, i32 10
  %124 = load i8, i8* %general_numeric, align 4, !tbaa !41, !range !25
  %tobool94 = trunc i8 %124 to i1
  br i1 %tobool94, label %if.then95, label %if.else97

if.then95:                                        ; preds = %if.else93
  %125 = load i8*, i8** %ta, align 8, !tbaa !6
  %126 = load i8*, i8** %tb, align 8, !tbaa !6
  %call96 = call i32 @general_numcompare(i8* %125, i8* %126)
  store i32 %call96, i32* %diff, align 4, !tbaa !2
  br label %if.end138

if.else97:                                        ; preds = %if.else93
  %127 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !tbaa !6
  %human_numeric = getelementptr inbounds %struct.keyfield, %struct.keyfield* %127, i32 0, i32 11
  %128 = load i8, i8* %human_numeric, align 1, !tbaa !42, !range !25
  %tobool98 = trunc i8 %128 to i1
  br i1 %tobool98, label %if.then99, label %if.else101

if.then99:                                        ; preds = %if.else97
  %129 = load i8*, i8** %ta, align 8, !tbaa !6
  %130 = load i8*, i8** %tb, align 8, !tbaa !6
  %call100 = call i32 @human_numcompare(i8* %129, i8* %130) #22
  store i32 %call100, i32* %diff, align 4, !tbaa !2
  br label %if.end137

if.else101:                                       ; preds = %if.else97
  %131 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !tbaa !6
  %month102 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %131, i32 0, i32 12
  %132 = load i8, i8* %month102, align 2, !tbaa !39, !range !25
  %tobool103 = trunc i8 %132 to i1
  br i1 %tobool103, label %if.then104, label %if.else107

if.then104:                                       ; preds = %if.else101
  %133 = load i8*, i8** %ta, align 8, !tbaa !6
  %call105 = call i32 @getmonth(i8* %133, i8** null)
  %134 = load i8*, i8** %tb, align 8, !tbaa !6
  %call106 = call i32 @getmonth(i8* %134, i8** null)
  %sub = sub nsw i32 %call105, %call106
  store i32 %sub, i32* %diff, align 4, !tbaa !2
  br label %if.end136

if.else107:                                       ; preds = %if.else101
  %135 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !tbaa !6
  %random108 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %135, i32 0, i32 9
  %136 = load i8, i8* %random108, align 1, !tbaa !44, !range !25
  %tobool109 = trunc i8 %136 to i1
  br i1 %tobool109, label %if.then110, label %if.else112

if.then110:                                       ; preds = %if.else107
  %137 = load i8*, i8** %ta, align 8, !tbaa !6
  %138 = load i64, i64* %tlena, align 8, !tbaa !14
  %139 = load i8*, i8** %tb, align 8, !tbaa !6
  %140 = load i64, i64* %tlenb, align 8, !tbaa !14
  %call111 = call i32 @compare_random(i8* %137, i64 %138, i8* %139, i64 %140)
  store i32 %call111, i32* %diff, align 4, !tbaa !2
  br label %if.end135

if.else112:                                       ; preds = %if.else107
  %141 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !tbaa !6
  %version113 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %141, i32 0, i32 14
  %142 = load i8, i8* %version113, align 8, !tbaa !43, !range !25
  %tobool114 = trunc i8 %142 to i1
  br i1 %tobool114, label %if.then115, label %if.else117

if.then115:                                       ; preds = %if.else112
  %143 = load i8*, i8** %ta, align 8, !tbaa !6
  %144 = load i8*, i8** %tb, align 8, !tbaa !6
  %call116 = call i32 @filevercmp(i8* %143, i8* %144) #22
  store i32 %call116, i32* %diff, align 4, !tbaa !2
  br label %if.end134

if.else117:                                       ; preds = %if.else112
  %145 = load i64, i64* %tlena, align 8, !tbaa !14
  %cmp118 = icmp eq i64 %145, 0
  br i1 %cmp118, label %if.then120, label %if.else124

if.then120:                                       ; preds = %if.else117
  %146 = load i64, i64* %tlenb, align 8, !tbaa !14
  %cmp121 = icmp ne i64 %146, 0
  %conv122 = zext i1 %cmp121 to i32
  %sub123 = sub nsw i32 0, %conv122
  store i32 %sub123, i32* %diff, align 4, !tbaa !2
  br label %if.end133

if.else124:                                       ; preds = %if.else117
  %147 = load i64, i64* %tlenb, align 8, !tbaa !14
  %cmp125 = icmp eq i64 %147, 0
  br i1 %cmp125, label %if.then127, label %if.else128

if.then127:                                       ; preds = %if.else124
  store i32 1, i32* %diff, align 4, !tbaa !2
  br label %if.end132

if.else128:                                       ; preds = %if.else124
  %148 = load i8*, i8** %ta, align 8, !tbaa !6
  %149 = load i64, i64* %tlena, align 8, !tbaa !14
  %add129 = add i64 %149, 1
  %150 = load i8*, i8** %tb, align 8, !tbaa !6
  %151 = load i64, i64* %tlenb, align 8, !tbaa !14
  %add130 = add i64 %151, 1
  %call131 = call i32 @xmemcoll0(i8* %148, i64 %add129, i8* %150, i64 %add130)
  store i32 %call131, i32* %diff, align 4, !tbaa !2
  br label %if.end132

if.end132:                                        ; preds = %if.else128, %if.then127
  br label %if.end133

if.end133:                                        ; preds = %if.end132, %if.then120
  br label %if.end134

if.end134:                                        ; preds = %if.end133, %if.then115
  br label %if.end135

if.end135:                                        ; preds = %if.end134, %if.then110
  br label %if.end136

if.end136:                                        ; preds = %if.end135, %if.then104
  br label %if.end137

if.end137:                                        ; preds = %if.end136, %if.then99
  br label %if.end138

if.end138:                                        ; preds = %if.end137, %if.then95
  br label %if.end139

if.end139:                                        ; preds = %if.end138, %if.then91
  %152 = load i8*, i8** %ignore, align 8, !tbaa !6
  %tobool140 = icmp ne i8* %152, null
  br i1 %tobool140, label %if.then143, label %lor.lhs.false141

lor.lhs.false141:                                 ; preds = %if.end139
  %153 = load i8*, i8** %translate, align 8, !tbaa !6
  %tobool142 = icmp ne i8* %153, null
  br i1 %tobool142, label %if.then143, label %if.else144

if.then143:                                       ; preds = %lor.lhs.false141, %if.end139
  %154 = load i8*, i8** %allocated, align 8, !tbaa !6
  call void @rpl_free(i8* %154)
  br label %if.end147

if.else144:                                       ; preds = %lor.lhs.false141
  %155 = load i8, i8* %enda, align 1, !tbaa !13
  %156 = load i8*, i8** %ta, align 8, !tbaa !6
  %157 = load i64, i64* %tlena, align 8, !tbaa !14
  %arrayidx145 = getelementptr inbounds i8, i8* %156, i64 %157
  store i8 %155, i8* %arrayidx145, align 1, !tbaa !13
  %158 = load i8, i8* %endb, align 1, !tbaa !13
  %159 = load i8*, i8** %tb, align 8, !tbaa !6
  %160 = load i64, i64* %tlenb, align 8, !tbaa !14
  %arrayidx146 = getelementptr inbounds i8, i8* %159, i64 %160
  store i8 %158, i8* %arrayidx146, align 1, !tbaa !13
  br label %if.end147

if.end147:                                        ; preds = %if.else144, %if.then143
  %161 = bitcast [4000 x i8]* %stackbuf to i8*
  call void @llvm.lifetime.end.p0i8(i64 4000, i8* %161) #13
  %162 = bitcast i8** %allocated to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %162) #13
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %endb) #13
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %enda) #13
  %163 = bitcast i64* %tlenb to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %163) #13
  %164 = bitcast i64* %tlena to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %164) #13
  %165 = bitcast i8** %tb to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %165) #13
  %166 = bitcast i8** %ta to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %166) #13
  br label %if.end324

if.else148:                                       ; preds = %lor.lhs.false17
  %167 = load i8*, i8** %ignore, align 8, !tbaa !6
  %tobool149 = icmp ne i8* %167, null
  br i1 %tobool149, label %if.then150, label %if.else262

if.then150:                                       ; preds = %if.else148
  %168 = load i8*, i8** %translate, align 8, !tbaa !6
  %tobool151 = icmp ne i8* %168, null
  br i1 %tobool151, label %if.then152, label %if.else206

if.then152:                                       ; preds = %if.then150
  br label %do.body

do.body:                                          ; preds = %if.then152
  br label %while.cond153

while.cond153:                                    ; preds = %if.end197, %do.body
  br label %while.body154

while.body154:                                    ; preds = %while.cond153
  br label %while.cond155

while.cond155:                                    ; preds = %while.body163, %while.body154
  %169 = load i8*, i8** %texta, align 8, !tbaa !6
  %170 = load i8*, i8** %lima, align 8, !tbaa !6
  %cmp156 = icmp ult i8* %169, %170
  br i1 %cmp156, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond155
  %171 = load i8*, i8** %ignore, align 8, !tbaa !6
  %172 = load i8*, i8** %texta, align 8, !tbaa !6
  %173 = load i8, i8* %172, align 1, !tbaa !13
  %call158 = call zeroext i8 @to_uchar(i8 signext %173)
  %idxprom159 = zext i8 %call158 to i64
  %arrayidx160 = getelementptr inbounds i8, i8* %171, i64 %idxprom159
  %174 = load i8, i8* %arrayidx160, align 1, !tbaa !11, !range !25
  %tobool161 = trunc i8 %174 to i1
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond155
  %175 = phi i1 [ false, %while.cond155 ], [ %tobool161, %land.rhs ]
  br i1 %175, label %while.body163, label %while.end

while.body163:                                    ; preds = %land.end
  %176 = load i8*, i8** %texta, align 8, !tbaa !6
  %incdec.ptr = getelementptr inbounds i8, i8* %176, i32 1
  store i8* %incdec.ptr, i8** %texta, align 8, !tbaa !6
  br label %while.cond155

while.end:                                        ; preds = %land.end
  br label %while.cond164

while.cond164:                                    ; preds = %while.body174, %while.end
  %177 = load i8*, i8** %textb, align 8, !tbaa !6
  %178 = load i8*, i8** %limb, align 8, !tbaa !6
  %cmp165 = icmp ult i8* %177, %178
  br i1 %cmp165, label %land.rhs167, label %land.end173

land.rhs167:                                      ; preds = %while.cond164
  %179 = load i8*, i8** %ignore, align 8, !tbaa !6
  %180 = load i8*, i8** %textb, align 8, !tbaa !6
  %181 = load i8, i8* %180, align 1, !tbaa !13
  %call168 = call zeroext i8 @to_uchar(i8 signext %181)
  %idxprom169 = zext i8 %call168 to i64
  %arrayidx170 = getelementptr inbounds i8, i8* %179, i64 %idxprom169
  %182 = load i8, i8* %arrayidx170, align 1, !tbaa !11, !range !25
  %tobool171 = trunc i8 %182 to i1
  br label %land.end173

land.end173:                                      ; preds = %land.rhs167, %while.cond164
  %183 = phi i1 [ false, %while.cond164 ], [ %tobool171, %land.rhs167 ]
  br i1 %183, label %while.body174, label %while.end176

while.body174:                                    ; preds = %land.end173
  %184 = load i8*, i8** %textb, align 8, !tbaa !6
  %incdec.ptr175 = getelementptr inbounds i8, i8* %184, i32 1
  store i8* %incdec.ptr175, i8** %textb, align 8, !tbaa !6
  br label %while.cond164

while.end176:                                     ; preds = %land.end173
  %185 = load i8*, i8** %texta, align 8, !tbaa !6
  %186 = load i8*, i8** %lima, align 8, !tbaa !6
  %cmp177 = icmp ult i8* %185, %186
  br i1 %cmp177, label %land.lhs.true179, label %if.then182

land.lhs.true179:                                 ; preds = %while.end176
  %187 = load i8*, i8** %textb, align 8, !tbaa !6
  %188 = load i8*, i8** %limb, align 8, !tbaa !6
  %cmp180 = icmp ult i8* %187, %188
  br i1 %cmp180, label %if.end183, label %if.then182

if.then182:                                       ; preds = %land.lhs.true179, %while.end176
  br label %while.end200

if.end183:                                        ; preds = %land.lhs.true179
  %189 = load i8*, i8** %translate, align 8, !tbaa !6
  %190 = load i8*, i8** %texta, align 8, !tbaa !6
  %191 = load i8, i8* %190, align 1, !tbaa !13
  %call184 = call zeroext i8 @to_uchar(i8 signext %191)
  %idxprom185 = zext i8 %call184 to i64
  %arrayidx186 = getelementptr inbounds i8, i8* %189, i64 %idxprom185
  %192 = load i8, i8* %arrayidx186, align 1, !tbaa !13
  %call187 = call zeroext i8 @to_uchar(i8 signext %192)
  %conv188 = zext i8 %call187 to i32
  %193 = load i8*, i8** %translate, align 8, !tbaa !6
  %194 = load i8*, i8** %textb, align 8, !tbaa !6
  %195 = load i8, i8* %194, align 1, !tbaa !13
  %call189 = call zeroext i8 @to_uchar(i8 signext %195)
  %idxprom190 = zext i8 %call189 to i64
  %arrayidx191 = getelementptr inbounds i8, i8* %193, i64 %idxprom190
  %196 = load i8, i8* %arrayidx191, align 1, !tbaa !13
  %call192 = call zeroext i8 @to_uchar(i8 signext %196)
  %conv193 = zext i8 %call192 to i32
  %sub194 = sub nsw i32 %conv188, %conv193
  store i32 %sub194, i32* %diff, align 4, !tbaa !2
  %197 = load i32, i32* %diff, align 4, !tbaa !2
  %tobool195 = icmp ne i32 %197, 0
  br i1 %tobool195, label %if.then196, label %if.end197

if.then196:                                       ; preds = %if.end183
  store i32 18, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end197:                                        ; preds = %if.end183
  %198 = load i8*, i8** %texta, align 8, !tbaa !6
  %incdec.ptr198 = getelementptr inbounds i8, i8* %198, i32 1
  store i8* %incdec.ptr198, i8** %texta, align 8, !tbaa !6
  %199 = load i8*, i8** %textb, align 8, !tbaa !6
  %incdec.ptr199 = getelementptr inbounds i8, i8* %199, i32 1
  store i8* %incdec.ptr199, i8** %textb, align 8, !tbaa !6
  br label %while.cond153

while.end200:                                     ; preds = %if.then182
  %200 = load i8*, i8** %texta, align 8, !tbaa !6
  %201 = load i8*, i8** %lima, align 8, !tbaa !6
  %cmp201 = icmp ult i8* %200, %201
  %conv202 = zext i1 %cmp201 to i32
  %202 = load i8*, i8** %textb, align 8, !tbaa !6
  %203 = load i8*, i8** %limb, align 8, !tbaa !6
  %cmp203 = icmp ult i8* %202, %203
  %conv204 = zext i1 %cmp203 to i32
  %sub205 = sub nsw i32 %conv202, %conv204
  store i32 %sub205, i32* %diff, align 4, !tbaa !2
  br label %do.cond

do.cond:                                          ; preds = %while.end200
  br label %do.end

do.end:                                           ; preds = %do.cond
  br label %if.end261

if.else206:                                       ; preds = %if.then150
  br label %do.body207

do.body207:                                       ; preds = %if.else206
  br label %while.cond208

while.cond208:                                    ; preds = %if.end250, %do.body207
  br label %while.body209

while.body209:                                    ; preds = %while.cond208
  br label %while.cond210

while.cond210:                                    ; preds = %while.body220, %while.body209
  %204 = load i8*, i8** %texta, align 8, !tbaa !6
  %205 = load i8*, i8** %lima, align 8, !tbaa !6
  %cmp211 = icmp ult i8* %204, %205
  br i1 %cmp211, label %land.rhs213, label %land.end219

land.rhs213:                                      ; preds = %while.cond210
  %206 = load i8*, i8** %ignore, align 8, !tbaa !6
  %207 = load i8*, i8** %texta, align 8, !tbaa !6
  %208 = load i8, i8* %207, align 1, !tbaa !13
  %call214 = call zeroext i8 @to_uchar(i8 signext %208)
  %idxprom215 = zext i8 %call214 to i64
  %arrayidx216 = getelementptr inbounds i8, i8* %206, i64 %idxprom215
  %209 = load i8, i8* %arrayidx216, align 1, !tbaa !11, !range !25
  %tobool217 = trunc i8 %209 to i1
  br label %land.end219

land.end219:                                      ; preds = %land.rhs213, %while.cond210
  %210 = phi i1 [ false, %while.cond210 ], [ %tobool217, %land.rhs213 ]
  br i1 %210, label %while.body220, label %while.end222

while.body220:                                    ; preds = %land.end219
  %211 = load i8*, i8** %texta, align 8, !tbaa !6
  %incdec.ptr221 = getelementptr inbounds i8, i8* %211, i32 1
  store i8* %incdec.ptr221, i8** %texta, align 8, !tbaa !6
  br label %while.cond210

while.end222:                                     ; preds = %land.end219
  br label %while.cond223

while.cond223:                                    ; preds = %while.body233, %while.end222
  %212 = load i8*, i8** %textb, align 8, !tbaa !6
  %213 = load i8*, i8** %limb, align 8, !tbaa !6
  %cmp224 = icmp ult i8* %212, %213
  br i1 %cmp224, label %land.rhs226, label %land.end232

land.rhs226:                                      ; preds = %while.cond223
  %214 = load i8*, i8** %ignore, align 8, !tbaa !6
  %215 = load i8*, i8** %textb, align 8, !tbaa !6
  %216 = load i8, i8* %215, align 1, !tbaa !13
  %call227 = call zeroext i8 @to_uchar(i8 signext %216)
  %idxprom228 = zext i8 %call227 to i64
  %arrayidx229 = getelementptr inbounds i8, i8* %214, i64 %idxprom228
  %217 = load i8, i8* %arrayidx229, align 1, !tbaa !11, !range !25
  %tobool230 = trunc i8 %217 to i1
  br label %land.end232

land.end232:                                      ; preds = %land.rhs226, %while.cond223
  %218 = phi i1 [ false, %while.cond223 ], [ %tobool230, %land.rhs226 ]
  br i1 %218, label %while.body233, label %while.end235

while.body233:                                    ; preds = %land.end232
  %219 = load i8*, i8** %textb, align 8, !tbaa !6
  %incdec.ptr234 = getelementptr inbounds i8, i8* %219, i32 1
  store i8* %incdec.ptr234, i8** %textb, align 8, !tbaa !6
  br label %while.cond223

while.end235:                                     ; preds = %land.end232
  %220 = load i8*, i8** %texta, align 8, !tbaa !6
  %221 = load i8*, i8** %lima, align 8, !tbaa !6
  %cmp236 = icmp ult i8* %220, %221
  br i1 %cmp236, label %land.lhs.true238, label %if.then241

land.lhs.true238:                                 ; preds = %while.end235
  %222 = load i8*, i8** %textb, align 8, !tbaa !6
  %223 = load i8*, i8** %limb, align 8, !tbaa !6
  %cmp239 = icmp ult i8* %222, %223
  br i1 %cmp239, label %if.end242, label %if.then241

if.then241:                                       ; preds = %land.lhs.true238, %while.end235
  br label %while.end253

if.end242:                                        ; preds = %land.lhs.true238
  %224 = load i8*, i8** %texta, align 8, !tbaa !6
  %225 = load i8, i8* %224, align 1, !tbaa !13
  %call243 = call zeroext i8 @to_uchar(i8 signext %225)
  %conv244 = zext i8 %call243 to i32
  %226 = load i8*, i8** %textb, align 8, !tbaa !6
  %227 = load i8, i8* %226, align 1, !tbaa !13
  %call245 = call zeroext i8 @to_uchar(i8 signext %227)
  %conv246 = zext i8 %call245 to i32
  %sub247 = sub nsw i32 %conv244, %conv246
  store i32 %sub247, i32* %diff, align 4, !tbaa !2
  %228 = load i32, i32* %diff, align 4, !tbaa !2
  %tobool248 = icmp ne i32 %228, 0
  br i1 %tobool248, label %if.then249, label %if.end250

if.then249:                                       ; preds = %if.end242
  store i32 18, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end250:                                        ; preds = %if.end242
  %229 = load i8*, i8** %texta, align 8, !tbaa !6
  %incdec.ptr251 = getelementptr inbounds i8, i8* %229, i32 1
  store i8* %incdec.ptr251, i8** %texta, align 8, !tbaa !6
  %230 = load i8*, i8** %textb, align 8, !tbaa !6
  %incdec.ptr252 = getelementptr inbounds i8, i8* %230, i32 1
  store i8* %incdec.ptr252, i8** %textb, align 8, !tbaa !6
  br label %while.cond208

while.end253:                                     ; preds = %if.then241
  %231 = load i8*, i8** %texta, align 8, !tbaa !6
  %232 = load i8*, i8** %lima, align 8, !tbaa !6
  %cmp254 = icmp ult i8* %231, %232
  %conv255 = zext i1 %cmp254 to i32
  %233 = load i8*, i8** %textb, align 8, !tbaa !6
  %234 = load i8*, i8** %limb, align 8, !tbaa !6
  %cmp256 = icmp ult i8* %233, %234
  %conv257 = zext i1 %cmp256 to i32
  %sub258 = sub nsw i32 %conv255, %conv257
  store i32 %sub258, i32* %diff, align 4, !tbaa !2
  br label %do.cond259

do.cond259:                                       ; preds = %while.end253
  br label %do.end260

do.end260:                                        ; preds = %do.cond259
  br label %if.end261

if.end261:                                        ; preds = %do.end260, %do.end
  br label %if.end323

if.else262:                                       ; preds = %if.else148
  %235 = load i64, i64* %lena, align 8, !tbaa !14
  %cmp263 = icmp eq i64 %235, 0
  br i1 %cmp263, label %if.then265, label %if.else269

if.then265:                                       ; preds = %if.else262
  %236 = load i64, i64* %lenb, align 8, !tbaa !14
  %cmp266 = icmp ne i64 %236, 0
  %conv267 = zext i1 %cmp266 to i32
  %sub268 = sub nsw i32 0, %conv267
  store i32 %sub268, i32* %diff, align 4, !tbaa !2
  br label %if.end322

if.else269:                                       ; preds = %if.else262
  %237 = load i64, i64* %lenb, align 8, !tbaa !14
  %cmp270 = icmp eq i64 %237, 0
  br i1 %cmp270, label %if.then272, label %if.else273

if.then272:                                       ; preds = %if.else269
  store i32 27, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.else273:                                       ; preds = %if.else269
  %238 = load i8*, i8** %translate, align 8, !tbaa !6
  %tobool274 = icmp ne i8* %238, null
  br i1 %tobool274, label %if.then275, label %if.else301

if.then275:                                       ; preds = %if.else273
  br label %while.cond276

while.cond276:                                    ; preds = %if.end299, %if.then275
  %239 = load i8*, i8** %texta, align 8, !tbaa !6
  %240 = load i8*, i8** %lima, align 8, !tbaa !6
  %cmp277 = icmp ult i8* %239, %240
  br i1 %cmp277, label %land.rhs279, label %land.end282

land.rhs279:                                      ; preds = %while.cond276
  %241 = load i8*, i8** %textb, align 8, !tbaa !6
  %242 = load i8*, i8** %limb, align 8, !tbaa !6
  %cmp280 = icmp ult i8* %241, %242
  br label %land.end282

land.end282:                                      ; preds = %land.rhs279, %while.cond276
  %243 = phi i1 [ false, %while.cond276 ], [ %cmp280, %land.rhs279 ]
  br i1 %243, label %while.body283, label %while.end300

while.body283:                                    ; preds = %land.end282
  %244 = load i8*, i8** %translate, align 8, !tbaa !6
  %245 = load i8*, i8** %texta, align 8, !tbaa !6
  %incdec.ptr284 = getelementptr inbounds i8, i8* %245, i32 1
  store i8* %incdec.ptr284, i8** %texta, align 8, !tbaa !6
  %246 = load i8, i8* %245, align 1, !tbaa !13
  %call285 = call zeroext i8 @to_uchar(i8 signext %246)
  %idxprom286 = zext i8 %call285 to i64
  %arrayidx287 = getelementptr inbounds i8, i8* %244, i64 %idxprom286
  %247 = load i8, i8* %arrayidx287, align 1, !tbaa !13
  %call288 = call zeroext i8 @to_uchar(i8 signext %247)
  %conv289 = zext i8 %call288 to i32
  %248 = load i8*, i8** %translate, align 8, !tbaa !6
  %249 = load i8*, i8** %textb, align 8, !tbaa !6
  %incdec.ptr290 = getelementptr inbounds i8, i8* %249, i32 1
  store i8* %incdec.ptr290, i8** %textb, align 8, !tbaa !6
  %250 = load i8, i8* %249, align 1, !tbaa !13
  %call291 = call zeroext i8 @to_uchar(i8 signext %250)
  %idxprom292 = zext i8 %call291 to i64
  %arrayidx293 = getelementptr inbounds i8, i8* %248, i64 %idxprom292
  %251 = load i8, i8* %arrayidx293, align 1, !tbaa !13
  %call294 = call zeroext i8 @to_uchar(i8 signext %251)
  %conv295 = zext i8 %call294 to i32
  %sub296 = sub nsw i32 %conv289, %conv295
  store i32 %sub296, i32* %diff, align 4, !tbaa !2
  %252 = load i32, i32* %diff, align 4, !tbaa !2
  %tobool297 = icmp ne i32 %252, 0
  br i1 %tobool297, label %if.then298, label %if.end299

if.then298:                                       ; preds = %while.body283
  store i32 18, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end299:                                        ; preds = %while.body283
  br label %while.cond276

while.end300:                                     ; preds = %land.end282
  br label %if.end312

if.else301:                                       ; preds = %if.else273
  %253 = load i8*, i8** %texta, align 8, !tbaa !6
  %254 = load i8*, i8** %textb, align 8, !tbaa !6
  %255 = load i64, i64* %lena, align 8, !tbaa !14
  %256 = load i64, i64* %lenb, align 8, !tbaa !14
  %cmp302 = icmp ult i64 %255, %256
  br i1 %cmp302, label %cond.true304, label %cond.false305

cond.true304:                                     ; preds = %if.else301
  %257 = load i64, i64* %lena, align 8, !tbaa !14
  br label %cond.end306

cond.false305:                                    ; preds = %if.else301
  %258 = load i64, i64* %lenb, align 8, !tbaa !14
  br label %cond.end306

cond.end306:                                      ; preds = %cond.false305, %cond.true304
  %cond307 = phi i64 [ %257, %cond.true304 ], [ %258, %cond.false305 ]
  %call308 = call i32 @memcmp(i8* %253, i8* %254, i64 %cond307) #22
  store i32 %call308, i32* %diff, align 4, !tbaa !2
  %259 = load i32, i32* %diff, align 4, !tbaa !2
  %tobool309 = icmp ne i32 %259, 0
  br i1 %tobool309, label %if.then310, label %if.end311

if.then310:                                       ; preds = %cond.end306
  store i32 18, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end311:                                        ; preds = %cond.end306
  br label %if.end312

if.end312:                                        ; preds = %if.end311, %while.end300
  %260 = load i64, i64* %lena, align 8, !tbaa !14
  %261 = load i64, i64* %lenb, align 8, !tbaa !14
  %cmp313 = icmp ult i64 %260, %261
  br i1 %cmp313, label %cond.true315, label %cond.false316

cond.true315:                                     ; preds = %if.end312
  br label %cond.end319

cond.false316:                                    ; preds = %if.end312
  %262 = load i64, i64* %lena, align 8, !tbaa !14
  %263 = load i64, i64* %lenb, align 8, !tbaa !14
  %cmp317 = icmp ne i64 %262, %263
  %conv318 = zext i1 %cmp317 to i32
  br label %cond.end319

cond.end319:                                      ; preds = %cond.false316, %cond.true315
  %cond320 = phi i32 [ -1, %cond.true315 ], [ %conv318, %cond.false316 ]
  store i32 %cond320, i32* %diff, align 4, !tbaa !2
  br label %if.end321

if.end321:                                        ; preds = %cond.end319
  br label %if.end322

if.end322:                                        ; preds = %if.end321, %if.then265
  br label %if.end323

if.end323:                                        ; preds = %if.end322, %if.end261
  br label %if.end324

if.end324:                                        ; preds = %if.end323, %if.end147
  %264 = load i32, i32* %diff, align 4, !tbaa !2
  %tobool325 = icmp ne i32 %264, 0
  br i1 %tobool325, label %if.then326, label %if.end327

if.then326:                                       ; preds = %if.end324
  store i32 18, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end327:                                        ; preds = %if.end324
  %265 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !tbaa !6
  %next = getelementptr inbounds %struct.keyfield, %struct.keyfield* %265, i32 0, i32 16
  %266 = load %struct.keyfield*, %struct.keyfield** %next, align 8, !tbaa !45
  store %struct.keyfield* %266, %struct.keyfield** %key, align 8, !tbaa !6
  %267 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !tbaa !6
  %tobool328 = icmp ne %struct.keyfield* %267, null
  br i1 %tobool328, label %if.end330, label %if.then329

if.then329:                                       ; preds = %if.end327
  store i32 3, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end330:                                        ; preds = %if.end327
  %268 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !tbaa !6
  %eword = getelementptr inbounds %struct.keyfield, %struct.keyfield* %268, i32 0, i32 2
  %269 = load i64, i64* %eword, align 8, !tbaa !28
  %cmp331 = icmp ne i64 %269, -1
  br i1 %cmp331, label %if.then333, label %if.else336

if.then333:                                       ; preds = %if.end330
  %270 = load %struct.line*, %struct.line** %a.addr, align 8, !tbaa !6
  %271 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !tbaa !6
  %call334 = call i8* @limfield(%struct.line* %270, %struct.keyfield* %271) #22
  store i8* %call334, i8** %lima, align 8, !tbaa !6
  %272 = load %struct.line*, %struct.line** %b.addr, align 8, !tbaa !6
  %273 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !tbaa !6
  %call335 = call i8* @limfield(%struct.line* %272, %struct.keyfield* %273) #22
  store i8* %call335, i8** %limb, align 8, !tbaa !6
  br label %if.end343

if.else336:                                       ; preds = %if.end330
  %274 = load %struct.line*, %struct.line** %a.addr, align 8, !tbaa !6
  %text = getelementptr inbounds %struct.line, %struct.line* %274, i32 0, i32 0
  %275 = load i8*, i8** %text, align 8, !tbaa !60
  %276 = load %struct.line*, %struct.line** %a.addr, align 8, !tbaa !6
  %length = getelementptr inbounds %struct.line, %struct.line* %276, i32 0, i32 1
  %277 = load i64, i64* %length, align 8, !tbaa !64
  %add.ptr337 = getelementptr inbounds i8, i8* %275, i64 %277
  %add.ptr338 = getelementptr inbounds i8, i8* %add.ptr337, i64 -1
  store i8* %add.ptr338, i8** %lima, align 8, !tbaa !6
  %278 = load %struct.line*, %struct.line** %b.addr, align 8, !tbaa !6
  %text339 = getelementptr inbounds %struct.line, %struct.line* %278, i32 0, i32 0
  %279 = load i8*, i8** %text339, align 8, !tbaa !60
  %280 = load %struct.line*, %struct.line** %b.addr, align 8, !tbaa !6
  %length340 = getelementptr inbounds %struct.line, %struct.line* %280, i32 0, i32 1
  %281 = load i64, i64* %length340, align 8, !tbaa !64
  %add.ptr341 = getelementptr inbounds i8, i8* %279, i64 %281
  %add.ptr342 = getelementptr inbounds i8, i8* %add.ptr341, i64 -1
  store i8* %add.ptr342, i8** %limb, align 8, !tbaa !6
  br label %if.end343

if.end343:                                        ; preds = %if.else336, %if.then333
  %282 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !tbaa !6
  %sword = getelementptr inbounds %struct.keyfield, %struct.keyfield* %282, i32 0, i32 0
  %283 = load i64, i64* %sword, align 8, !tbaa !23
  %cmp344 = icmp ne i64 %283, -1
  br i1 %cmp344, label %if.then346, label %if.else349

if.then346:                                       ; preds = %if.end343
  %284 = load %struct.line*, %struct.line** %a.addr, align 8, !tbaa !6
  %285 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !tbaa !6
  %call347 = call i8* @begfield(%struct.line* %284, %struct.keyfield* %285)
  store i8* %call347, i8** %texta, align 8, !tbaa !6
  %286 = load %struct.line*, %struct.line** %b.addr, align 8, !tbaa !6
  %287 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !tbaa !6
  %call348 = call i8* @begfield(%struct.line* %286, %struct.keyfield* %287)
  store i8* %call348, i8** %textb, align 8, !tbaa !6
  br label %if.end381

if.else349:                                       ; preds = %if.end343
  %288 = load %struct.line*, %struct.line** %a.addr, align 8, !tbaa !6
  %text350 = getelementptr inbounds %struct.line, %struct.line* %288, i32 0, i32 0
  %289 = load i8*, i8** %text350, align 8, !tbaa !60
  store i8* %289, i8** %texta, align 8, !tbaa !6
  %290 = load %struct.line*, %struct.line** %b.addr, align 8, !tbaa !6
  %text351 = getelementptr inbounds %struct.line, %struct.line* %290, i32 0, i32 0
  %291 = load i8*, i8** %text351, align 8, !tbaa !60
  store i8* %291, i8** %textb, align 8, !tbaa !6
  %292 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !tbaa !6
  %skipsblanks = getelementptr inbounds %struct.keyfield, %struct.keyfield* %292, i32 0, i32 6
  %293 = load i8, i8* %skipsblanks, align 8, !tbaa !37, !range !25
  %tobool352 = trunc i8 %293 to i1
  br i1 %tobool352, label %if.then353, label %if.end380

if.then353:                                       ; preds = %if.else349
  br label %while.cond354

while.cond354:                                    ; preds = %while.body364, %if.then353
  %294 = load i8*, i8** %texta, align 8, !tbaa !6
  %295 = load i8*, i8** %lima, align 8, !tbaa !6
  %cmp355 = icmp ult i8* %294, %295
  br i1 %cmp355, label %land.rhs357, label %land.end363

land.rhs357:                                      ; preds = %while.cond354
  %296 = load i8*, i8** %texta, align 8, !tbaa !6
  %297 = load i8, i8* %296, align 1, !tbaa !13
  %call358 = call zeroext i8 @to_uchar(i8 signext %297)
  %idxprom359 = zext i8 %call358 to i64
  %arrayidx360 = getelementptr inbounds [256 x i8], [256 x i8]* @blanks, i64 0, i64 %idxprom359
  %298 = load i8, i8* %arrayidx360, align 1, !tbaa !11, !range !25
  %tobool361 = trunc i8 %298 to i1
  br label %land.end363

land.end363:                                      ; preds = %land.rhs357, %while.cond354
  %299 = phi i1 [ false, %while.cond354 ], [ %tobool361, %land.rhs357 ]
  br i1 %299, label %while.body364, label %while.end366

while.body364:                                    ; preds = %land.end363
  %300 = load i8*, i8** %texta, align 8, !tbaa !6
  %incdec.ptr365 = getelementptr inbounds i8, i8* %300, i32 1
  store i8* %incdec.ptr365, i8** %texta, align 8, !tbaa !6
  br label %while.cond354

while.end366:                                     ; preds = %land.end363
  br label %while.cond367

while.cond367:                                    ; preds = %while.body377, %while.end366
  %301 = load i8*, i8** %textb, align 8, !tbaa !6
  %302 = load i8*, i8** %limb, align 8, !tbaa !6
  %cmp368 = icmp ult i8* %301, %302
  br i1 %cmp368, label %land.rhs370, label %land.end376

land.rhs370:                                      ; preds = %while.cond367
  %303 = load i8*, i8** %textb, align 8, !tbaa !6
  %304 = load i8, i8* %303, align 1, !tbaa !13
  %call371 = call zeroext i8 @to_uchar(i8 signext %304)
  %idxprom372 = zext i8 %call371 to i64
  %arrayidx373 = getelementptr inbounds [256 x i8], [256 x i8]* @blanks, i64 0, i64 %idxprom372
  %305 = load i8, i8* %arrayidx373, align 1, !tbaa !11, !range !25
  %tobool374 = trunc i8 %305 to i1
  br label %land.end376

land.end376:                                      ; preds = %land.rhs370, %while.cond367
  %306 = phi i1 [ false, %while.cond367 ], [ %tobool374, %land.rhs370 ]
  br i1 %306, label %while.body377, label %while.end379

while.body377:                                    ; preds = %land.end376
  %307 = load i8*, i8** %textb, align 8, !tbaa !6
  %incdec.ptr378 = getelementptr inbounds i8, i8* %307, i32 1
  store i8* %incdec.ptr378, i8** %textb, align 8, !tbaa !6
  br label %while.cond367

while.end379:                                     ; preds = %land.end376
  br label %if.end380

if.end380:                                        ; preds = %while.end379, %if.else349
  br label %if.end381

if.end381:                                        ; preds = %if.end380, %if.then346
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.then326, %if.then310, %if.then298, %if.then272, %if.then249, %if.then196, %if.end381, %if.then329
  %308 = bitcast i64* %lenb to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %308) #13
  %309 = bitcast i64* %lena to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %309) #13
  %310 = bitcast i8** %ignore to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %310) #13
  %311 = bitcast i8** %translate to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %311) #13
  %cleanup.dest = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest, label %cleanup393 [
    i32 0, label %cleanup.cont
    i32 3, label %while.end385
    i32 27, label %greater
    i32 18, label %not_equal
  ]

cleanup.cont:                                     ; preds = %cleanup
  br label %while.cond

while.end385:                                     ; preds = %cleanup
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup393

greater:                                          ; preds = %cleanup
  store i32 1, i32* %diff, align 4, !tbaa !2
  br label %not_equal

not_equal:                                        ; preds = %greater, %cleanup
  %312 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !tbaa !6
  %reverse = getelementptr inbounds %struct.keyfield, %struct.keyfield* %312, i32 0, i32 13
  %313 = load i8, i8* %reverse, align 1, !tbaa !34, !range !25
  %tobool386 = trunc i8 %313 to i1
  br i1 %tobool386, label %cond.true388, label %cond.false390

cond.true388:                                     ; preds = %not_equal
  %314 = load i32, i32* %diff, align 4, !tbaa !2
  %sub389 = sub nsw i32 0, %314
  br label %cond.end391

cond.false390:                                    ; preds = %not_equal
  %315 = load i32, i32* %diff, align 4, !tbaa !2
  br label %cond.end391

cond.end391:                                      ; preds = %cond.false390, %cond.true388
  %cond392 = phi i32 [ %sub389, %cond.true388 ], [ %315, %cond.false390 ]
  store i32 %cond392, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup393

cleanup393:                                       ; preds = %cond.end391, %while.end385, %cleanup
  %316 = bitcast i32* %diff to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %316) #13
  %317 = bitcast i8** %limb to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %317) #13
  %318 = bitcast i8** %lima to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %318) #13
  %319 = bitcast i8** %textb to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %319) #13
  %320 = bitcast i8** %texta to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %320) #13
  %321 = bitcast %struct.keyfield** %key to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %321) #13
  %322 = load i32, i32* %retval, align 4
  ret i32 %322
}

; Function Attrs: nounwind readonly
declare dso_local i32 @memcmp(i8*, i8*, i64) #5

; Function Attrs: nounwind readonly uwtable
define internal i32 @numcompare(i8* %a, i8* %b) #9 {
entry:
  %a.addr = alloca i8*, align 8
  %b.addr = alloca i8*, align 8
  store i8* %a, i8** %a.addr, align 8, !tbaa !6
  store i8* %b, i8** %b.addr, align 8, !tbaa !6
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i8*, i8** %a.addr, align 8, !tbaa !6
  %1 = load i8, i8* %0, align 1, !tbaa !13
  %call = call zeroext i8 @to_uchar(i8 signext %1)
  %idxprom = zext i8 %call to i64
  %arrayidx = getelementptr inbounds [256 x i8], [256 x i8]* @blanks, i64 0, i64 %idxprom
  %2 = load i8, i8* %arrayidx, align 1, !tbaa !11, !range !25
  %tobool = trunc i8 %2 to i1
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %3 = load i8*, i8** %a.addr, align 8, !tbaa !6
  %incdec.ptr = getelementptr inbounds i8, i8* %3, i32 1
  store i8* %incdec.ptr, i8** %a.addr, align 8, !tbaa !6
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %while.cond1

while.cond1:                                      ; preds = %while.body6, %while.end
  %4 = load i8*, i8** %b.addr, align 8, !tbaa !6
  %5 = load i8, i8* %4, align 1, !tbaa !13
  %call2 = call zeroext i8 @to_uchar(i8 signext %5)
  %idxprom3 = zext i8 %call2 to i64
  %arrayidx4 = getelementptr inbounds [256 x i8], [256 x i8]* @blanks, i64 0, i64 %idxprom3
  %6 = load i8, i8* %arrayidx4, align 1, !tbaa !11, !range !25
  %tobool5 = trunc i8 %6 to i1
  br i1 %tobool5, label %while.body6, label %while.end8

while.body6:                                      ; preds = %while.cond1
  %7 = load i8*, i8** %b.addr, align 8, !tbaa !6
  %incdec.ptr7 = getelementptr inbounds i8, i8* %7, i32 1
  store i8* %incdec.ptr7, i8** %b.addr, align 8, !tbaa !6
  br label %while.cond1

while.end8:                                       ; preds = %while.cond1
  %8 = load i8*, i8** %a.addr, align 8, !tbaa !6
  %9 = load i8*, i8** %b.addr, align 8, !tbaa !6
  %10 = load i8, i8* @decimal_point, align 1, !tbaa !13
  %conv = sext i8 %10 to i32
  %11 = load i32, i32* @thousands_sep, align 4, !tbaa !2
  %call9 = call i32 @strnumcmp(i8* %8, i8* %9, i32 %conv, i32 %11) #22
  ret i32 %call9
}

; Function Attrs: nounwind uwtable
define internal i32 @general_numcompare(i8* %sa, i8* %sb) #7 {
entry:
  %retval = alloca i32, align 4
  %sa.addr = alloca i8*, align 8
  %sb.addr = alloca i8*, align 8
  %ea = alloca i8*, align 8
  %eb = alloca i8*, align 8
  %a = alloca x86_fp80, align 16
  %b = alloca x86_fp80, align 16
  %cleanup.dest.slot = alloca i32, align 4
  store i8* %sa, i8** %sa.addr, align 8, !tbaa !6
  store i8* %sb, i8** %sb.addr, align 8, !tbaa !6
  %0 = bitcast i8** %ea to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #13
  %1 = bitcast i8** %eb to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %1) #13
  %2 = bitcast x86_fp80* %a to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %2) #13
  %3 = load i8*, i8** %sa.addr, align 8, !tbaa !6
  %call = call x86_fp80 @strtold(i8* %3, i8** %ea) #13
  store x86_fp80 %call, x86_fp80* %a, align 16, !tbaa !102
  %4 = bitcast x86_fp80* %b to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %4) #13
  %5 = load i8*, i8** %sb.addr, align 8, !tbaa !6
  %call1 = call x86_fp80 @strtold(i8* %5, i8** %eb) #13
  store x86_fp80 %call1, x86_fp80* %b, align 16, !tbaa !102
  %6 = load i8*, i8** %sa.addr, align 8, !tbaa !6
  %7 = load i8*, i8** %ea, align 8, !tbaa !6
  %cmp = icmp eq i8* %6, %7
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %8 = load i8*, i8** %sb.addr, align 8, !tbaa !6
  %9 = load i8*, i8** %eb, align 8, !tbaa !6
  %cmp2 = icmp eq i8* %8, %9
  %10 = zext i1 %cmp2 to i64
  %cond = select i1 %cmp2, i32 0, i32 -1
  store i32 %cond, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %entry
  %11 = load i8*, i8** %sb.addr, align 8, !tbaa !6
  %12 = load i8*, i8** %eb, align 8, !tbaa !6
  %cmp3 = icmp eq i8* %11, %12
  br i1 %cmp3, label %if.then4, label %if.end5

if.then4:                                         ; preds = %if.end
  store i32 1, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end5:                                          ; preds = %if.end
  %13 = load x86_fp80, x86_fp80* %a, align 16, !tbaa !102
  %14 = load x86_fp80, x86_fp80* %b, align 16, !tbaa !102
  %cmp6 = fcmp olt x86_fp80 %13, %14
  br i1 %cmp6, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end5
  br label %cond.end27

cond.false:                                       ; preds = %if.end5
  %15 = load x86_fp80, x86_fp80* %a, align 16, !tbaa !102
  %16 = load x86_fp80, x86_fp80* %b, align 16, !tbaa !102
  %cmp7 = fcmp ogt x86_fp80 %15, %16
  br i1 %cmp7, label %cond.true8, label %cond.false9

cond.true8:                                       ; preds = %cond.false
  br label %cond.end25

cond.false9:                                      ; preds = %cond.false
  %17 = load x86_fp80, x86_fp80* %a, align 16, !tbaa !102
  %18 = load x86_fp80, x86_fp80* %b, align 16, !tbaa !102
  %cmp10 = fcmp oeq x86_fp80 %17, %18
  br i1 %cmp10, label %cond.true11, label %cond.false12

cond.true11:                                      ; preds = %cond.false9
  br label %cond.end23

cond.false12:                                     ; preds = %cond.false9
  %19 = load x86_fp80, x86_fp80* %b, align 16, !tbaa !102
  %20 = load x86_fp80, x86_fp80* %b, align 16, !tbaa !102
  %cmp13 = fcmp oeq x86_fp80 %19, %20
  br i1 %cmp13, label %cond.true14, label %cond.false15

cond.true14:                                      ; preds = %cond.false12
  br label %cond.end21

cond.false15:                                     ; preds = %cond.false12
  %21 = load x86_fp80, x86_fp80* %a, align 16, !tbaa !102
  %22 = load x86_fp80, x86_fp80* %a, align 16, !tbaa !102
  %cmp16 = fcmp oeq x86_fp80 %21, %22
  br i1 %cmp16, label %cond.true17, label %cond.false18

cond.true17:                                      ; preds = %cond.false15
  br label %cond.end

cond.false18:                                     ; preds = %cond.false15
  %23 = load i8*, i8** %sa.addr, align 8, !tbaa !6
  %24 = load i8*, i8** %sb.addr, align 8, !tbaa !6
  %call19 = call i32 @nan_compare(i8* %23, i8* %24)
  br label %cond.end

cond.end:                                         ; preds = %cond.false18, %cond.true17
  %cond20 = phi i32 [ 1, %cond.true17 ], [ %call19, %cond.false18 ]
  br label %cond.end21

cond.end21:                                       ; preds = %cond.end, %cond.true14
  %cond22 = phi i32 [ -1, %cond.true14 ], [ %cond20, %cond.end ]
  br label %cond.end23

cond.end23:                                       ; preds = %cond.end21, %cond.true11
  %cond24 = phi i32 [ 0, %cond.true11 ], [ %cond22, %cond.end21 ]
  br label %cond.end25

cond.end25:                                       ; preds = %cond.end23, %cond.true8
  %cond26 = phi i32 [ 1, %cond.true8 ], [ %cond24, %cond.end23 ]
  br label %cond.end27

cond.end27:                                       ; preds = %cond.end25, %cond.true
  %cond28 = phi i32 [ -1, %cond.true ], [ %cond26, %cond.end25 ]
  store i32 %cond28, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %cond.end27, %if.then4, %if.then
  %25 = bitcast x86_fp80* %b to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %25) #13
  %26 = bitcast x86_fp80* %a to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %26) #13
  %27 = bitcast i8** %eb to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %27) #13
  %28 = bitcast i8** %ea to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %28) #13
  %29 = load i32, i32* %retval, align 4
  ret i32 %29
}

; Function Attrs: nounwind readonly uwtable
define internal i32 @human_numcompare(i8* %a, i8* %b) #9 {
entry:
  %a.addr = alloca i8*, align 8
  %b.addr = alloca i8*, align 8
  %diff = alloca i32, align 4
  store i8* %a, i8** %a.addr, align 8, !tbaa !6
  store i8* %b, i8** %b.addr, align 8, !tbaa !6
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i8*, i8** %a.addr, align 8, !tbaa !6
  %1 = load i8, i8* %0, align 1, !tbaa !13
  %call = call zeroext i8 @to_uchar(i8 signext %1)
  %idxprom = zext i8 %call to i64
  %arrayidx = getelementptr inbounds [256 x i8], [256 x i8]* @blanks, i64 0, i64 %idxprom
  %2 = load i8, i8* %arrayidx, align 1, !tbaa !11, !range !25
  %tobool = trunc i8 %2 to i1
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %3 = load i8*, i8** %a.addr, align 8, !tbaa !6
  %incdec.ptr = getelementptr inbounds i8, i8* %3, i32 1
  store i8* %incdec.ptr, i8** %a.addr, align 8, !tbaa !6
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %while.cond1

while.cond1:                                      ; preds = %while.body6, %while.end
  %4 = load i8*, i8** %b.addr, align 8, !tbaa !6
  %5 = load i8, i8* %4, align 1, !tbaa !13
  %call2 = call zeroext i8 @to_uchar(i8 signext %5)
  %idxprom3 = zext i8 %call2 to i64
  %arrayidx4 = getelementptr inbounds [256 x i8], [256 x i8]* @blanks, i64 0, i64 %idxprom3
  %6 = load i8, i8* %arrayidx4, align 1, !tbaa !11, !range !25
  %tobool5 = trunc i8 %6 to i1
  br i1 %tobool5, label %while.body6, label %while.end8

while.body6:                                      ; preds = %while.cond1
  %7 = load i8*, i8** %b.addr, align 8, !tbaa !6
  %incdec.ptr7 = getelementptr inbounds i8, i8* %7, i32 1
  store i8* %incdec.ptr7, i8** %b.addr, align 8, !tbaa !6
  br label %while.cond1

while.end8:                                       ; preds = %while.cond1
  %8 = bitcast i32* %diff to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %8) #13
  %9 = load i8*, i8** %a.addr, align 8, !tbaa !6
  %call9 = call i32 @find_unit_order(i8* %9) #22
  %10 = load i8*, i8** %b.addr, align 8, !tbaa !6
  %call10 = call i32 @find_unit_order(i8* %10) #22
  %sub = sub nsw i32 %call9, %call10
  store i32 %sub, i32* %diff, align 4, !tbaa !2
  %11 = load i32, i32* %diff, align 4, !tbaa !2
  %tobool11 = icmp ne i32 %11, 0
  br i1 %tobool11, label %cond.true, label %cond.false

cond.true:                                        ; preds = %while.end8
  %12 = load i32, i32* %diff, align 4, !tbaa !2
  br label %cond.end

cond.false:                                       ; preds = %while.end8
  %13 = load i8*, i8** %a.addr, align 8, !tbaa !6
  %14 = load i8*, i8** %b.addr, align 8, !tbaa !6
  %15 = load i8, i8* @decimal_point, align 1, !tbaa !13
  %conv = sext i8 %15 to i32
  %16 = load i32, i32* @thousands_sep, align 4, !tbaa !2
  %call12 = call i32 @strnumcmp(i8* %13, i8* %14, i32 %conv, i32 %16) #22
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %12, %cond.true ], [ %call12, %cond.false ]
  %17 = bitcast i32* %diff to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %17) #13
  ret i32 %cond
}

; Function Attrs: nounwind uwtable
define internal i32 @compare_random(i8* noalias %texta, i64 %lena, i8* noalias %textb, i64 %lenb) #7 {
entry:
  %texta.addr = alloca i8*, align 8
  %lena.addr = alloca i64, align 8
  %textb.addr = alloca i8*, align 8
  %lenb.addr = alloca i64, align 8
  %xfrm_diff = alloca i32, align 4
  %stackbuf = alloca [4000 x i8], align 16
  %buf = alloca i8*, align 8
  %bufsize = alloca i64, align 8
  %allocated = alloca i8*, align 8
  %dig = alloca [2 x [4 x i32]], align 16
  %s = alloca [2 x %struct.md5_ctx], align 16
  %lima = alloca i8*, align 8
  %limb = alloca i8*, align 8
  %guess_bufsize = alloca i64, align 8
  %sizea = alloca i64, align 8
  %a_fits = alloca i8, align 1
  %sizeb = alloca i64, align 8
  %cleanup.dest.slot = alloca i32, align 4
  %diff = alloca i32, align 4
  store i8* %texta, i8** %texta.addr, align 8, !tbaa !6
  store i64 %lena, i64* %lena.addr, align 8, !tbaa !14
  store i8* %textb, i8** %textb.addr, align 8, !tbaa !6
  store i64 %lenb, i64* %lenb.addr, align 8, !tbaa !14
  %0 = bitcast i32* %xfrm_diff to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #13
  store i32 0, i32* %xfrm_diff, align 4, !tbaa !2
  %1 = bitcast [4000 x i8]* %stackbuf to i8*
  call void @llvm.lifetime.start.p0i8(i64 4000, i8* %1) #13
  %2 = bitcast i8** %buf to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %2) #13
  %arraydecay = getelementptr inbounds [4000 x i8], [4000 x i8]* %stackbuf, i64 0, i64 0
  store i8* %arraydecay, i8** %buf, align 8, !tbaa !6
  %3 = bitcast i64* %bufsize to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %3) #13
  store i64 4000, i64* %bufsize, align 8, !tbaa !14
  %4 = bitcast i8** %allocated to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %4) #13
  store i8* null, i8** %allocated, align 8, !tbaa !6
  %5 = bitcast [2 x [4 x i32]]* %dig to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* %5) #13
  %6 = bitcast [2 x %struct.md5_ctx]* %s to i8*
  call void @llvm.lifetime.start.p0i8(i64 312, i8* %6) #13
  %arrayidx = getelementptr inbounds [2 x %struct.md5_ctx], [2 x %struct.md5_ctx]* %s, i64 0, i64 0
  %arrayidx1 = getelementptr inbounds [2 x %struct.md5_ctx], [2 x %struct.md5_ctx]* %s, i64 0, i64 1
  %7 = bitcast %struct.md5_ctx* %arrayidx1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %7, i8* align 4 bitcast (%struct.md5_ctx* @random_md5_state to i8*), i64 156, i1 false), !tbaa.struct !104
  %8 = bitcast %struct.md5_ctx* %arrayidx to i8*
  %9 = bitcast %struct.md5_ctx* %arrayidx1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %8, i8* align 4 %9, i64 156, i1 false), !tbaa.struct !104
  %10 = load i8, i8* @hard_LC_COLLATE, align 1, !tbaa !11, !range !25
  %tobool = trunc i8 %10 to i1
  br i1 %tobool, label %if.then, label %if.end100

if.then:                                          ; preds = %entry
  %11 = bitcast i8** %lima to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %11) #13
  %12 = load i8*, i8** %texta.addr, align 8, !tbaa !6
  %13 = load i64, i64* %lena.addr, align 8, !tbaa !14
  %add.ptr = getelementptr inbounds i8, i8* %12, i64 %13
  store i8* %add.ptr, i8** %lima, align 8, !tbaa !6
  %14 = bitcast i8** %limb to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %14) #13
  %15 = load i8*, i8** %textb.addr, align 8, !tbaa !6
  %16 = load i64, i64* %lenb.addr, align 8, !tbaa !14
  %add.ptr2 = getelementptr inbounds i8, i8* %15, i64 %16
  store i8* %add.ptr2, i8** %limb, align 8, !tbaa !6
  br label %while.cond

while.cond:                                       ; preds = %cleanup.cont, %if.then
  br label %while.body

while.body:                                       ; preds = %while.cond
  %17 = bitcast i64* %guess_bufsize to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %17) #13
  %18 = load i64, i64* %lena.addr, align 8, !tbaa !14
  %19 = load i64, i64* %lenb.addr, align 8, !tbaa !14
  %add = add i64 %18, %19
  %mul = mul i64 3, %add
  %add3 = add i64 %mul, 2
  store i64 %add3, i64* %guess_bufsize, align 8, !tbaa !14
  %20 = load i64, i64* %bufsize, align 8, !tbaa !14
  %21 = load i64, i64* %guess_bufsize, align 8, !tbaa !14
  %cmp = icmp ult i64 %20, %21
  br i1 %cmp, label %if.then4, label %if.end12

if.then4:                                         ; preds = %while.body
  %22 = load i64, i64* %guess_bufsize, align 8, !tbaa !14
  %23 = load i64, i64* %bufsize, align 8, !tbaa !14
  %mul5 = mul i64 %23, 3
  %div = udiv i64 %mul5, 2
  %cmp6 = icmp ugt i64 %22, %div
  br i1 %cmp6, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then4
  %24 = load i64, i64* %guess_bufsize, align 8, !tbaa !14
  br label %cond.end

cond.false:                                       ; preds = %if.then4
  %25 = load i64, i64* %bufsize, align 8, !tbaa !14
  %mul7 = mul i64 %25, 3
  %div8 = udiv i64 %mul7, 2
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %24, %cond.true ], [ %div8, %cond.false ]
  store i64 %cond, i64* %bufsize, align 8, !tbaa !14
  %26 = load i8*, i8** %allocated, align 8, !tbaa !6
  call void @rpl_free(i8* %26)
  %27 = load i64, i64* %bufsize, align 8, !tbaa !14
  %call = call noalias i8* @malloc(i64 %27) #13
  store i8* %call, i8** %allocated, align 8, !tbaa !6
  store i8* %call, i8** %buf, align 8, !tbaa !6
  %28 = load i8*, i8** %buf, align 8, !tbaa !6
  %tobool9 = icmp ne i8* %28, null
  br i1 %tobool9, label %if.end, label %if.then10

if.then10:                                        ; preds = %cond.end
  %arraydecay11 = getelementptr inbounds [4000 x i8], [4000 x i8]* %stackbuf, i64 0, i64 0
  store i8* %arraydecay11, i8** %buf, align 8, !tbaa !6
  store i64 4000, i64* %bufsize, align 8, !tbaa !14
  br label %if.end

if.end:                                           ; preds = %if.then10, %cond.end
  br label %if.end12

if.end12:                                         ; preds = %if.end, %while.body
  %29 = bitcast i64* %sizea to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %29) #13
  %30 = load i8*, i8** %texta.addr, align 8, !tbaa !6
  %31 = load i8*, i8** %lima, align 8, !tbaa !6
  %cmp13 = icmp ult i8* %30, %31
  br i1 %cmp13, label %cond.true14, label %cond.false17

cond.true14:                                      ; preds = %if.end12
  %32 = load i8*, i8** %buf, align 8, !tbaa !6
  %33 = load i8*, i8** %texta.addr, align 8, !tbaa !6
  %34 = load i64, i64* %bufsize, align 8, !tbaa !14
  %call15 = call i64 @xstrxfrm(i8* %32, i8* %33, i64 %34)
  %add16 = add i64 %call15, 1
  br label %cond.end18

cond.false17:                                     ; preds = %if.end12
  br label %cond.end18

cond.end18:                                       ; preds = %cond.false17, %cond.true14
  %cond19 = phi i64 [ %add16, %cond.true14 ], [ 0, %cond.false17 ]
  store i64 %cond19, i64* %sizea, align 8, !tbaa !14
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %a_fits) #13
  %35 = load i64, i64* %sizea, align 8, !tbaa !14
  %36 = load i64, i64* %bufsize, align 8, !tbaa !14
  %cmp20 = icmp ule i64 %35, %36
  %frombool = zext i1 %cmp20 to i8
  store i8 %frombool, i8* %a_fits, align 1, !tbaa !11
  %37 = bitcast i64* %sizeb to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %37) #13
  %38 = load i8*, i8** %textb.addr, align 8, !tbaa !6
  %39 = load i8*, i8** %limb, align 8, !tbaa !6
  %cmp21 = icmp ult i8* %38, %39
  br i1 %cmp21, label %cond.true22, label %cond.false36

cond.true22:                                      ; preds = %cond.end18
  %40 = load i8, i8* %a_fits, align 1, !tbaa !11, !range !25
  %tobool23 = trunc i8 %40 to i1
  br i1 %tobool23, label %cond.true24, label %cond.false26

cond.true24:                                      ; preds = %cond.true22
  %41 = load i8*, i8** %buf, align 8, !tbaa !6
  %42 = load i64, i64* %sizea, align 8, !tbaa !14
  %add.ptr25 = getelementptr inbounds i8, i8* %41, i64 %42
  br label %cond.end27

cond.false26:                                     ; preds = %cond.true22
  br label %cond.end27

cond.end27:                                       ; preds = %cond.false26, %cond.true24
  %cond28 = phi i8* [ %add.ptr25, %cond.true24 ], [ null, %cond.false26 ]
  %43 = load i8*, i8** %textb.addr, align 8, !tbaa !6
  %44 = load i8, i8* %a_fits, align 1, !tbaa !11, !range !25
  %tobool29 = trunc i8 %44 to i1
  br i1 %tobool29, label %cond.true30, label %cond.false31

cond.true30:                                      ; preds = %cond.end27
  %45 = load i64, i64* %bufsize, align 8, !tbaa !14
  %46 = load i64, i64* %sizea, align 8, !tbaa !14
  %sub = sub i64 %45, %46
  br label %cond.end32

cond.false31:                                     ; preds = %cond.end27
  br label %cond.end32

cond.end32:                                       ; preds = %cond.false31, %cond.true30
  %cond33 = phi i64 [ %sub, %cond.true30 ], [ 0, %cond.false31 ]
  %call34 = call i64 @xstrxfrm(i8* %cond28, i8* %43, i64 %cond33)
  %add35 = add i64 %call34, 1
  br label %cond.end37

cond.false36:                                     ; preds = %cond.end18
  br label %cond.end37

cond.end37:                                       ; preds = %cond.false36, %cond.end32
  %cond38 = phi i64 [ %add35, %cond.end32 ], [ 0, %cond.false36 ]
  store i64 %cond38, i64* %sizeb, align 8, !tbaa !14
  %47 = load i8, i8* %a_fits, align 1, !tbaa !11, !range !25
  %tobool39 = trunc i8 %47 to i1
  br i1 %tobool39, label %land.lhs.true, label %if.then42

land.lhs.true:                                    ; preds = %cond.end37
  %48 = load i64, i64* %sizea, align 8, !tbaa !14
  %49 = load i64, i64* %sizeb, align 8, !tbaa !14
  %add40 = add i64 %48, %49
  %50 = load i64, i64* %bufsize, align 8, !tbaa !14
  %cmp41 = icmp ule i64 %add40, %50
  br i1 %cmp41, label %if.end59, label %if.then42

if.then42:                                        ; preds = %land.lhs.true, %cond.end37
  %51 = load i64, i64* %sizea, align 8, !tbaa !14
  %52 = load i64, i64* %sizeb, align 8, !tbaa !14
  %add43 = add i64 %51, %52
  store i64 %add43, i64* %bufsize, align 8, !tbaa !14
  %53 = load i64, i64* %bufsize, align 8, !tbaa !14
  %cmp44 = icmp ult i64 %53, 6148914691236517205
  br i1 %cmp44, label %if.then45, label %if.end48

if.then45:                                        ; preds = %if.then42
  %54 = load i64, i64* %bufsize, align 8, !tbaa !14
  %mul46 = mul i64 %54, 3
  %div47 = udiv i64 %mul46, 2
  store i64 %div47, i64* %bufsize, align 8, !tbaa !14
  br label %if.end48

if.end48:                                         ; preds = %if.then45, %if.then42
  %55 = load i8*, i8** %allocated, align 8, !tbaa !6
  call void @rpl_free(i8* %55)
  %56 = load i64, i64* %bufsize, align 8, !tbaa !14
  %call49 = call noalias nonnull i8* @xmalloc(i64 %56) #25
  store i8* %call49, i8** %allocated, align 8, !tbaa !6
  store i8* %call49, i8** %buf, align 8, !tbaa !6
  %57 = load i8*, i8** %texta.addr, align 8, !tbaa !6
  %58 = load i8*, i8** %lima, align 8, !tbaa !6
  %cmp50 = icmp ult i8* %57, %58
  br i1 %cmp50, label %if.then51, label %if.end53

if.then51:                                        ; preds = %if.end48
  %59 = load i8*, i8** %buf, align 8, !tbaa !6
  %60 = load i8*, i8** %texta.addr, align 8, !tbaa !6
  %61 = load i64, i64* %sizea, align 8, !tbaa !14
  %call52 = call i64 @strxfrm(i8* %59, i8* %60, i64 %61) #13
  br label %if.end53

if.end53:                                         ; preds = %if.then51, %if.end48
  %62 = load i8*, i8** %textb.addr, align 8, !tbaa !6
  %63 = load i8*, i8** %limb, align 8, !tbaa !6
  %cmp54 = icmp ult i8* %62, %63
  br i1 %cmp54, label %if.then55, label %if.end58

if.then55:                                        ; preds = %if.end53
  %64 = load i8*, i8** %buf, align 8, !tbaa !6
  %65 = load i64, i64* %sizea, align 8, !tbaa !14
  %add.ptr56 = getelementptr inbounds i8, i8* %64, i64 %65
  %66 = load i8*, i8** %textb.addr, align 8, !tbaa !6
  %67 = load i64, i64* %sizeb, align 8, !tbaa !14
  %call57 = call i64 @strxfrm(i8* %add.ptr56, i8* %66, i64 %67) #13
  br label %if.end58

if.end58:                                         ; preds = %if.then55, %if.end53
  br label %if.end59

if.end59:                                         ; preds = %if.end58, %land.lhs.true
  %68 = load i8*, i8** %texta.addr, align 8, !tbaa !6
  %69 = load i8*, i8** %lima, align 8, !tbaa !6
  %cmp60 = icmp ult i8* %68, %69
  br i1 %cmp60, label %if.then61, label %if.end65

if.then61:                                        ; preds = %if.end59
  %70 = load i8*, i8** %texta.addr, align 8, !tbaa !6
  %call62 = call i64 @strlen(i8* %70) #22
  %add63 = add i64 %call62, 1
  %71 = load i8*, i8** %texta.addr, align 8, !tbaa !6
  %add.ptr64 = getelementptr inbounds i8, i8* %71, i64 %add63
  store i8* %add.ptr64, i8** %texta.addr, align 8, !tbaa !6
  br label %if.end65

if.end65:                                         ; preds = %if.then61, %if.end59
  %72 = load i8*, i8** %textb.addr, align 8, !tbaa !6
  %73 = load i8*, i8** %limb, align 8, !tbaa !6
  %cmp66 = icmp ult i8* %72, %73
  br i1 %cmp66, label %if.then67, label %if.end71

if.then67:                                        ; preds = %if.end65
  %74 = load i8*, i8** %textb.addr, align 8, !tbaa !6
  %call68 = call i64 @strlen(i8* %74) #22
  %add69 = add i64 %call68, 1
  %75 = load i8*, i8** %textb.addr, align 8, !tbaa !6
  %add.ptr70 = getelementptr inbounds i8, i8* %75, i64 %add69
  store i8* %add.ptr70, i8** %textb.addr, align 8, !tbaa !6
  br label %if.end71

if.end71:                                         ; preds = %if.then67, %if.end65
  %76 = load i8*, i8** %texta.addr, align 8, !tbaa !6
  %77 = load i8*, i8** %lima, align 8, !tbaa !6
  %cmp72 = icmp ult i8* %76, %77
  br i1 %cmp72, label %if.end76, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end71
  %78 = load i8*, i8** %textb.addr, align 8, !tbaa !6
  %79 = load i8*, i8** %limb, align 8, !tbaa !6
  %cmp73 = icmp ult i8* %78, %79
  br i1 %cmp73, label %if.end76, label %if.then74

if.then74:                                        ; preds = %lor.lhs.false
  %80 = load i64, i64* %sizea, align 8, !tbaa !14
  store i64 %80, i64* %lena.addr, align 8, !tbaa !14
  %81 = load i8*, i8** %buf, align 8, !tbaa !6
  store i8* %81, i8** %texta.addr, align 8, !tbaa !6
  %82 = load i64, i64* %sizeb, align 8, !tbaa !14
  store i64 %82, i64* %lenb.addr, align 8, !tbaa !14
  %83 = load i8*, i8** %buf, align 8, !tbaa !6
  %84 = load i64, i64* %sizea, align 8, !tbaa !14
  %add.ptr75 = getelementptr inbounds i8, i8* %83, i64 %84
  store i8* %add.ptr75, i8** %textb.addr, align 8, !tbaa !6
  store i32 3, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end76:                                         ; preds = %lor.lhs.false, %if.end71
  %85 = load i8*, i8** %buf, align 8, !tbaa !6
  %86 = load i64, i64* %sizea, align 8, !tbaa !14
  %arrayidx77 = getelementptr inbounds [2 x %struct.md5_ctx], [2 x %struct.md5_ctx]* %s, i64 0, i64 0
  call void @md5_process_bytes(i8* %85, i64 %86, %struct.md5_ctx* %arrayidx77) #13
  %87 = load i8*, i8** %buf, align 8, !tbaa !6
  %88 = load i64, i64* %sizea, align 8, !tbaa !14
  %add.ptr78 = getelementptr inbounds i8, i8* %87, i64 %88
  %89 = load i64, i64* %sizeb, align 8, !tbaa !14
  %arrayidx79 = getelementptr inbounds [2 x %struct.md5_ctx], [2 x %struct.md5_ctx]* %s, i64 0, i64 1
  call void @md5_process_bytes(i8* %add.ptr78, i64 %89, %struct.md5_ctx* %arrayidx79) #13
  %90 = load i32, i32* %xfrm_diff, align 4, !tbaa !2
  %tobool80 = icmp ne i32 %90, 0
  br i1 %tobool80, label %if.end96, label %if.then81

if.then81:                                        ; preds = %if.end76
  %91 = load i8*, i8** %buf, align 8, !tbaa !6
  %92 = load i8*, i8** %buf, align 8, !tbaa !6
  %93 = load i64, i64* %sizea, align 8, !tbaa !14
  %add.ptr82 = getelementptr inbounds i8, i8* %92, i64 %93
  %94 = load i64, i64* %sizea, align 8, !tbaa !14
  %95 = load i64, i64* %sizeb, align 8, !tbaa !14
  %cmp83 = icmp ult i64 %94, %95
  br i1 %cmp83, label %cond.true84, label %cond.false85

cond.true84:                                      ; preds = %if.then81
  %96 = load i64, i64* %sizea, align 8, !tbaa !14
  br label %cond.end86

cond.false85:                                     ; preds = %if.then81
  %97 = load i64, i64* %sizeb, align 8, !tbaa !14
  br label %cond.end86

cond.end86:                                       ; preds = %cond.false85, %cond.true84
  %cond87 = phi i64 [ %96, %cond.true84 ], [ %97, %cond.false85 ]
  %call88 = call i32 @memcmp(i8* %91, i8* %add.ptr82, i64 %cond87) #22
  store i32 %call88, i32* %xfrm_diff, align 4, !tbaa !2
  %98 = load i32, i32* %xfrm_diff, align 4, !tbaa !2
  %tobool89 = icmp ne i32 %98, 0
  br i1 %tobool89, label %if.end95, label %if.then90

if.then90:                                        ; preds = %cond.end86
  %99 = load i64, i64* %sizea, align 8, !tbaa !14
  %100 = load i64, i64* %sizeb, align 8, !tbaa !14
  %cmp91 = icmp ugt i64 %99, %100
  %conv = zext i1 %cmp91 to i32
  %101 = load i64, i64* %sizea, align 8, !tbaa !14
  %102 = load i64, i64* %sizeb, align 8, !tbaa !14
  %cmp92 = icmp ult i64 %101, %102
  %conv93 = zext i1 %cmp92 to i32
  %sub94 = sub nsw i32 %conv, %conv93
  store i32 %sub94, i32* %xfrm_diff, align 4, !tbaa !2
  br label %if.end95

if.end95:                                         ; preds = %if.then90, %cond.end86
  br label %if.end96

if.end96:                                         ; preds = %if.end95, %if.end76
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end96, %if.then74
  %103 = bitcast i64* %sizeb to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %103) #13
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %a_fits) #13
  %104 = bitcast i64* %sizea to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %104) #13
  %105 = bitcast i64* %guess_bufsize to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %105) #13
  %cleanup.dest = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest, label %unreachable [
    i32 0, label %cleanup.cont
    i32 3, label %while.end
  ]

cleanup.cont:                                     ; preds = %cleanup
  br label %while.cond

while.end:                                        ; preds = %cleanup
  %106 = bitcast i8** %limb to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %106) #13
  %107 = bitcast i8** %lima to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %107) #13
  br label %if.end100

if.end100:                                        ; preds = %while.end, %entry
  %108 = load i8*, i8** %texta.addr, align 8, !tbaa !6
  %109 = load i64, i64* %lena.addr, align 8, !tbaa !14
  %arrayidx101 = getelementptr inbounds [2 x %struct.md5_ctx], [2 x %struct.md5_ctx]* %s, i64 0, i64 0
  call void @md5_process_bytes(i8* %108, i64 %109, %struct.md5_ctx* %arrayidx101) #13
  %arrayidx102 = getelementptr inbounds [2 x %struct.md5_ctx], [2 x %struct.md5_ctx]* %s, i64 0, i64 0
  %arrayidx103 = getelementptr inbounds [2 x [4 x i32]], [2 x [4 x i32]]* %dig, i64 0, i64 0
  %arraydecay104 = getelementptr inbounds [4 x i32], [4 x i32]* %arrayidx103, i64 0, i64 0
  %110 = bitcast i32* %arraydecay104 to i8*
  %call105 = call i8* @md5_finish_ctx(%struct.md5_ctx* %arrayidx102, i8* %110) #13
  %111 = load i8*, i8** %textb.addr, align 8, !tbaa !6
  %112 = load i64, i64* %lenb.addr, align 8, !tbaa !14
  %arrayidx106 = getelementptr inbounds [2 x %struct.md5_ctx], [2 x %struct.md5_ctx]* %s, i64 0, i64 1
  call void @md5_process_bytes(i8* %111, i64 %112, %struct.md5_ctx* %arrayidx106) #13
  %arrayidx107 = getelementptr inbounds [2 x %struct.md5_ctx], [2 x %struct.md5_ctx]* %s, i64 0, i64 1
  %arrayidx108 = getelementptr inbounds [2 x [4 x i32]], [2 x [4 x i32]]* %dig, i64 0, i64 1
  %arraydecay109 = getelementptr inbounds [4 x i32], [4 x i32]* %arrayidx108, i64 0, i64 0
  %113 = bitcast i32* %arraydecay109 to i8*
  %call110 = call i8* @md5_finish_ctx(%struct.md5_ctx* %arrayidx107, i8* %113) #13
  %114 = bitcast i32* %diff to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %114) #13
  %arrayidx111 = getelementptr inbounds [2 x [4 x i32]], [2 x [4 x i32]]* %dig, i64 0, i64 0
  %arraydecay112 = getelementptr inbounds [4 x i32], [4 x i32]* %arrayidx111, i64 0, i64 0
  %115 = bitcast i32* %arraydecay112 to i8*
  %arrayidx113 = getelementptr inbounds [2 x [4 x i32]], [2 x [4 x i32]]* %dig, i64 0, i64 1
  %arraydecay114 = getelementptr inbounds [4 x i32], [4 x i32]* %arrayidx113, i64 0, i64 0
  %116 = bitcast i32* %arraydecay114 to i8*
  %call115 = call i32 @memcmp(i8* %115, i8* %116, i64 16) #22
  store i32 %call115, i32* %diff, align 4, !tbaa !2
  %117 = load i32, i32* %diff, align 4, !tbaa !2
  %tobool116 = icmp ne i32 %117, 0
  br i1 %tobool116, label %if.end136, label %if.then117

if.then117:                                       ; preds = %if.end100
  %118 = load i32, i32* %xfrm_diff, align 4, !tbaa !2
  %tobool118 = icmp ne i32 %118, 0
  br i1 %tobool118, label %if.end135, label %if.then119

if.then119:                                       ; preds = %if.then117
  %119 = load i8*, i8** %texta.addr, align 8, !tbaa !6
  %120 = load i8*, i8** %textb.addr, align 8, !tbaa !6
  %121 = load i64, i64* %lena.addr, align 8, !tbaa !14
  %122 = load i64, i64* %lenb.addr, align 8, !tbaa !14
  %cmp120 = icmp ult i64 %121, %122
  br i1 %cmp120, label %cond.true122, label %cond.false123

cond.true122:                                     ; preds = %if.then119
  %123 = load i64, i64* %lena.addr, align 8, !tbaa !14
  br label %cond.end124

cond.false123:                                    ; preds = %if.then119
  %124 = load i64, i64* %lenb.addr, align 8, !tbaa !14
  br label %cond.end124

cond.end124:                                      ; preds = %cond.false123, %cond.true122
  %cond125 = phi i64 [ %123, %cond.true122 ], [ %124, %cond.false123 ]
  %call126 = call i32 @memcmp(i8* %119, i8* %120, i64 %cond125) #22
  store i32 %call126, i32* %xfrm_diff, align 4, !tbaa !2
  %125 = load i32, i32* %xfrm_diff, align 4, !tbaa !2
  %tobool127 = icmp ne i32 %125, 0
  br i1 %tobool127, label %if.end134, label %if.then128

if.then128:                                       ; preds = %cond.end124
  %126 = load i64, i64* %lena.addr, align 8, !tbaa !14
  %127 = load i64, i64* %lenb.addr, align 8, !tbaa !14
  %cmp129 = icmp ugt i64 %126, %127
  %conv130 = zext i1 %cmp129 to i32
  %128 = load i64, i64* %lena.addr, align 8, !tbaa !14
  %129 = load i64, i64* %lenb.addr, align 8, !tbaa !14
  %cmp131 = icmp ult i64 %128, %129
  %conv132 = zext i1 %cmp131 to i32
  %sub133 = sub nsw i32 %conv130, %conv132
  store i32 %sub133, i32* %xfrm_diff, align 4, !tbaa !2
  br label %if.end134

if.end134:                                        ; preds = %if.then128, %cond.end124
  br label %if.end135

if.end135:                                        ; preds = %if.end134, %if.then117
  %130 = load i32, i32* %xfrm_diff, align 4, !tbaa !2
  store i32 %130, i32* %diff, align 4, !tbaa !2
  br label %if.end136

if.end136:                                        ; preds = %if.end135, %if.end100
  %131 = load i8*, i8** %allocated, align 8, !tbaa !6
  call void @rpl_free(i8* %131)
  %132 = load i32, i32* %diff, align 4, !tbaa !2
  store i32 1, i32* %cleanup.dest.slot, align 4
  %133 = bitcast i32* %diff to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %133) #13
  %134 = bitcast [2 x %struct.md5_ctx]* %s to i8*
  call void @llvm.lifetime.end.p0i8(i64 312, i8* %134) #13
  %135 = bitcast [2 x [4 x i32]]* %dig to i8*
  call void @llvm.lifetime.end.p0i8(i64 32, i8* %135) #13
  %136 = bitcast i8** %allocated to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %136) #13
  %137 = bitcast i64* %bufsize to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %137) #13
  %138 = bitcast i8** %buf to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %138) #13
  %139 = bitcast [4000 x i8]* %stackbuf to i8*
  call void @llvm.lifetime.end.p0i8(i64 4000, i8* %139) #13
  %140 = bitcast i32* %xfrm_diff to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %140) #13
  ret i32 %132

unreachable:                                      ; preds = %cleanup
  unreachable
}

; Function Attrs: nounwind
declare dso_local noalias i8* @malloc(i64) #6

; Function Attrs: nounwind uwtable
define internal i64 @xstrxfrm(i8* noalias %dest, i8* noalias %src, i64 %destsize) #7 {
entry:
  %dest.addr = alloca i8*, align 8
  %src.addr = alloca i8*, align 8
  %destsize.addr = alloca i64, align 8
  %translated_size = alloca i64, align 8
  store i8* %dest, i8** %dest.addr, align 8, !tbaa !6
  store i8* %src, i8** %src.addr, align 8, !tbaa !6
  store i64 %destsize, i64* %destsize.addr, align 8, !tbaa !14
  %call = call i32* @__errno_location() #26
  store i32 0, i32* %call, align 4, !tbaa !2
  %0 = bitcast i64* %translated_size to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #13
  %1 = load i8*, i8** %dest.addr, align 8, !tbaa !6
  %2 = load i8*, i8** %src.addr, align 8, !tbaa !6
  %3 = load i64, i64* %destsize.addr, align 8, !tbaa !14
  %call1 = call i64 @strxfrm(i8* %1, i8* %2, i64 %3) #13
  store i64 %call1, i64* %translated_size, align 8, !tbaa !14
  %call2 = call i32* @__errno_location() #26
  %4 = load i32, i32* %call2, align 4, !tbaa !2
  %tobool = icmp ne i32 %4, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call3 = call i32* @__errno_location() #26
  %5 = load i32, i32* %call3, align 4, !tbaa !2
  call void (i32, i32, i8*, ...) @error(i32 0, i32 %5, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.168, i64 0, i64 0))
  call void (i32, i32, i8*, ...) @error(i32 0, i32 0, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.169, i64 0, i64 0))
  %6 = load i8*, i8** %src.addr, align 8, !tbaa !6
  %call4 = call i8* @quotearg_n_style(i32 0, i32 8, i8* %6)
  call void (i32, i32, i8*, ...) @error(i32 2, i32 0, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.170, i64 0, i64 0), i8* %call4)
  unreachable

if.end:                                           ; preds = %entry
  %7 = load i64, i64* %translated_size, align 8, !tbaa !14
  %8 = bitcast i64* %translated_size to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %8) #13
  ret i64 %7
}

; Function Attrs: nounwind
declare dso_local i64 @strxfrm(i8*, i8*, i64) #6

; Function Attrs: nounwind readonly
declare dso_local i64 @strlen(i8*) #5

; Function Attrs: nounwind readonly uwtable
define internal i32 @find_unit_order(i8* %number) #9 {
entry:
  %retval = alloca i32, align 4
  %number.addr = alloca i8*, align 8
  %minus_sign = alloca i8, align 1
  %p = alloca i8*, align 8
  %max_digit = alloca i8, align 1
  %ch = alloca i8, align 1
  %order = alloca i32, align 4
  %cleanup.dest.slot = alloca i32, align 4
  store i8* %number, i8** %number.addr, align 8, !tbaa !6
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %minus_sign) #13
  %0 = load i8*, i8** %number.addr, align 8, !tbaa !6
  %1 = load i8, i8* %0, align 1, !tbaa !13
  %conv = sext i8 %1 to i32
  %cmp = icmp eq i32 %conv, 45
  %frombool = zext i1 %cmp to i8
  store i8 %frombool, i8* %minus_sign, align 1, !tbaa !11
  %2 = bitcast i8** %p to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %2) #13
  %3 = load i8*, i8** %number.addr, align 8, !tbaa !6
  %4 = load i8, i8* %minus_sign, align 1, !tbaa !11, !range !25
  %tobool = trunc i8 %4 to i1
  %conv2 = zext i1 %tobool to i32
  %idx.ext = sext i32 %conv2 to i64
  %add.ptr = getelementptr inbounds i8, i8* %3, i64 %idx.ext
  store i8* %add.ptr, i8** %p, align 8, !tbaa !6
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %max_digit) #13
  %call = call signext i8 @traverse_raw_number(i8** %p)
  store i8 %call, i8* %max_digit, align 1, !tbaa !13
  %5 = load i8, i8* %max_digit, align 1, !tbaa !13
  %conv3 = sext i8 %5 to i32
  %cmp4 = icmp slt i32 48, %conv3
  br i1 %cmp4, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %ch) #13
  %6 = load i8*, i8** %p, align 8, !tbaa !6
  %7 = load i8, i8* %6, align 1, !tbaa !13
  store i8 %7, i8* %ch, align 1, !tbaa !13
  %8 = bitcast i32* %order to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %8) #13
  %9 = load i8, i8* %ch, align 1, !tbaa !13
  %idxprom = zext i8 %9 to i64
  %arrayidx = getelementptr inbounds [256 x i8], [256 x i8]* bitcast (<{ [108 x i8], [148 x i8] }>* @unit_order to [256 x i8]*), i64 0, i64 %idxprom
  %10 = load i8, i8* %arrayidx, align 1, !tbaa !13
  %conv6 = sext i8 %10 to i32
  store i32 %conv6, i32* %order, align 4, !tbaa !2
  %11 = load i8, i8* %minus_sign, align 1, !tbaa !11, !range !25
  %tobool7 = trunc i8 %11 to i1
  br i1 %tobool7, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then
  %12 = load i32, i32* %order, align 4, !tbaa !2
  %sub = sub nsw i32 0, %12
  br label %cond.end

cond.false:                                       ; preds = %if.then
  %13 = load i32, i32* %order, align 4, !tbaa !2
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %sub, %cond.true ], [ %13, %cond.false ]
  store i32 %cond, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  %14 = bitcast i32* %order to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %14) #13
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %ch) #13
  br label %cleanup

if.else:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.else, %cond.end
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %max_digit) #13
  %15 = bitcast i8** %p to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %15) #13
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %minus_sign) #13
  %16 = load i32, i32* %retval, align 4
  ret i32 %16
}

; Function Attrs: nounwind uwtable
define internal i32 @nan_compare(i8* %sa, i8* %sb) #7 {
entry:
  %sa.addr = alloca i8*, align 8
  %sb.addr = alloca i8*, align 8
  %a = alloca x86_fp80, align 16
  %b = alloca x86_fp80, align 16
  store i8* %sa, i8** %sa.addr, align 8, !tbaa !6
  store i8* %sb, i8** %sb.addr, align 8, !tbaa !6
  %0 = bitcast x86_fp80* %a to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %0) #13
  %1 = bitcast x86_fp80* %a to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %1, i8 0, i64 16, i1 false)
  %2 = load i8*, i8** %sa.addr, align 8, !tbaa !6
  %call = call x86_fp80 @strtold(i8* %2, i8** null) #13
  store x86_fp80 %call, x86_fp80* %a, align 16, !tbaa !102
  %3 = bitcast x86_fp80* %b to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %3) #13
  %4 = bitcast x86_fp80* %b to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %4, i8 0, i64 16, i1 false)
  %5 = load i8*, i8** %sb.addr, align 8, !tbaa !6
  %call1 = call x86_fp80 @strtold(i8* %5, i8** null) #13
  store x86_fp80 %call1, x86_fp80* %b, align 16, !tbaa !102
  %6 = bitcast x86_fp80* %a to i8*
  %7 = bitcast x86_fp80* %b to i8*
  %call2 = call i32 @memcmp(i8* %6, i8* %7, i64 16) #22
  %8 = bitcast x86_fp80* %b to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %8) #13
  %9 = bitcast x86_fp80* %a to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %9) #13
  ret i32 %call2
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #4

; Function Attrs: nounwind uwtable
define internal i8* @sortlines_thread(i8* %data) #7 {
entry:
  %data.addr = alloca i8*, align 8
  %args = alloca %struct.thread_args*, align 8
  store i8* %data, i8** %data.addr, align 8, !tbaa !6
  %0 = bitcast %struct.thread_args** %args to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #13
  %1 = load i8*, i8** %data.addr, align 8, !tbaa !6
  %2 = bitcast i8* %1 to %struct.thread_args*
  store %struct.thread_args* %2, %struct.thread_args** %args, align 8, !tbaa !6
  %3 = load %struct.thread_args*, %struct.thread_args** %args, align 8, !tbaa !6
  %lines = getelementptr inbounds %struct.thread_args, %struct.thread_args* %3, i32 0, i32 0
  %4 = load %struct.line*, %struct.line** %lines, align 8, !tbaa !91
  %5 = load %struct.thread_args*, %struct.thread_args** %args, align 8, !tbaa !6
  %nthreads = getelementptr inbounds %struct.thread_args, %struct.thread_args* %5, i32 0, i32 1
  %6 = load i64, i64* %nthreads, align 8, !tbaa !93
  %7 = load %struct.thread_args*, %struct.thread_args** %args, align 8, !tbaa !6
  %total_lines = getelementptr inbounds %struct.thread_args, %struct.thread_args* %7, i32 0, i32 2
  %8 = load i64, i64* %total_lines, align 8, !tbaa !94
  %9 = load %struct.thread_args*, %struct.thread_args** %args, align 8, !tbaa !6
  %node = getelementptr inbounds %struct.thread_args, %struct.thread_args* %9, i32 0, i32 3
  %10 = load %struct.merge_node*, %struct.merge_node** %node, align 8, !tbaa !96
  %11 = load %struct.thread_args*, %struct.thread_args** %args, align 8, !tbaa !6
  %queue = getelementptr inbounds %struct.thread_args, %struct.thread_args* %11, i32 0, i32 4
  %12 = load %struct.merge_node_queue*, %struct.merge_node_queue** %queue, align 8, !tbaa !97
  %13 = load %struct.thread_args*, %struct.thread_args** %args, align 8, !tbaa !6
  %tfp = getelementptr inbounds %struct.thread_args, %struct.thread_args* %13, i32 0, i32 5
  %14 = load %struct._IO_FILE*, %struct._IO_FILE** %tfp, align 8, !tbaa !98
  %15 = load %struct.thread_args*, %struct.thread_args** %args, align 8, !tbaa !6
  %output_temp = getelementptr inbounds %struct.thread_args, %struct.thread_args* %15, i32 0, i32 6
  %16 = load i8*, i8** %output_temp, align 8, !tbaa !99
  call void @sortlines(%struct.line* %4, i64 %6, i64 %8, %struct.merge_node* %10, %struct.merge_node_queue* %12, %struct._IO_FILE* %14, i8* %16)
  %17 = bitcast %struct.thread_args** %args to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %17) #13
  ret i8* null
}

; Function Attrs: nounwind
declare !callback !105 dso_local i32 @pthread_create(i64*, %union.pthread_attr_t*, i8* (i8*)*, i8*) #6

declare dso_local i32 @pthread_join(i64, i8**) #1

; Function Attrs: nounwind uwtable
define internal void @sequential_sort(%struct.line* noalias %lines, i64 %nlines, %struct.line* noalias %temp, i1 zeroext %to_temp) #7 {
entry:
  %lines.addr = alloca %struct.line*, align 8
  %nlines.addr = alloca i64, align 8
  %temp.addr = alloca %struct.line*, align 8
  %to_temp.addr = alloca i8, align 1
  %swap = alloca i32, align 4
  %nlo = alloca i64, align 8
  %nhi = alloca i64, align 8
  %lo = alloca %struct.line*, align 8
  %hi = alloca %struct.line*, align 8
  %dest = alloca %struct.line*, align 8
  %sorted_lo = alloca %struct.line*, align 8
  store %struct.line* %lines, %struct.line** %lines.addr, align 8, !tbaa !6
  store i64 %nlines, i64* %nlines.addr, align 8, !tbaa !14
  store %struct.line* %temp, %struct.line** %temp.addr, align 8, !tbaa !6
  %frombool = zext i1 %to_temp to i8
  store i8 %frombool, i8* %to_temp.addr, align 1, !tbaa !11
  %0 = load i64, i64* %nlines.addr, align 8, !tbaa !14
  %cmp = icmp eq i64 %0, 2
  br i1 %cmp, label %if.then, label %if.else18

if.then:                                          ; preds = %entry
  %1 = bitcast i32* %swap to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %1) #13
  %2 = load %struct.line*, %struct.line** %lines.addr, align 8, !tbaa !6
  %arrayidx = getelementptr inbounds %struct.line, %struct.line* %2, i64 -1
  %3 = load %struct.line*, %struct.line** %lines.addr, align 8, !tbaa !6
  %arrayidx1 = getelementptr inbounds %struct.line, %struct.line* %3, i64 -2
  %call = call i32 @compare(%struct.line* %arrayidx, %struct.line* %arrayidx1)
  %cmp2 = icmp slt i32 0, %call
  %conv = zext i1 %cmp2 to i32
  store i32 %conv, i32* %swap, align 4, !tbaa !2
  %4 = load i8, i8* %to_temp.addr, align 1, !tbaa !11, !range !25
  %tobool = trunc i8 %4 to i1
  br i1 %tobool, label %if.then3, label %if.else

if.then3:                                         ; preds = %if.then
  %5 = load %struct.line*, %struct.line** %temp.addr, align 8, !tbaa !6
  %arrayidx4 = getelementptr inbounds %struct.line, %struct.line* %5, i64 -1
  %6 = load %struct.line*, %struct.line** %lines.addr, align 8, !tbaa !6
  %7 = load i32, i32* %swap, align 4, !tbaa !2
  %sub = sub nsw i32 -1, %7
  %idxprom = sext i32 %sub to i64
  %arrayidx5 = getelementptr inbounds %struct.line, %struct.line* %6, i64 %idxprom
  %8 = bitcast %struct.line* %arrayidx4 to i8*
  %9 = bitcast %struct.line* %arrayidx5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %8, i8* align 8 %9, i64 32, i1 false), !tbaa.struct !101
  %10 = load %struct.line*, %struct.line** %temp.addr, align 8, !tbaa !6
  %arrayidx6 = getelementptr inbounds %struct.line, %struct.line* %10, i64 -2
  %11 = load %struct.line*, %struct.line** %lines.addr, align 8, !tbaa !6
  %12 = load i32, i32* %swap, align 4, !tbaa !2
  %add = add nsw i32 -2, %12
  %idxprom7 = sext i32 %add to i64
  %arrayidx8 = getelementptr inbounds %struct.line, %struct.line* %11, i64 %idxprom7
  %13 = bitcast %struct.line* %arrayidx6 to i8*
  %14 = bitcast %struct.line* %arrayidx8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %13, i8* align 8 %14, i64 32, i1 false), !tbaa.struct !101
  br label %if.end17

if.else:                                          ; preds = %if.then
  %15 = load i32, i32* %swap, align 4, !tbaa !2
  %tobool9 = icmp ne i32 %15, 0
  br i1 %tobool9, label %if.then10, label %if.end

if.then10:                                        ; preds = %if.else
  %16 = load %struct.line*, %struct.line** %temp.addr, align 8, !tbaa !6
  %arrayidx11 = getelementptr inbounds %struct.line, %struct.line* %16, i64 -1
  %17 = load %struct.line*, %struct.line** %lines.addr, align 8, !tbaa !6
  %arrayidx12 = getelementptr inbounds %struct.line, %struct.line* %17, i64 -1
  %18 = bitcast %struct.line* %arrayidx11 to i8*
  %19 = bitcast %struct.line* %arrayidx12 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %18, i8* align 8 %19, i64 32, i1 false), !tbaa.struct !101
  %20 = load %struct.line*, %struct.line** %lines.addr, align 8, !tbaa !6
  %arrayidx13 = getelementptr inbounds %struct.line, %struct.line* %20, i64 -1
  %21 = load %struct.line*, %struct.line** %lines.addr, align 8, !tbaa !6
  %arrayidx14 = getelementptr inbounds %struct.line, %struct.line* %21, i64 -2
  %22 = bitcast %struct.line* %arrayidx13 to i8*
  %23 = bitcast %struct.line* %arrayidx14 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %22, i8* align 8 %23, i64 32, i1 false), !tbaa.struct !101
  %24 = load %struct.line*, %struct.line** %lines.addr, align 8, !tbaa !6
  %arrayidx15 = getelementptr inbounds %struct.line, %struct.line* %24, i64 -2
  %25 = load %struct.line*, %struct.line** %temp.addr, align 8, !tbaa !6
  %arrayidx16 = getelementptr inbounds %struct.line, %struct.line* %25, i64 -1
  %26 = bitcast %struct.line* %arrayidx15 to i8*
  %27 = bitcast %struct.line* %arrayidx16 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %26, i8* align 8 %27, i64 32, i1 false), !tbaa.struct !101
  br label %if.end

if.end:                                           ; preds = %if.then10, %if.else
  br label %if.end17

if.end17:                                         ; preds = %if.end, %if.then3
  %28 = bitcast i32* %swap to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %28) #13
  br label %if.end40

if.else18:                                        ; preds = %entry
  %29 = bitcast i64* %nlo to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %29) #13
  %30 = load i64, i64* %nlines.addr, align 8, !tbaa !14
  %div = udiv i64 %30, 2
  store i64 %div, i64* %nlo, align 8, !tbaa !14
  %31 = bitcast i64* %nhi to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %31) #13
  %32 = load i64, i64* %nlines.addr, align 8, !tbaa !14
  %33 = load i64, i64* %nlo, align 8, !tbaa !14
  %sub19 = sub i64 %32, %33
  store i64 %sub19, i64* %nhi, align 8, !tbaa !14
  %34 = bitcast %struct.line** %lo to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %34) #13
  %35 = load %struct.line*, %struct.line** %lines.addr, align 8, !tbaa !6
  store %struct.line* %35, %struct.line** %lo, align 8, !tbaa !6
  %36 = bitcast %struct.line** %hi to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %36) #13
  %37 = load %struct.line*, %struct.line** %lines.addr, align 8, !tbaa !6
  %38 = load i64, i64* %nlo, align 8, !tbaa !14
  %idx.neg = sub i64 0, %38
  %add.ptr = getelementptr inbounds %struct.line, %struct.line* %37, i64 %idx.neg
  store %struct.line* %add.ptr, %struct.line** %hi, align 8, !tbaa !6
  %39 = load %struct.line*, %struct.line** %hi, align 8, !tbaa !6
  %40 = load i64, i64* %nhi, align 8, !tbaa !14
  %41 = load %struct.line*, %struct.line** %temp.addr, align 8, !tbaa !6
  %42 = load i8, i8* %to_temp.addr, align 1, !tbaa !11, !range !25
  %tobool20 = trunc i8 %42 to i1
  br i1 %tobool20, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.else18
  %43 = load i64, i64* %nlo, align 8, !tbaa !14
  br label %cond.end

cond.false:                                       ; preds = %if.else18
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %43, %cond.true ], [ 0, %cond.false ]
  %idx.neg22 = sub i64 0, %cond
  %add.ptr23 = getelementptr inbounds %struct.line, %struct.line* %41, i64 %idx.neg22
  %44 = load i8, i8* %to_temp.addr, align 1, !tbaa !11, !range !25
  %tobool24 = trunc i8 %44 to i1
  call void @sequential_sort(%struct.line* %39, i64 %40, %struct.line* %add.ptr23, i1 zeroext %tobool24)
  %45 = load i64, i64* %nlo, align 8, !tbaa !14
  %cmp25 = icmp ult i64 1, %45
  br i1 %cmp25, label %if.then27, label %if.else29

if.then27:                                        ; preds = %cond.end
  %46 = load %struct.line*, %struct.line** %lo, align 8, !tbaa !6
  %47 = load i64, i64* %nlo, align 8, !tbaa !14
  %48 = load %struct.line*, %struct.line** %temp.addr, align 8, !tbaa !6
  %49 = load i8, i8* %to_temp.addr, align 1, !tbaa !11, !range !25
  %tobool28 = trunc i8 %49 to i1
  %lnot = xor i1 %tobool28, true
  call void @sequential_sort(%struct.line* %46, i64 %47, %struct.line* %48, i1 zeroext %lnot)
  br label %if.end35

if.else29:                                        ; preds = %cond.end
  %50 = load i8, i8* %to_temp.addr, align 1, !tbaa !11, !range !25
  %tobool30 = trunc i8 %50 to i1
  br i1 %tobool30, label %if.end34, label %if.then31

if.then31:                                        ; preds = %if.else29
  %51 = load %struct.line*, %struct.line** %temp.addr, align 8, !tbaa !6
  %arrayidx32 = getelementptr inbounds %struct.line, %struct.line* %51, i64 -1
  %52 = load %struct.line*, %struct.line** %lo, align 8, !tbaa !6
  %arrayidx33 = getelementptr inbounds %struct.line, %struct.line* %52, i64 -1
  %53 = bitcast %struct.line* %arrayidx32 to i8*
  %54 = bitcast %struct.line* %arrayidx33 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %53, i8* align 8 %54, i64 32, i1 false), !tbaa.struct !101
  br label %if.end34

if.end34:                                         ; preds = %if.then31, %if.else29
  br label %if.end35

if.end35:                                         ; preds = %if.end34, %if.then27
  %55 = bitcast %struct.line** %dest to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %55) #13
  %56 = bitcast %struct.line** %sorted_lo to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %56) #13
  %57 = load i8, i8* %to_temp.addr, align 1, !tbaa !11, !range !25
  %tobool36 = trunc i8 %57 to i1
  br i1 %tobool36, label %if.then37, label %if.else38

if.then37:                                        ; preds = %if.end35
  %58 = load %struct.line*, %struct.line** %temp.addr, align 8, !tbaa !6
  store %struct.line* %58, %struct.line** %dest, align 8, !tbaa !6
  %59 = load %struct.line*, %struct.line** %lines.addr, align 8, !tbaa !6
  store %struct.line* %59, %struct.line** %sorted_lo, align 8, !tbaa !6
  br label %if.end39

if.else38:                                        ; preds = %if.end35
  %60 = load %struct.line*, %struct.line** %lines.addr, align 8, !tbaa !6
  store %struct.line* %60, %struct.line** %dest, align 8, !tbaa !6
  %61 = load %struct.line*, %struct.line** %temp.addr, align 8, !tbaa !6
  store %struct.line* %61, %struct.line** %sorted_lo, align 8, !tbaa !6
  br label %if.end39

if.end39:                                         ; preds = %if.else38, %if.then37
  %62 = load %struct.line*, %struct.line** %dest, align 8, !tbaa !6
  %63 = load i64, i64* %nlines.addr, align 8, !tbaa !14
  %64 = load %struct.line*, %struct.line** %sorted_lo, align 8, !tbaa !6
  call void @mergelines(%struct.line* %62, i64 %63, %struct.line* %64)
  %65 = bitcast %struct.line** %sorted_lo to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %65) #13
  %66 = bitcast %struct.line** %dest to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %66) #13
  %67 = bitcast %struct.line** %hi to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %67) #13
  %68 = bitcast %struct.line** %lo to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %68) #13
  %69 = bitcast i64* %nhi to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %69) #13
  %70 = bitcast i64* %nlo to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %70) #13
  br label %if.end40

if.end40:                                         ; preds = %if.end39, %if.end17
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @queue_insert(%struct.merge_node_queue* %queue, %struct.merge_node* %node) #7 {
entry:
  %queue.addr = alloca %struct.merge_node_queue*, align 8
  %node.addr = alloca %struct.merge_node*, align 8
  store %struct.merge_node_queue* %queue, %struct.merge_node_queue** %queue.addr, align 8, !tbaa !6
  store %struct.merge_node* %node, %struct.merge_node** %node.addr, align 8, !tbaa !6
  %0 = load %struct.merge_node_queue*, %struct.merge_node_queue** %queue.addr, align 8, !tbaa !6
  %mutex = getelementptr inbounds %struct.merge_node_queue, %struct.merge_node_queue* %0, i32 0, i32 1
  %call = call i32 @pthread_mutex_lock(%union.pthread_mutex_t* %mutex) #13
  %1 = load %struct.merge_node_queue*, %struct.merge_node_queue** %queue.addr, align 8, !tbaa !6
  %priority_queue = getelementptr inbounds %struct.merge_node_queue, %struct.merge_node_queue* %1, i32 0, i32 0
  %2 = load %struct.heap*, %struct.heap** %priority_queue, align 8, !tbaa !78
  %3 = load %struct.merge_node*, %struct.merge_node** %node.addr, align 8, !tbaa !6
  %4 = bitcast %struct.merge_node* %3 to i8*
  %call1 = call i32 @heap_insert(%struct.heap* %2, i8* %4)
  %5 = load %struct.merge_node*, %struct.merge_node** %node.addr, align 8, !tbaa !6
  %queued = getelementptr inbounds %struct.merge_node, %struct.merge_node* %5, i32 0, i32 11
  store i8 1, i8* %queued, align 4, !tbaa !90
  %6 = load %struct.merge_node_queue*, %struct.merge_node_queue** %queue.addr, align 8, !tbaa !6
  %cond = getelementptr inbounds %struct.merge_node_queue, %struct.merge_node_queue* %6, i32 0, i32 2
  %call2 = call i32 @pthread_cond_signal(%union.pthread_cond_t* %cond) #13
  %7 = load %struct.merge_node_queue*, %struct.merge_node_queue** %queue.addr, align 8, !tbaa !6
  %mutex3 = getelementptr inbounds %struct.merge_node_queue, %struct.merge_node_queue* %7, i32 0, i32 1
  %call4 = call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %mutex3) #13
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @merge_loop(%struct.merge_node_queue* %queue, i64 %total_lines, %struct._IO_FILE* %tfp, i8* %temp_output) #7 {
entry:
  %queue.addr = alloca %struct.merge_node_queue*, align 8
  %total_lines.addr = alloca i64, align 8
  %tfp.addr = alloca %struct._IO_FILE*, align 8
  %temp_output.addr = alloca i8*, align 8
  %node = alloca %struct.merge_node*, align 8
  %cleanup.dest.slot = alloca i32, align 4
  store %struct.merge_node_queue* %queue, %struct.merge_node_queue** %queue.addr, align 8, !tbaa !6
  store i64 %total_lines, i64* %total_lines.addr, align 8, !tbaa !14
  store %struct._IO_FILE* %tfp, %struct._IO_FILE** %tfp.addr, align 8, !tbaa !6
  store i8* %temp_output, i8** %temp_output.addr, align 8, !tbaa !6
  br label %while.body

while.body:                                       ; preds = %entry, %cleanup.cont
  %0 = bitcast %struct.merge_node** %node to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #13
  %1 = load %struct.merge_node_queue*, %struct.merge_node_queue** %queue.addr, align 8, !tbaa !6
  %call = call %struct.merge_node* @queue_pop(%struct.merge_node_queue* %1)
  store %struct.merge_node* %call, %struct.merge_node** %node, align 8, !tbaa !6
  %2 = load %struct.merge_node*, %struct.merge_node** %node, align 8, !tbaa !6
  %level = getelementptr inbounds %struct.merge_node, %struct.merge_node* %2, i32 0, i32 10
  %3 = load i32, i32* %level, align 8, !tbaa !89
  %cmp = icmp eq i32 %3, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  %4 = load %struct.merge_node*, %struct.merge_node** %node, align 8, !tbaa !6
  call void @unlock_node(%struct.merge_node* %4)
  %5 = load %struct.merge_node_queue*, %struct.merge_node_queue** %queue.addr, align 8, !tbaa !6
  %6 = load %struct.merge_node*, %struct.merge_node** %node, align 8, !tbaa !6
  call void @queue_insert(%struct.merge_node_queue* %5, %struct.merge_node* %6)
  store i32 3, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %while.body
  %7 = load %struct.merge_node*, %struct.merge_node** %node, align 8, !tbaa !6
  %8 = load i64, i64* %total_lines.addr, align 8, !tbaa !14
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** %tfp.addr, align 8, !tbaa !6
  %10 = load i8*, i8** %temp_output.addr, align 8, !tbaa !6
  call void @mergelines_node(%struct.merge_node* %7, i64 %8, %struct._IO_FILE* %9, i8* %10)
  %11 = load %struct.merge_node_queue*, %struct.merge_node_queue** %queue.addr, align 8, !tbaa !6
  %12 = load %struct.merge_node*, %struct.merge_node** %node, align 8, !tbaa !6
  call void @queue_check_insert(%struct.merge_node_queue* %11, %struct.merge_node* %12)
  %13 = load %struct.merge_node_queue*, %struct.merge_node_queue** %queue.addr, align 8, !tbaa !6
  %14 = load %struct.merge_node*, %struct.merge_node** %node, align 8, !tbaa !6
  call void @queue_check_insert_parent(%struct.merge_node_queue* %13, %struct.merge_node* %14)
  %15 = load %struct.merge_node*, %struct.merge_node** %node, align 8, !tbaa !6
  call void @unlock_node(%struct.merge_node* %15)
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end, %if.then
  %16 = bitcast %struct.merge_node** %node to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %16) #13
  %cleanup.dest = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest, label %unreachable [
    i32 0, label %cleanup.cont
    i32 3, label %while.end
  ]

cleanup.cont:                                     ; preds = %cleanup
  br label %while.body

while.end:                                        ; preds = %cleanup
  ret void

unreachable:                                      ; preds = %cleanup
  unreachable
}

; Function Attrs: nounwind uwtable
define internal %struct.merge_node* @queue_pop(%struct.merge_node_queue* %queue) #7 {
entry:
  %queue.addr = alloca %struct.merge_node_queue*, align 8
  %node = alloca %struct.merge_node*, align 8
  store %struct.merge_node_queue* %queue, %struct.merge_node_queue** %queue.addr, align 8, !tbaa !6
  %0 = bitcast %struct.merge_node** %node to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #13
  %1 = load %struct.merge_node_queue*, %struct.merge_node_queue** %queue.addr, align 8, !tbaa !6
  %mutex = getelementptr inbounds %struct.merge_node_queue, %struct.merge_node_queue* %1, i32 0, i32 1
  %call = call i32 @pthread_mutex_lock(%union.pthread_mutex_t* %mutex) #13
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %2 = load %struct.merge_node_queue*, %struct.merge_node_queue** %queue.addr, align 8, !tbaa !6
  %priority_queue = getelementptr inbounds %struct.merge_node_queue, %struct.merge_node_queue* %2, i32 0, i32 0
  %3 = load %struct.heap*, %struct.heap** %priority_queue, align 8, !tbaa !78
  %call1 = call i8* @heap_remove_top(%struct.heap* %3)
  %4 = bitcast i8* %call1 to %struct.merge_node*
  store %struct.merge_node* %4, %struct.merge_node** %node, align 8, !tbaa !6
  %tobool = icmp ne %struct.merge_node* %4, null
  %lnot = xor i1 %tobool, true
  br i1 %lnot, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %5 = load %struct.merge_node_queue*, %struct.merge_node_queue** %queue.addr, align 8, !tbaa !6
  %cond = getelementptr inbounds %struct.merge_node_queue, %struct.merge_node_queue* %5, i32 0, i32 2
  %6 = load %struct.merge_node_queue*, %struct.merge_node_queue** %queue.addr, align 8, !tbaa !6
  %mutex2 = getelementptr inbounds %struct.merge_node_queue, %struct.merge_node_queue* %6, i32 0, i32 1
  %call3 = call i32 @pthread_cond_wait(%union.pthread_cond_t* %cond, %union.pthread_mutex_t* %mutex2)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %7 = load %struct.merge_node_queue*, %struct.merge_node_queue** %queue.addr, align 8, !tbaa !6
  %mutex4 = getelementptr inbounds %struct.merge_node_queue, %struct.merge_node_queue* %7, i32 0, i32 1
  %call5 = call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %mutex4) #13
  %8 = load %struct.merge_node*, %struct.merge_node** %node, align 8, !tbaa !6
  call void @lock_node(%struct.merge_node* %8)
  %9 = load %struct.merge_node*, %struct.merge_node** %node, align 8, !tbaa !6
  %queued = getelementptr inbounds %struct.merge_node, %struct.merge_node* %9, i32 0, i32 11
  store i8 0, i8* %queued, align 4, !tbaa !90
  %10 = load %struct.merge_node*, %struct.merge_node** %node, align 8, !tbaa !6
  %11 = bitcast %struct.merge_node** %node to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %11) #13
  ret %struct.merge_node* %10
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @unlock_node(%struct.merge_node* %node) #2 {
entry:
  %node.addr = alloca %struct.merge_node*, align 8
  store %struct.merge_node* %node, %struct.merge_node** %node.addr, align 8, !tbaa !6
  %0 = load %struct.merge_node*, %struct.merge_node** %node.addr, align 8, !tbaa !6
  %lock = getelementptr inbounds %struct.merge_node, %struct.merge_node* %0, i32 0, i32 12
  %call = call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %lock) #13
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @mergelines_node(%struct.merge_node* noalias %node, i64 %total_lines, %struct._IO_FILE* %tfp, i8* %temp_output) #7 {
entry:
  %node.addr = alloca %struct.merge_node*, align 8
  %total_lines.addr = alloca i64, align 8
  %tfp.addr = alloca %struct._IO_FILE*, align 8
  %temp_output.addr = alloca i8*, align 8
  %lo_orig = alloca %struct.line*, align 8
  %hi_orig = alloca %struct.line*, align 8
  %to_merge = alloca i64, align 8
  %merged_lo = alloca i64, align 8
  %merged_hi = alloca i64, align 8
  %dest = alloca %struct.line*, align 8
  store %struct.merge_node* %node, %struct.merge_node** %node.addr, align 8, !tbaa !6
  store i64 %total_lines, i64* %total_lines.addr, align 8, !tbaa !14
  store %struct._IO_FILE* %tfp, %struct._IO_FILE** %tfp.addr, align 8, !tbaa !6
  store i8* %temp_output, i8** %temp_output.addr, align 8, !tbaa !6
  %0 = bitcast %struct.line** %lo_orig to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #13
  %1 = load %struct.merge_node*, %struct.merge_node** %node.addr, align 8, !tbaa !6
  %lo = getelementptr inbounds %struct.merge_node, %struct.merge_node* %1, i32 0, i32 0
  %2 = load %struct.line*, %struct.line** %lo, align 8, !tbaa !84
  store %struct.line* %2, %struct.line** %lo_orig, align 8, !tbaa !6
  %3 = bitcast %struct.line** %hi_orig to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %3) #13
  %4 = load %struct.merge_node*, %struct.merge_node** %node.addr, align 8, !tbaa !6
  %hi = getelementptr inbounds %struct.merge_node, %struct.merge_node* %4, i32 0, i32 1
  %5 = load %struct.line*, %struct.line** %hi, align 8, !tbaa !83
  store %struct.line* %5, %struct.line** %hi_orig, align 8, !tbaa !6
  %6 = bitcast i64* %to_merge to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %6) #13
  %7 = load i64, i64* %total_lines.addr, align 8, !tbaa !14
  %8 = load %struct.merge_node*, %struct.merge_node** %node.addr, align 8, !tbaa !6
  %level = getelementptr inbounds %struct.merge_node, %struct.merge_node* %8, i32 0, i32 10
  %9 = load i32, i32* %level, align 8, !tbaa !89
  %add = add i32 %9, 1
  %mul = mul i32 2, %add
  %sh_prom = zext i32 %mul to i64
  %shr = lshr i64 %7, %sh_prom
  %add1 = add i64 %shr, 1
  store i64 %add1, i64* %to_merge, align 8, !tbaa !14
  %10 = bitcast i64* %merged_lo to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %10) #13
  %11 = bitcast i64* %merged_hi to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %11) #13
  %12 = load %struct.merge_node*, %struct.merge_node** %node.addr, align 8, !tbaa !6
  %level2 = getelementptr inbounds %struct.merge_node, %struct.merge_node* %12, i32 0, i32 10
  %13 = load i32, i32* %level2, align 8, !tbaa !89
  %cmp = icmp ugt i32 %13, 1
  br i1 %cmp, label %if.then, label %if.else58

if.then:                                          ; preds = %entry
  %14 = bitcast %struct.line** %dest to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %14) #13
  %15 = load %struct.merge_node*, %struct.merge_node** %node.addr, align 8, !tbaa !6
  %dest3 = getelementptr inbounds %struct.merge_node, %struct.merge_node* %15, i32 0, i32 4
  %16 = load %struct.line**, %struct.line*** %dest3, align 8, !tbaa !85
  %17 = load %struct.line*, %struct.line** %16, align 8, !tbaa !6
  store %struct.line* %17, %struct.line** %dest, align 8, !tbaa !6
  br label %while.cond

while.cond:                                       ; preds = %if.end, %if.then
  %18 = load %struct.merge_node*, %struct.merge_node** %node.addr, align 8, !tbaa !6
  %lo4 = getelementptr inbounds %struct.merge_node, %struct.merge_node* %18, i32 0, i32 0
  %19 = load %struct.line*, %struct.line** %lo4, align 8, !tbaa !84
  %20 = load %struct.merge_node*, %struct.merge_node** %node.addr, align 8, !tbaa !6
  %end_lo = getelementptr inbounds %struct.merge_node, %struct.merge_node* %20, i32 0, i32 2
  %21 = load %struct.line*, %struct.line** %end_lo, align 8, !tbaa !82
  %cmp5 = icmp ne %struct.line* %19, %21
  br i1 %cmp5, label %land.lhs.true, label %land.end

land.lhs.true:                                    ; preds = %while.cond
  %22 = load %struct.merge_node*, %struct.merge_node** %node.addr, align 8, !tbaa !6
  %hi6 = getelementptr inbounds %struct.merge_node, %struct.merge_node* %22, i32 0, i32 1
  %23 = load %struct.line*, %struct.line** %hi6, align 8, !tbaa !83
  %24 = load %struct.merge_node*, %struct.merge_node** %node.addr, align 8, !tbaa !6
  %end_hi = getelementptr inbounds %struct.merge_node, %struct.merge_node* %24, i32 0, i32 3
  %25 = load %struct.line*, %struct.line** %end_hi, align 8, !tbaa !80
  %cmp7 = icmp ne %struct.line* %23, %25
  br i1 %cmp7, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %land.lhs.true
  %26 = load i64, i64* %to_merge, align 8, !tbaa !14
  %dec = add i64 %26, -1
  store i64 %dec, i64* %to_merge, align 8, !tbaa !14
  %tobool = icmp ne i64 %26, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true, %while.cond
  %27 = phi i1 [ false, %land.lhs.true ], [ false, %while.cond ], [ %tobool, %land.rhs ]
  br i1 %27, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %28 = load %struct.merge_node*, %struct.merge_node** %node.addr, align 8, !tbaa !6
  %lo8 = getelementptr inbounds %struct.merge_node, %struct.merge_node* %28, i32 0, i32 0
  %29 = load %struct.line*, %struct.line** %lo8, align 8, !tbaa !84
  %add.ptr = getelementptr inbounds %struct.line, %struct.line* %29, i64 -1
  %30 = load %struct.merge_node*, %struct.merge_node** %node.addr, align 8, !tbaa !6
  %hi9 = getelementptr inbounds %struct.merge_node, %struct.merge_node* %30, i32 0, i32 1
  %31 = load %struct.line*, %struct.line** %hi9, align 8, !tbaa !83
  %add.ptr10 = getelementptr inbounds %struct.line, %struct.line* %31, i64 -1
  %call = call i32 @compare(%struct.line* %add.ptr, %struct.line* %add.ptr10)
  %cmp11 = icmp sle i32 %call, 0
  br i1 %cmp11, label %if.then12, label %if.else

if.then12:                                        ; preds = %while.body
  %32 = load %struct.line*, %struct.line** %dest, align 8, !tbaa !6
  %incdec.ptr = getelementptr inbounds %struct.line, %struct.line* %32, i32 -1
  store %struct.line* %incdec.ptr, %struct.line** %dest, align 8, !tbaa !6
  %33 = load %struct.merge_node*, %struct.merge_node** %node.addr, align 8, !tbaa !6
  %lo13 = getelementptr inbounds %struct.merge_node, %struct.merge_node* %33, i32 0, i32 0
  %34 = load %struct.line*, %struct.line** %lo13, align 8, !tbaa !84
  %incdec.ptr14 = getelementptr inbounds %struct.line, %struct.line* %34, i32 -1
  store %struct.line* %incdec.ptr14, %struct.line** %lo13, align 8, !tbaa !84
  %35 = bitcast %struct.line* %incdec.ptr to i8*
  %36 = bitcast %struct.line* %incdec.ptr14 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %35, i8* align 8 %36, i64 32, i1 false), !tbaa.struct !101
  br label %if.end

if.else:                                          ; preds = %while.body
  %37 = load %struct.line*, %struct.line** %dest, align 8, !tbaa !6
  %incdec.ptr15 = getelementptr inbounds %struct.line, %struct.line* %37, i32 -1
  store %struct.line* %incdec.ptr15, %struct.line** %dest, align 8, !tbaa !6
  %38 = load %struct.merge_node*, %struct.merge_node** %node.addr, align 8, !tbaa !6
  %hi16 = getelementptr inbounds %struct.merge_node, %struct.merge_node* %38, i32 0, i32 1
  %39 = load %struct.line*, %struct.line** %hi16, align 8, !tbaa !83
  %incdec.ptr17 = getelementptr inbounds %struct.line, %struct.line* %39, i32 -1
  store %struct.line* %incdec.ptr17, %struct.line** %hi16, align 8, !tbaa !83
  %40 = bitcast %struct.line* %incdec.ptr15 to i8*
  %41 = bitcast %struct.line* %incdec.ptr17 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %40, i8* align 8 %41, i64 32, i1 false), !tbaa.struct !101
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then12
  br label %while.cond

while.end:                                        ; preds = %land.end
  %42 = load %struct.line*, %struct.line** %lo_orig, align 8, !tbaa !6
  %43 = load %struct.merge_node*, %struct.merge_node** %node.addr, align 8, !tbaa !6
  %lo18 = getelementptr inbounds %struct.merge_node, %struct.merge_node* %43, i32 0, i32 0
  %44 = load %struct.line*, %struct.line** %lo18, align 8, !tbaa !84
  %sub.ptr.lhs.cast = ptrtoint %struct.line* %42 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.line* %44 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 32
  store i64 %sub.ptr.div, i64* %merged_lo, align 8, !tbaa !14
  %45 = load %struct.line*, %struct.line** %hi_orig, align 8, !tbaa !6
  %46 = load %struct.merge_node*, %struct.merge_node** %node.addr, align 8, !tbaa !6
  %hi19 = getelementptr inbounds %struct.merge_node, %struct.merge_node* %46, i32 0, i32 1
  %47 = load %struct.line*, %struct.line** %hi19, align 8, !tbaa !83
  %sub.ptr.lhs.cast20 = ptrtoint %struct.line* %45 to i64
  %sub.ptr.rhs.cast21 = ptrtoint %struct.line* %47 to i64
  %sub.ptr.sub22 = sub i64 %sub.ptr.lhs.cast20, %sub.ptr.rhs.cast21
  %sub.ptr.div23 = sdiv exact i64 %sub.ptr.sub22, 32
  store i64 %sub.ptr.div23, i64* %merged_hi, align 8, !tbaa !14
  %48 = load %struct.merge_node*, %struct.merge_node** %node.addr, align 8, !tbaa !6
  %nhi = getelementptr inbounds %struct.merge_node, %struct.merge_node* %48, i32 0, i32 6
  %49 = load i64, i64* %nhi, align 8, !tbaa !86
  %50 = load i64, i64* %merged_hi, align 8, !tbaa !14
  %cmp24 = icmp eq i64 %49, %50
  br i1 %cmp24, label %if.then25, label %if.else39

if.then25:                                        ; preds = %while.end
  br label %while.cond26

while.cond26:                                     ; preds = %while.body34, %if.then25
  %51 = load %struct.merge_node*, %struct.merge_node** %node.addr, align 8, !tbaa !6
  %lo27 = getelementptr inbounds %struct.merge_node, %struct.merge_node* %51, i32 0, i32 0
  %52 = load %struct.line*, %struct.line** %lo27, align 8, !tbaa !84
  %53 = load %struct.merge_node*, %struct.merge_node** %node.addr, align 8, !tbaa !6
  %end_lo28 = getelementptr inbounds %struct.merge_node, %struct.merge_node* %53, i32 0, i32 2
  %54 = load %struct.line*, %struct.line** %end_lo28, align 8, !tbaa !82
  %cmp29 = icmp ne %struct.line* %52, %54
  br i1 %cmp29, label %land.rhs30, label %land.end33

land.rhs30:                                       ; preds = %while.cond26
  %55 = load i64, i64* %to_merge, align 8, !tbaa !14
  %dec31 = add i64 %55, -1
  store i64 %dec31, i64* %to_merge, align 8, !tbaa !14
  %tobool32 = icmp ne i64 %55, 0
  br label %land.end33

land.end33:                                       ; preds = %land.rhs30, %while.cond26
  %56 = phi i1 [ false, %while.cond26 ], [ %tobool32, %land.rhs30 ]
  br i1 %56, label %while.body34, label %while.end38

while.body34:                                     ; preds = %land.end33
  %57 = load %struct.line*, %struct.line** %dest, align 8, !tbaa !6
  %incdec.ptr35 = getelementptr inbounds %struct.line, %struct.line* %57, i32 -1
  store %struct.line* %incdec.ptr35, %struct.line** %dest, align 8, !tbaa !6
  %58 = load %struct.merge_node*, %struct.merge_node** %node.addr, align 8, !tbaa !6
  %lo36 = getelementptr inbounds %struct.merge_node, %struct.merge_node* %58, i32 0, i32 0
  %59 = load %struct.line*, %struct.line** %lo36, align 8, !tbaa !84
  %incdec.ptr37 = getelementptr inbounds %struct.line, %struct.line* %59, i32 -1
  store %struct.line* %incdec.ptr37, %struct.line** %lo36, align 8, !tbaa !84
  %60 = bitcast %struct.line* %incdec.ptr35 to i8*
  %61 = bitcast %struct.line* %incdec.ptr37 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %60, i8* align 8 %61, i64 32, i1 false), !tbaa.struct !101
  br label %while.cond26

while.end38:                                      ; preds = %land.end33
  br label %if.end56

if.else39:                                        ; preds = %while.end
  %62 = load %struct.merge_node*, %struct.merge_node** %node.addr, align 8, !tbaa !6
  %nlo = getelementptr inbounds %struct.merge_node, %struct.merge_node* %62, i32 0, i32 5
  %63 = load i64, i64* %nlo, align 8, !tbaa !87
  %64 = load i64, i64* %merged_lo, align 8, !tbaa !14
  %cmp40 = icmp eq i64 %63, %64
  br i1 %cmp40, label %if.then41, label %if.end55

if.then41:                                        ; preds = %if.else39
  br label %while.cond42

while.cond42:                                     ; preds = %while.body50, %if.then41
  %65 = load %struct.merge_node*, %struct.merge_node** %node.addr, align 8, !tbaa !6
  %hi43 = getelementptr inbounds %struct.merge_node, %struct.merge_node* %65, i32 0, i32 1
  %66 = load %struct.line*, %struct.line** %hi43, align 8, !tbaa !83
  %67 = load %struct.merge_node*, %struct.merge_node** %node.addr, align 8, !tbaa !6
  %end_hi44 = getelementptr inbounds %struct.merge_node, %struct.merge_node* %67, i32 0, i32 3
  %68 = load %struct.line*, %struct.line** %end_hi44, align 8, !tbaa !80
  %cmp45 = icmp ne %struct.line* %66, %68
  br i1 %cmp45, label %land.rhs46, label %land.end49

land.rhs46:                                       ; preds = %while.cond42
  %69 = load i64, i64* %to_merge, align 8, !tbaa !14
  %dec47 = add i64 %69, -1
  store i64 %dec47, i64* %to_merge, align 8, !tbaa !14
  %tobool48 = icmp ne i64 %69, 0
  br label %land.end49

land.end49:                                       ; preds = %land.rhs46, %while.cond42
  %70 = phi i1 [ false, %while.cond42 ], [ %tobool48, %land.rhs46 ]
  br i1 %70, label %while.body50, label %while.end54

while.body50:                                     ; preds = %land.end49
  %71 = load %struct.line*, %struct.line** %dest, align 8, !tbaa !6
  %incdec.ptr51 = getelementptr inbounds %struct.line, %struct.line* %71, i32 -1
  store %struct.line* %incdec.ptr51, %struct.line** %dest, align 8, !tbaa !6
  %72 = load %struct.merge_node*, %struct.merge_node** %node.addr, align 8, !tbaa !6
  %hi52 = getelementptr inbounds %struct.merge_node, %struct.merge_node* %72, i32 0, i32 1
  %73 = load %struct.line*, %struct.line** %hi52, align 8, !tbaa !83
  %incdec.ptr53 = getelementptr inbounds %struct.line, %struct.line* %73, i32 -1
  store %struct.line* %incdec.ptr53, %struct.line** %hi52, align 8, !tbaa !83
  %74 = bitcast %struct.line* %incdec.ptr51 to i8*
  %75 = bitcast %struct.line* %incdec.ptr53 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %74, i8* align 8 %75, i64 32, i1 false), !tbaa.struct !101
  br label %while.cond42

while.end54:                                      ; preds = %land.end49
  br label %if.end55

if.end55:                                         ; preds = %while.end54, %if.else39
  br label %if.end56

if.end56:                                         ; preds = %if.end55, %while.end38
  %76 = load %struct.line*, %struct.line** %dest, align 8, !tbaa !6
  %77 = load %struct.merge_node*, %struct.merge_node** %node.addr, align 8, !tbaa !6
  %dest57 = getelementptr inbounds %struct.merge_node, %struct.merge_node* %77, i32 0, i32 4
  %78 = load %struct.line**, %struct.line*** %dest57, align 8, !tbaa !85
  store %struct.line* %76, %struct.line** %78, align 8, !tbaa !6
  %79 = bitcast %struct.line** %dest to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %79) #13
  br label %if.end129

if.else58:                                        ; preds = %entry
  br label %while.cond59

while.cond59:                                     ; preds = %if.end84, %if.else58
  %80 = load %struct.merge_node*, %struct.merge_node** %node.addr, align 8, !tbaa !6
  %lo60 = getelementptr inbounds %struct.merge_node, %struct.merge_node* %80, i32 0, i32 0
  %81 = load %struct.line*, %struct.line** %lo60, align 8, !tbaa !84
  %82 = load %struct.merge_node*, %struct.merge_node** %node.addr, align 8, !tbaa !6
  %end_lo61 = getelementptr inbounds %struct.merge_node, %struct.merge_node* %82, i32 0, i32 2
  %83 = load %struct.line*, %struct.line** %end_lo61, align 8, !tbaa !82
  %cmp62 = icmp ne %struct.line* %81, %83
  br i1 %cmp62, label %land.lhs.true63, label %land.end70

land.lhs.true63:                                  ; preds = %while.cond59
  %84 = load %struct.merge_node*, %struct.merge_node** %node.addr, align 8, !tbaa !6
  %hi64 = getelementptr inbounds %struct.merge_node, %struct.merge_node* %84, i32 0, i32 1
  %85 = load %struct.line*, %struct.line** %hi64, align 8, !tbaa !83
  %86 = load %struct.merge_node*, %struct.merge_node** %node.addr, align 8, !tbaa !6
  %end_hi65 = getelementptr inbounds %struct.merge_node, %struct.merge_node* %86, i32 0, i32 3
  %87 = load %struct.line*, %struct.line** %end_hi65, align 8, !tbaa !80
  %cmp66 = icmp ne %struct.line* %85, %87
  br i1 %cmp66, label %land.rhs67, label %land.end70

land.rhs67:                                       ; preds = %land.lhs.true63
  %88 = load i64, i64* %to_merge, align 8, !tbaa !14
  %dec68 = add i64 %88, -1
  store i64 %dec68, i64* %to_merge, align 8, !tbaa !14
  %tobool69 = icmp ne i64 %88, 0
  br label %land.end70

land.end70:                                       ; preds = %land.rhs67, %land.lhs.true63, %while.cond59
  %89 = phi i1 [ false, %land.lhs.true63 ], [ false, %while.cond59 ], [ %tobool69, %land.rhs67 ]
  br i1 %89, label %while.body71, label %while.end85

while.body71:                                     ; preds = %land.end70
  %90 = load %struct.merge_node*, %struct.merge_node** %node.addr, align 8, !tbaa !6
  %lo72 = getelementptr inbounds %struct.merge_node, %struct.merge_node* %90, i32 0, i32 0
  %91 = load %struct.line*, %struct.line** %lo72, align 8, !tbaa !84
  %add.ptr73 = getelementptr inbounds %struct.line, %struct.line* %91, i64 -1
  %92 = load %struct.merge_node*, %struct.merge_node** %node.addr, align 8, !tbaa !6
  %hi74 = getelementptr inbounds %struct.merge_node, %struct.merge_node* %92, i32 0, i32 1
  %93 = load %struct.line*, %struct.line** %hi74, align 8, !tbaa !83
  %add.ptr75 = getelementptr inbounds %struct.line, %struct.line* %93, i64 -1
  %call76 = call i32 @compare(%struct.line* %add.ptr73, %struct.line* %add.ptr75)
  %cmp77 = icmp sle i32 %call76, 0
  br i1 %cmp77, label %if.then78, label %if.else81

if.then78:                                        ; preds = %while.body71
  %94 = load %struct.merge_node*, %struct.merge_node** %node.addr, align 8, !tbaa !6
  %lo79 = getelementptr inbounds %struct.merge_node, %struct.merge_node* %94, i32 0, i32 0
  %95 = load %struct.line*, %struct.line** %lo79, align 8, !tbaa !84
  %incdec.ptr80 = getelementptr inbounds %struct.line, %struct.line* %95, i32 -1
  store %struct.line* %incdec.ptr80, %struct.line** %lo79, align 8, !tbaa !84
  %96 = load %struct._IO_FILE*, %struct._IO_FILE** %tfp.addr, align 8, !tbaa !6
  %97 = load i8*, i8** %temp_output.addr, align 8, !tbaa !6
  call void @write_unique(%struct.line* %incdec.ptr80, %struct._IO_FILE* %96, i8* %97)
  br label %if.end84

if.else81:                                        ; preds = %while.body71
  %98 = load %struct.merge_node*, %struct.merge_node** %node.addr, align 8, !tbaa !6
  %hi82 = getelementptr inbounds %struct.merge_node, %struct.merge_node* %98, i32 0, i32 1
  %99 = load %struct.line*, %struct.line** %hi82, align 8, !tbaa !83
  %incdec.ptr83 = getelementptr inbounds %struct.line, %struct.line* %99, i32 -1
  store %struct.line* %incdec.ptr83, %struct.line** %hi82, align 8, !tbaa !83
  %100 = load %struct._IO_FILE*, %struct._IO_FILE** %tfp.addr, align 8, !tbaa !6
  %101 = load i8*, i8** %temp_output.addr, align 8, !tbaa !6
  call void @write_unique(%struct.line* %incdec.ptr83, %struct._IO_FILE* %100, i8* %101)
  br label %if.end84

if.end84:                                         ; preds = %if.else81, %if.then78
  br label %while.cond59

while.end85:                                      ; preds = %land.end70
  %102 = load %struct.line*, %struct.line** %lo_orig, align 8, !tbaa !6
  %103 = load %struct.merge_node*, %struct.merge_node** %node.addr, align 8, !tbaa !6
  %lo86 = getelementptr inbounds %struct.merge_node, %struct.merge_node* %103, i32 0, i32 0
  %104 = load %struct.line*, %struct.line** %lo86, align 8, !tbaa !84
  %sub.ptr.lhs.cast87 = ptrtoint %struct.line* %102 to i64
  %sub.ptr.rhs.cast88 = ptrtoint %struct.line* %104 to i64
  %sub.ptr.sub89 = sub i64 %sub.ptr.lhs.cast87, %sub.ptr.rhs.cast88
  %sub.ptr.div90 = sdiv exact i64 %sub.ptr.sub89, 32
  store i64 %sub.ptr.div90, i64* %merged_lo, align 8, !tbaa !14
  %105 = load %struct.line*, %struct.line** %hi_orig, align 8, !tbaa !6
  %106 = load %struct.merge_node*, %struct.merge_node** %node.addr, align 8, !tbaa !6
  %hi91 = getelementptr inbounds %struct.merge_node, %struct.merge_node* %106, i32 0, i32 1
  %107 = load %struct.line*, %struct.line** %hi91, align 8, !tbaa !83
  %sub.ptr.lhs.cast92 = ptrtoint %struct.line* %105 to i64
  %sub.ptr.rhs.cast93 = ptrtoint %struct.line* %107 to i64
  %sub.ptr.sub94 = sub i64 %sub.ptr.lhs.cast92, %sub.ptr.rhs.cast93
  %sub.ptr.div95 = sdiv exact i64 %sub.ptr.sub94, 32
  store i64 %sub.ptr.div95, i64* %merged_hi, align 8, !tbaa !14
  %108 = load %struct.merge_node*, %struct.merge_node** %node.addr, align 8, !tbaa !6
  %nhi96 = getelementptr inbounds %struct.merge_node, %struct.merge_node* %108, i32 0, i32 6
  %109 = load i64, i64* %nhi96, align 8, !tbaa !86
  %110 = load i64, i64* %merged_hi, align 8, !tbaa !14
  %cmp97 = icmp eq i64 %109, %110
  br i1 %cmp97, label %if.then98, label %if.else111

if.then98:                                        ; preds = %while.end85
  br label %while.cond99

while.cond99:                                     ; preds = %while.body107, %if.then98
  %111 = load %struct.merge_node*, %struct.merge_node** %node.addr, align 8, !tbaa !6
  %lo100 = getelementptr inbounds %struct.merge_node, %struct.merge_node* %111, i32 0, i32 0
  %112 = load %struct.line*, %struct.line** %lo100, align 8, !tbaa !84
  %113 = load %struct.merge_node*, %struct.merge_node** %node.addr, align 8, !tbaa !6
  %end_lo101 = getelementptr inbounds %struct.merge_node, %struct.merge_node* %113, i32 0, i32 2
  %114 = load %struct.line*, %struct.line** %end_lo101, align 8, !tbaa !82
  %cmp102 = icmp ne %struct.line* %112, %114
  br i1 %cmp102, label %land.rhs103, label %land.end106

land.rhs103:                                      ; preds = %while.cond99
  %115 = load i64, i64* %to_merge, align 8, !tbaa !14
  %dec104 = add i64 %115, -1
  store i64 %dec104, i64* %to_merge, align 8, !tbaa !14
  %tobool105 = icmp ne i64 %115, 0
  br label %land.end106

land.end106:                                      ; preds = %land.rhs103, %while.cond99
  %116 = phi i1 [ false, %while.cond99 ], [ %tobool105, %land.rhs103 ]
  br i1 %116, label %while.body107, label %while.end110

while.body107:                                    ; preds = %land.end106
  %117 = load %struct.merge_node*, %struct.merge_node** %node.addr, align 8, !tbaa !6
  %lo108 = getelementptr inbounds %struct.merge_node, %struct.merge_node* %117, i32 0, i32 0
  %118 = load %struct.line*, %struct.line** %lo108, align 8, !tbaa !84
  %incdec.ptr109 = getelementptr inbounds %struct.line, %struct.line* %118, i32 -1
  store %struct.line* %incdec.ptr109, %struct.line** %lo108, align 8, !tbaa !84
  %119 = load %struct._IO_FILE*, %struct._IO_FILE** %tfp.addr, align 8, !tbaa !6
  %120 = load i8*, i8** %temp_output.addr, align 8, !tbaa !6
  call void @write_unique(%struct.line* %incdec.ptr109, %struct._IO_FILE* %119, i8* %120)
  br label %while.cond99

while.end110:                                     ; preds = %land.end106
  br label %if.end128

if.else111:                                       ; preds = %while.end85
  %121 = load %struct.merge_node*, %struct.merge_node** %node.addr, align 8, !tbaa !6
  %nlo112 = getelementptr inbounds %struct.merge_node, %struct.merge_node* %121, i32 0, i32 5
  %122 = load i64, i64* %nlo112, align 8, !tbaa !87
  %123 = load i64, i64* %merged_lo, align 8, !tbaa !14
  %cmp113 = icmp eq i64 %122, %123
  br i1 %cmp113, label %if.then114, label %if.end127

if.then114:                                       ; preds = %if.else111
  br label %while.cond115

while.cond115:                                    ; preds = %while.body123, %if.then114
  %124 = load %struct.merge_node*, %struct.merge_node** %node.addr, align 8, !tbaa !6
  %hi116 = getelementptr inbounds %struct.merge_node, %struct.merge_node* %124, i32 0, i32 1
  %125 = load %struct.line*, %struct.line** %hi116, align 8, !tbaa !83
  %126 = load %struct.merge_node*, %struct.merge_node** %node.addr, align 8, !tbaa !6
  %end_hi117 = getelementptr inbounds %struct.merge_node, %struct.merge_node* %126, i32 0, i32 3
  %127 = load %struct.line*, %struct.line** %end_hi117, align 8, !tbaa !80
  %cmp118 = icmp ne %struct.line* %125, %127
  br i1 %cmp118, label %land.rhs119, label %land.end122

land.rhs119:                                      ; preds = %while.cond115
  %128 = load i64, i64* %to_merge, align 8, !tbaa !14
  %dec120 = add i64 %128, -1
  store i64 %dec120, i64* %to_merge, align 8, !tbaa !14
  %tobool121 = icmp ne i64 %128, 0
  br label %land.end122

land.end122:                                      ; preds = %land.rhs119, %while.cond115
  %129 = phi i1 [ false, %while.cond115 ], [ %tobool121, %land.rhs119 ]
  br i1 %129, label %while.body123, label %while.end126

while.body123:                                    ; preds = %land.end122
  %130 = load %struct.merge_node*, %struct.merge_node** %node.addr, align 8, !tbaa !6
  %hi124 = getelementptr inbounds %struct.merge_node, %struct.merge_node* %130, i32 0, i32 1
  %131 = load %struct.line*, %struct.line** %hi124, align 8, !tbaa !83
  %incdec.ptr125 = getelementptr inbounds %struct.line, %struct.line* %131, i32 -1
  store %struct.line* %incdec.ptr125, %struct.line** %hi124, align 8, !tbaa !83
  %132 = load %struct._IO_FILE*, %struct._IO_FILE** %tfp.addr, align 8, !tbaa !6
  %133 = load i8*, i8** %temp_output.addr, align 8, !tbaa !6
  call void @write_unique(%struct.line* %incdec.ptr125, %struct._IO_FILE* %132, i8* %133)
  br label %while.cond115

while.end126:                                     ; preds = %land.end122
  br label %if.end127

if.end127:                                        ; preds = %while.end126, %if.else111
  br label %if.end128

if.end128:                                        ; preds = %if.end127, %while.end110
  br label %if.end129

if.end129:                                        ; preds = %if.end128, %if.end56
  %134 = load %struct.line*, %struct.line** %lo_orig, align 8, !tbaa !6
  %135 = load %struct.merge_node*, %struct.merge_node** %node.addr, align 8, !tbaa !6
  %lo130 = getelementptr inbounds %struct.merge_node, %struct.merge_node* %135, i32 0, i32 0
  %136 = load %struct.line*, %struct.line** %lo130, align 8, !tbaa !84
  %sub.ptr.lhs.cast131 = ptrtoint %struct.line* %134 to i64
  %sub.ptr.rhs.cast132 = ptrtoint %struct.line* %136 to i64
  %sub.ptr.sub133 = sub i64 %sub.ptr.lhs.cast131, %sub.ptr.rhs.cast132
  %sub.ptr.div134 = sdiv exact i64 %sub.ptr.sub133, 32
  store i64 %sub.ptr.div134, i64* %merged_lo, align 8, !tbaa !14
  %137 = load %struct.line*, %struct.line** %hi_orig, align 8, !tbaa !6
  %138 = load %struct.merge_node*, %struct.merge_node** %node.addr, align 8, !tbaa !6
  %hi135 = getelementptr inbounds %struct.merge_node, %struct.merge_node* %138, i32 0, i32 1
  %139 = load %struct.line*, %struct.line** %hi135, align 8, !tbaa !83
  %sub.ptr.lhs.cast136 = ptrtoint %struct.line* %137 to i64
  %sub.ptr.rhs.cast137 = ptrtoint %struct.line* %139 to i64
  %sub.ptr.sub138 = sub i64 %sub.ptr.lhs.cast136, %sub.ptr.rhs.cast137
  %sub.ptr.div139 = sdiv exact i64 %sub.ptr.sub138, 32
  store i64 %sub.ptr.div139, i64* %merged_hi, align 8, !tbaa !14
  %140 = load i64, i64* %merged_lo, align 8, !tbaa !14
  %141 = load %struct.merge_node*, %struct.merge_node** %node.addr, align 8, !tbaa !6
  %nlo140 = getelementptr inbounds %struct.merge_node, %struct.merge_node* %141, i32 0, i32 5
  %142 = load i64, i64* %nlo140, align 8, !tbaa !87
  %sub = sub i64 %142, %140
  store i64 %sub, i64* %nlo140, align 8, !tbaa !87
  %143 = load i64, i64* %merged_hi, align 8, !tbaa !14
  %144 = load %struct.merge_node*, %struct.merge_node** %node.addr, align 8, !tbaa !6
  %nhi141 = getelementptr inbounds %struct.merge_node, %struct.merge_node* %144, i32 0, i32 6
  %145 = load i64, i64* %nhi141, align 8, !tbaa !86
  %sub142 = sub i64 %145, %143
  store i64 %sub142, i64* %nhi141, align 8, !tbaa !86
  %146 = bitcast i64* %merged_hi to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %146) #13
  %147 = bitcast i64* %merged_lo to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %147) #13
  %148 = bitcast i64* %to_merge to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %148) #13
  %149 = bitcast %struct.line** %hi_orig to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %149) #13
  %150 = bitcast %struct.line** %lo_orig to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %150) #13
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @queue_check_insert(%struct.merge_node_queue* %queue, %struct.merge_node* %node) #7 {
entry:
  %queue.addr = alloca %struct.merge_node_queue*, align 8
  %node.addr = alloca %struct.merge_node*, align 8
  %lo_avail = alloca i8, align 1
  %hi_avail = alloca i8, align 1
  store %struct.merge_node_queue* %queue, %struct.merge_node_queue** %queue.addr, align 8, !tbaa !6
  store %struct.merge_node* %node, %struct.merge_node** %node.addr, align 8, !tbaa !6
  %0 = load %struct.merge_node*, %struct.merge_node** %node.addr, align 8, !tbaa !6
  %queued = getelementptr inbounds %struct.merge_node, %struct.merge_node* %0, i32 0, i32 11
  %1 = load i8, i8* %queued, align 4, !tbaa !90, !range !25
  %tobool = trunc i8 %1 to i1
  br i1 %tobool, label %if.end13, label %if.then

if.then:                                          ; preds = %entry
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %lo_avail) #13
  %2 = load %struct.merge_node*, %struct.merge_node** %node.addr, align 8, !tbaa !6
  %lo = getelementptr inbounds %struct.merge_node, %struct.merge_node* %2, i32 0, i32 0
  %3 = load %struct.line*, %struct.line** %lo, align 8, !tbaa !84
  %4 = load %struct.merge_node*, %struct.merge_node** %node.addr, align 8, !tbaa !6
  %end_lo = getelementptr inbounds %struct.merge_node, %struct.merge_node* %4, i32 0, i32 2
  %5 = load %struct.line*, %struct.line** %end_lo, align 8, !tbaa !82
  %sub.ptr.lhs.cast = ptrtoint %struct.line* %3 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.line* %5 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 32
  %cmp = icmp ne i64 %sub.ptr.div, 0
  %frombool = zext i1 %cmp to i8
  store i8 %frombool, i8* %lo_avail, align 1, !tbaa !11
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %hi_avail) #13
  %6 = load %struct.merge_node*, %struct.merge_node** %node.addr, align 8, !tbaa !6
  %hi = getelementptr inbounds %struct.merge_node, %struct.merge_node* %6, i32 0, i32 1
  %7 = load %struct.line*, %struct.line** %hi, align 8, !tbaa !83
  %8 = load %struct.merge_node*, %struct.merge_node** %node.addr, align 8, !tbaa !6
  %end_hi = getelementptr inbounds %struct.merge_node, %struct.merge_node* %8, i32 0, i32 3
  %9 = load %struct.line*, %struct.line** %end_hi, align 8, !tbaa !80
  %sub.ptr.lhs.cast1 = ptrtoint %struct.line* %7 to i64
  %sub.ptr.rhs.cast2 = ptrtoint %struct.line* %9 to i64
  %sub.ptr.sub3 = sub i64 %sub.ptr.lhs.cast1, %sub.ptr.rhs.cast2
  %sub.ptr.div4 = sdiv exact i64 %sub.ptr.sub3, 32
  %cmp5 = icmp ne i64 %sub.ptr.div4, 0
  %frombool6 = zext i1 %cmp5 to i8
  store i8 %frombool6, i8* %hi_avail, align 1, !tbaa !11
  %10 = load i8, i8* %lo_avail, align 1, !tbaa !11, !range !25
  %tobool7 = trunc i8 %10 to i1
  br i1 %tobool7, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then
  %11 = load i8, i8* %hi_avail, align 1, !tbaa !11, !range !25
  %tobool8 = trunc i8 %11 to i1
  br i1 %tobool8, label %if.then12, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %cond.true
  %12 = load %struct.merge_node*, %struct.merge_node** %node.addr, align 8, !tbaa !6
  %nhi = getelementptr inbounds %struct.merge_node, %struct.merge_node* %12, i32 0, i32 6
  %13 = load i64, i64* %nhi, align 8, !tbaa !86
  %tobool9 = icmp ne i64 %13, 0
  br i1 %tobool9, label %if.end, label %if.then12

cond.false:                                       ; preds = %if.then
  %14 = load i8, i8* %hi_avail, align 1, !tbaa !11, !range !25
  %tobool10 = trunc i8 %14 to i1
  br i1 %tobool10, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %cond.false
  %15 = load %struct.merge_node*, %struct.merge_node** %node.addr, align 8, !tbaa !6
  %nlo = getelementptr inbounds %struct.merge_node, %struct.merge_node* %15, i32 0, i32 5
  %16 = load i64, i64* %nlo, align 8, !tbaa !87
  %tobool11 = icmp ne i64 %16, 0
  br i1 %tobool11, label %if.end, label %if.then12

if.then12:                                        ; preds = %land.lhs.true, %lor.lhs.false, %cond.true
  %17 = load %struct.merge_node_queue*, %struct.merge_node_queue** %queue.addr, align 8, !tbaa !6
  %18 = load %struct.merge_node*, %struct.merge_node** %node.addr, align 8, !tbaa !6
  call void @queue_insert(%struct.merge_node_queue* %17, %struct.merge_node* %18)
  br label %if.end

if.end:                                           ; preds = %if.then12, %land.lhs.true, %cond.false, %lor.lhs.false
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %hi_avail) #13
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %lo_avail) #13
  br label %if.end13

if.end13:                                         ; preds = %if.end, %entry
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @queue_check_insert_parent(%struct.merge_node_queue* %queue, %struct.merge_node* %node) #7 {
entry:
  %queue.addr = alloca %struct.merge_node_queue*, align 8
  %node.addr = alloca %struct.merge_node*, align 8
  store %struct.merge_node_queue* %queue, %struct.merge_node_queue** %queue.addr, align 8, !tbaa !6
  store %struct.merge_node* %node, %struct.merge_node** %node.addr, align 8, !tbaa !6
  %0 = load %struct.merge_node*, %struct.merge_node** %node.addr, align 8, !tbaa !6
  %level = getelementptr inbounds %struct.merge_node, %struct.merge_node* %0, i32 0, i32 10
  %1 = load i32, i32* %level, align 8, !tbaa !89
  %cmp = icmp ugt i32 %1, 1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %2 = load %struct.merge_node*, %struct.merge_node** %node.addr, align 8, !tbaa !6
  %parent = getelementptr inbounds %struct.merge_node, %struct.merge_node* %2, i32 0, i32 7
  %3 = load %struct.merge_node*, %struct.merge_node** %parent, align 8, !tbaa !88
  call void @lock_node(%struct.merge_node* %3)
  %4 = load %struct.merge_node_queue*, %struct.merge_node_queue** %queue.addr, align 8, !tbaa !6
  %5 = load %struct.merge_node*, %struct.merge_node** %node.addr, align 8, !tbaa !6
  %parent1 = getelementptr inbounds %struct.merge_node, %struct.merge_node* %5, i32 0, i32 7
  %6 = load %struct.merge_node*, %struct.merge_node** %parent1, align 8, !tbaa !88
  call void @queue_check_insert(%struct.merge_node_queue* %4, %struct.merge_node* %6)
  %7 = load %struct.merge_node*, %struct.merge_node** %node.addr, align 8, !tbaa !6
  %parent2 = getelementptr inbounds %struct.merge_node, %struct.merge_node* %7, i32 0, i32 7
  %8 = load %struct.merge_node*, %struct.merge_node** %parent2, align 8, !tbaa !88
  call void @unlock_node(%struct.merge_node* %8)
  br label %if.end6

if.else:                                          ; preds = %entry
  %9 = load %struct.merge_node*, %struct.merge_node** %node.addr, align 8, !tbaa !6
  %nlo = getelementptr inbounds %struct.merge_node, %struct.merge_node* %9, i32 0, i32 5
  %10 = load i64, i64* %nlo, align 8, !tbaa !87
  %11 = load %struct.merge_node*, %struct.merge_node** %node.addr, align 8, !tbaa !6
  %nhi = getelementptr inbounds %struct.merge_node, %struct.merge_node* %11, i32 0, i32 6
  %12 = load i64, i64* %nhi, align 8, !tbaa !86
  %add = add i64 %10, %12
  %cmp3 = icmp eq i64 %add, 0
  br i1 %cmp3, label %if.then4, label %if.end

if.then4:                                         ; preds = %if.else
  %13 = load %struct.merge_node_queue*, %struct.merge_node_queue** %queue.addr, align 8, !tbaa !6
  %14 = load %struct.merge_node*, %struct.merge_node** %node.addr, align 8, !tbaa !6
  %parent5 = getelementptr inbounds %struct.merge_node, %struct.merge_node* %14, i32 0, i32 7
  %15 = load %struct.merge_node*, %struct.merge_node** %parent5, align 8, !tbaa !88
  call void @queue_insert(%struct.merge_node_queue* %13, %struct.merge_node* %15)
  br label %if.end

if.end:                                           ; preds = %if.then4, %if.else
  br label %if.end6

if.end6:                                          ; preds = %if.end, %if.then
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @lock_node(%struct.merge_node* %node) #2 {
entry:
  %node.addr = alloca %struct.merge_node*, align 8
  store %struct.merge_node* %node, %struct.merge_node** %node.addr, align 8, !tbaa !6
  %0 = load %struct.merge_node*, %struct.merge_node** %node.addr, align 8, !tbaa !6
  %lock = getelementptr inbounds %struct.merge_node, %struct.merge_node* %0, i32 0, i32 12
  %call = call i32 @pthread_mutex_lock(%union.pthread_mutex_t* %lock) #13
  ret void
}

; Function Attrs: nounwind
declare dso_local i32 @pthread_mutex_lock(%union.pthread_mutex_t*) #6

; Function Attrs: nounwind
declare dso_local i32 @pthread_mutex_unlock(%union.pthread_mutex_t*) #6

declare dso_local i32 @pthread_cond_wait(%union.pthread_cond_t*, %union.pthread_mutex_t*) #1

; Function Attrs: nounwind
declare dso_local i32 @pthread_cond_signal(%union.pthread_cond_t*) #6

; Function Attrs: nounwind uwtable
define internal void @mergelines(%struct.line* noalias %t, i64 %nlines, %struct.line* noalias %lo) #7 {
entry:
  %t.addr = alloca %struct.line*, align 8
  %nlines.addr = alloca i64, align 8
  %lo.addr = alloca %struct.line*, align 8
  %nlo = alloca i64, align 8
  %nhi = alloca i64, align 8
  %hi = alloca %struct.line*, align 8
  %cleanup.dest.slot = alloca i32, align 4
  store %struct.line* %t, %struct.line** %t.addr, align 8, !tbaa !6
  store i64 %nlines, i64* %nlines.addr, align 8, !tbaa !14
  store %struct.line* %lo, %struct.line** %lo.addr, align 8, !tbaa !6
  %0 = bitcast i64* %nlo to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #13
  %1 = load i64, i64* %nlines.addr, align 8, !tbaa !14
  %div = udiv i64 %1, 2
  store i64 %div, i64* %nlo, align 8, !tbaa !14
  %2 = bitcast i64* %nhi to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %2) #13
  %3 = load i64, i64* %nlines.addr, align 8, !tbaa !14
  %4 = load i64, i64* %nlo, align 8, !tbaa !14
  %sub = sub i64 %3, %4
  store i64 %sub, i64* %nhi, align 8, !tbaa !14
  %5 = bitcast %struct.line** %hi to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %5) #13
  %6 = load %struct.line*, %struct.line** %t.addr, align 8, !tbaa !6
  %7 = load i64, i64* %nlo, align 8, !tbaa !14
  %idx.neg = sub i64 0, %7
  %add.ptr = getelementptr inbounds %struct.line, %struct.line* %6, i64 %idx.neg
  store %struct.line* %add.ptr, %struct.line** %hi, align 8, !tbaa !6
  br label %while.cond

while.cond:                                       ; preds = %if.end15, %entry
  br label %while.body

while.body:                                       ; preds = %while.cond
  %8 = load %struct.line*, %struct.line** %lo.addr, align 8, !tbaa !6
  %add.ptr1 = getelementptr inbounds %struct.line, %struct.line* %8, i64 -1
  %9 = load %struct.line*, %struct.line** %hi, align 8, !tbaa !6
  %add.ptr2 = getelementptr inbounds %struct.line, %struct.line* %9, i64 -1
  %call = call i32 @compare(%struct.line* %add.ptr1, %struct.line* %add.ptr2)
  %cmp = icmp sle i32 %call, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %while.body
  %10 = load %struct.line*, %struct.line** %t.addr, align 8, !tbaa !6
  %incdec.ptr = getelementptr inbounds %struct.line, %struct.line* %10, i32 -1
  store %struct.line* %incdec.ptr, %struct.line** %t.addr, align 8, !tbaa !6
  %11 = load %struct.line*, %struct.line** %lo.addr, align 8, !tbaa !6
  %incdec.ptr3 = getelementptr inbounds %struct.line, %struct.line* %11, i32 -1
  store %struct.line* %incdec.ptr3, %struct.line** %lo.addr, align 8, !tbaa !6
  %12 = bitcast %struct.line* %incdec.ptr to i8*
  %13 = bitcast %struct.line* %incdec.ptr3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %12, i8* align 8 %13, i64 32, i1 false), !tbaa.struct !101
  %14 = load i64, i64* %nlo, align 8, !tbaa !14
  %dec = add i64 %14, -1
  store i64 %dec, i64* %nlo, align 8, !tbaa !14
  %tobool = icmp ne i64 %dec, 0
  br i1 %tobool, label %if.end, label %if.then4

if.then4:                                         ; preds = %if.then
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %if.then
  br label %if.end15

if.else:                                          ; preds = %while.body
  %15 = load %struct.line*, %struct.line** %t.addr, align 8, !tbaa !6
  %incdec.ptr5 = getelementptr inbounds %struct.line, %struct.line* %15, i32 -1
  store %struct.line* %incdec.ptr5, %struct.line** %t.addr, align 8, !tbaa !6
  %16 = load %struct.line*, %struct.line** %hi, align 8, !tbaa !6
  %incdec.ptr6 = getelementptr inbounds %struct.line, %struct.line* %16, i32 -1
  store %struct.line* %incdec.ptr6, %struct.line** %hi, align 8, !tbaa !6
  %17 = bitcast %struct.line* %incdec.ptr5 to i8*
  %18 = bitcast %struct.line* %incdec.ptr6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %17, i8* align 8 %18, i64 32, i1 false), !tbaa.struct !101
  %19 = load i64, i64* %nhi, align 8, !tbaa !14
  %dec7 = add i64 %19, -1
  store i64 %dec7, i64* %nhi, align 8, !tbaa !14
  %tobool8 = icmp ne i64 %dec7, 0
  br i1 %tobool8, label %if.end14, label %if.then9

if.then9:                                         ; preds = %if.else
  br label %do.body

do.body:                                          ; preds = %do.cond, %if.then9
  %20 = load %struct.line*, %struct.line** %t.addr, align 8, !tbaa !6
  %incdec.ptr10 = getelementptr inbounds %struct.line, %struct.line* %20, i32 -1
  store %struct.line* %incdec.ptr10, %struct.line** %t.addr, align 8, !tbaa !6
  %21 = load %struct.line*, %struct.line** %lo.addr, align 8, !tbaa !6
  %incdec.ptr11 = getelementptr inbounds %struct.line, %struct.line* %21, i32 -1
  store %struct.line* %incdec.ptr11, %struct.line** %lo.addr, align 8, !tbaa !6
  %22 = bitcast %struct.line* %incdec.ptr10 to i8*
  %23 = bitcast %struct.line* %incdec.ptr11 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %22, i8* align 8 %23, i64 32, i1 false), !tbaa.struct !101
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %24 = load i64, i64* %nlo, align 8, !tbaa !14
  %dec12 = add i64 %24, -1
  store i64 %dec12, i64* %nlo, align 8, !tbaa !14
  %tobool13 = icmp ne i64 %dec12, 0
  br i1 %tobool13, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end14:                                         ; preds = %if.else
  br label %if.end15

if.end15:                                         ; preds = %if.end14, %if.end
  br label %while.cond

cleanup:                                          ; preds = %do.end, %if.then4
  %25 = bitcast %struct.line** %hi to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %25) #13
  %26 = bitcast i64* %nhi to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %26) #13
  %27 = bitcast i64* %nlo to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %27) #13
  ret void
}

; Function Attrs: nounwind
declare dso_local i32 @pthread_mutex_init(%union.pthread_mutex_t*, %union.pthread_mutexattr_t*) #6

; Function Attrs: nounwind uwtable
define internal %struct.merge_node* @init_node(%struct.merge_node* noalias %parent, %struct.merge_node* noalias %node_pool, %struct.line* %dest, i64 %nthreads, i64 %total_lines, i1 zeroext %is_lo_child) #7 {
entry:
  %parent.addr = alloca %struct.merge_node*, align 8
  %node_pool.addr = alloca %struct.merge_node*, align 8
  %dest.addr = alloca %struct.line*, align 8
  %nthreads.addr = alloca i64, align 8
  %total_lines.addr = alloca i64, align 8
  %is_lo_child.addr = alloca i8, align 1
  %nlines = alloca i64, align 8
  %nlo1 = alloca i64, align 8
  %nhi2 = alloca i64, align 8
  %lo = alloca %struct.line*, align 8
  %hi = alloca %struct.line*, align 8
  %parent_end = alloca %struct.line**, align 8
  %node = alloca %struct.merge_node*, align 8
  %lo_threads = alloca i64, align 8
  %hi_threads = alloca i64, align 8
  store %struct.merge_node* %parent, %struct.merge_node** %parent.addr, align 8, !tbaa !6
  store %struct.merge_node* %node_pool, %struct.merge_node** %node_pool.addr, align 8, !tbaa !6
  store %struct.line* %dest, %struct.line** %dest.addr, align 8, !tbaa !6
  store i64 %nthreads, i64* %nthreads.addr, align 8, !tbaa !14
  store i64 %total_lines, i64* %total_lines.addr, align 8, !tbaa !14
  %frombool = zext i1 %is_lo_child to i8
  store i8 %frombool, i8* %is_lo_child.addr, align 1, !tbaa !11
  %0 = bitcast i64* %nlines to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #13
  %1 = load i8, i8* %is_lo_child.addr, align 1, !tbaa !11, !range !25
  %tobool = trunc i8 %1 to i1
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %2 = load %struct.merge_node*, %struct.merge_node** %parent.addr, align 8, !tbaa !6
  %nlo = getelementptr inbounds %struct.merge_node, %struct.merge_node* %2, i32 0, i32 5
  %3 = load i64, i64* %nlo, align 8, !tbaa !87
  br label %cond.end

cond.false:                                       ; preds = %entry
  %4 = load %struct.merge_node*, %struct.merge_node** %parent.addr, align 8, !tbaa !6
  %nhi = getelementptr inbounds %struct.merge_node, %struct.merge_node* %4, i32 0, i32 6
  %5 = load i64, i64* %nhi, align 8, !tbaa !86
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %3, %cond.true ], [ %5, %cond.false ]
  store i64 %cond, i64* %nlines, align 8, !tbaa !14
  %6 = bitcast i64* %nlo1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %6) #13
  %7 = load i64, i64* %nlines, align 8, !tbaa !14
  %div = udiv i64 %7, 2
  store i64 %div, i64* %nlo1, align 8, !tbaa !14
  %8 = bitcast i64* %nhi2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %8) #13
  %9 = load i64, i64* %nlines, align 8, !tbaa !14
  %10 = load i64, i64* %nlo1, align 8, !tbaa !14
  %sub = sub i64 %9, %10
  store i64 %sub, i64* %nhi2, align 8, !tbaa !14
  %11 = bitcast %struct.line** %lo to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %11) #13
  %12 = load %struct.line*, %struct.line** %dest.addr, align 8, !tbaa !6
  %13 = load i64, i64* %total_lines.addr, align 8, !tbaa !14
  %idx.neg = sub i64 0, %13
  %add.ptr = getelementptr inbounds %struct.line, %struct.line* %12, i64 %idx.neg
  store %struct.line* %add.ptr, %struct.line** %lo, align 8, !tbaa !6
  %14 = bitcast %struct.line** %hi to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %14) #13
  %15 = load %struct.line*, %struct.line** %lo, align 8, !tbaa !6
  %16 = load i64, i64* %nlo1, align 8, !tbaa !14
  %idx.neg3 = sub i64 0, %16
  %add.ptr4 = getelementptr inbounds %struct.line, %struct.line* %15, i64 %idx.neg3
  store %struct.line* %add.ptr4, %struct.line** %hi, align 8, !tbaa !6
  %17 = bitcast %struct.line*** %parent_end to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %17) #13
  %18 = load i8, i8* %is_lo_child.addr, align 1, !tbaa !11, !range !25
  %tobool5 = trunc i8 %18 to i1
  br i1 %tobool5, label %cond.true6, label %cond.false7

cond.true6:                                       ; preds = %cond.end
  %19 = load %struct.merge_node*, %struct.merge_node** %parent.addr, align 8, !tbaa !6
  %end_lo = getelementptr inbounds %struct.merge_node, %struct.merge_node* %19, i32 0, i32 2
  br label %cond.end8

cond.false7:                                      ; preds = %cond.end
  %20 = load %struct.merge_node*, %struct.merge_node** %parent.addr, align 8, !tbaa !6
  %end_hi = getelementptr inbounds %struct.merge_node, %struct.merge_node* %20, i32 0, i32 3
  br label %cond.end8

cond.end8:                                        ; preds = %cond.false7, %cond.true6
  %cond9 = phi %struct.line** [ %end_lo, %cond.true6 ], [ %end_hi, %cond.false7 ]
  store %struct.line** %cond9, %struct.line*** %parent_end, align 8, !tbaa !6
  %21 = bitcast %struct.merge_node** %node to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %21) #13
  %22 = load %struct.merge_node*, %struct.merge_node** %node_pool.addr, align 8, !tbaa !6
  %incdec.ptr = getelementptr inbounds %struct.merge_node, %struct.merge_node* %22, i32 1
  store %struct.merge_node* %incdec.ptr, %struct.merge_node** %node_pool.addr, align 8, !tbaa !6
  store %struct.merge_node* %22, %struct.merge_node** %node, align 8, !tbaa !6
  %23 = load %struct.line*, %struct.line** %lo, align 8, !tbaa !6
  %24 = load %struct.merge_node*, %struct.merge_node** %node, align 8, !tbaa !6
  %end_lo10 = getelementptr inbounds %struct.merge_node, %struct.merge_node* %24, i32 0, i32 2
  store %struct.line* %23, %struct.line** %end_lo10, align 8, !tbaa !82
  %25 = load %struct.merge_node*, %struct.merge_node** %node, align 8, !tbaa !6
  %lo11 = getelementptr inbounds %struct.merge_node, %struct.merge_node* %25, i32 0, i32 0
  store %struct.line* %23, %struct.line** %lo11, align 8, !tbaa !84
  %26 = load %struct.line*, %struct.line** %hi, align 8, !tbaa !6
  %27 = load %struct.merge_node*, %struct.merge_node** %node, align 8, !tbaa !6
  %end_hi12 = getelementptr inbounds %struct.merge_node, %struct.merge_node* %27, i32 0, i32 3
  store %struct.line* %26, %struct.line** %end_hi12, align 8, !tbaa !80
  %28 = load %struct.merge_node*, %struct.merge_node** %node, align 8, !tbaa !6
  %hi13 = getelementptr inbounds %struct.merge_node, %struct.merge_node* %28, i32 0, i32 1
  store %struct.line* %26, %struct.line** %hi13, align 8, !tbaa !83
  %29 = load %struct.line**, %struct.line*** %parent_end, align 8, !tbaa !6
  %30 = load %struct.merge_node*, %struct.merge_node** %node, align 8, !tbaa !6
  %dest14 = getelementptr inbounds %struct.merge_node, %struct.merge_node* %30, i32 0, i32 4
  store %struct.line** %29, %struct.line*** %dest14, align 8, !tbaa !85
  %31 = load i64, i64* %nlo1, align 8, !tbaa !14
  %32 = load %struct.merge_node*, %struct.merge_node** %node, align 8, !tbaa !6
  %nlo15 = getelementptr inbounds %struct.merge_node, %struct.merge_node* %32, i32 0, i32 5
  store i64 %31, i64* %nlo15, align 8, !tbaa !87
  %33 = load i64, i64* %nhi2, align 8, !tbaa !14
  %34 = load %struct.merge_node*, %struct.merge_node** %node, align 8, !tbaa !6
  %nhi16 = getelementptr inbounds %struct.merge_node, %struct.merge_node* %34, i32 0, i32 6
  store i64 %33, i64* %nhi16, align 8, !tbaa !86
  %35 = load %struct.merge_node*, %struct.merge_node** %parent.addr, align 8, !tbaa !6
  %36 = load %struct.merge_node*, %struct.merge_node** %node, align 8, !tbaa !6
  %parent17 = getelementptr inbounds %struct.merge_node, %struct.merge_node* %36, i32 0, i32 7
  store %struct.merge_node* %35, %struct.merge_node** %parent17, align 8, !tbaa !88
  %37 = load %struct.merge_node*, %struct.merge_node** %parent.addr, align 8, !tbaa !6
  %level = getelementptr inbounds %struct.merge_node, %struct.merge_node* %37, i32 0, i32 10
  %38 = load i32, i32* %level, align 8, !tbaa !89
  %add = add i32 %38, 1
  %39 = load %struct.merge_node*, %struct.merge_node** %node, align 8, !tbaa !6
  %level18 = getelementptr inbounds %struct.merge_node, %struct.merge_node* %39, i32 0, i32 10
  store i32 %add, i32* %level18, align 8, !tbaa !89
  %40 = load %struct.merge_node*, %struct.merge_node** %node, align 8, !tbaa !6
  %queued = getelementptr inbounds %struct.merge_node, %struct.merge_node* %40, i32 0, i32 11
  store i8 0, i8* %queued, align 4, !tbaa !90
  %41 = load %struct.merge_node*, %struct.merge_node** %node, align 8, !tbaa !6
  %lock = getelementptr inbounds %struct.merge_node, %struct.merge_node* %41, i32 0, i32 12
  %call = call i32 @pthread_mutex_init(%union.pthread_mutex_t* %lock, %union.pthread_mutexattr_t* null) #13
  %42 = load i64, i64* %nthreads.addr, align 8, !tbaa !14
  %cmp = icmp ugt i64 %42, 1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %cond.end8
  %43 = bitcast i64* %lo_threads to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %43) #13
  %44 = load i64, i64* %nthreads.addr, align 8, !tbaa !14
  %div19 = udiv i64 %44, 2
  store i64 %div19, i64* %lo_threads, align 8, !tbaa !14
  %45 = bitcast i64* %hi_threads to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %45) #13
  %46 = load i64, i64* %nthreads.addr, align 8, !tbaa !14
  %47 = load i64, i64* %lo_threads, align 8, !tbaa !14
  %sub20 = sub i64 %46, %47
  store i64 %sub20, i64* %hi_threads, align 8, !tbaa !14
  %48 = load %struct.merge_node*, %struct.merge_node** %node_pool.addr, align 8, !tbaa !6
  %49 = load %struct.merge_node*, %struct.merge_node** %node, align 8, !tbaa !6
  %lo_child = getelementptr inbounds %struct.merge_node, %struct.merge_node* %49, i32 0, i32 8
  store %struct.merge_node* %48, %struct.merge_node** %lo_child, align 8, !tbaa !95
  %50 = load %struct.merge_node*, %struct.merge_node** %node, align 8, !tbaa !6
  %51 = load %struct.merge_node*, %struct.merge_node** %node_pool.addr, align 8, !tbaa !6
  %52 = load %struct.line*, %struct.line** %lo, align 8, !tbaa !6
  %53 = load i64, i64* %lo_threads, align 8, !tbaa !14
  %54 = load i64, i64* %total_lines.addr, align 8, !tbaa !14
  %call21 = call %struct.merge_node* @init_node(%struct.merge_node* %50, %struct.merge_node* %51, %struct.line* %52, i64 %53, i64 %54, i1 zeroext true)
  store %struct.merge_node* %call21, %struct.merge_node** %node_pool.addr, align 8, !tbaa !6
  %55 = load %struct.merge_node*, %struct.merge_node** %node_pool.addr, align 8, !tbaa !6
  %56 = load %struct.merge_node*, %struct.merge_node** %node, align 8, !tbaa !6
  %hi_child = getelementptr inbounds %struct.merge_node, %struct.merge_node* %56, i32 0, i32 9
  store %struct.merge_node* %55, %struct.merge_node** %hi_child, align 8, !tbaa !100
  %57 = load %struct.merge_node*, %struct.merge_node** %node, align 8, !tbaa !6
  %58 = load %struct.merge_node*, %struct.merge_node** %node_pool.addr, align 8, !tbaa !6
  %59 = load %struct.line*, %struct.line** %hi, align 8, !tbaa !6
  %60 = load i64, i64* %hi_threads, align 8, !tbaa !14
  %61 = load i64, i64* %total_lines.addr, align 8, !tbaa !14
  %call22 = call %struct.merge_node* @init_node(%struct.merge_node* %57, %struct.merge_node* %58, %struct.line* %59, i64 %60, i64 %61, i1 zeroext false)
  store %struct.merge_node* %call22, %struct.merge_node** %node_pool.addr, align 8, !tbaa !6
  %62 = bitcast i64* %hi_threads to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %62) #13
  %63 = bitcast i64* %lo_threads to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %63) #13
  br label %if.end

if.else:                                          ; preds = %cond.end8
  %64 = load %struct.merge_node*, %struct.merge_node** %node, align 8, !tbaa !6
  %lo_child23 = getelementptr inbounds %struct.merge_node, %struct.merge_node* %64, i32 0, i32 8
  store %struct.merge_node* null, %struct.merge_node** %lo_child23, align 8, !tbaa !95
  %65 = load %struct.merge_node*, %struct.merge_node** %node, align 8, !tbaa !6
  %hi_child24 = getelementptr inbounds %struct.merge_node, %struct.merge_node* %65, i32 0, i32 9
  store %struct.merge_node* null, %struct.merge_node** %hi_child24, align 8, !tbaa !100
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %66 = load %struct.merge_node*, %struct.merge_node** %node_pool.addr, align 8, !tbaa !6
  %67 = bitcast %struct.merge_node** %node to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %67) #13
  %68 = bitcast %struct.line*** %parent_end to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %68) #13
  %69 = bitcast %struct.line** %hi to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %69) #13
  %70 = bitcast %struct.line** %lo to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %70) #13
  %71 = bitcast i64* %nhi2 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %71) #13
  %72 = bitcast i64* %nlo1 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %72) #13
  %73 = bitcast i64* %nlines to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %73) #13
  ret %struct.merge_node* %66
}

; Function Attrs: nounwind uwtable
define internal i32 @compare_nodes(i8* %a, i8* %b) #7 {
entry:
  %retval = alloca i32, align 4
  %a.addr = alloca i8*, align 8
  %b.addr = alloca i8*, align 8
  %nodea = alloca %struct.merge_node*, align 8
  %nodeb = alloca %struct.merge_node*, align 8
  %cleanup.dest.slot = alloca i32, align 4
  store i8* %a, i8** %a.addr, align 8, !tbaa !6
  store i8* %b, i8** %b.addr, align 8, !tbaa !6
  %0 = bitcast %struct.merge_node** %nodea to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #13
  %1 = load i8*, i8** %a.addr, align 8, !tbaa !6
  %2 = bitcast i8* %1 to %struct.merge_node*
  store %struct.merge_node* %2, %struct.merge_node** %nodea, align 8, !tbaa !6
  %3 = bitcast %struct.merge_node** %nodeb to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %3) #13
  %4 = load i8*, i8** %b.addr, align 8, !tbaa !6
  %5 = bitcast i8* %4 to %struct.merge_node*
  store %struct.merge_node* %5, %struct.merge_node** %nodeb, align 8, !tbaa !6
  %6 = load %struct.merge_node*, %struct.merge_node** %nodea, align 8, !tbaa !6
  %level = getelementptr inbounds %struct.merge_node, %struct.merge_node* %6, i32 0, i32 10
  %7 = load i32, i32* %level, align 8, !tbaa !89
  %8 = load %struct.merge_node*, %struct.merge_node** %nodeb, align 8, !tbaa !6
  %level1 = getelementptr inbounds %struct.merge_node, %struct.merge_node* %8, i32 0, i32 10
  %9 = load i32, i32* %level1, align 8, !tbaa !89
  %cmp = icmp eq i32 %7, %9
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %10 = load %struct.merge_node*, %struct.merge_node** %nodea, align 8, !tbaa !6
  %nlo = getelementptr inbounds %struct.merge_node, %struct.merge_node* %10, i32 0, i32 5
  %11 = load i64, i64* %nlo, align 8, !tbaa !87
  %12 = load %struct.merge_node*, %struct.merge_node** %nodea, align 8, !tbaa !6
  %nhi = getelementptr inbounds %struct.merge_node, %struct.merge_node* %12, i32 0, i32 6
  %13 = load i64, i64* %nhi, align 8, !tbaa !86
  %add = add i64 %11, %13
  %14 = load %struct.merge_node*, %struct.merge_node** %nodeb, align 8, !tbaa !6
  %nlo2 = getelementptr inbounds %struct.merge_node, %struct.merge_node* %14, i32 0, i32 5
  %15 = load i64, i64* %nlo2, align 8, !tbaa !87
  %16 = load %struct.merge_node*, %struct.merge_node** %nodeb, align 8, !tbaa !6
  %nhi3 = getelementptr inbounds %struct.merge_node, %struct.merge_node* %16, i32 0, i32 6
  %17 = load i64, i64* %nhi3, align 8, !tbaa !86
  %add4 = add i64 %15, %17
  %cmp5 = icmp ult i64 %add, %add4
  %conv = zext i1 %cmp5 to i32
  store i32 %conv, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %entry
  %18 = load %struct.merge_node*, %struct.merge_node** %nodea, align 8, !tbaa !6
  %level6 = getelementptr inbounds %struct.merge_node, %struct.merge_node* %18, i32 0, i32 10
  %19 = load i32, i32* %level6, align 8, !tbaa !89
  %20 = load %struct.merge_node*, %struct.merge_node** %nodeb, align 8, !tbaa !6
  %level7 = getelementptr inbounds %struct.merge_node, %struct.merge_node* %20, i32 0, i32 10
  %21 = load i32, i32* %level7, align 8, !tbaa !89
  %cmp8 = icmp ult i32 %19, %21
  %conv9 = zext i1 %cmp8 to i32
  store i32 %conv9, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end, %if.then
  %22 = bitcast %struct.merge_node** %nodeb to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %22) #13
  %23 = bitcast %struct.merge_node** %nodea to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %23) #13
  %24 = load i32, i32* %retval, align 4
  ret i32 %24
}

; Function Attrs: nounwind
declare dso_local i32 @pthread_cond_init(%union.pthread_cond_t*, %union.pthread_mutexattr_t*) #6

; Function Attrs: nounwind uwtable
define internal %struct.tempnode* @maybe_create_temp(%struct._IO_FILE** %pfp, i1 zeroext %survive_fd_exhaustion) #7 {
entry:
  %retval = alloca %struct.tempnode*, align 8
  %pfp.addr = alloca %struct._IO_FILE**, align 8
  %survive_fd_exhaustion.addr = alloca i8, align 1
  %tempfd = alloca i32, align 4
  %node = alloca %struct.tempnode*, align 8
  %cleanup.dest.slot = alloca i32, align 4
  %pipefds = alloca [2 x i32], align 4
  store %struct._IO_FILE** %pfp, %struct._IO_FILE*** %pfp.addr, align 8, !tbaa !6
  %frombool = zext i1 %survive_fd_exhaustion to i8
  store i8 %frombool, i8* %survive_fd_exhaustion.addr, align 1, !tbaa !11
  %0 = bitcast i32* %tempfd to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #13
  %1 = bitcast %struct.tempnode** %node to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %1) #13
  %2 = load i8, i8* %survive_fd_exhaustion.addr, align 1, !tbaa !11, !range !25
  %tobool = trunc i8 %2 to i1
  %call = call %struct.tempnode* @create_temp_file(i32* %tempfd, i1 zeroext %tobool)
  store %struct.tempnode* %call, %struct.tempnode** %node, align 8, !tbaa !6
  %3 = load %struct.tempnode*, %struct.tempnode** %node, align 8, !tbaa !6
  %tobool1 = icmp ne %struct.tempnode* %3, null
  br i1 %tobool1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct.tempnode* null, %struct.tempnode** %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %entry
  %4 = load %struct.tempnode*, %struct.tempnode** %node, align 8, !tbaa !6
  %state = getelementptr inbounds %struct.tempnode, %struct.tempnode* %4, i32 0, i32 2
  store i8 0, i8* %state, align 4, !tbaa !13
  %5 = load i8*, i8** @compress_program, align 8, !tbaa !6
  %tobool2 = icmp ne i8* %5, null
  br i1 %tobool2, label %if.then3, label %if.end20

if.then3:                                         ; preds = %if.end
  %6 = bitcast [2 x i32]* %pipefds to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %6) #13
  %arraydecay = getelementptr inbounds [2 x i32], [2 x i32]* %pipefds, i64 0, i64 0
  %call4 = call i32 @pipe_fork(i32* %arraydecay, i64 4)
  %7 = load %struct.tempnode*, %struct.tempnode** %node, align 8, !tbaa !6
  %pid = getelementptr inbounds %struct.tempnode, %struct.tempnode* %7, i32 0, i32 1
  store i32 %call4, i32* %pid, align 8, !tbaa !2
  %8 = load %struct.tempnode*, %struct.tempnode** %node, align 8, !tbaa !6
  %pid5 = getelementptr inbounds %struct.tempnode, %struct.tempnode* %8, i32 0, i32 1
  %9 = load i32, i32* %pid5, align 8, !tbaa !2
  %cmp = icmp slt i32 0, %9
  br i1 %cmp, label %if.then6, label %if.else

if.then6:                                         ; preds = %if.then3
  %10 = load i32, i32* %tempfd, align 4, !tbaa !2
  %call7 = call i32 @close(i32 %10)
  %arrayidx = getelementptr inbounds [2 x i32], [2 x i32]* %pipefds, i64 0, i64 0
  %11 = load i32, i32* %arrayidx, align 4, !tbaa !2
  %call8 = call i32 @close(i32 %11)
  %arrayidx9 = getelementptr inbounds [2 x i32], [2 x i32]* %pipefds, i64 0, i64 1
  %12 = load i32, i32* %arrayidx9, align 4, !tbaa !2
  store i32 %12, i32* %tempfd, align 4, !tbaa !2
  %13 = load %struct.tempnode*, %struct.tempnode** %node, align 8, !tbaa !6
  call void @register_proc(%struct.tempnode* %13)
  br label %if.end19

if.else:                                          ; preds = %if.then3
  %14 = load %struct.tempnode*, %struct.tempnode** %node, align 8, !tbaa !6
  %pid10 = getelementptr inbounds %struct.tempnode, %struct.tempnode* %14, i32 0, i32 1
  %15 = load i32, i32* %pid10, align 8, !tbaa !2
  %cmp11 = icmp eq i32 %15, 0
  br i1 %cmp11, label %if.then12, label %if.end18

if.then12:                                        ; preds = %if.else
  %arrayidx13 = getelementptr inbounds [2 x i32], [2 x i32]* %pipefds, i64 0, i64 1
  %16 = load i32, i32* %arrayidx13, align 4, !tbaa !2
  %call14 = call i32 @close(i32 %16)
  %17 = load i32, i32* %tempfd, align 4, !tbaa !2
  call void @move_fd(i32 %17, i32 1)
  %arrayidx15 = getelementptr inbounds [2 x i32], [2 x i32]* %pipefds, i64 0, i64 0
  %18 = load i32, i32* %arrayidx15, align 4, !tbaa !2
  call void @move_fd(i32 %18, i32 0)
  %19 = load i8*, i8** @compress_program, align 8, !tbaa !6
  %20 = load i8*, i8** @compress_program, align 8, !tbaa !6
  %call16 = call i32 (i8*, i8*, ...) @execlp(i8* %19, i8* %20, i8* null) #13
  %call17 = call i32* @__errno_location() #26
  %21 = load i32, i32* %call17, align 4, !tbaa !2
  call void @async_safe_die(i32 %21, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.183, i64 0, i64 0)) #24
  unreachable

if.end18:                                         ; preds = %if.else
  br label %if.end19

if.end19:                                         ; preds = %if.end18, %if.then6
  %22 = bitcast [2 x i32]* %pipefds to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %22) #13
  br label %if.end20

if.end20:                                         ; preds = %if.end19, %if.end
  %23 = load i32, i32* %tempfd, align 4, !tbaa !2
  %call21 = call %struct._IO_FILE* @fdopen(i32 %23, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.174, i64 0, i64 0)) #13
  %24 = load %struct._IO_FILE**, %struct._IO_FILE*** %pfp.addr, align 8, !tbaa !6
  store %struct._IO_FILE* %call21, %struct._IO_FILE** %24, align 8, !tbaa !6
  %25 = load %struct._IO_FILE**, %struct._IO_FILE*** %pfp.addr, align 8, !tbaa !6
  %26 = load %struct._IO_FILE*, %struct._IO_FILE** %25, align 8, !tbaa !6
  %tobool22 = icmp ne %struct._IO_FILE* %26, null
  br i1 %tobool22, label %if.end25, label %if.then23

if.then23:                                        ; preds = %if.end20
  %27 = load %struct.tempnode*, %struct.tempnode** %node, align 8, !tbaa !6
  %name = getelementptr inbounds %struct.tempnode, %struct.tempnode* %27, i32 0, i32 3
  %arraydecay24 = getelementptr inbounds [0 x i8], [0 x i8]* %name, i64 0, i64 0
  call void @sort_die(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.184, i64 0, i64 0), i8* %arraydecay24)
  br label %if.end25

if.end25:                                         ; preds = %if.then23, %if.end20
  %28 = load %struct.tempnode*, %struct.tempnode** %node, align 8, !tbaa !6
  store %struct.tempnode* %28, %struct.tempnode** %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end25, %if.then
  %29 = bitcast %struct.tempnode** %node to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %29) #13
  %30 = bitcast i32* %tempfd to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %30) #13
  %31 = load %struct.tempnode*, %struct.tempnode** %retval, align 8
  ret %struct.tempnode* %31
}

; Function Attrs: nounwind uwtable
define internal %struct.tempnode* @create_temp_file(i32* %pfd, i1 zeroext %survive_fd_exhaustion) #7 {
entry:
  %pfd.addr = alloca i32*, align 8
  %survive_fd_exhaustion.addr = alloca i8, align 1
  %fd = alloca i32, align 4
  %saved_errno = alloca i32, align 4
  %temp_dir = alloca i8*, align 8
  %len = alloca i64, align 8
  %node = alloca %struct.tempnode*, align 8
  %file = alloca i8*, align 8
  %cs = alloca %struct.cs_status, align 8
  store i32* %pfd, i32** %pfd.addr, align 8, !tbaa !6
  %frombool = zext i1 %survive_fd_exhaustion to i8
  store i8 %frombool, i8* %survive_fd_exhaustion.addr, align 1, !tbaa !11
  %0 = bitcast i32* %fd to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #13
  %1 = bitcast i32* %saved_errno to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %1) #13
  %2 = bitcast i8** %temp_dir to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %2) #13
  %3 = load i8**, i8*** @temp_dirs, align 8, !tbaa !6
  %4 = load i64, i64* @create_temp_file.temp_dir_index, align 8, !tbaa !14
  %arrayidx = getelementptr inbounds i8*, i8** %3, i64 %4
  %5 = load i8*, i8** %arrayidx, align 8, !tbaa !6
  store i8* %5, i8** %temp_dir, align 8, !tbaa !6
  %6 = bitcast i64* %len to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %6) #13
  %7 = load i8*, i8** %temp_dir, align 8, !tbaa !6
  %call = call i64 @strlen(i8* %7) #22
  store i64 %call, i64* %len, align 8, !tbaa !14
  %8 = bitcast %struct.tempnode** %node to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %8) #13
  %9 = load i64, i64* %len, align 8, !tbaa !14
  %add = add i64 %9, 12
  %add1 = add i64 20, %add
  %and = and i64 %add1, -8
  %call2 = call noalias nonnull i8* @xmalloc(i64 %and) #25
  %10 = bitcast i8* %call2 to %struct.tempnode*
  store %struct.tempnode* %10, %struct.tempnode** %node, align 8, !tbaa !6
  %11 = bitcast i8** %file to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %11) #13
  %12 = load %struct.tempnode*, %struct.tempnode** %node, align 8, !tbaa !6
  %name = getelementptr inbounds %struct.tempnode, %struct.tempnode* %12, i32 0, i32 3
  %arraydecay = getelementptr inbounds [0 x i8], [0 x i8]* %name, i64 0, i64 0
  store i8* %arraydecay, i8** %file, align 8, !tbaa !6
  %13 = bitcast %struct.cs_status* %cs to i8*
  call void @llvm.lifetime.start.p0i8(i64 136, i8* %13) #13
  %14 = load i8*, i8** %file, align 8, !tbaa !6
  %15 = load i8*, i8** %temp_dir, align 8, !tbaa !6
  %16 = load i64, i64* %len, align 8, !tbaa !14
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %14, i8* align 1 %15, i64 %16, i1 false)
  %17 = load i8*, i8** %file, align 8, !tbaa !6
  %18 = load i64, i64* %len, align 8, !tbaa !14
  %add.ptr = getelementptr inbounds i8, i8* %17, i64 %18
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %add.ptr, i8* align 1 getelementptr inbounds ([12 x i8], [12 x i8]* @create_temp_file.slashbase, i64 0, i64 0), i64 12, i1 false)
  %19 = load %struct.tempnode*, %struct.tempnode** %node, align 8, !tbaa !6
  %next = getelementptr inbounds %struct.tempnode, %struct.tempnode* %19, i32 0, i32 0
  store volatile %struct.tempnode* null, %struct.tempnode** %next, align 8, !tbaa !6
  %20 = load i64, i64* @create_temp_file.temp_dir_index, align 8, !tbaa !14
  %inc = add i64 %20, 1
  store i64 %inc, i64* @create_temp_file.temp_dir_index, align 8, !tbaa !14
  %21 = load i64, i64* @temp_dir_count, align 8, !tbaa !14
  %cmp = icmp eq i64 %inc, %21
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i64 0, i64* @create_temp_file.temp_dir_index, align 8, !tbaa !14
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  call void @cs_enter(%struct.cs_status* %cs)
  %22 = load i8*, i8** %file, align 8, !tbaa !6
  %call3 = call i32 @mkostemp_safer(i8* %22, i32 524288)
  store i32 %call3, i32* %fd, align 4, !tbaa !2
  %23 = load i32, i32* %fd, align 4, !tbaa !2
  %cmp4 = icmp sle i32 0, %23
  br i1 %cmp4, label %if.then5, label %if.end7

if.then5:                                         ; preds = %if.end
  %24 = load %struct.tempnode*, %struct.tempnode** %node, align 8, !tbaa !6
  %25 = load %struct.tempnode**, %struct.tempnode*** @temptail, align 8, !tbaa !6
  store volatile %struct.tempnode* %24, %struct.tempnode** %25, align 8, !tbaa !6
  %26 = load %struct.tempnode*, %struct.tempnode** %node, align 8, !tbaa !6
  %next6 = getelementptr inbounds %struct.tempnode, %struct.tempnode* %26, i32 0, i32 0
  store %struct.tempnode** %next6, %struct.tempnode*** @temptail, align 8, !tbaa !6
  br label %if.end7

if.end7:                                          ; preds = %if.then5, %if.end
  %call8 = call i32* @__errno_location() #26
  %27 = load i32, i32* %call8, align 4, !tbaa !2
  store i32 %27, i32* %saved_errno, align 4, !tbaa !2
  call void @cs_leave(%struct.cs_status* %cs)
  %28 = load i32, i32* %saved_errno, align 4, !tbaa !2
  %call9 = call i32* @__errno_location() #26
  store i32 %28, i32* %call9, align 4, !tbaa !2
  %29 = load i32, i32* %fd, align 4, !tbaa !2
  %cmp10 = icmp slt i32 %29, 0
  br i1 %cmp10, label %if.then11, label %if.end18

if.then11:                                        ; preds = %if.end7
  %30 = load i8, i8* %survive_fd_exhaustion.addr, align 1, !tbaa !11, !range !25
  %tobool = trunc i8 %30 to i1
  br i1 %tobool, label %land.lhs.true, label %if.then14

land.lhs.true:                                    ; preds = %if.then11
  %call12 = call i32* @__errno_location() #26
  %31 = load i32, i32* %call12, align 4, !tbaa !2
  %cmp13 = icmp eq i32 %31, 24
  br i1 %cmp13, label %if.end17, label %if.then14

if.then14:                                        ; preds = %land.lhs.true, %if.then11
  %call15 = call i32* @__errno_location() #26
  %32 = load i32, i32* %call15, align 4, !tbaa !2
  %33 = load i8*, i8** %temp_dir, align 8, !tbaa !6
  %call16 = call i8* @quotearg_style(i32 4, i8* %33)
  call void (i32, i32, i8*, ...) @error(i32 2, i32 %32, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.185, i64 0, i64 0), i8* %call16)
  unreachable

if.end17:                                         ; preds = %land.lhs.true
  %34 = load %struct.tempnode*, %struct.tempnode** %node, align 8, !tbaa !6
  %35 = bitcast %struct.tempnode* %34 to i8*
  call void @rpl_free(i8* %35)
  store %struct.tempnode* null, %struct.tempnode** %node, align 8, !tbaa !6
  br label %if.end18

if.end18:                                         ; preds = %if.end17, %if.end7
  %36 = load i32, i32* %fd, align 4, !tbaa !2
  %37 = load i32*, i32** %pfd.addr, align 8, !tbaa !6
  store i32 %36, i32* %37, align 4, !tbaa !2
  %38 = load %struct.tempnode*, %struct.tempnode** %node, align 8, !tbaa !6
  %39 = bitcast %struct.cs_status* %cs to i8*
  call void @llvm.lifetime.end.p0i8(i64 136, i8* %39) #13
  %40 = bitcast i8** %file to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %40) #13
  %41 = bitcast %struct.tempnode** %node to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %41) #13
  %42 = bitcast i64* %len to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %42) #13
  %43 = bitcast i8** %temp_dir to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %43) #13
  %44 = bitcast i32* %saved_errno to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %44) #13
  %45 = bitcast i32* %fd to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %45) #13
  ret %struct.tempnode* %38
}

; Function Attrs: nounwind uwtable
define internal i32 @pipe_fork(i32* %pipefds, i64 %tries) #7 {
entry:
  %retval = alloca i32, align 4
  %pipefds.addr = alloca i32*, align 8
  %tries.addr = alloca i64, align 8
  %saved_temphead = alloca %struct.tempnode*, align 8
  %saved_errno = alloca i32, align 4
  %wait_retry = alloca double, align 8
  %pid = alloca i32, align 4
  %cs = alloca %struct.cs_status, align 8
  %cleanup.dest.slot = alloca i32, align 4
  store i32* %pipefds, i32** %pipefds.addr, align 8, !tbaa !6
  store i64 %tries, i64* %tries.addr, align 8, !tbaa !14
  %0 = bitcast %struct.tempnode** %saved_temphead to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #13
  %1 = bitcast i32* %saved_errno to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %1) #13
  %2 = bitcast double* %wait_retry to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %2) #13
  store double 2.500000e-01, double* %wait_retry, align 8, !tbaa !57
  %3 = bitcast i32* %pid to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %3) #13
  %4 = bitcast %struct.cs_status* %cs to i8*
  call void @llvm.lifetime.start.p0i8(i64 136, i8* %4) #13
  %5 = load i32*, i32** %pipefds.addr, align 8, !tbaa !6
  %call = call i32 @rpl_pipe2(i32* %5, i32 524288)
  %cmp = icmp slt i32 %call, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %entry
  %6 = load i32, i32* @nmerge, align 4, !tbaa !2
  %add = add i32 %6, 1
  %7 = load i32, i32* @nprocs, align 4, !tbaa !2
  %cmp1 = icmp ult i32 %add, %7
  br i1 %cmp1, label %if.then2, label %if.end3

if.then2:                                         ; preds = %if.end
  call void @reap_some()
  br label %if.end3

if.end3:                                          ; preds = %if.then2, %if.end
  br label %while.cond

while.cond:                                       ; preds = %if.end15, %if.end3
  %8 = load i64, i64* %tries.addr, align 8, !tbaa !14
  %dec = add i64 %8, -1
  store i64 %dec, i64* %tries.addr, align 8, !tbaa !14
  %tobool = icmp ne i64 %8, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  call void @cs_enter(%struct.cs_status* %cs)
  %9 = load volatile %struct.tempnode*, %struct.tempnode** @temphead, align 8, !tbaa !6
  store %struct.tempnode* %9, %struct.tempnode** %saved_temphead, align 8, !tbaa !6
  store volatile %struct.tempnode* null, %struct.tempnode** @temphead, align 8, !tbaa !6
  %call4 = call i32 @fork() #13
  store i32 %call4, i32* %pid, align 4, !tbaa !2
  %call5 = call i32* @__errno_location() #26
  %10 = load i32, i32* %call5, align 4, !tbaa !2
  store i32 %10, i32* %saved_errno, align 4, !tbaa !2
  %11 = load i32, i32* %pid, align 4, !tbaa !2
  %tobool6 = icmp ne i32 %11, 0
  br i1 %tobool6, label %if.then7, label %if.end8

if.then7:                                         ; preds = %while.body
  %12 = load %struct.tempnode*, %struct.tempnode** %saved_temphead, align 8, !tbaa !6
  store volatile %struct.tempnode* %12, %struct.tempnode** @temphead, align 8, !tbaa !6
  br label %if.end8

if.end8:                                          ; preds = %if.then7, %while.body
  call void @cs_leave(%struct.cs_status* %cs)
  %13 = load i32, i32* %saved_errno, align 4, !tbaa !2
  %call9 = call i32* @__errno_location() #26
  store i32 %13, i32* %call9, align 4, !tbaa !2
  %14 = load i32, i32* %pid, align 4, !tbaa !2
  %cmp10 = icmp sle i32 0, %14
  br i1 %cmp10, label %if.then13, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end8
  %call11 = call i32* @__errno_location() #26
  %15 = load i32, i32* %call11, align 4, !tbaa !2
  %cmp12 = icmp ne i32 %15, 11
  br i1 %cmp12, label %if.then13, label %if.else

if.then13:                                        ; preds = %lor.lhs.false, %if.end8
  br label %while.end

if.else:                                          ; preds = %lor.lhs.false
  %16 = load double, double* %wait_retry, align 8, !tbaa !57
  %call14 = call i32 @xnanosleep(double %16)
  %17 = load double, double* %wait_retry, align 8, !tbaa !57
  %mul = fmul double %17, 2.000000e+00
  store double %mul, double* %wait_retry, align 8, !tbaa !57
  call void @reap_exited()
  br label %if.end15

if.end15:                                         ; preds = %if.else
  br label %while.cond

while.end:                                        ; preds = %if.then13, %while.cond
  %18 = load i32, i32* %pid, align 4, !tbaa !2
  %cmp16 = icmp slt i32 %18, 0
  br i1 %cmp16, label %if.then17, label %if.else23

if.then17:                                        ; preds = %while.end
  %call18 = call i32* @__errno_location() #26
  %19 = load i32, i32* %call18, align 4, !tbaa !2
  store i32 %19, i32* %saved_errno, align 4, !tbaa !2
  %20 = load i32*, i32** %pipefds.addr, align 8, !tbaa !6
  %arrayidx = getelementptr inbounds i32, i32* %20, i64 0
  %21 = load i32, i32* %arrayidx, align 4, !tbaa !2
  %call19 = call i32 @close(i32 %21)
  %22 = load i32*, i32** %pipefds.addr, align 8, !tbaa !6
  %arrayidx20 = getelementptr inbounds i32, i32* %22, i64 1
  %23 = load i32, i32* %arrayidx20, align 4, !tbaa !2
  %call21 = call i32 @close(i32 %23)
  %24 = load i32, i32* %saved_errno, align 4, !tbaa !2
  %call22 = call i32* @__errno_location() #26
  store i32 %24, i32* %call22, align 4, !tbaa !2
  br label %if.end30

if.else23:                                        ; preds = %while.end
  %25 = load i32, i32* %pid, align 4, !tbaa !2
  %cmp24 = icmp eq i32 %25, 0
  br i1 %cmp24, label %if.then25, label %if.else28

if.then25:                                        ; preds = %if.else23
  %call26 = call i32 @close(i32 0)
  %call27 = call i32 @close(i32 1)
  br label %if.end29

if.else28:                                        ; preds = %if.else23
  %26 = load i32, i32* @nprocs, align 4, !tbaa !2
  %inc = add nsw i32 %26, 1
  store i32 %inc, i32* @nprocs, align 4, !tbaa !2
  br label %if.end29

if.end29:                                         ; preds = %if.else28, %if.then25
  br label %if.end30

if.end30:                                         ; preds = %if.end29, %if.then17
  %27 = load i32, i32* %pid, align 4, !tbaa !2
  store i32 %27, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end30, %if.then
  %28 = bitcast %struct.cs_status* %cs to i8*
  call void @llvm.lifetime.end.p0i8(i64 136, i8* %28) #13
  %29 = bitcast i32* %pid to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %29) #13
  %30 = bitcast double* %wait_retry to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %30) #13
  %31 = bitcast i32* %saved_errno to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %31) #13
  %32 = bitcast %struct.tempnode** %saved_temphead to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %32) #13
  %33 = load i32, i32* %retval, align 4
  ret i32 %33
}

declare dso_local i32 @close(i32) #1

; Function Attrs: nounwind uwtable
define internal void @register_proc(%struct.tempnode* %temp) #7 {
entry:
  %temp.addr = alloca %struct.tempnode*, align 8
  store %struct.tempnode* %temp, %struct.tempnode** %temp.addr, align 8, !tbaa !6
  %0 = load %struct.hash_table*, %struct.hash_table** @proctab, align 8, !tbaa !6
  %tobool = icmp ne %struct.hash_table* %0, null
  br i1 %tobool, label %if.end3, label %if.then

if.then:                                          ; preds = %entry
  %call = call noalias %struct.hash_table* @hash_initialize(i64 47, %struct.hash_tuning* null, i64 (i8*, i64)* @proctab_hasher, i1 (i8*, i8*)* @proctab_comparator, void (i8*)* null)
  store %struct.hash_table* %call, %struct.hash_table** @proctab, align 8, !tbaa !6
  %1 = load %struct.hash_table*, %struct.hash_table** @proctab, align 8, !tbaa !6
  %tobool1 = icmp ne %struct.hash_table* %1, null
  br i1 %tobool1, label %if.end, label %if.then2

if.then2:                                         ; preds = %if.then
  call void @xalloc_die() #24
  unreachable

if.end:                                           ; preds = %if.then
  br label %if.end3

if.end3:                                          ; preds = %if.end, %entry
  %2 = load %struct.tempnode*, %struct.tempnode** %temp.addr, align 8, !tbaa !6
  %state = getelementptr inbounds %struct.tempnode, %struct.tempnode* %2, i32 0, i32 2
  store i8 1, i8* %state, align 4, !tbaa !13
  %3 = load %struct.hash_table*, %struct.hash_table** @proctab, align 8, !tbaa !6
  %4 = load %struct.tempnode*, %struct.tempnode** %temp.addr, align 8, !tbaa !6
  %5 = bitcast %struct.tempnode* %4 to i8*
  %call4 = call i8* @hash_insert(%struct.hash_table* %3, i8* %5)
  %tobool5 = icmp ne i8* %call4, null
  br i1 %tobool5, label %if.end7, label %if.then6

if.then6:                                         ; preds = %if.end3
  call void @xalloc_die() #24
  unreachable

if.end7:                                          ; preds = %if.end3
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @move_fd(i32 %oldfd, i32 %newfd) #7 {
entry:
  %oldfd.addr = alloca i32, align 4
  %newfd.addr = alloca i32, align 4
  store i32 %oldfd, i32* %oldfd.addr, align 4, !tbaa !2
  store i32 %newfd, i32* %newfd.addr, align 4, !tbaa !2
  %0 = load i32, i32* %oldfd.addr, align 4, !tbaa !2
  %1 = load i32, i32* %newfd.addr, align 4, !tbaa !2
  %cmp = icmp ne i32 %0, %1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load i32, i32* %oldfd.addr, align 4, !tbaa !2
  %3 = load i32, i32* %newfd.addr, align 4, !tbaa !2
  %call = call i32 @dup2(i32 %2, i32 %3) #13
  %4 = load i32, i32* %oldfd.addr, align 4, !tbaa !2
  %call1 = call i32 @close(i32 %4)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind
declare dso_local i32 @execlp(i8*, i8*, ...) #6

; Function Attrs: noreturn nounwind uwtable
define internal void @async_safe_die(i32 %errnum, i8* %errstr) #0 {
entry:
  %errnum.addr = alloca i32, align 4
  %errstr.addr = alloca i8*, align 8
  %errbuf = alloca [12 x i8], align 1
  %p = alloca i8*, align 8
  store i32 %errnum, i32* %errnum.addr, align 4, !tbaa !2
  store i8* %errstr, i8** %errstr.addr, align 8, !tbaa !6
  %0 = load i8*, i8** %errstr.addr, align 8, !tbaa !6
  %1 = load i8*, i8** %errstr.addr, align 8, !tbaa !6
  %call = call i64 @strlen(i8* %1) #22
  %call1 = call i64 @write(i32 2, i8* %0, i64 %call)
  %2 = load i32, i32* %errnum.addr, align 4, !tbaa !2
  %tobool = icmp ne i32 %2, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = bitcast [12 x i8]* %errbuf to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* %3) #13
  %4 = bitcast i8** %p to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %4) #13
  %5 = load i32, i32* %errnum.addr, align 4, !tbaa !2
  %arraydecay = getelementptr inbounds [12 x i8], [12 x i8]* %errbuf, i64 0, i64 0
  %call2 = call i8* @inttostr(i32 %5, i8* %arraydecay)
  store i8* %call2, i8** %p, align 8, !tbaa !6
  %call3 = call i64 @write(i32 2, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.180, i64 0, i64 0), i64 8)
  %6 = load i8*, i8** %p, align 8, !tbaa !6
  %7 = load i8*, i8** %p, align 8, !tbaa !6
  %call4 = call i64 @strlen(i8* %7) #22
  %call5 = call i64 @write(i32 2, i8* %6, i64 %call4)
  %8 = bitcast i8** %p to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %8) #13
  %9 = bitcast [12 x i8]* %errbuf to i8*
  call void @llvm.lifetime.end.p0i8(i64 12, i8* %9) #13
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %call6 = call i64 @write(i32 2, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.181, i64 0, i64 0), i64 1)
  call void @_exit(i32 2) #24
  unreachable
}

; Function Attrs: nounwind
declare dso_local %struct._IO_FILE* @fdopen(i32, i8*) #6

declare dso_local i64 @write(i32, i8*, i64) #1

; Function Attrs: noreturn
declare dso_local void @_exit(i32) #10

; Function Attrs: nounwind
declare dso_local i32 @dup2(i32, i32) #6

; Function Attrs: nounwind uwtable
define internal i64 @proctab_hasher(i8* %entry1, i64 %tabsize) #7 {
entry:
  %entry.addr = alloca i8*, align 8
  %tabsize.addr = alloca i64, align 8
  %node = alloca %struct.tempnode*, align 8
  store i8* %entry1, i8** %entry.addr, align 8, !tbaa !6
  store i64 %tabsize, i64* %tabsize.addr, align 8, !tbaa !14
  %0 = bitcast %struct.tempnode** %node to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #13
  %1 = load i8*, i8** %entry.addr, align 8, !tbaa !6
  %2 = bitcast i8* %1 to %struct.tempnode*
  store %struct.tempnode* %2, %struct.tempnode** %node, align 8, !tbaa !6
  %3 = load %struct.tempnode*, %struct.tempnode** %node, align 8, !tbaa !6
  %pid = getelementptr inbounds %struct.tempnode, %struct.tempnode* %3, i32 0, i32 1
  %4 = load i32, i32* %pid, align 8, !tbaa !2
  %conv = sext i32 %4 to i64
  %5 = load i64, i64* %tabsize.addr, align 8, !tbaa !14
  %rem = urem i64 %conv, %5
  %6 = bitcast %struct.tempnode** %node to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %6) #13
  ret i64 %rem
}

; Function Attrs: nounwind uwtable
define internal zeroext i1 @proctab_comparator(i8* %e1, i8* %e2) #7 {
entry:
  %e1.addr = alloca i8*, align 8
  %e2.addr = alloca i8*, align 8
  %n1 = alloca %struct.tempnode*, align 8
  %n2 = alloca %struct.tempnode*, align 8
  store i8* %e1, i8** %e1.addr, align 8, !tbaa !6
  store i8* %e2, i8** %e2.addr, align 8, !tbaa !6
  %0 = bitcast %struct.tempnode** %n1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #13
  %1 = load i8*, i8** %e1.addr, align 8, !tbaa !6
  %2 = bitcast i8* %1 to %struct.tempnode*
  store %struct.tempnode* %2, %struct.tempnode** %n1, align 8, !tbaa !6
  %3 = bitcast %struct.tempnode** %n2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %3) #13
  %4 = load i8*, i8** %e2.addr, align 8, !tbaa !6
  %5 = bitcast i8* %4 to %struct.tempnode*
  store %struct.tempnode* %5, %struct.tempnode** %n2, align 8, !tbaa !6
  %6 = load %struct.tempnode*, %struct.tempnode** %n1, align 8, !tbaa !6
  %pid = getelementptr inbounds %struct.tempnode, %struct.tempnode* %6, i32 0, i32 1
  %7 = load i32, i32* %pid, align 8, !tbaa !2
  %8 = load %struct.tempnode*, %struct.tempnode** %n2, align 8, !tbaa !6
  %pid1 = getelementptr inbounds %struct.tempnode, %struct.tempnode* %8, i32 0, i32 1
  %9 = load i32, i32* %pid1, align 8, !tbaa !2
  %cmp = icmp eq i32 %7, %9
  %10 = bitcast %struct.tempnode** %n2 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %10) #13
  %11 = bitcast %struct.tempnode** %n1 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %11) #13
  ret i1 %cmp
}

; Function Attrs: nounwind uwtable
define internal void @reap_some() #7 {
entry:
  %call = call i32 @reap(i32 -1)
  call void @reap_exited()
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @cs_enter(%struct.cs_status* %status) #7 {
entry:
  %status.addr = alloca %struct.cs_status*, align 8
  %ret = alloca i32, align 4
  store %struct.cs_status* %status, %struct.cs_status** %status.addr, align 8, !tbaa !6
  %0 = bitcast i32* %ret to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #13
  %1 = load %struct.cs_status*, %struct.cs_status** %status.addr, align 8, !tbaa !6
  %sigs = getelementptr inbounds %struct.cs_status, %struct.cs_status* %1, i32 0, i32 1
  %call = call i32 @pthread_sigmask(i32 0, %struct.__sigset_t* @caught_signals, %struct.__sigset_t* %sigs) #13
  store i32 %call, i32* %ret, align 4, !tbaa !2
  %2 = load i32, i32* %ret, align 4, !tbaa !2
  %cmp = icmp eq i32 %2, 0
  %3 = load %struct.cs_status*, %struct.cs_status** %status.addr, align 8, !tbaa !6
  %valid = getelementptr inbounds %struct.cs_status, %struct.cs_status* %3, i32 0, i32 0
  %frombool = zext i1 %cmp to i8
  store i8 %frombool, i8* %valid, align 8, !tbaa !107
  %4 = bitcast i32* %ret to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %4) #13
  ret void
}

; Function Attrs: nounwind
declare dso_local i32 @fork() #6

; Function Attrs: nounwind uwtable
define internal void @cs_leave(%struct.cs_status* %status) #7 {
entry:
  %status.addr = alloca %struct.cs_status*, align 8
  store %struct.cs_status* %status, %struct.cs_status** %status.addr, align 8, !tbaa !6
  %0 = load %struct.cs_status*, %struct.cs_status** %status.addr, align 8, !tbaa !6
  %valid = getelementptr inbounds %struct.cs_status, %struct.cs_status* %0, i32 0, i32 0
  %1 = load i8, i8* %valid, align 8, !tbaa !107, !range !25
  %tobool = trunc i8 %1 to i1
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.cs_status*, %struct.cs_status** %status.addr, align 8, !tbaa !6
  %sigs = getelementptr inbounds %struct.cs_status, %struct.cs_status* %2, i32 0, i32 1
  %call = call i32 @pthread_sigmask(i32 2, %struct.__sigset_t* %sigs, %struct.__sigset_t* null) #13
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @reap_exited() #7 {
entry:
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i32, i32* @nprocs, align 4, !tbaa !2
  %cmp = icmp slt i32 0, %0
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %call = call i32 @reap(i32 0)
  %tobool = icmp ne i32 %call, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %1 = phi i1 [ false, %while.cond ], [ %tobool, %land.rhs ]
  br i1 %1, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  br label %while.cond

while.end:                                        ; preds = %land.end
  ret void
}

; Function Attrs: nounwind
declare dso_local i32 @pthread_sigmask(i32, %struct.__sigset_t*, %struct.__sigset_t*) #6

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #4

declare dso_local i64 @fread_unlocked(i8*, i64, i64, %struct._IO_FILE*) #1

; Function Attrs: nounwind
declare dso_local i32 @ferror_unlocked(%struct._IO_FILE*) #6

; Function Attrs: nounwind
declare dso_local i32 @feof_unlocked(%struct._IO_FILE*) #6

; Function Attrs: nounwind readonly
declare dso_local i8* @memchr(i8*, i32, i64) #5

; Function Attrs: nounwind
declare dso_local i32 @fileno(%struct._IO_FILE*) #6

; Function Attrs: nounwind
declare dso_local i32 @fstat(i32, %struct.stat*) #6

; Function Attrs: nounwind
declare dso_local i32 @stat(i8*, %struct.stat*) #6

; Function Attrs: nounwind uwtable
define internal i64 @default_sort_size() #7 {
entry:
  %size = alloca i64, align 8
  %rlimit = alloca %struct.timespec, align 8
  %avail = alloca double, align 8
  %total = alloca double, align 8
  %mem = alloca double, align 8
  %0 = bitcast i64* %size to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #13
  store i64 -1, i64* %size, align 8, !tbaa !14
  %1 = bitcast %struct.timespec* %rlimit to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %1) #13
  %call = call i32 @getrlimit(i32 2, %struct.timespec* %rlimit) #13
  %cmp = icmp eq i32 %call, 0
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %rlim_cur = getelementptr inbounds %struct.timespec, %struct.timespec* %rlimit, i32 0, i32 0
  %2 = load i64, i64* %rlim_cur, align 8, !tbaa !53
  %3 = load i64, i64* %size, align 8, !tbaa !14
  %cmp1 = icmp ult i64 %2, %3
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %rlim_cur2 = getelementptr inbounds %struct.timespec, %struct.timespec* %rlimit, i32 0, i32 0
  %4 = load i64, i64* %rlim_cur2, align 8, !tbaa !53
  store i64 %4, i64* %size, align 8, !tbaa !14
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %call3 = call i32 @getrlimit(i32 9, %struct.timespec* %rlimit) #13
  %cmp4 = icmp eq i32 %call3, 0
  br i1 %cmp4, label %land.lhs.true5, label %if.end10

land.lhs.true5:                                   ; preds = %if.end
  %rlim_cur6 = getelementptr inbounds %struct.timespec, %struct.timespec* %rlimit, i32 0, i32 0
  %5 = load i64, i64* %rlim_cur6, align 8, !tbaa !53
  %6 = load i64, i64* %size, align 8, !tbaa !14
  %cmp7 = icmp ult i64 %5, %6
  br i1 %cmp7, label %if.then8, label %if.end10

if.then8:                                         ; preds = %land.lhs.true5
  %rlim_cur9 = getelementptr inbounds %struct.timespec, %struct.timespec* %rlimit, i32 0, i32 0
  %7 = load i64, i64* %rlim_cur9, align 8, !tbaa !53
  store i64 %7, i64* %size, align 8, !tbaa !14
  br label %if.end10

if.end10:                                         ; preds = %if.then8, %land.lhs.true5, %if.end
  %8 = load i64, i64* %size, align 8, !tbaa !14
  %div = udiv i64 %8, 2
  store i64 %div, i64* %size, align 8, !tbaa !14
  %call11 = call i32 @getrlimit(i32 5, %struct.timespec* %rlimit) #13
  %cmp12 = icmp eq i32 %call11, 0
  br i1 %cmp12, label %land.lhs.true13, label %if.end21

land.lhs.true13:                                  ; preds = %if.end10
  %rlim_cur14 = getelementptr inbounds %struct.timespec, %struct.timespec* %rlimit, i32 0, i32 0
  %9 = load i64, i64* %rlim_cur14, align 8, !tbaa !53
  %div15 = udiv i64 %9, 16
  %mul = mul i64 %div15, 15
  %10 = load i64, i64* %size, align 8, !tbaa !14
  %cmp16 = icmp ult i64 %mul, %10
  br i1 %cmp16, label %if.then17, label %if.end21

if.then17:                                        ; preds = %land.lhs.true13
  %rlim_cur18 = getelementptr inbounds %struct.timespec, %struct.timespec* %rlimit, i32 0, i32 0
  %11 = load i64, i64* %rlim_cur18, align 8, !tbaa !53
  %div19 = udiv i64 %11, 16
  %mul20 = mul i64 %div19, 15
  store i64 %mul20, i64* %size, align 8, !tbaa !14
  br label %if.end21

if.end21:                                         ; preds = %if.then17, %land.lhs.true13, %if.end10
  %12 = bitcast double* %avail to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %12) #13
  %call22 = call double @physmem_available()
  store double %call22, double* %avail, align 8, !tbaa !57
  %13 = bitcast double* %total to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %13) #13
  %call23 = call double @physmem_total()
  store double %call23, double* %total, align 8, !tbaa !57
  %14 = bitcast double* %mem to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %14) #13
  %15 = load double, double* %avail, align 8, !tbaa !57
  %16 = load double, double* %total, align 8, !tbaa !57
  %div24 = fdiv double %16, 8.000000e+00
  %cmp25 = fcmp ogt double %15, %div24
  br i1 %cmp25, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end21
  %17 = load double, double* %avail, align 8, !tbaa !57
  br label %cond.end

cond.false:                                       ; preds = %if.end21
  %18 = load double, double* %total, align 8, !tbaa !57
  %div26 = fdiv double %18, 8.000000e+00
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi double [ %17, %cond.true ], [ %div26, %cond.false ]
  store double %cond, double* %mem, align 8, !tbaa !57
  %19 = load double, double* %total, align 8, !tbaa !57
  %mul27 = fmul double %19, 7.500000e-01
  %20 = load i64, i64* %size, align 8, !tbaa !14
  %conv = uitofp i64 %20 to double
  %cmp28 = fcmp olt double %mul27, %conv
  br i1 %cmp28, label %if.then30, label %if.end33

if.then30:                                        ; preds = %cond.end
  %21 = load double, double* %total, align 8, !tbaa !57
  %mul31 = fmul double %21, 7.500000e-01
  %conv32 = fptoui double %mul31 to i64
  store i64 %conv32, i64* %size, align 8, !tbaa !14
  br label %if.end33

if.end33:                                         ; preds = %if.then30, %cond.end
  %22 = load double, double* %mem, align 8, !tbaa !57
  %23 = load i64, i64* %size, align 8, !tbaa !14
  %conv34 = uitofp i64 %23 to double
  %cmp35 = fcmp olt double %22, %conv34
  br i1 %cmp35, label %if.then37, label %if.end39

if.then37:                                        ; preds = %if.end33
  %24 = load double, double* %mem, align 8, !tbaa !57
  %conv38 = fptoui double %24 to i64
  store i64 %conv38, i64* %size, align 8, !tbaa !14
  br label %if.end39

if.end39:                                         ; preds = %if.then37, %if.end33
  %25 = load i64, i64* %size, align 8, !tbaa !14
  %26 = load i32, i32* @nmerge, align 4, !tbaa !2
  %conv40 = zext i32 %26 to i64
  %mul41 = mul i64 %conv40, 34
  %cmp42 = icmp ugt i64 %25, %mul41
  br i1 %cmp42, label %cond.true44, label %cond.false45

cond.true44:                                      ; preds = %if.end39
  %27 = load i64, i64* %size, align 8, !tbaa !14
  br label %cond.end48

cond.false45:                                     ; preds = %if.end39
  %28 = load i32, i32* @nmerge, align 4, !tbaa !2
  %conv46 = zext i32 %28 to i64
  %mul47 = mul i64 %conv46, 34
  br label %cond.end48

cond.end48:                                       ; preds = %cond.false45, %cond.true44
  %cond49 = phi i64 [ %27, %cond.true44 ], [ %mul47, %cond.false45 ]
  %29 = bitcast double* %mem to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %29) #13
  %30 = bitcast double* %total to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %30) #13
  %31 = bitcast double* %avail to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %31) #13
  %32 = bitcast %struct.timespec* %rlimit to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %32) #13
  %33 = bitcast i64* %size to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %33) #13
  ret i64 %cond49
}

; Function Attrs: nounwind
declare dso_local i32 @getrlimit(i32, %struct.timespec*) #6

; Function Attrs: nounwind uwtable
define internal i64 @mergefiles(%struct.sortfile* %files, i64 %ntemps, i64 %nfiles, %struct._IO_FILE* %ofp, i8* %output_file) #7 {
entry:
  %files.addr = alloca %struct.sortfile*, align 8
  %ntemps.addr = alloca i64, align 8
  %nfiles.addr = alloca i64, align 8
  %ofp.addr = alloca %struct._IO_FILE*, align 8
  %output_file.addr = alloca i8*, align 8
  %fps = alloca %struct._IO_FILE**, align 8
  %nopened = alloca i64, align 8
  store %struct.sortfile* %files, %struct.sortfile** %files.addr, align 8, !tbaa !6
  store i64 %ntemps, i64* %ntemps.addr, align 8, !tbaa !14
  store i64 %nfiles, i64* %nfiles.addr, align 8, !tbaa !14
  store %struct._IO_FILE* %ofp, %struct._IO_FILE** %ofp.addr, align 8, !tbaa !6
  store i8* %output_file, i8** %output_file.addr, align 8, !tbaa !6
  %0 = bitcast %struct._IO_FILE*** %fps to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #13
  %1 = bitcast i64* %nopened to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %1) #13
  %2 = load %struct.sortfile*, %struct.sortfile** %files.addr, align 8, !tbaa !6
  %3 = load i64, i64* %nfiles.addr, align 8, !tbaa !14
  %call = call i64 @open_input_files(%struct.sortfile* %2, i64 %3, %struct._IO_FILE*** %fps)
  store i64 %call, i64* %nopened, align 8, !tbaa !14
  %4 = load i64, i64* %nopened, align 8, !tbaa !14
  %5 = load i64, i64* %nfiles.addr, align 8, !tbaa !14
  %cmp = icmp ult i64 %4, %5
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %6 = load i64, i64* %nopened, align 8, !tbaa !14
  %cmp1 = icmp ult i64 %6, 2
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %7 = load %struct.sortfile*, %struct.sortfile** %files.addr, align 8, !tbaa !6
  %8 = load i64, i64* %nopened, align 8, !tbaa !14
  %arrayidx = getelementptr inbounds %struct.sortfile, %struct.sortfile* %7, i64 %8
  %name = getelementptr inbounds %struct.sortfile, %struct.sortfile* %arrayidx, i32 0, i32 0
  %9 = load i8*, i8** %name, align 8, !tbaa !46
  call void @sort_die(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.141, i64 0, i64 0), i8* %9)
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %10 = load %struct.sortfile*, %struct.sortfile** %files.addr, align 8, !tbaa !6
  %11 = load i64, i64* %ntemps.addr, align 8, !tbaa !14
  %12 = load i64, i64* %nopened, align 8, !tbaa !14
  %13 = load %struct._IO_FILE*, %struct._IO_FILE** %ofp.addr, align 8, !tbaa !6
  %14 = load i8*, i8** %output_file.addr, align 8, !tbaa !6
  %15 = load %struct._IO_FILE**, %struct._IO_FILE*** %fps, align 8, !tbaa !6
  call void @mergefps(%struct.sortfile* %10, i64 %11, i64 %12, %struct._IO_FILE* %13, i8* %14, %struct._IO_FILE** %15)
  %16 = load i64, i64* %nopened, align 8, !tbaa !14
  %17 = bitcast i64* %nopened to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %17) #13
  %18 = bitcast %struct._IO_FILE*** %fps to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %18) #13
  ret i64 %16
}

; Function Attrs: nounwind uwtable
define internal void @avoid_trashing_input(%struct.sortfile* %files, i64 %ntemps, i64 %nfiles, i8* %outfile) #7 {
entry:
  %files.addr = alloca %struct.sortfile*, align 8
  %ntemps.addr = alloca i64, align 8
  %nfiles.addr = alloca i64, align 8
  %outfile.addr = alloca i8*, align 8
  %tempcopy = alloca %struct.tempnode*, align 8
  %i = alloca i64, align 8
  %cleanup.dest.slot = alloca i32, align 4
  %is_stdin = alloca i8, align 1
  %same = alloca i8, align 1
  %instat = alloca %struct.stat, align 8
  %outst = alloca %struct.stat*, align 8
  %tftp = alloca %struct._IO_FILE*, align 8
  store %struct.sortfile* %files, %struct.sortfile** %files.addr, align 8, !tbaa !6
  store i64 %ntemps, i64* %ntemps.addr, align 8, !tbaa !14
  store i64 %nfiles, i64* %nfiles.addr, align 8, !tbaa !14
  store i8* %outfile, i8** %outfile.addr, align 8, !tbaa !6
  %0 = bitcast %struct.tempnode** %tempcopy to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #13
  store %struct.tempnode* null, %struct.tempnode** %tempcopy, align 8, !tbaa !6
  %1 = bitcast i64* %i to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %1) #13
  %2 = load i64, i64* %ntemps.addr, align 8, !tbaa !14
  store i64 %2, i64* %i, align 8, !tbaa !14
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i64, i64* %i, align 8, !tbaa !14
  %4 = load i64, i64* %nfiles.addr, align 8, !tbaa !14
  %cmp = icmp ult i64 %3, %4
  br i1 %cmp, label %for.body, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond
  store i32 2, i32* %cleanup.dest.slot, align 4
  br label %cleanup45

for.body:                                         ; preds = %for.cond
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %is_stdin) #13
  %5 = load %struct.sortfile*, %struct.sortfile** %files.addr, align 8, !tbaa !6
  %6 = load i64, i64* %i, align 8, !tbaa !14
  %arrayidx = getelementptr inbounds %struct.sortfile, %struct.sortfile* %5, i64 %6
  %name = getelementptr inbounds %struct.sortfile, %struct.sortfile* %arrayidx, i32 0, i32 0
  %7 = load i8*, i8** %name, align 8, !tbaa !46
  %call = call i32 @strcmp(i8* %7, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.52, i64 0, i64 0)) #22
  %cmp1 = icmp eq i32 %call, 0
  %frombool = zext i1 %cmp1 to i8
  store i8 %frombool, i8* %is_stdin, align 1, !tbaa !11
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %same) #13
  %8 = bitcast %struct.stat* %instat to i8*
  call void @llvm.lifetime.start.p0i8(i64 144, i8* %8) #13
  %9 = load i8*, i8** %outfile.addr, align 8, !tbaa !6
  %tobool = icmp ne i8* %9, null
  br i1 %tobool, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %for.body
  %10 = load i8*, i8** %outfile.addr, align 8, !tbaa !6
  %11 = load %struct.sortfile*, %struct.sortfile** %files.addr, align 8, !tbaa !6
  %12 = load i64, i64* %i, align 8, !tbaa !14
  %arrayidx2 = getelementptr inbounds %struct.sortfile, %struct.sortfile* %11, i64 %12
  %name3 = getelementptr inbounds %struct.sortfile, %struct.sortfile* %arrayidx2, i32 0, i32 0
  %13 = load i8*, i8** %name3, align 8, !tbaa !46
  %call4 = call i32 @strcmp(i8* %10, i8* %13) #22
  %cmp5 = icmp eq i32 %call4, 0
  br i1 %cmp5, label %land.lhs.true6, label %if.else

land.lhs.true6:                                   ; preds = %land.lhs.true
  %14 = load i8, i8* %is_stdin, align 1, !tbaa !11, !range !25
  %tobool7 = trunc i8 %14 to i1
  br i1 %tobool7, label %if.else, label %if.then

if.then:                                          ; preds = %land.lhs.true6
  store i8 1, i8* %same, align 1, !tbaa !11
  br label %if.end24

if.else:                                          ; preds = %land.lhs.true6, %land.lhs.true, %for.body
  %15 = bitcast %struct.stat** %outst to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %15) #13
  %call8 = call %struct.stat* @get_outstatus()
  store %struct.stat* %call8, %struct.stat** %outst, align 8, !tbaa !6
  %16 = load %struct.stat*, %struct.stat** %outst, align 8, !tbaa !6
  %tobool9 = icmp ne %struct.stat* %16, null
  br i1 %tobool9, label %if.end, label %if.then10

if.then10:                                        ; preds = %if.else
  store i32 2, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %if.else
  %17 = load i8, i8* %is_stdin, align 1, !tbaa !11, !range !25
  %tobool11 = trunc i8 %17 to i1
  br i1 %tobool11, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  %call12 = call i32 @fstat(i32 0, %struct.stat* %instat) #13
  br label %cond.end

cond.false:                                       ; preds = %if.end
  %18 = load %struct.sortfile*, %struct.sortfile** %files.addr, align 8, !tbaa !6
  %19 = load i64, i64* %i, align 8, !tbaa !14
  %arrayidx13 = getelementptr inbounds %struct.sortfile, %struct.sortfile* %18, i64 %19
  %name14 = getelementptr inbounds %struct.sortfile, %struct.sortfile* %arrayidx13, i32 0, i32 0
  %20 = load i8*, i8** %name14, align 8, !tbaa !46
  %call15 = call i32 @stat(i8* %20, %struct.stat* %instat) #13
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call12, %cond.true ], [ %call15, %cond.false ]
  %cmp16 = icmp eq i32 %cond, 0
  br i1 %cmp16, label %land.rhs, label %land.end22

land.rhs:                                         ; preds = %cond.end
  %st_ino = getelementptr inbounds %struct.stat, %struct.stat* %instat, i32 0, i32 1
  %21 = load i64, i64* %st_ino, align 8, !tbaa !109
  %22 = load %struct.stat*, %struct.stat** %outst, align 8, !tbaa !6
  %st_ino17 = getelementptr inbounds %struct.stat, %struct.stat* %22, i32 0, i32 1
  %23 = load i64, i64* %st_ino17, align 8, !tbaa !109
  %cmp18 = icmp eq i64 %21, %23
  br i1 %cmp18, label %land.rhs19, label %land.end

land.rhs19:                                       ; preds = %land.rhs
  %st_dev = getelementptr inbounds %struct.stat, %struct.stat* %instat, i32 0, i32 0
  %24 = load i64, i64* %st_dev, align 8, !tbaa !110
  %25 = load %struct.stat*, %struct.stat** %outst, align 8, !tbaa !6
  %st_dev20 = getelementptr inbounds %struct.stat, %struct.stat* %25, i32 0, i32 0
  %26 = load i64, i64* %st_dev20, align 8, !tbaa !110
  %cmp21 = icmp eq i64 %24, %26
  br label %land.end

land.end:                                         ; preds = %land.rhs19, %land.rhs
  %27 = phi i1 [ false, %land.rhs ], [ %cmp21, %land.rhs19 ]
  br label %land.end22

land.end22:                                       ; preds = %land.end, %cond.end
  %28 = phi i1 [ false, %cond.end ], [ %27, %land.end ]
  %frombool23 = zext i1 %28 to i8
  store i8 %frombool23, i8* %same, align 1, !tbaa !11
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %land.end22, %if.then10
  %29 = bitcast %struct.stat** %outst to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %29) #13
  %cleanup.dest = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest, label %cleanup40 [
    i32 0, label %cleanup.cont
  ]

cleanup.cont:                                     ; preds = %cleanup
  br label %if.end24

if.end24:                                         ; preds = %cleanup.cont, %if.then
  %30 = load i8, i8* %same, align 1, !tbaa !11, !range !25
  %tobool25 = trunc i8 %30 to i1
  br i1 %tobool25, label %if.then26, label %if.end39

if.then26:                                        ; preds = %if.end24
  %31 = load %struct.tempnode*, %struct.tempnode** %tempcopy, align 8, !tbaa !6
  %tobool27 = icmp ne %struct.tempnode* %31, null
  br i1 %tobool27, label %if.end33, label %if.then28

if.then28:                                        ; preds = %if.then26
  %32 = bitcast %struct._IO_FILE** %tftp to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %32) #13
  %call29 = call %struct.tempnode* @create_temp(%struct._IO_FILE** %tftp)
  store %struct.tempnode* %call29, %struct.tempnode** %tempcopy, align 8, !tbaa !6
  %33 = load %struct.sortfile*, %struct.sortfile** %files.addr, align 8, !tbaa !6
  %34 = load i64, i64* %i, align 8, !tbaa !14
  %arrayidx30 = getelementptr inbounds %struct.sortfile, %struct.sortfile* %33, i64 %34
  %35 = load %struct._IO_FILE*, %struct._IO_FILE** %tftp, align 8, !tbaa !6
  %36 = load %struct.tempnode*, %struct.tempnode** %tempcopy, align 8, !tbaa !6
  %name31 = getelementptr inbounds %struct.tempnode, %struct.tempnode* %36, i32 0, i32 3
  %arraydecay = getelementptr inbounds [0 x i8], [0 x i8]* %name31, i64 0, i64 0
  %call32 = call i64 @mergefiles(%struct.sortfile* %arrayidx30, i64 0, i64 1, %struct._IO_FILE* %35, i8* %arraydecay)
  %37 = bitcast %struct._IO_FILE** %tftp to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %37) #13
  br label %if.end33

if.end33:                                         ; preds = %if.then28, %if.then26
  %38 = load %struct.tempnode*, %struct.tempnode** %tempcopy, align 8, !tbaa !6
  %name34 = getelementptr inbounds %struct.tempnode, %struct.tempnode* %38, i32 0, i32 3
  %arraydecay35 = getelementptr inbounds [0 x i8], [0 x i8]* %name34, i64 0, i64 0
  %39 = load %struct.sortfile*, %struct.sortfile** %files.addr, align 8, !tbaa !6
  %40 = load i64, i64* %i, align 8, !tbaa !14
  %arrayidx36 = getelementptr inbounds %struct.sortfile, %struct.sortfile* %39, i64 %40
  %name37 = getelementptr inbounds %struct.sortfile, %struct.sortfile* %arrayidx36, i32 0, i32 0
  store i8* %arraydecay35, i8** %name37, align 8, !tbaa !46
  %41 = load %struct.tempnode*, %struct.tempnode** %tempcopy, align 8, !tbaa !6
  %42 = load %struct.sortfile*, %struct.sortfile** %files.addr, align 8, !tbaa !6
  %43 = load i64, i64* %i, align 8, !tbaa !14
  %arrayidx38 = getelementptr inbounds %struct.sortfile, %struct.sortfile* %42, i64 %43
  %temp = getelementptr inbounds %struct.sortfile, %struct.sortfile* %arrayidx38, i32 0, i32 1
  store %struct.tempnode* %41, %struct.tempnode** %temp, align 8, !tbaa !68
  br label %if.end39

if.end39:                                         ; preds = %if.end33, %if.end24
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup40

cleanup40:                                        ; preds = %if.end39, %cleanup
  %44 = bitcast %struct.stat* %instat to i8*
  call void @llvm.lifetime.end.p0i8(i64 144, i8* %44) #13
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %same) #13
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %is_stdin) #13
  %cleanup.dest43 = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest43, label %cleanup45 [
    i32 0, label %cleanup.cont44
  ]

cleanup.cont44:                                   ; preds = %cleanup40
  br label %for.inc

for.inc:                                          ; preds = %cleanup.cont44
  %45 = load i64, i64* %i, align 8, !tbaa !14
  %inc = add i64 %45, 1
  store i64 %inc, i64* %i, align 8, !tbaa !14
  br label %for.cond

cleanup45:                                        ; preds = %cleanup40, %for.cond.cleanup
  %46 = bitcast i64* %i to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %46) #13
  br label %for.end

for.end:                                          ; preds = %cleanup45
  %47 = bitcast %struct.tempnode** %tempcopy to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %47) #13
  ret void
}

; Function Attrs: nounwind uwtable
define internal i64 @open_input_files(%struct.sortfile* %files, i64 %nfiles, %struct._IO_FILE*** %pfps) #7 {
entry:
  %files.addr = alloca %struct.sortfile*, align 8
  %nfiles.addr = alloca i64, align 8
  %pfps.addr = alloca %struct._IO_FILE***, align 8
  %fps = alloca %struct._IO_FILE**, align 8
  %i = alloca i32, align 4
  store %struct.sortfile* %files, %struct.sortfile** %files.addr, align 8, !tbaa !6
  store i64 %nfiles, i64* %nfiles.addr, align 8, !tbaa !14
  store %struct._IO_FILE*** %pfps, %struct._IO_FILE**** %pfps.addr, align 8, !tbaa !6
  %0 = bitcast %struct._IO_FILE*** %fps to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #13
  %1 = load i64, i64* %nfiles.addr, align 8, !tbaa !14
  %call = call noalias nonnull i8* @xnmalloc(i64 %1, i64 8) #23
  %2 = bitcast i8* %call to %struct._IO_FILE**
  %3 = load %struct._IO_FILE***, %struct._IO_FILE**** %pfps.addr, align 8, !tbaa !6
  store %struct._IO_FILE** %2, %struct._IO_FILE*** %3, align 8, !tbaa !6
  store %struct._IO_FILE** %2, %struct._IO_FILE*** %fps, align 8, !tbaa !6
  %4 = bitcast i32* %i to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %4) #13
  store i32 0, i32* %i, align 4, !tbaa !2
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %5 = load i32, i32* %i, align 4, !tbaa !2
  %conv = sext i32 %5 to i64
  %6 = load i64, i64* %nfiles.addr, align 8, !tbaa !14
  %cmp = icmp ult i64 %conv, %6
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load %struct.sortfile*, %struct.sortfile** %files.addr, align 8, !tbaa !6
  %8 = load i32, i32* %i, align 4, !tbaa !2
  %idxprom = sext i32 %8 to i64
  %arrayidx = getelementptr inbounds %struct.sortfile, %struct.sortfile* %7, i64 %idxprom
  %temp = getelementptr inbounds %struct.sortfile, %struct.sortfile* %arrayidx, i32 0, i32 1
  %9 = load %struct.tempnode*, %struct.tempnode** %temp, align 8, !tbaa !68
  %tobool = icmp ne %struct.tempnode* %9, null
  br i1 %tobool, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %for.body
  %10 = load %struct.sortfile*, %struct.sortfile** %files.addr, align 8, !tbaa !6
  %11 = load i32, i32* %i, align 4, !tbaa !2
  %idxprom2 = sext i32 %11 to i64
  %arrayidx3 = getelementptr inbounds %struct.sortfile, %struct.sortfile* %10, i64 %idxprom2
  %temp4 = getelementptr inbounds %struct.sortfile, %struct.sortfile* %arrayidx3, i32 0, i32 1
  %12 = load %struct.tempnode*, %struct.tempnode** %temp4, align 8, !tbaa !68
  %state = getelementptr inbounds %struct.tempnode, %struct.tempnode* %12, i32 0, i32 2
  %13 = load i8, i8* %state, align 4, !tbaa !13
  %conv5 = sext i8 %13 to i32
  %cmp6 = icmp ne i32 %conv5, 0
  br i1 %cmp6, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true
  %14 = load %struct.sortfile*, %struct.sortfile** %files.addr, align 8, !tbaa !6
  %15 = load i32, i32* %i, align 4, !tbaa !2
  %idxprom8 = sext i32 %15 to i64
  %arrayidx9 = getelementptr inbounds %struct.sortfile, %struct.sortfile* %14, i64 %idxprom8
  %temp10 = getelementptr inbounds %struct.sortfile, %struct.sortfile* %arrayidx9, i32 0, i32 1
  %16 = load %struct.tempnode*, %struct.tempnode** %temp10, align 8, !tbaa !68
  %call11 = call %struct._IO_FILE* @open_temp(%struct.tempnode* %16)
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true, %for.body
  %17 = load %struct.sortfile*, %struct.sortfile** %files.addr, align 8, !tbaa !6
  %18 = load i32, i32* %i, align 4, !tbaa !2
  %idxprom12 = sext i32 %18 to i64
  %arrayidx13 = getelementptr inbounds %struct.sortfile, %struct.sortfile* %17, i64 %idxprom12
  %name = getelementptr inbounds %struct.sortfile, %struct.sortfile* %arrayidx13, i32 0, i32 0
  %19 = load i8*, i8** %name, align 8, !tbaa !46
  %call14 = call %struct._IO_FILE* @stream_open(i8* %19, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.50, i64 0, i64 0))
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct._IO_FILE* [ %call11, %cond.true ], [ %call14, %cond.false ]
  %20 = load %struct._IO_FILE**, %struct._IO_FILE*** %fps, align 8, !tbaa !6
  %21 = load i32, i32* %i, align 4, !tbaa !2
  %idxprom15 = sext i32 %21 to i64
  %arrayidx16 = getelementptr inbounds %struct._IO_FILE*, %struct._IO_FILE** %20, i64 %idxprom15
  store %struct._IO_FILE* %cond, %struct._IO_FILE** %arrayidx16, align 8, !tbaa !6
  %22 = load %struct._IO_FILE**, %struct._IO_FILE*** %fps, align 8, !tbaa !6
  %23 = load i32, i32* %i, align 4, !tbaa !2
  %idxprom17 = sext i32 %23 to i64
  %arrayidx18 = getelementptr inbounds %struct._IO_FILE*, %struct._IO_FILE** %22, i64 %idxprom17
  %24 = load %struct._IO_FILE*, %struct._IO_FILE** %arrayidx18, align 8, !tbaa !6
  %tobool19 = icmp ne %struct._IO_FILE* %24, null
  br i1 %tobool19, label %if.end, label %if.then

if.then:                                          ; preds = %cond.end
  br label %for.end

if.end:                                           ; preds = %cond.end
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %25 = load i32, i32* %i, align 4, !tbaa !2
  %inc = add nsw i32 %25, 1
  store i32 %inc, i32* %i, align 4, !tbaa !2
  br label %for.cond

for.end:                                          ; preds = %if.then, %for.cond
  %26 = load i32, i32* %i, align 4, !tbaa !2
  %conv20 = sext i32 %26 to i64
  %27 = bitcast i32* %i to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %27) #13
  %28 = bitcast %struct._IO_FILE*** %fps to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %28) #13
  ret i64 %conv20
}

; Function Attrs: nounwind uwtable
define internal %struct._IO_FILE* @stream_open(i8* %file, i8* %how) #7 {
entry:
  %file.addr = alloca i8*, align 8
  %how.addr = alloca i8*, align 8
  %fp = alloca %struct._IO_FILE*, align 8
  %fd = alloca i32, align 4
  %ftruncate_errno = alloca i32, align 4
  %outst = alloca %struct.stat*, align 8
  store i8* %file, i8** %file.addr, align 8, !tbaa !6
  store i8* %how, i8** %how.addr, align 8, !tbaa !6
  %0 = bitcast %struct._IO_FILE** %fp to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #13
  %1 = load i8*, i8** %how.addr, align 8, !tbaa !6
  %2 = load i8, i8* %1, align 1, !tbaa !13
  %conv = sext i8 %2 to i32
  %cmp = icmp eq i32 %conv, 114
  br i1 %cmp, label %if.then, label %if.else9

if.then:                                          ; preds = %entry
  %3 = load i8*, i8** %file.addr, align 8, !tbaa !6
  %call = call i32 @strcmp(i8* %3, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.52, i64 0, i64 0)) #22
  %cmp2 = icmp eq i32 %call, 0
  br i1 %cmp2, label %if.then4, label %if.else

if.then4:                                         ; preds = %if.then
  store i8 1, i8* @have_read_stdin, align 1, !tbaa !11
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @stdin, align 8, !tbaa !6
  store %struct._IO_FILE* %4, %struct._IO_FILE** %fp, align 8, !tbaa !6
  br label %if.end

if.else:                                          ; preds = %if.then
  %5 = bitcast i32* %fd to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %5) #13
  %6 = load i8*, i8** %file.addr, align 8, !tbaa !6
  %call5 = call i32 (i8*, i32, ...) @open(i8* %6, i32 524288)
  store i32 %call5, i32* %fd, align 4, !tbaa !2
  %7 = load i32, i32* %fd, align 4, !tbaa !2
  %cmp6 = icmp slt i32 %7, 0
  br i1 %cmp6, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.else
  br label %cond.end

cond.false:                                       ; preds = %if.else
  %8 = load i32, i32* %fd, align 4, !tbaa !2
  %9 = load i8*, i8** %how.addr, align 8, !tbaa !6
  %call8 = call %struct._IO_FILE* @fdopen(i32 %8, i8* %9) #13
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct._IO_FILE* [ null, %cond.true ], [ %call8, %cond.false ]
  store %struct._IO_FILE* %cond, %struct._IO_FILE** %fp, align 8, !tbaa !6
  %10 = bitcast i32* %fd to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %10) #13
  br label %if.end

if.end:                                           ; preds = %cond.end, %if.then4
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** %fp, align 8, !tbaa !6
  call void @fadvise(%struct._IO_FILE* %11, i32 2)
  br label %if.end33

if.else9:                                         ; preds = %entry
  %12 = load i8*, i8** %how.addr, align 8, !tbaa !6
  %13 = load i8, i8* %12, align 1, !tbaa !13
  %conv10 = sext i8 %13 to i32
  %cmp11 = icmp eq i32 %conv10, 119
  br i1 %cmp11, label %if.then13, label %if.else31

if.then13:                                        ; preds = %if.else9
  %14 = load i8*, i8** %file.addr, align 8, !tbaa !6
  %tobool = icmp ne i8* %14, null
  br i1 %tobool, label %land.lhs.true, label %if.end30

land.lhs.true:                                    ; preds = %if.then13
  %call14 = call i32 @ftruncate(i32 1, i64 0) #13
  %cmp15 = icmp ne i32 %call14, 0
  br i1 %cmp15, label %if.then17, label %if.end30

if.then17:                                        ; preds = %land.lhs.true
  %15 = bitcast i32* %ftruncate_errno to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %15) #13
  %call18 = call i32* @__errno_location() #26
  %16 = load i32, i32* %call18, align 4, !tbaa !2
  store i32 %16, i32* %ftruncate_errno, align 4, !tbaa !2
  %17 = bitcast %struct.stat** %outst to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %17) #13
  %call19 = call %struct.stat* @get_outstatus()
  store %struct.stat* %call19, %struct.stat** %outst, align 8, !tbaa !6
  %18 = load %struct.stat*, %struct.stat** %outst, align 8, !tbaa !6
  %tobool20 = icmp ne %struct.stat* %18, null
  br i1 %tobool20, label %lor.lhs.false, label %if.then27

lor.lhs.false:                                    ; preds = %if.then17
  %19 = load %struct.stat*, %struct.stat** %outst, align 8, !tbaa !6
  %st_mode = getelementptr inbounds %struct.stat, %struct.stat* %19, i32 0, i32 3
  %20 = load i32, i32* %st_mode, align 8, !tbaa !73
  %and = and i32 %20, 61440
  %cmp21 = icmp eq i32 %and, 32768
  br i1 %cmp21, label %if.then27, label %lor.lhs.false23

lor.lhs.false23:                                  ; preds = %lor.lhs.false
  %21 = load %struct.stat*, %struct.stat** %outst, align 8, !tbaa !6
  %st_mode24 = getelementptr inbounds %struct.stat, %struct.stat* %21, i32 0, i32 3
  %22 = load i32, i32* %st_mode24, align 8, !tbaa !73
  %23 = load %struct.stat*, %struct.stat** %outst, align 8, !tbaa !6
  %st_mode25 = getelementptr inbounds %struct.stat, %struct.stat* %23, i32 0, i32 3
  %24 = load i32, i32* %st_mode25, align 8, !tbaa !73
  %sub = sub i32 %22, %24
  %tobool26 = icmp ne i32 %sub, 0
  br i1 %tobool26, label %if.then27, label %if.end29

if.then27:                                        ; preds = %lor.lhs.false23, %lor.lhs.false, %if.then17
  %25 = load i32, i32* %ftruncate_errno, align 4, !tbaa !2
  %26 = load i8*, i8** %file.addr, align 8, !tbaa !6
  %call28 = call i8* @quotearg_n_style_colon(i32 0, i32 3, i8* %26)
  call void (i32, i32, i8*, ...) @error(i32 2, i32 %25, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.142, i64 0, i64 0), i8* %call28)
  unreachable

if.end29:                                         ; preds = %lor.lhs.false23
  %27 = bitcast %struct.stat** %outst to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %27) #13
  %28 = bitcast i32* %ftruncate_errno to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %28) #13
  br label %if.end30

if.end30:                                         ; preds = %if.end29, %land.lhs.true, %if.then13
  %29 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !6
  store %struct._IO_FILE* %29, %struct._IO_FILE** %fp, align 8, !tbaa !6
  br label %if.end32

if.else31:                                        ; preds = %if.else9
  call void @__assert_fail(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.143, i64 0, i64 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.27, i64 0, i64 0), i32 981, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @__PRETTY_FUNCTION__.stream_open, i64 0, i64 0)) #21
  unreachable

if.end32:                                         ; preds = %if.end30
  br label %if.end33

if.end33:                                         ; preds = %if.end32, %if.end
  %30 = load %struct._IO_FILE*, %struct._IO_FILE** %fp, align 8, !tbaa !6
  %31 = bitcast %struct._IO_FILE** %fp to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %31) #13
  ret %struct._IO_FILE* %30
}

; Function Attrs: nounwind uwtable
define internal void @mergefps(%struct.sortfile* %files, i64 %ntemps, i64 %nfiles, %struct._IO_FILE* %ofp, i8* %output_file, %struct._IO_FILE** %fps) #7 {
entry:
  %files.addr = alloca %struct.sortfile*, align 8
  %ntemps.addr = alloca i64, align 8
  %nfiles.addr = alloca i64, align 8
  %ofp.addr = alloca %struct._IO_FILE*, align 8
  %output_file.addr = alloca i8*, align 8
  %fps.addr = alloca %struct._IO_FILE**, align 8
  %buffer = alloca %struct.buffer*, align 8
  %saved = alloca %struct.line, align 8
  %savedline = alloca %struct.line*, align 8
  %savealloc = alloca i64, align 8
  %cur = alloca %struct.line**, align 8
  %base = alloca %struct.line**, align 8
  %ord = alloca i64*, align 8
  %i = alloca i64, align 8
  %j = alloca i64, align 8
  %t = alloca i64, align 8
  %key = alloca %struct.keyfield*, align 8
  %linelim = alloca %struct.line*, align 8
  %smallest = alloca %struct.line*, align 8
  %linelim125 = alloca %struct.line*, align 8
  %cleanup.dest.slot = alloca i32, align 4
  %lo = alloca i64, align 8
  %hi = alloca i64, align 8
  %probe = alloca i64, align 8
  %ord0 = alloca i64, align 8
  %count_of_smaller_lines = alloca i64, align 8
  %cmp207 = alloca i32, align 4
  store %struct.sortfile* %files, %struct.sortfile** %files.addr, align 8, !tbaa !6
  store i64 %ntemps, i64* %ntemps.addr, align 8, !tbaa !14
  store i64 %nfiles, i64* %nfiles.addr, align 8, !tbaa !14
  store %struct._IO_FILE* %ofp, %struct._IO_FILE** %ofp.addr, align 8, !tbaa !6
  store i8* %output_file, i8** %output_file.addr, align 8, !tbaa !6
  store %struct._IO_FILE** %fps, %struct._IO_FILE*** %fps.addr, align 8, !tbaa !6
  %0 = bitcast %struct.buffer** %buffer to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #13
  %1 = load i64, i64* %nfiles.addr, align 8, !tbaa !14
  %call = call noalias nonnull i8* @xnmalloc(i64 %1, i64 56) #23
  %2 = bitcast i8* %call to %struct.buffer*
  store %struct.buffer* %2, %struct.buffer** %buffer, align 8, !tbaa !6
  %3 = bitcast %struct.line* %saved to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* %3) #13
  %4 = bitcast %struct.line** %savedline to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %4) #13
  store %struct.line* null, %struct.line** %savedline, align 8, !tbaa !6
  %5 = bitcast i64* %savealloc to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %5) #13
  store i64 0, i64* %savealloc, align 8, !tbaa !14
  %6 = bitcast %struct.line*** %cur to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %6) #13
  %7 = load i64, i64* %nfiles.addr, align 8, !tbaa !14
  %call1 = call noalias nonnull i8* @xnmalloc(i64 %7, i64 8) #23
  %8 = bitcast i8* %call1 to %struct.line**
  store %struct.line** %8, %struct.line*** %cur, align 8, !tbaa !6
  %9 = bitcast %struct.line*** %base to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %9) #13
  %10 = load i64, i64* %nfiles.addr, align 8, !tbaa !14
  %call2 = call noalias nonnull i8* @xnmalloc(i64 %10, i64 8) #23
  %11 = bitcast i8* %call2 to %struct.line**
  store %struct.line** %11, %struct.line*** %base, align 8, !tbaa !6
  %12 = bitcast i64** %ord to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %12) #13
  %13 = load i64, i64* %nfiles.addr, align 8, !tbaa !14
  %call3 = call noalias nonnull i8* @xnmalloc(i64 %13, i64 8) #23
  %14 = bitcast i8* %call3 to i64*
  store i64* %14, i64** %ord, align 8, !tbaa !6
  %15 = bitcast i64* %i to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %15) #13
  %16 = bitcast i64* %j to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %16) #13
  %17 = bitcast i64* %t to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %17) #13
  %18 = bitcast %struct.keyfield** %key to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %18) #13
  %19 = load %struct.keyfield*, %struct.keyfield** @keylist, align 8, !tbaa !6
  store %struct.keyfield* %19, %struct.keyfield** %key, align 8, !tbaa !6
  %text = getelementptr inbounds %struct.line, %struct.line* %saved, i32 0, i32 0
  store i8* null, i8** %text, align 8, !tbaa !60
  store i64 0, i64* %i, align 8, !tbaa !14
  br label %for.cond

for.cond:                                         ; preds = %if.end34, %entry
  %20 = load i64, i64* %i, align 8, !tbaa !14
  %21 = load i64, i64* %nfiles.addr, align 8, !tbaa !14
  %cmp = icmp ult i64 %20, %21
  br i1 %cmp, label %for.body, label %for.end35

for.body:                                         ; preds = %for.cond
  %22 = load %struct.buffer*, %struct.buffer** %buffer, align 8, !tbaa !6
  %23 = load i64, i64* %i, align 8, !tbaa !14
  %arrayidx = getelementptr inbounds %struct.buffer, %struct.buffer* %22, i64 %23
  %24 = load i64, i64* @merge_buffer_size, align 8, !tbaa !14
  %25 = load i64, i64* @sort_size, align 8, !tbaa !14
  %26 = load i64, i64* %nfiles.addr, align 8, !tbaa !14
  %div = udiv i64 %25, %26
  %cmp4 = icmp ugt i64 %24, %div
  br i1 %cmp4, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.body
  %27 = load i64, i64* @merge_buffer_size, align 8, !tbaa !14
  br label %cond.end

cond.false:                                       ; preds = %for.body
  %28 = load i64, i64* @sort_size, align 8, !tbaa !14
  %29 = load i64, i64* %nfiles.addr, align 8, !tbaa !14
  %div5 = udiv i64 %28, %29
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %27, %cond.true ], [ %div5, %cond.false ]
  call void @initbuf(%struct.buffer* %arrayidx, i64 32, i64 %cond)
  %30 = load %struct.buffer*, %struct.buffer** %buffer, align 8, !tbaa !6
  %31 = load i64, i64* %i, align 8, !tbaa !14
  %arrayidx6 = getelementptr inbounds %struct.buffer, %struct.buffer* %30, i64 %31
  %32 = load %struct._IO_FILE**, %struct._IO_FILE*** %fps.addr, align 8, !tbaa !6
  %33 = load i64, i64* %i, align 8, !tbaa !14
  %arrayidx7 = getelementptr inbounds %struct._IO_FILE*, %struct._IO_FILE** %32, i64 %33
  %34 = load %struct._IO_FILE*, %struct._IO_FILE** %arrayidx7, align 8, !tbaa !6
  %35 = load %struct.sortfile*, %struct.sortfile** %files.addr, align 8, !tbaa !6
  %36 = load i64, i64* %i, align 8, !tbaa !14
  %arrayidx8 = getelementptr inbounds %struct.sortfile, %struct.sortfile* %35, i64 %36
  %name = getelementptr inbounds %struct.sortfile, %struct.sortfile* %arrayidx8, i32 0, i32 0
  %37 = load i8*, i8** %name, align 8, !tbaa !46
  %call9 = call zeroext i1 @fillbuf(%struct.buffer* %arrayidx6, %struct._IO_FILE* %34, i8* %37)
  br i1 %call9, label %if.then, label %if.else

if.then:                                          ; preds = %cond.end
  %38 = bitcast %struct.line** %linelim to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %38) #13
  %39 = load %struct.buffer*, %struct.buffer** %buffer, align 8, !tbaa !6
  %40 = load i64, i64* %i, align 8, !tbaa !14
  %arrayidx10 = getelementptr inbounds %struct.buffer, %struct.buffer* %39, i64 %40
  %call11 = call %struct.line* @buffer_linelim(%struct.buffer* %arrayidx10)
  store %struct.line* %call11, %struct.line** %linelim, align 8, !tbaa !6
  %41 = load %struct.line*, %struct.line** %linelim, align 8, !tbaa !6
  %add.ptr = getelementptr inbounds %struct.line, %struct.line* %41, i64 -1
  %42 = load %struct.line**, %struct.line*** %cur, align 8, !tbaa !6
  %43 = load i64, i64* %i, align 8, !tbaa !14
  %arrayidx12 = getelementptr inbounds %struct.line*, %struct.line** %42, i64 %43
  store %struct.line* %add.ptr, %struct.line** %arrayidx12, align 8, !tbaa !6
  %44 = load %struct.line*, %struct.line** %linelim, align 8, !tbaa !6
  %45 = load %struct.buffer*, %struct.buffer** %buffer, align 8, !tbaa !6
  %46 = load i64, i64* %i, align 8, !tbaa !14
  %arrayidx13 = getelementptr inbounds %struct.buffer, %struct.buffer* %45, i64 %46
  %nlines = getelementptr inbounds %struct.buffer, %struct.buffer* %arrayidx13, i32 0, i32 2
  %47 = load i64, i64* %nlines, align 8, !tbaa !62
  %idx.neg = sub i64 0, %47
  %add.ptr14 = getelementptr inbounds %struct.line, %struct.line* %44, i64 %idx.neg
  %48 = load %struct.line**, %struct.line*** %base, align 8, !tbaa !6
  %49 = load i64, i64* %i, align 8, !tbaa !14
  %arrayidx15 = getelementptr inbounds %struct.line*, %struct.line** %48, i64 %49
  store %struct.line* %add.ptr14, %struct.line** %arrayidx15, align 8, !tbaa !6
  %50 = load i64, i64* %i, align 8, !tbaa !14
  %inc = add i64 %50, 1
  store i64 %inc, i64* %i, align 8, !tbaa !14
  %51 = bitcast %struct.line** %linelim to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %51) #13
  br label %if.end34

if.else:                                          ; preds = %cond.end
  %52 = load %struct._IO_FILE**, %struct._IO_FILE*** %fps.addr, align 8, !tbaa !6
  %53 = load i64, i64* %i, align 8, !tbaa !14
  %arrayidx16 = getelementptr inbounds %struct._IO_FILE*, %struct._IO_FILE** %52, i64 %53
  %54 = load %struct._IO_FILE*, %struct._IO_FILE** %arrayidx16, align 8, !tbaa !6
  %55 = load %struct.sortfile*, %struct.sortfile** %files.addr, align 8, !tbaa !6
  %56 = load i64, i64* %i, align 8, !tbaa !14
  %arrayidx17 = getelementptr inbounds %struct.sortfile, %struct.sortfile* %55, i64 %56
  %name18 = getelementptr inbounds %struct.sortfile, %struct.sortfile* %arrayidx17, i32 0, i32 0
  %57 = load i8*, i8** %name18, align 8, !tbaa !46
  call void @xfclose(%struct._IO_FILE* %54, i8* %57)
  %58 = load i64, i64* %i, align 8, !tbaa !14
  %59 = load i64, i64* %ntemps.addr, align 8, !tbaa !14
  %cmp19 = icmp ult i64 %58, %59
  br i1 %cmp19, label %if.then20, label %if.end

if.then20:                                        ; preds = %if.else
  %60 = load i64, i64* %ntemps.addr, align 8, !tbaa !14
  %dec = add i64 %60, -1
  store i64 %dec, i64* %ntemps.addr, align 8, !tbaa !14
  %61 = load %struct.sortfile*, %struct.sortfile** %files.addr, align 8, !tbaa !6
  %62 = load i64, i64* %i, align 8, !tbaa !14
  %arrayidx21 = getelementptr inbounds %struct.sortfile, %struct.sortfile* %61, i64 %62
  %name22 = getelementptr inbounds %struct.sortfile, %struct.sortfile* %arrayidx21, i32 0, i32 0
  %63 = load i8*, i8** %name22, align 8, !tbaa !46
  call void @zaptemp(i8* %63)
  br label %if.end

if.end:                                           ; preds = %if.then20, %if.else
  %64 = load %struct.buffer*, %struct.buffer** %buffer, align 8, !tbaa !6
  %65 = load i64, i64* %i, align 8, !tbaa !14
  %arrayidx23 = getelementptr inbounds %struct.buffer, %struct.buffer* %64, i64 %65
  %buf = getelementptr inbounds %struct.buffer, %struct.buffer* %arrayidx23, i32 0, i32 0
  %66 = load i8*, i8** %buf, align 8, !tbaa !67
  call void @rpl_free(i8* %66)
  %67 = load i64, i64* %nfiles.addr, align 8, !tbaa !14
  %dec24 = add i64 %67, -1
  store i64 %dec24, i64* %nfiles.addr, align 8, !tbaa !14
  %68 = load i64, i64* %i, align 8, !tbaa !14
  store i64 %68, i64* %j, align 8, !tbaa !14
  br label %for.cond25

for.cond25:                                       ; preds = %for.inc, %if.end
  %69 = load i64, i64* %j, align 8, !tbaa !14
  %70 = load i64, i64* %nfiles.addr, align 8, !tbaa !14
  %cmp26 = icmp ult i64 %69, %70
  br i1 %cmp26, label %for.body27, label %for.end

for.body27:                                       ; preds = %for.cond25
  %71 = load %struct.sortfile*, %struct.sortfile** %files.addr, align 8, !tbaa !6
  %72 = load i64, i64* %j, align 8, !tbaa !14
  %arrayidx28 = getelementptr inbounds %struct.sortfile, %struct.sortfile* %71, i64 %72
  %73 = load %struct.sortfile*, %struct.sortfile** %files.addr, align 8, !tbaa !6
  %74 = load i64, i64* %j, align 8, !tbaa !14
  %add = add i64 %74, 1
  %arrayidx29 = getelementptr inbounds %struct.sortfile, %struct.sortfile* %73, i64 %add
  %75 = bitcast %struct.sortfile* %arrayidx28 to i8*
  %76 = bitcast %struct.sortfile* %arrayidx29 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %75, i8* align 8 %76, i64 16, i1 false), !tbaa.struct !111
  %77 = load %struct._IO_FILE**, %struct._IO_FILE*** %fps.addr, align 8, !tbaa !6
  %78 = load i64, i64* %j, align 8, !tbaa !14
  %add30 = add i64 %78, 1
  %arrayidx31 = getelementptr inbounds %struct._IO_FILE*, %struct._IO_FILE** %77, i64 %add30
  %79 = load %struct._IO_FILE*, %struct._IO_FILE** %arrayidx31, align 8, !tbaa !6
  %80 = load %struct._IO_FILE**, %struct._IO_FILE*** %fps.addr, align 8, !tbaa !6
  %81 = load i64, i64* %j, align 8, !tbaa !14
  %arrayidx32 = getelementptr inbounds %struct._IO_FILE*, %struct._IO_FILE** %80, i64 %81
  store %struct._IO_FILE* %79, %struct._IO_FILE** %arrayidx32, align 8, !tbaa !6
  br label %for.inc

for.inc:                                          ; preds = %for.body27
  %82 = load i64, i64* %j, align 8, !tbaa !14
  %inc33 = add i64 %82, 1
  store i64 %inc33, i64* %j, align 8, !tbaa !14
  br label %for.cond25

for.end:                                          ; preds = %for.cond25
  br label %if.end34

if.end34:                                         ; preds = %for.end, %if.then
  br label %for.cond

for.end35:                                        ; preds = %for.cond
  store i64 0, i64* %i, align 8, !tbaa !14
  br label %for.cond36

for.cond36:                                       ; preds = %for.inc40, %for.end35
  %83 = load i64, i64* %i, align 8, !tbaa !14
  %84 = load i64, i64* %nfiles.addr, align 8, !tbaa !14
  %cmp37 = icmp ult i64 %83, %84
  br i1 %cmp37, label %for.body38, label %for.end42

for.body38:                                       ; preds = %for.cond36
  %85 = load i64, i64* %i, align 8, !tbaa !14
  %86 = load i64*, i64** %ord, align 8, !tbaa !6
  %87 = load i64, i64* %i, align 8, !tbaa !14
  %arrayidx39 = getelementptr inbounds i64, i64* %86, i64 %87
  store i64 %85, i64* %arrayidx39, align 8, !tbaa !14
  br label %for.inc40

for.inc40:                                        ; preds = %for.body38
  %88 = load i64, i64* %i, align 8, !tbaa !14
  %inc41 = add i64 %88, 1
  store i64 %inc41, i64* %i, align 8, !tbaa !14
  br label %for.cond36

for.end42:                                        ; preds = %for.cond36
  store i64 1, i64* %i, align 8, !tbaa !14
  br label %for.cond43

for.cond43:                                       ; preds = %for.inc60, %for.end42
  %89 = load i64, i64* %i, align 8, !tbaa !14
  %90 = load i64, i64* %nfiles.addr, align 8, !tbaa !14
  %cmp44 = icmp ult i64 %89, %90
  br i1 %cmp44, label %for.body45, label %for.end62

for.body45:                                       ; preds = %for.cond43
  %91 = load %struct.line**, %struct.line*** %cur, align 8, !tbaa !6
  %92 = load i64*, i64** %ord, align 8, !tbaa !6
  %93 = load i64, i64* %i, align 8, !tbaa !14
  %sub = sub i64 %93, 1
  %arrayidx46 = getelementptr inbounds i64, i64* %92, i64 %sub
  %94 = load i64, i64* %arrayidx46, align 8, !tbaa !14
  %arrayidx47 = getelementptr inbounds %struct.line*, %struct.line** %91, i64 %94
  %95 = load %struct.line*, %struct.line** %arrayidx47, align 8, !tbaa !6
  %96 = load %struct.line**, %struct.line*** %cur, align 8, !tbaa !6
  %97 = load i64*, i64** %ord, align 8, !tbaa !6
  %98 = load i64, i64* %i, align 8, !tbaa !14
  %arrayidx48 = getelementptr inbounds i64, i64* %97, i64 %98
  %99 = load i64, i64* %arrayidx48, align 8, !tbaa !14
  %arrayidx49 = getelementptr inbounds %struct.line*, %struct.line** %96, i64 %99
  %100 = load %struct.line*, %struct.line** %arrayidx49, align 8, !tbaa !6
  %call50 = call i32 @compare(%struct.line* %95, %struct.line* %100)
  %cmp51 = icmp slt i32 0, %call50
  br i1 %cmp51, label %if.then52, label %if.end59

if.then52:                                        ; preds = %for.body45
  %101 = load i64*, i64** %ord, align 8, !tbaa !6
  %102 = load i64, i64* %i, align 8, !tbaa !14
  %sub53 = sub i64 %102, 1
  %arrayidx54 = getelementptr inbounds i64, i64* %101, i64 %sub53
  %103 = load i64, i64* %arrayidx54, align 8, !tbaa !14
  store i64 %103, i64* %t, align 8, !tbaa !14
  %104 = load i64*, i64** %ord, align 8, !tbaa !6
  %105 = load i64, i64* %i, align 8, !tbaa !14
  %arrayidx55 = getelementptr inbounds i64, i64* %104, i64 %105
  %106 = load i64, i64* %arrayidx55, align 8, !tbaa !14
  %107 = load i64*, i64** %ord, align 8, !tbaa !6
  %108 = load i64, i64* %i, align 8, !tbaa !14
  %sub56 = sub i64 %108, 1
  %arrayidx57 = getelementptr inbounds i64, i64* %107, i64 %sub56
  store i64 %106, i64* %arrayidx57, align 8, !tbaa !14
  %109 = load i64, i64* %t, align 8, !tbaa !14
  %110 = load i64*, i64** %ord, align 8, !tbaa !6
  %111 = load i64, i64* %i, align 8, !tbaa !14
  %arrayidx58 = getelementptr inbounds i64, i64* %110, i64 %111
  store i64 %109, i64* %arrayidx58, align 8, !tbaa !14
  store i64 0, i64* %i, align 8, !tbaa !14
  br label %if.end59

if.end59:                                         ; preds = %if.then52, %for.body45
  br label %for.inc60

for.inc60:                                        ; preds = %if.end59
  %112 = load i64, i64* %i, align 8, !tbaa !14
  %inc61 = add i64 %112, 1
  store i64 %inc61, i64* %i, align 8, !tbaa !14
  br label %for.cond43

for.end62:                                        ; preds = %for.cond43
  br label %while.cond

while.cond:                                       ; preds = %cleanup.cont, %cleanup, %for.end62
  %113 = load i64, i64* %nfiles.addr, align 8, !tbaa !14
  %tobool = icmp ne i64 %113, 0
  br i1 %tobool, label %while.body, label %while.end234

while.body:                                       ; preds = %while.cond
  %114 = bitcast %struct.line** %smallest to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %114) #13
  %115 = load %struct.line**, %struct.line*** %cur, align 8, !tbaa !6
  %116 = load i64*, i64** %ord, align 8, !tbaa !6
  %arrayidx63 = getelementptr inbounds i64, i64* %116, i64 0
  %117 = load i64, i64* %arrayidx63, align 8, !tbaa !14
  %arrayidx64 = getelementptr inbounds %struct.line*, %struct.line** %115, i64 %117
  %118 = load %struct.line*, %struct.line** %arrayidx64, align 8, !tbaa !6
  store %struct.line* %118, %struct.line** %smallest, align 8, !tbaa !6
  %119 = load i8, i8* @unique, align 1, !tbaa !11, !range !25
  %tobool65 = trunc i8 %119 to i1
  br i1 %tobool65, label %if.then66, label %if.else106

if.then66:                                        ; preds = %while.body
  %120 = load %struct.line*, %struct.line** %savedline, align 8, !tbaa !6
  %tobool67 = icmp ne %struct.line* %120, null
  br i1 %tobool67, label %land.lhs.true, label %if.end71

land.lhs.true:                                    ; preds = %if.then66
  %121 = load %struct.line*, %struct.line** %savedline, align 8, !tbaa !6
  %122 = load %struct.line*, %struct.line** %smallest, align 8, !tbaa !6
  %call68 = call i32 @compare(%struct.line* %121, %struct.line* %122)
  %tobool69 = icmp ne i32 %call68, 0
  br i1 %tobool69, label %if.then70, label %if.end71

if.then70:                                        ; preds = %land.lhs.true
  store %struct.line* null, %struct.line** %savedline, align 8, !tbaa !6
  %123 = load %struct._IO_FILE*, %struct._IO_FILE** %ofp.addr, align 8, !tbaa !6
  %124 = load i8*, i8** %output_file.addr, align 8, !tbaa !6
  call void @write_line(%struct.line* %saved, %struct._IO_FILE* %123, i8* %124)
  br label %if.end71

if.end71:                                         ; preds = %if.then70, %land.lhs.true, %if.then66
  %125 = load %struct.line*, %struct.line** %savedline, align 8, !tbaa !6
  %tobool72 = icmp ne %struct.line* %125, null
  br i1 %tobool72, label %if.end105, label %if.then73

if.then73:                                        ; preds = %if.end71
  store %struct.line* %saved, %struct.line** %savedline, align 8, !tbaa !6
  %126 = load i64, i64* %savealloc, align 8, !tbaa !14
  %127 = load %struct.line*, %struct.line** %smallest, align 8, !tbaa !6
  %length = getelementptr inbounds %struct.line, %struct.line* %127, i32 0, i32 1
  %128 = load i64, i64* %length, align 8, !tbaa !64
  %cmp74 = icmp ult i64 %126, %128
  br i1 %cmp74, label %if.then75, label %if.end85

if.then75:                                        ; preds = %if.then73
  br label %do.body

do.body:                                          ; preds = %do.cond, %if.then75
  %129 = load i64, i64* %savealloc, align 8, !tbaa !14
  %tobool76 = icmp ne i64 %129, 0
  br i1 %tobool76, label %if.end79, label %if.then77

if.then77:                                        ; preds = %do.body
  %130 = load %struct.line*, %struct.line** %smallest, align 8, !tbaa !6
  %length78 = getelementptr inbounds %struct.line, %struct.line* %130, i32 0, i32 1
  %131 = load i64, i64* %length78, align 8, !tbaa !64
  store i64 %131, i64* %savealloc, align 8, !tbaa !14
  br label %do.end

if.end79:                                         ; preds = %do.body
  br label %do.cond

do.cond:                                          ; preds = %if.end79
  %132 = load i64, i64* %savealloc, align 8, !tbaa !14
  %mul = mul i64 %132, 2
  store i64 %mul, i64* %savealloc, align 8, !tbaa !14
  %133 = load %struct.line*, %struct.line** %smallest, align 8, !tbaa !6
  %length80 = getelementptr inbounds %struct.line, %struct.line* %133, i32 0, i32 1
  %134 = load i64, i64* %length80, align 8, !tbaa !64
  %cmp81 = icmp ult i64 %mul, %134
  br i1 %cmp81, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond, %if.then77
  %text82 = getelementptr inbounds %struct.line, %struct.line* %saved, i32 0, i32 0
  %135 = load i8*, i8** %text82, align 8, !tbaa !60
  call void @rpl_free(i8* %135)
  %136 = load i64, i64* %savealloc, align 8, !tbaa !14
  %call83 = call noalias nonnull i8* @xmalloc(i64 %136) #25
  %text84 = getelementptr inbounds %struct.line, %struct.line* %saved, i32 0, i32 0
  store i8* %call83, i8** %text84, align 8, !tbaa !60
  br label %if.end85

if.end85:                                         ; preds = %do.end, %if.then73
  %137 = load %struct.line*, %struct.line** %smallest, align 8, !tbaa !6
  %length86 = getelementptr inbounds %struct.line, %struct.line* %137, i32 0, i32 1
  %138 = load i64, i64* %length86, align 8, !tbaa !64
  %length87 = getelementptr inbounds %struct.line, %struct.line* %saved, i32 0, i32 1
  store i64 %138, i64* %length87, align 8, !tbaa !64
  %text88 = getelementptr inbounds %struct.line, %struct.line* %saved, i32 0, i32 0
  %139 = load i8*, i8** %text88, align 8, !tbaa !60
  %140 = load %struct.line*, %struct.line** %smallest, align 8, !tbaa !6
  %text89 = getelementptr inbounds %struct.line, %struct.line* %140, i32 0, i32 0
  %141 = load i8*, i8** %text89, align 8, !tbaa !60
  %length90 = getelementptr inbounds %struct.line, %struct.line* %saved, i32 0, i32 1
  %142 = load i64, i64* %length90, align 8, !tbaa !64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %139, i8* align 1 %141, i64 %142, i1 false)
  %143 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !tbaa !6
  %tobool91 = icmp ne %struct.keyfield* %143, null
  br i1 %tobool91, label %if.then92, label %if.end104

if.then92:                                        ; preds = %if.end85
  %text93 = getelementptr inbounds %struct.line, %struct.line* %saved, i32 0, i32 0
  %144 = load i8*, i8** %text93, align 8, !tbaa !60
  %145 = load %struct.line*, %struct.line** %smallest, align 8, !tbaa !6
  %keybeg = getelementptr inbounds %struct.line, %struct.line* %145, i32 0, i32 2
  %146 = load i8*, i8** %keybeg, align 8, !tbaa !65
  %147 = load %struct.line*, %struct.line** %smallest, align 8, !tbaa !6
  %text94 = getelementptr inbounds %struct.line, %struct.line* %147, i32 0, i32 0
  %148 = load i8*, i8** %text94, align 8, !tbaa !60
  %sub.ptr.lhs.cast = ptrtoint i8* %146 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %148 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %add.ptr95 = getelementptr inbounds i8, i8* %144, i64 %sub.ptr.sub
  %keybeg96 = getelementptr inbounds %struct.line, %struct.line* %saved, i32 0, i32 2
  store i8* %add.ptr95, i8** %keybeg96, align 8, !tbaa !65
  %text97 = getelementptr inbounds %struct.line, %struct.line* %saved, i32 0, i32 0
  %149 = load i8*, i8** %text97, align 8, !tbaa !60
  %150 = load %struct.line*, %struct.line** %smallest, align 8, !tbaa !6
  %keylim = getelementptr inbounds %struct.line, %struct.line* %150, i32 0, i32 3
  %151 = load i8*, i8** %keylim, align 8, !tbaa !66
  %152 = load %struct.line*, %struct.line** %smallest, align 8, !tbaa !6
  %text98 = getelementptr inbounds %struct.line, %struct.line* %152, i32 0, i32 0
  %153 = load i8*, i8** %text98, align 8, !tbaa !60
  %sub.ptr.lhs.cast99 = ptrtoint i8* %151 to i64
  %sub.ptr.rhs.cast100 = ptrtoint i8* %153 to i64
  %sub.ptr.sub101 = sub i64 %sub.ptr.lhs.cast99, %sub.ptr.rhs.cast100
  %add.ptr102 = getelementptr inbounds i8, i8* %149, i64 %sub.ptr.sub101
  %keylim103 = getelementptr inbounds %struct.line, %struct.line* %saved, i32 0, i32 3
  store i8* %add.ptr102, i8** %keylim103, align 8, !tbaa !66
  br label %if.end104

if.end104:                                        ; preds = %if.then92, %if.end85
  br label %if.end105

if.end105:                                        ; preds = %if.end104, %if.end71
  br label %if.end107

if.else106:                                       ; preds = %while.body
  %154 = load %struct.line*, %struct.line** %smallest, align 8, !tbaa !6
  %155 = load %struct._IO_FILE*, %struct._IO_FILE** %ofp.addr, align 8, !tbaa !6
  %156 = load i8*, i8** %output_file.addr, align 8, !tbaa !6
  call void @write_line(%struct.line* %154, %struct._IO_FILE* %155, i8* %156)
  br label %if.end107

if.end107:                                        ; preds = %if.else106, %if.end105
  %157 = load %struct.line**, %struct.line*** %base, align 8, !tbaa !6
  %158 = load i64*, i64** %ord, align 8, !tbaa !6
  %arrayidx108 = getelementptr inbounds i64, i64* %158, i64 0
  %159 = load i64, i64* %arrayidx108, align 8, !tbaa !14
  %arrayidx109 = getelementptr inbounds %struct.line*, %struct.line** %157, i64 %159
  %160 = load %struct.line*, %struct.line** %arrayidx109, align 8, !tbaa !6
  %161 = load %struct.line*, %struct.line** %smallest, align 8, !tbaa !6
  %cmp110 = icmp ult %struct.line* %160, %161
  br i1 %cmp110, label %if.then111, label %if.else115

if.then111:                                       ; preds = %if.end107
  %162 = load %struct.line*, %struct.line** %smallest, align 8, !tbaa !6
  %add.ptr112 = getelementptr inbounds %struct.line, %struct.line* %162, i64 -1
  %163 = load %struct.line**, %struct.line*** %cur, align 8, !tbaa !6
  %164 = load i64*, i64** %ord, align 8, !tbaa !6
  %arrayidx113 = getelementptr inbounds i64, i64* %164, i64 0
  %165 = load i64, i64* %arrayidx113, align 8, !tbaa !14
  %arrayidx114 = getelementptr inbounds %struct.line*, %struct.line** %163, i64 %165
  store %struct.line* %add.ptr112, %struct.line** %arrayidx114, align 8, !tbaa !6
  br label %if.end202

if.else115:                                       ; preds = %if.end107
  %166 = load %struct.buffer*, %struct.buffer** %buffer, align 8, !tbaa !6
  %167 = load i64*, i64** %ord, align 8, !tbaa !6
  %arrayidx116 = getelementptr inbounds i64, i64* %167, i64 0
  %168 = load i64, i64* %arrayidx116, align 8, !tbaa !14
  %arrayidx117 = getelementptr inbounds %struct.buffer, %struct.buffer* %166, i64 %168
  %169 = load %struct._IO_FILE**, %struct._IO_FILE*** %fps.addr, align 8, !tbaa !6
  %170 = load i64*, i64** %ord, align 8, !tbaa !6
  %arrayidx118 = getelementptr inbounds i64, i64* %170, i64 0
  %171 = load i64, i64* %arrayidx118, align 8, !tbaa !14
  %arrayidx119 = getelementptr inbounds %struct._IO_FILE*, %struct._IO_FILE** %169, i64 %171
  %172 = load %struct._IO_FILE*, %struct._IO_FILE** %arrayidx119, align 8, !tbaa !6
  %173 = load %struct.sortfile*, %struct.sortfile** %files.addr, align 8, !tbaa !6
  %174 = load i64*, i64** %ord, align 8, !tbaa !6
  %arrayidx120 = getelementptr inbounds i64, i64* %174, i64 0
  %175 = load i64, i64* %arrayidx120, align 8, !tbaa !14
  %arrayidx121 = getelementptr inbounds %struct.sortfile, %struct.sortfile* %173, i64 %175
  %name122 = getelementptr inbounds %struct.sortfile, %struct.sortfile* %arrayidx121, i32 0, i32 0
  %176 = load i8*, i8** %name122, align 8, !tbaa !46
  %call123 = call zeroext i1 @fillbuf(%struct.buffer* %arrayidx117, %struct._IO_FILE* %172, i8* %176)
  br i1 %call123, label %if.then124, label %if.else139

if.then124:                                       ; preds = %if.else115
  %177 = bitcast %struct.line** %linelim125 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %177) #13
  %178 = load %struct.buffer*, %struct.buffer** %buffer, align 8, !tbaa !6
  %179 = load i64*, i64** %ord, align 8, !tbaa !6
  %arrayidx126 = getelementptr inbounds i64, i64* %179, i64 0
  %180 = load i64, i64* %arrayidx126, align 8, !tbaa !14
  %arrayidx127 = getelementptr inbounds %struct.buffer, %struct.buffer* %178, i64 %180
  %call128 = call %struct.line* @buffer_linelim(%struct.buffer* %arrayidx127)
  store %struct.line* %call128, %struct.line** %linelim125, align 8, !tbaa !6
  %181 = load %struct.line*, %struct.line** %linelim125, align 8, !tbaa !6
  %add.ptr129 = getelementptr inbounds %struct.line, %struct.line* %181, i64 -1
  %182 = load %struct.line**, %struct.line*** %cur, align 8, !tbaa !6
  %183 = load i64*, i64** %ord, align 8, !tbaa !6
  %arrayidx130 = getelementptr inbounds i64, i64* %183, i64 0
  %184 = load i64, i64* %arrayidx130, align 8, !tbaa !14
  %arrayidx131 = getelementptr inbounds %struct.line*, %struct.line** %182, i64 %184
  store %struct.line* %add.ptr129, %struct.line** %arrayidx131, align 8, !tbaa !6
  %185 = load %struct.line*, %struct.line** %linelim125, align 8, !tbaa !6
  %186 = load %struct.buffer*, %struct.buffer** %buffer, align 8, !tbaa !6
  %187 = load i64*, i64** %ord, align 8, !tbaa !6
  %arrayidx132 = getelementptr inbounds i64, i64* %187, i64 0
  %188 = load i64, i64* %arrayidx132, align 8, !tbaa !14
  %arrayidx133 = getelementptr inbounds %struct.buffer, %struct.buffer* %186, i64 %188
  %nlines134 = getelementptr inbounds %struct.buffer, %struct.buffer* %arrayidx133, i32 0, i32 2
  %189 = load i64, i64* %nlines134, align 8, !tbaa !62
  %idx.neg135 = sub i64 0, %189
  %add.ptr136 = getelementptr inbounds %struct.line, %struct.line* %185, i64 %idx.neg135
  %190 = load %struct.line**, %struct.line*** %base, align 8, !tbaa !6
  %191 = load i64*, i64** %ord, align 8, !tbaa !6
  %arrayidx137 = getelementptr inbounds i64, i64* %191, i64 0
  %192 = load i64, i64* %arrayidx137, align 8, !tbaa !14
  %arrayidx138 = getelementptr inbounds %struct.line*, %struct.line** %190, i64 %192
  store %struct.line* %add.ptr136, %struct.line** %arrayidx138, align 8, !tbaa !6
  %193 = bitcast %struct.line** %linelim125 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %193) #13
  br label %if.end201

if.else139:                                       ; preds = %if.else115
  store i64 1, i64* %i, align 8, !tbaa !14
  br label %for.cond140

for.cond140:                                      ; preds = %for.inc150, %if.else139
  %194 = load i64, i64* %i, align 8, !tbaa !14
  %195 = load i64, i64* %nfiles.addr, align 8, !tbaa !14
  %cmp141 = icmp ult i64 %194, %195
  br i1 %cmp141, label %for.body142, label %for.end152

for.body142:                                      ; preds = %for.cond140
  %196 = load i64*, i64** %ord, align 8, !tbaa !6
  %197 = load i64, i64* %i, align 8, !tbaa !14
  %arrayidx143 = getelementptr inbounds i64, i64* %196, i64 %197
  %198 = load i64, i64* %arrayidx143, align 8, !tbaa !14
  %199 = load i64*, i64** %ord, align 8, !tbaa !6
  %arrayidx144 = getelementptr inbounds i64, i64* %199, i64 0
  %200 = load i64, i64* %arrayidx144, align 8, !tbaa !14
  %cmp145 = icmp ugt i64 %198, %200
  br i1 %cmp145, label %if.then146, label %if.end149

if.then146:                                       ; preds = %for.body142
  %201 = load i64*, i64** %ord, align 8, !tbaa !6
  %202 = load i64, i64* %i, align 8, !tbaa !14
  %arrayidx147 = getelementptr inbounds i64, i64* %201, i64 %202
  %203 = load i64, i64* %arrayidx147, align 8, !tbaa !14
  %dec148 = add i64 %203, -1
  store i64 %dec148, i64* %arrayidx147, align 8, !tbaa !14
  br label %if.end149

if.end149:                                        ; preds = %if.then146, %for.body142
  br label %for.inc150

for.inc150:                                       ; preds = %if.end149
  %204 = load i64, i64* %i, align 8, !tbaa !14
  %inc151 = add i64 %204, 1
  store i64 %inc151, i64* %i, align 8, !tbaa !14
  br label %for.cond140

for.end152:                                       ; preds = %for.cond140
  %205 = load i64, i64* %nfiles.addr, align 8, !tbaa !14
  %dec153 = add i64 %205, -1
  store i64 %dec153, i64* %nfiles.addr, align 8, !tbaa !14
  %206 = load %struct._IO_FILE**, %struct._IO_FILE*** %fps.addr, align 8, !tbaa !6
  %207 = load i64*, i64** %ord, align 8, !tbaa !6
  %arrayidx154 = getelementptr inbounds i64, i64* %207, i64 0
  %208 = load i64, i64* %arrayidx154, align 8, !tbaa !14
  %arrayidx155 = getelementptr inbounds %struct._IO_FILE*, %struct._IO_FILE** %206, i64 %208
  %209 = load %struct._IO_FILE*, %struct._IO_FILE** %arrayidx155, align 8, !tbaa !6
  %210 = load %struct.sortfile*, %struct.sortfile** %files.addr, align 8, !tbaa !6
  %211 = load i64*, i64** %ord, align 8, !tbaa !6
  %arrayidx156 = getelementptr inbounds i64, i64* %211, i64 0
  %212 = load i64, i64* %arrayidx156, align 8, !tbaa !14
  %arrayidx157 = getelementptr inbounds %struct.sortfile, %struct.sortfile* %210, i64 %212
  %name158 = getelementptr inbounds %struct.sortfile, %struct.sortfile* %arrayidx157, i32 0, i32 0
  %213 = load i8*, i8** %name158, align 8, !tbaa !46
  call void @xfclose(%struct._IO_FILE* %209, i8* %213)
  %214 = load i64*, i64** %ord, align 8, !tbaa !6
  %arrayidx159 = getelementptr inbounds i64, i64* %214, i64 0
  %215 = load i64, i64* %arrayidx159, align 8, !tbaa !14
  %216 = load i64, i64* %ntemps.addr, align 8, !tbaa !14
  %cmp160 = icmp ult i64 %215, %216
  br i1 %cmp160, label %if.then161, label %if.end166

if.then161:                                       ; preds = %for.end152
  %217 = load i64, i64* %ntemps.addr, align 8, !tbaa !14
  %dec162 = add i64 %217, -1
  store i64 %dec162, i64* %ntemps.addr, align 8, !tbaa !14
  %218 = load %struct.sortfile*, %struct.sortfile** %files.addr, align 8, !tbaa !6
  %219 = load i64*, i64** %ord, align 8, !tbaa !6
  %arrayidx163 = getelementptr inbounds i64, i64* %219, i64 0
  %220 = load i64, i64* %arrayidx163, align 8, !tbaa !14
  %arrayidx164 = getelementptr inbounds %struct.sortfile, %struct.sortfile* %218, i64 %220
  %name165 = getelementptr inbounds %struct.sortfile, %struct.sortfile* %arrayidx164, i32 0, i32 0
  %221 = load i8*, i8** %name165, align 8, !tbaa !46
  call void @zaptemp(i8* %221)
  br label %if.end166

if.end166:                                        ; preds = %if.then161, %for.end152
  %222 = load %struct.buffer*, %struct.buffer** %buffer, align 8, !tbaa !6
  %223 = load i64*, i64** %ord, align 8, !tbaa !6
  %arrayidx167 = getelementptr inbounds i64, i64* %223, i64 0
  %224 = load i64, i64* %arrayidx167, align 8, !tbaa !14
  %arrayidx168 = getelementptr inbounds %struct.buffer, %struct.buffer* %222, i64 %224
  %buf169 = getelementptr inbounds %struct.buffer, %struct.buffer* %arrayidx168, i32 0, i32 0
  %225 = load i8*, i8** %buf169, align 8, !tbaa !67
  call void @rpl_free(i8* %225)
  %226 = load i64*, i64** %ord, align 8, !tbaa !6
  %arrayidx170 = getelementptr inbounds i64, i64* %226, i64 0
  %227 = load i64, i64* %arrayidx170, align 8, !tbaa !14
  store i64 %227, i64* %i, align 8, !tbaa !14
  br label %for.cond171

for.cond171:                                      ; preds = %for.inc189, %if.end166
  %228 = load i64, i64* %i, align 8, !tbaa !14
  %229 = load i64, i64* %nfiles.addr, align 8, !tbaa !14
  %cmp172 = icmp ult i64 %228, %229
  br i1 %cmp172, label %for.body173, label %for.end191

for.body173:                                      ; preds = %for.cond171
  %230 = load %struct._IO_FILE**, %struct._IO_FILE*** %fps.addr, align 8, !tbaa !6
  %231 = load i64, i64* %i, align 8, !tbaa !14
  %add174 = add i64 %231, 1
  %arrayidx175 = getelementptr inbounds %struct._IO_FILE*, %struct._IO_FILE** %230, i64 %add174
  %232 = load %struct._IO_FILE*, %struct._IO_FILE** %arrayidx175, align 8, !tbaa !6
  %233 = load %struct._IO_FILE**, %struct._IO_FILE*** %fps.addr, align 8, !tbaa !6
  %234 = load i64, i64* %i, align 8, !tbaa !14
  %arrayidx176 = getelementptr inbounds %struct._IO_FILE*, %struct._IO_FILE** %233, i64 %234
  store %struct._IO_FILE* %232, %struct._IO_FILE** %arrayidx176, align 8, !tbaa !6
  %235 = load %struct.sortfile*, %struct.sortfile** %files.addr, align 8, !tbaa !6
  %236 = load i64, i64* %i, align 8, !tbaa !14
  %arrayidx177 = getelementptr inbounds %struct.sortfile, %struct.sortfile* %235, i64 %236
  %237 = load %struct.sortfile*, %struct.sortfile** %files.addr, align 8, !tbaa !6
  %238 = load i64, i64* %i, align 8, !tbaa !14
  %add178 = add i64 %238, 1
  %arrayidx179 = getelementptr inbounds %struct.sortfile, %struct.sortfile* %237, i64 %add178
  %239 = bitcast %struct.sortfile* %arrayidx177 to i8*
  %240 = bitcast %struct.sortfile* %arrayidx179 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %239, i8* align 8 %240, i64 16, i1 false), !tbaa.struct !111
  %241 = load %struct.buffer*, %struct.buffer** %buffer, align 8, !tbaa !6
  %242 = load i64, i64* %i, align 8, !tbaa !14
  %arrayidx180 = getelementptr inbounds %struct.buffer, %struct.buffer* %241, i64 %242
  %243 = load %struct.buffer*, %struct.buffer** %buffer, align 8, !tbaa !6
  %244 = load i64, i64* %i, align 8, !tbaa !14
  %add181 = add i64 %244, 1
  %arrayidx182 = getelementptr inbounds %struct.buffer, %struct.buffer* %243, i64 %add181
  %245 = bitcast %struct.buffer* %arrayidx180 to i8*
  %246 = bitcast %struct.buffer* %arrayidx182 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %245, i8* align 8 %246, i64 56, i1 false), !tbaa.struct !112
  %247 = load %struct.line**, %struct.line*** %cur, align 8, !tbaa !6
  %248 = load i64, i64* %i, align 8, !tbaa !14
  %add183 = add i64 %248, 1
  %arrayidx184 = getelementptr inbounds %struct.line*, %struct.line** %247, i64 %add183
  %249 = load %struct.line*, %struct.line** %arrayidx184, align 8, !tbaa !6
  %250 = load %struct.line**, %struct.line*** %cur, align 8, !tbaa !6
  %251 = load i64, i64* %i, align 8, !tbaa !14
  %arrayidx185 = getelementptr inbounds %struct.line*, %struct.line** %250, i64 %251
  store %struct.line* %249, %struct.line** %arrayidx185, align 8, !tbaa !6
  %252 = load %struct.line**, %struct.line*** %base, align 8, !tbaa !6
  %253 = load i64, i64* %i, align 8, !tbaa !14
  %add186 = add i64 %253, 1
  %arrayidx187 = getelementptr inbounds %struct.line*, %struct.line** %252, i64 %add186
  %254 = load %struct.line*, %struct.line** %arrayidx187, align 8, !tbaa !6
  %255 = load %struct.line**, %struct.line*** %base, align 8, !tbaa !6
  %256 = load i64, i64* %i, align 8, !tbaa !14
  %arrayidx188 = getelementptr inbounds %struct.line*, %struct.line** %255, i64 %256
  store %struct.line* %254, %struct.line** %arrayidx188, align 8, !tbaa !6
  br label %for.inc189

for.inc189:                                       ; preds = %for.body173
  %257 = load i64, i64* %i, align 8, !tbaa !14
  %inc190 = add i64 %257, 1
  store i64 %inc190, i64* %i, align 8, !tbaa !14
  br label %for.cond171

for.end191:                                       ; preds = %for.cond171
  store i64 0, i64* %i, align 8, !tbaa !14
  br label %for.cond192

for.cond192:                                      ; preds = %for.inc198, %for.end191
  %258 = load i64, i64* %i, align 8, !tbaa !14
  %259 = load i64, i64* %nfiles.addr, align 8, !tbaa !14
  %cmp193 = icmp ult i64 %258, %259
  br i1 %cmp193, label %for.body194, label %for.end200

for.body194:                                      ; preds = %for.cond192
  %260 = load i64*, i64** %ord, align 8, !tbaa !6
  %261 = load i64, i64* %i, align 8, !tbaa !14
  %add195 = add i64 %261, 1
  %arrayidx196 = getelementptr inbounds i64, i64* %260, i64 %add195
  %262 = load i64, i64* %arrayidx196, align 8, !tbaa !14
  %263 = load i64*, i64** %ord, align 8, !tbaa !6
  %264 = load i64, i64* %i, align 8, !tbaa !14
  %arrayidx197 = getelementptr inbounds i64, i64* %263, i64 %264
  store i64 %262, i64* %arrayidx197, align 8, !tbaa !14
  br label %for.inc198

for.inc198:                                       ; preds = %for.body194
  %265 = load i64, i64* %i, align 8, !tbaa !14
  %inc199 = add i64 %265, 1
  store i64 %inc199, i64* %i, align 8, !tbaa !14
  br label %for.cond192

for.end200:                                       ; preds = %for.cond192
  store i32 13, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end201:                                        ; preds = %if.then124
  br label %if.end202

if.end202:                                        ; preds = %if.end201, %if.then111
  %266 = bitcast i64* %lo to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %266) #13
  store i64 1, i64* %lo, align 8, !tbaa !14
  %267 = bitcast i64* %hi to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %267) #13
  %268 = load i64, i64* %nfiles.addr, align 8, !tbaa !14
  store i64 %268, i64* %hi, align 8, !tbaa !14
  %269 = bitcast i64* %probe to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %269) #13
  %270 = load i64, i64* %lo, align 8, !tbaa !14
  store i64 %270, i64* %probe, align 8, !tbaa !14
  %271 = bitcast i64* %ord0 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %271) #13
  %272 = load i64*, i64** %ord, align 8, !tbaa !6
  %arrayidx203 = getelementptr inbounds i64, i64* %272, i64 0
  %273 = load i64, i64* %arrayidx203, align 8, !tbaa !14
  store i64 %273, i64* %ord0, align 8, !tbaa !14
  %274 = bitcast i64* %count_of_smaller_lines to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %274) #13
  br label %while.cond204

while.cond204:                                    ; preds = %if.end220, %if.end202
  %275 = load i64, i64* %lo, align 8, !tbaa !14
  %276 = load i64, i64* %hi, align 8, !tbaa !14
  %cmp205 = icmp ult i64 %275, %276
  br i1 %cmp205, label %while.body206, label %while.end

while.body206:                                    ; preds = %while.cond204
  %277 = bitcast i32* %cmp207 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %277) #13
  %278 = load %struct.line**, %struct.line*** %cur, align 8, !tbaa !6
  %279 = load i64, i64* %ord0, align 8, !tbaa !14
  %arrayidx208 = getelementptr inbounds %struct.line*, %struct.line** %278, i64 %279
  %280 = load %struct.line*, %struct.line** %arrayidx208, align 8, !tbaa !6
  %281 = load %struct.line**, %struct.line*** %cur, align 8, !tbaa !6
  %282 = load i64*, i64** %ord, align 8, !tbaa !6
  %283 = load i64, i64* %probe, align 8, !tbaa !14
  %arrayidx209 = getelementptr inbounds i64, i64* %282, i64 %283
  %284 = load i64, i64* %arrayidx209, align 8, !tbaa !14
  %arrayidx210 = getelementptr inbounds %struct.line*, %struct.line** %281, i64 %284
  %285 = load %struct.line*, %struct.line** %arrayidx210, align 8, !tbaa !6
  %call211 = call i32 @compare(%struct.line* %280, %struct.line* %285)
  store i32 %call211, i32* %cmp207, align 4, !tbaa !2
  %286 = load i32, i32* %cmp207, align 4, !tbaa !2
  %cmp212 = icmp slt i32 %286, 0
  br i1 %cmp212, label %if.then217, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %while.body206
  %287 = load i32, i32* %cmp207, align 4, !tbaa !2
  %cmp213 = icmp eq i32 %287, 0
  br i1 %cmp213, label %land.lhs.true214, label %if.else218

land.lhs.true214:                                 ; preds = %lor.lhs.false
  %288 = load i64, i64* %ord0, align 8, !tbaa !14
  %289 = load i64*, i64** %ord, align 8, !tbaa !6
  %290 = load i64, i64* %probe, align 8, !tbaa !14
  %arrayidx215 = getelementptr inbounds i64, i64* %289, i64 %290
  %291 = load i64, i64* %arrayidx215, align 8, !tbaa !14
  %cmp216 = icmp ult i64 %288, %291
  br i1 %cmp216, label %if.then217, label %if.else218

if.then217:                                       ; preds = %land.lhs.true214, %while.body206
  %292 = load i64, i64* %probe, align 8, !tbaa !14
  store i64 %292, i64* %hi, align 8, !tbaa !14
  br label %if.end220

if.else218:                                       ; preds = %land.lhs.true214, %lor.lhs.false
  %293 = load i64, i64* %probe, align 8, !tbaa !14
  %add219 = add i64 %293, 1
  store i64 %add219, i64* %lo, align 8, !tbaa !14
  br label %if.end220

if.end220:                                        ; preds = %if.else218, %if.then217
  %294 = load i64, i64* %lo, align 8, !tbaa !14
  %295 = load i64, i64* %hi, align 8, !tbaa !14
  %add221 = add i64 %294, %295
  %div222 = udiv i64 %add221, 2
  store i64 %div222, i64* %probe, align 8, !tbaa !14
  %296 = bitcast i32* %cmp207 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %296) #13
  br label %while.cond204

while.end:                                        ; preds = %while.cond204
  %297 = load i64, i64* %lo, align 8, !tbaa !14
  %sub223 = sub i64 %297, 1
  store i64 %sub223, i64* %count_of_smaller_lines, align 8, !tbaa !14
  store i64 0, i64* %j, align 8, !tbaa !14
  br label %for.cond224

for.cond224:                                      ; preds = %for.inc230, %while.end
  %298 = load i64, i64* %j, align 8, !tbaa !14
  %299 = load i64, i64* %count_of_smaller_lines, align 8, !tbaa !14
  %cmp225 = icmp ult i64 %298, %299
  br i1 %cmp225, label %for.body226, label %for.end232

for.body226:                                      ; preds = %for.cond224
  %300 = load i64*, i64** %ord, align 8, !tbaa !6
  %301 = load i64, i64* %j, align 8, !tbaa !14
  %add227 = add i64 %301, 1
  %arrayidx228 = getelementptr inbounds i64, i64* %300, i64 %add227
  %302 = load i64, i64* %arrayidx228, align 8, !tbaa !14
  %303 = load i64*, i64** %ord, align 8, !tbaa !6
  %304 = load i64, i64* %j, align 8, !tbaa !14
  %arrayidx229 = getelementptr inbounds i64, i64* %303, i64 %304
  store i64 %302, i64* %arrayidx229, align 8, !tbaa !14
  br label %for.inc230

for.inc230:                                       ; preds = %for.body226
  %305 = load i64, i64* %j, align 8, !tbaa !14
  %inc231 = add i64 %305, 1
  store i64 %inc231, i64* %j, align 8, !tbaa !14
  br label %for.cond224

for.end232:                                       ; preds = %for.cond224
  %306 = load i64, i64* %ord0, align 8, !tbaa !14
  %307 = load i64*, i64** %ord, align 8, !tbaa !6
  %308 = load i64, i64* %count_of_smaller_lines, align 8, !tbaa !14
  %arrayidx233 = getelementptr inbounds i64, i64* %307, i64 %308
  store i64 %306, i64* %arrayidx233, align 8, !tbaa !14
  %309 = bitcast i64* %count_of_smaller_lines to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %309) #13
  %310 = bitcast i64* %ord0 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %310) #13
  %311 = bitcast i64* %probe to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %311) #13
  %312 = bitcast i64* %hi to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %312) #13
  %313 = bitcast i64* %lo to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %313) #13
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %for.end232, %for.end200
  %314 = bitcast %struct.line** %smallest to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %314) #13
  %cleanup.dest = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest, label %unreachable [
    i32 0, label %cleanup.cont
    i32 13, label %while.cond
  ]

cleanup.cont:                                     ; preds = %cleanup
  br label %while.cond

while.end234:                                     ; preds = %while.cond
  %315 = load i8, i8* @unique, align 1, !tbaa !11, !range !25
  %tobool235 = trunc i8 %315 to i1
  br i1 %tobool235, label %land.lhs.true236, label %if.end240

land.lhs.true236:                                 ; preds = %while.end234
  %316 = load %struct.line*, %struct.line** %savedline, align 8, !tbaa !6
  %tobool237 = icmp ne %struct.line* %316, null
  br i1 %tobool237, label %if.then238, label %if.end240

if.then238:                                       ; preds = %land.lhs.true236
  %317 = load %struct._IO_FILE*, %struct._IO_FILE** %ofp.addr, align 8, !tbaa !6
  %318 = load i8*, i8** %output_file.addr, align 8, !tbaa !6
  call void @write_line(%struct.line* %saved, %struct._IO_FILE* %317, i8* %318)
  %text239 = getelementptr inbounds %struct.line, %struct.line* %saved, i32 0, i32 0
  %319 = load i8*, i8** %text239, align 8, !tbaa !60
  call void @rpl_free(i8* %319)
  br label %if.end240

if.end240:                                        ; preds = %if.then238, %land.lhs.true236, %while.end234
  %320 = load %struct._IO_FILE*, %struct._IO_FILE** %ofp.addr, align 8, !tbaa !6
  %321 = load i8*, i8** %output_file.addr, align 8, !tbaa !6
  call void @xfclose(%struct._IO_FILE* %320, i8* %321)
  %322 = load %struct._IO_FILE**, %struct._IO_FILE*** %fps.addr, align 8, !tbaa !6
  %323 = bitcast %struct._IO_FILE** %322 to i8*
  call void @rpl_free(i8* %323)
  %324 = load %struct.buffer*, %struct.buffer** %buffer, align 8, !tbaa !6
  %325 = bitcast %struct.buffer* %324 to i8*
  call void @rpl_free(i8* %325)
  %326 = load i64*, i64** %ord, align 8, !tbaa !6
  %327 = bitcast i64* %326 to i8*
  call void @rpl_free(i8* %327)
  %328 = load %struct.line**, %struct.line*** %base, align 8, !tbaa !6
  %329 = bitcast %struct.line** %328 to i8*
  call void @rpl_free(i8* %329)
  %330 = load %struct.line**, %struct.line*** %cur, align 8, !tbaa !6
  %331 = bitcast %struct.line** %330 to i8*
  call void @rpl_free(i8* %331)
  %332 = bitcast %struct.keyfield** %key to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %332) #13
  %333 = bitcast i64* %t to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %333) #13
  %334 = bitcast i64* %j to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %334) #13
  %335 = bitcast i64* %i to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %335) #13
  %336 = bitcast i64** %ord to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %336) #13
  %337 = bitcast %struct.line*** %base to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %337) #13
  %338 = bitcast %struct.line*** %cur to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %338) #13
  %339 = bitcast i64* %savealloc to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %339) #13
  %340 = bitcast %struct.line** %savedline to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %340) #13
  %341 = bitcast %struct.line* %saved to i8*
  call void @llvm.lifetime.end.p0i8(i64 32, i8* %341) #13
  %342 = bitcast %struct.buffer** %buffer to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %342) #13
  ret void

unreachable:                                      ; preds = %cleanup
  unreachable
}

; Function Attrs: nounwind uwtable
define internal void @zaptemp(i8* %name) #7 {
entry:
  %name.addr = alloca i8*, align 8
  %pnode = alloca %struct.tempnode**, align 8
  %node = alloca %struct.tempnode*, align 8
  %next = alloca %struct.tempnode*, align 8
  %unlink_status = alloca i32, align 4
  %unlink_errno = alloca i32, align 4
  %cs = alloca %struct.cs_status, align 8
  store i8* %name, i8** %name.addr, align 8, !tbaa !6
  %0 = bitcast %struct.tempnode*** %pnode to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #13
  %1 = bitcast %struct.tempnode** %node to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %1) #13
  %2 = bitcast %struct.tempnode** %next to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %2) #13
  %3 = bitcast i32* %unlink_status to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %3) #13
  %4 = bitcast i32* %unlink_errno to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %4) #13
  store i32 0, i32* %unlink_errno, align 4, !tbaa !2
  %5 = bitcast %struct.cs_status* %cs to i8*
  call void @llvm.lifetime.start.p0i8(i64 136, i8* %5) #13
  store %struct.tempnode** @temphead, %struct.tempnode*** %pnode, align 8, !tbaa !6
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %6 = load %struct.tempnode**, %struct.tempnode*** %pnode, align 8, !tbaa !6
  %7 = load volatile %struct.tempnode*, %struct.tempnode** %6, align 8, !tbaa !6
  store %struct.tempnode* %7, %struct.tempnode** %node, align 8, !tbaa !6
  %name1 = getelementptr inbounds %struct.tempnode, %struct.tempnode* %7, i32 0, i32 3
  %arraydecay = getelementptr inbounds [0 x i8], [0 x i8]* %name1, i64 0, i64 0
  %8 = load i8*, i8** %name.addr, align 8, !tbaa !6
  %cmp = icmp ne i8* %arraydecay, %8
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %9 = load %struct.tempnode*, %struct.tempnode** %node, align 8, !tbaa !6
  %next2 = getelementptr inbounds %struct.tempnode, %struct.tempnode* %9, i32 0, i32 0
  store %struct.tempnode** %next2, %struct.tempnode*** %pnode, align 8, !tbaa !6
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %10 = load %struct.tempnode*, %struct.tempnode** %node, align 8, !tbaa !6
  %state = getelementptr inbounds %struct.tempnode, %struct.tempnode* %10, i32 0, i32 2
  %11 = load i8, i8* %state, align 4, !tbaa !13
  %conv = sext i8 %11 to i32
  %cmp3 = icmp eq i32 %conv, 1
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %for.end
  %12 = load %struct.tempnode*, %struct.tempnode** %node, align 8, !tbaa !6
  %pid = getelementptr inbounds %struct.tempnode, %struct.tempnode* %12, i32 0, i32 1
  %13 = load i32, i32* %pid, align 8, !tbaa !2
  call void @wait_proc(i32 %13)
  br label %if.end

if.end:                                           ; preds = %if.then, %for.end
  %14 = load %struct.tempnode*, %struct.tempnode** %node, align 8, !tbaa !6
  %next5 = getelementptr inbounds %struct.tempnode, %struct.tempnode* %14, i32 0, i32 0
  %15 = load volatile %struct.tempnode*, %struct.tempnode** %next5, align 8, !tbaa !6
  store %struct.tempnode* %15, %struct.tempnode** %next, align 8, !tbaa !6
  call void @cs_enter(%struct.cs_status* %cs)
  %16 = load i8*, i8** %name.addr, align 8, !tbaa !6
  %call = call i32 @unlink(i8* %16) #13
  store i32 %call, i32* %unlink_status, align 4, !tbaa !2
  %call6 = call i32* @__errno_location() #26
  %17 = load i32, i32* %call6, align 4, !tbaa !2
  store i32 %17, i32* %unlink_errno, align 4, !tbaa !2
  %18 = load %struct.tempnode*, %struct.tempnode** %next, align 8, !tbaa !6
  %19 = load %struct.tempnode**, %struct.tempnode*** %pnode, align 8, !tbaa !6
  store volatile %struct.tempnode* %18, %struct.tempnode** %19, align 8, !tbaa !6
  call void @cs_leave(%struct.cs_status* %cs)
  %20 = load i32, i32* %unlink_status, align 4, !tbaa !2
  %cmp7 = icmp ne i32 %20, 0
  br i1 %cmp7, label %if.then9, label %if.end11

if.then9:                                         ; preds = %if.end
  %21 = load i32, i32* %unlink_errno, align 4, !tbaa !2
  %22 = load i8*, i8** %name.addr, align 8, !tbaa !6
  %call10 = call i8* @quotearg_n_style_colon(i32 0, i32 3, i8* %22)
  call void (i32, i32, i8*, ...) @error(i32 0, i32 %21, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.182, i64 0, i64 0), i8* %call10)
  br label %if.end11

if.end11:                                         ; preds = %if.then9, %if.end
  %23 = load %struct.tempnode*, %struct.tempnode** %next, align 8, !tbaa !6
  %tobool = icmp ne %struct.tempnode* %23, null
  br i1 %tobool, label %if.end13, label %if.then12

if.then12:                                        ; preds = %if.end11
  %24 = load %struct.tempnode**, %struct.tempnode*** %pnode, align 8, !tbaa !6
  store %struct.tempnode** %24, %struct.tempnode*** @temptail, align 8, !tbaa !6
  br label %if.end13

if.end13:                                         ; preds = %if.then12, %if.end11
  %25 = load %struct.tempnode*, %struct.tempnode** %node, align 8, !tbaa !6
  %26 = bitcast %struct.tempnode* %25 to i8*
  call void @rpl_free(i8* %26)
  %27 = bitcast %struct.cs_status* %cs to i8*
  call void @llvm.lifetime.end.p0i8(i64 136, i8* %27) #13
  %28 = bitcast i32* %unlink_errno to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %28) #13
  %29 = bitcast i32* %unlink_status to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %29) #13
  %30 = bitcast %struct.tempnode** %next to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %30) #13
  %31 = bitcast %struct.tempnode** %node to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %31) #13
  %32 = bitcast %struct.tempnode*** %pnode to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %32) #13
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @wait_proc(i32 %pid) #7 {
entry:
  %pid.addr = alloca i32, align 4
  store i32 %pid, i32* %pid.addr, align 4, !tbaa !2
  %0 = load i32, i32* %pid.addr, align 4, !tbaa !2
  %call = call zeroext i1 @delete_proc(i32 %0)
  br i1 %call, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i32, i32* %pid.addr, align 4, !tbaa !2
  %call1 = call i32 @reap(i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind
declare dso_local i32 @unlink(i8*) #6

declare dso_local i32 @open(i8*, i32, ...) #1

; Function Attrs: nounwind
declare dso_local i32 @ftruncate(i32, i64) #6

; Function Attrs: nounwind uwtable
define internal %struct.stat* @get_outstatus() #7 {
entry:
  %0 = load i32, i32* @get_outstatus.outstat_errno, align 4, !tbaa !2
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call = call i32 @fstat(i32 1, %struct.stat* @get_outstatus.outstat) #13
  %cmp1 = icmp eq i32 %call, 0
  br i1 %cmp1, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then
  br label %cond.end

cond.false:                                       ; preds = %if.then
  %call2 = call i32* @__errno_location() #26
  %1 = load i32, i32* %call2, align 4, !tbaa !2
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ -1, %cond.true ], [ %1, %cond.false ]
  store i32 %cond, i32* @get_outstatus.outstat_errno, align 4, !tbaa !2
  br label %if.end

if.end:                                           ; preds = %cond.end, %entry
  %2 = load i32, i32* @get_outstatus.outstat_errno, align 4, !tbaa !2
  %cmp3 = icmp slt i32 %2, 0
  %3 = zext i1 %cmp3 to i64
  %cond4 = select i1 %cmp3, %struct.stat* @get_outstatus.outstat, %struct.stat* null
  ret %struct.stat* %cond4
}

; Function Attrs: nounwind uwtable
define internal %struct._IO_FILE* @open_temp(%struct.tempnode* %temp) #7 {
entry:
  %retval = alloca %struct._IO_FILE*, align 8
  %temp.addr = alloca %struct.tempnode*, align 8
  %tempfd = alloca i32, align 4
  %pipefds = alloca [2 x i32], align 4
  %fp = alloca %struct._IO_FILE*, align 8
  %cleanup.dest.slot = alloca i32, align 4
  %child = alloca i32, align 4
  %saved_errno = alloca i32, align 4
  store %struct.tempnode* %temp, %struct.tempnode** %temp.addr, align 8, !tbaa !6
  %0 = bitcast i32* %tempfd to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #13
  %1 = bitcast [2 x i32]* %pipefds to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %1) #13
  %2 = bitcast %struct._IO_FILE** %fp to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %2) #13
  store %struct._IO_FILE* null, %struct._IO_FILE** %fp, align 8, !tbaa !6
  %3 = load %struct.tempnode*, %struct.tempnode** %temp.addr, align 8, !tbaa !6
  %state = getelementptr inbounds %struct.tempnode, %struct.tempnode* %3, i32 0, i32 2
  %4 = load i8, i8* %state, align 4, !tbaa !13
  %conv = sext i8 %4 to i32
  %cmp = icmp eq i32 %conv, 1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %5 = load %struct.tempnode*, %struct.tempnode** %temp.addr, align 8, !tbaa !6
  %pid = getelementptr inbounds %struct.tempnode, %struct.tempnode* %5, i32 0, i32 1
  %6 = load i32, i32* %pid, align 8, !tbaa !2
  call void @wait_proc(i32 %6)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %7 = load %struct.tempnode*, %struct.tempnode** %temp.addr, align 8, !tbaa !6
  %name = getelementptr inbounds %struct.tempnode, %struct.tempnode* %7, i32 0, i32 3
  %arraydecay = getelementptr inbounds [0 x i8], [0 x i8]* %name, i64 0, i64 0
  %call = call i32 (i8*, i32, ...) @open(i8* %arraydecay, i32 0)
  store i32 %call, i32* %tempfd, align 4, !tbaa !2
  %8 = load i32, i32* %tempfd, align 4, !tbaa !2
  %cmp2 = icmp slt i32 %8, 0
  br i1 %cmp2, label %if.then4, label %if.end5

if.then4:                                         ; preds = %if.end
  store %struct._IO_FILE* null, %struct._IO_FILE** %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end5:                                          ; preds = %if.end
  %9 = bitcast i32* %child to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %9) #13
  %arraydecay6 = getelementptr inbounds [2 x i32], [2 x i32]* %pipefds, i64 0, i64 0
  %call7 = call i32 @pipe_fork(i32* %arraydecay6, i64 9)
  store i32 %call7, i32* %child, align 4, !tbaa !2
  %10 = load i32, i32* %child, align 4, !tbaa !2
  switch i32 %10, label %sw.default [
    i32 -1, label %sw.bb
    i32 0, label %sw.bb17
  ]

sw.bb:                                            ; preds = %if.end5
  %call8 = call i32* @__errno_location() #26
  %11 = load i32, i32* %call8, align 4, !tbaa !2
  %cmp9 = icmp ne i32 %11, 24
  br i1 %cmp9, label %if.then11, label %if.end14

if.then11:                                        ; preds = %sw.bb
  %call12 = call i32* @__errno_location() #26
  %12 = load i32, i32* %call12, align 4, !tbaa !2
  %13 = load i8*, i8** @compress_program, align 8, !tbaa !6
  %call13 = call i8* @quotearg_style(i32 4, i8* %13)
  call void (i32, i32, i8*, ...) @error(i32 2, i32 %12, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.175, i64 0, i64 0), i8* %call13)
  unreachable

if.end14:                                         ; preds = %sw.bb
  %14 = load i32, i32* %tempfd, align 4, !tbaa !2
  %call15 = call i32 @close(i32 %14)
  %call16 = call i32* @__errno_location() #26
  store i32 24, i32* %call16, align 4, !tbaa !2
  br label %sw.epilog

sw.bb17:                                          ; preds = %if.end5
  %arrayidx = getelementptr inbounds [2 x i32], [2 x i32]* %pipefds, i64 0, i64 0
  %15 = load i32, i32* %arrayidx, align 4, !tbaa !2
  %call18 = call i32 @close(i32 %15)
  %16 = load i32, i32* %tempfd, align 4, !tbaa !2
  call void @move_fd(i32 %16, i32 0)
  %arrayidx19 = getelementptr inbounds [2 x i32], [2 x i32]* %pipefds, i64 0, i64 1
  %17 = load i32, i32* %arrayidx19, align 4, !tbaa !2
  call void @move_fd(i32 %17, i32 1)
  %18 = load i8*, i8** @compress_program, align 8, !tbaa !6
  %19 = load i8*, i8** @compress_program, align 8, !tbaa !6
  %call20 = call i32 (i8*, i8*, ...) @execlp(i8* %18, i8* %19, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.176, i64 0, i64 0), i8* null) #13
  %call21 = call i32* @__errno_location() #26
  %20 = load i32, i32* %call21, align 4, !tbaa !2
  call void @async_safe_die(i32 %20, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.177, i64 0, i64 0)) #24
  unreachable

sw.default:                                       ; preds = %if.end5
  %21 = load i32, i32* %child, align 4, !tbaa !2
  %22 = load %struct.tempnode*, %struct.tempnode** %temp.addr, align 8, !tbaa !6
  %pid22 = getelementptr inbounds %struct.tempnode, %struct.tempnode* %22, i32 0, i32 1
  store i32 %21, i32* %pid22, align 8, !tbaa !2
  %23 = load %struct.tempnode*, %struct.tempnode** %temp.addr, align 8, !tbaa !6
  call void @register_proc(%struct.tempnode* %23)
  %24 = load i32, i32* %tempfd, align 4, !tbaa !2
  %call23 = call i32 @close(i32 %24)
  %arrayidx24 = getelementptr inbounds [2 x i32], [2 x i32]* %pipefds, i64 0, i64 1
  %25 = load i32, i32* %arrayidx24, align 4, !tbaa !2
  %call25 = call i32 @close(i32 %25)
  %arrayidx26 = getelementptr inbounds [2 x i32], [2 x i32]* %pipefds, i64 0, i64 0
  %26 = load i32, i32* %arrayidx26, align 4, !tbaa !2
  %call27 = call %struct._IO_FILE* @fdopen(i32 %26, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.50, i64 0, i64 0)) #13
  store %struct._IO_FILE* %call27, %struct._IO_FILE** %fp, align 8, !tbaa !6
  %27 = load %struct._IO_FILE*, %struct._IO_FILE** %fp, align 8, !tbaa !6
  %tobool = icmp ne %struct._IO_FILE* %27, null
  br i1 %tobool, label %if.end33, label %if.then28

if.then28:                                        ; preds = %sw.default
  %28 = bitcast i32* %saved_errno to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %28) #13
  %call29 = call i32* @__errno_location() #26
  %29 = load i32, i32* %call29, align 4, !tbaa !2
  store i32 %29, i32* %saved_errno, align 4, !tbaa !2
  %arrayidx30 = getelementptr inbounds [2 x i32], [2 x i32]* %pipefds, i64 0, i64 0
  %30 = load i32, i32* %arrayidx30, align 4, !tbaa !2
  %call31 = call i32 @close(i32 %30)
  %31 = load i32, i32* %saved_errno, align 4, !tbaa !2
  %call32 = call i32* @__errno_location() #26
  store i32 %31, i32* %call32, align 4, !tbaa !2
  %32 = bitcast i32* %saved_errno to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %32) #13
  br label %if.end33

if.end33:                                         ; preds = %if.then28, %sw.default
  br label %sw.epilog

sw.epilog:                                        ; preds = %if.end33, %if.end14
  %33 = load %struct._IO_FILE*, %struct._IO_FILE** %fp, align 8, !tbaa !6
  store %struct._IO_FILE* %33, %struct._IO_FILE** %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  %34 = bitcast i32* %child to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %34) #13
  br label %cleanup

cleanup:                                          ; preds = %sw.epilog, %if.then4
  %35 = bitcast %struct._IO_FILE** %fp to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %35) #13
  %36 = bitcast [2 x i32]* %pipefds to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %36) #13
  %37 = bitcast i32* %tempfd to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %37) #13
  %38 = load %struct._IO_FILE*, %struct._IO_FILE** %retval, align 8
  ret %struct._IO_FILE* %38
}

; Function Attrs: nounwind
declare dso_local i32 @euidaccess(i8*, i32) #6

; Function Attrs: nounwind
declare dso_local i8* @stpcpy(i8*, i8*) #6

; Function Attrs: nounwind readnone
declare dso_local i16** @__ctype_b_loc() #8

; Function Attrs: nounwind uwtable
define internal void @key_to_opts(%struct.keyfield* %key, i8* %opts) #7 {
entry:
  %key.addr = alloca %struct.keyfield*, align 8
  %opts.addr = alloca i8*, align 8
  store %struct.keyfield* %key, %struct.keyfield** %key.addr, align 8, !tbaa !6
  store i8* %opts, i8** %opts.addr, align 8, !tbaa !6
  %0 = load %struct.keyfield*, %struct.keyfield** %key.addr, align 8, !tbaa !6
  %skipsblanks = getelementptr inbounds %struct.keyfield, %struct.keyfield* %0, i32 0, i32 6
  %1 = load i8, i8* %skipsblanks, align 8, !tbaa !37, !range !25
  %tobool = trunc i8 %1 to i1
  br i1 %tobool, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.keyfield*, %struct.keyfield** %key.addr, align 8, !tbaa !6
  %skipeblanks = getelementptr inbounds %struct.keyfield, %struct.keyfield* %2, i32 0, i32 7
  %3 = load i8, i8* %skipeblanks, align 1, !tbaa !38, !range !25
  %tobool1 = trunc i8 %3 to i1
  br i1 %tobool1, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  %4 = load i8*, i8** %opts.addr, align 8, !tbaa !6
  %incdec.ptr = getelementptr inbounds i8, i8* %4, i32 1
  store i8* %incdec.ptr, i8** %opts.addr, align 8, !tbaa !6
  store i8 98, i8* %4, align 1, !tbaa !13
  br label %if.end

if.end:                                           ; preds = %if.then, %lor.lhs.false
  %5 = load %struct.keyfield*, %struct.keyfield** %key.addr, align 8, !tbaa !6
  %ignore = getelementptr inbounds %struct.keyfield, %struct.keyfield* %5, i32 0, i32 4
  %6 = load i8*, i8** %ignore, align 8, !tbaa !35
  %cmp = icmp eq i8* %6, getelementptr inbounds ([256 x i8], [256 x i8]* @nondictionary, i64 0, i64 0)
  br i1 %cmp, label %if.then2, label %if.end4

if.then2:                                         ; preds = %if.end
  %7 = load i8*, i8** %opts.addr, align 8, !tbaa !6
  %incdec.ptr3 = getelementptr inbounds i8, i8* %7, i32 1
  store i8* %incdec.ptr3, i8** %opts.addr, align 8, !tbaa !6
  store i8 100, i8* %7, align 1, !tbaa !13
  br label %if.end4

if.end4:                                          ; preds = %if.then2, %if.end
  %8 = load %struct.keyfield*, %struct.keyfield** %key.addr, align 8, !tbaa !6
  %translate = getelementptr inbounds %struct.keyfield, %struct.keyfield* %8, i32 0, i32 5
  %9 = load i8*, i8** %translate, align 8, !tbaa !36
  %tobool5 = icmp ne i8* %9, null
  br i1 %tobool5, label %if.then6, label %if.end8

if.then6:                                         ; preds = %if.end4
  %10 = load i8*, i8** %opts.addr, align 8, !tbaa !6
  %incdec.ptr7 = getelementptr inbounds i8, i8* %10, i32 1
  store i8* %incdec.ptr7, i8** %opts.addr, align 8, !tbaa !6
  store i8 102, i8* %10, align 1, !tbaa !13
  br label %if.end8

if.end8:                                          ; preds = %if.then6, %if.end4
  %11 = load %struct.keyfield*, %struct.keyfield** %key.addr, align 8, !tbaa !6
  %general_numeric = getelementptr inbounds %struct.keyfield, %struct.keyfield* %11, i32 0, i32 10
  %12 = load i8, i8* %general_numeric, align 4, !tbaa !41, !range !25
  %tobool9 = trunc i8 %12 to i1
  br i1 %tobool9, label %if.then10, label %if.end12

if.then10:                                        ; preds = %if.end8
  %13 = load i8*, i8** %opts.addr, align 8, !tbaa !6
  %incdec.ptr11 = getelementptr inbounds i8, i8* %13, i32 1
  store i8* %incdec.ptr11, i8** %opts.addr, align 8, !tbaa !6
  store i8 103, i8* %13, align 1, !tbaa !13
  br label %if.end12

if.end12:                                         ; preds = %if.then10, %if.end8
  %14 = load %struct.keyfield*, %struct.keyfield** %key.addr, align 8, !tbaa !6
  %human_numeric = getelementptr inbounds %struct.keyfield, %struct.keyfield* %14, i32 0, i32 11
  %15 = load i8, i8* %human_numeric, align 1, !tbaa !42, !range !25
  %tobool13 = trunc i8 %15 to i1
  br i1 %tobool13, label %if.then14, label %if.end16

if.then14:                                        ; preds = %if.end12
  %16 = load i8*, i8** %opts.addr, align 8, !tbaa !6
  %incdec.ptr15 = getelementptr inbounds i8, i8* %16, i32 1
  store i8* %incdec.ptr15, i8** %opts.addr, align 8, !tbaa !6
  store i8 104, i8* %16, align 1, !tbaa !13
  br label %if.end16

if.end16:                                         ; preds = %if.then14, %if.end12
  %17 = load %struct.keyfield*, %struct.keyfield** %key.addr, align 8, !tbaa !6
  %ignore17 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %17, i32 0, i32 4
  %18 = load i8*, i8** %ignore17, align 8, !tbaa !35
  %cmp18 = icmp eq i8* %18, getelementptr inbounds ([256 x i8], [256 x i8]* @nonprinting, i64 0, i64 0)
  br i1 %cmp18, label %if.then19, label %if.end21

if.then19:                                        ; preds = %if.end16
  %19 = load i8*, i8** %opts.addr, align 8, !tbaa !6
  %incdec.ptr20 = getelementptr inbounds i8, i8* %19, i32 1
  store i8* %incdec.ptr20, i8** %opts.addr, align 8, !tbaa !6
  store i8 105, i8* %19, align 1, !tbaa !13
  br label %if.end21

if.end21:                                         ; preds = %if.then19, %if.end16
  %20 = load %struct.keyfield*, %struct.keyfield** %key.addr, align 8, !tbaa !6
  %month = getelementptr inbounds %struct.keyfield, %struct.keyfield* %20, i32 0, i32 12
  %21 = load i8, i8* %month, align 2, !tbaa !39, !range !25
  %tobool22 = trunc i8 %21 to i1
  br i1 %tobool22, label %if.then23, label %if.end25

if.then23:                                        ; preds = %if.end21
  %22 = load i8*, i8** %opts.addr, align 8, !tbaa !6
  %incdec.ptr24 = getelementptr inbounds i8, i8* %22, i32 1
  store i8* %incdec.ptr24, i8** %opts.addr, align 8, !tbaa !6
  store i8 77, i8* %22, align 1, !tbaa !13
  br label %if.end25

if.end25:                                         ; preds = %if.then23, %if.end21
  %23 = load %struct.keyfield*, %struct.keyfield** %key.addr, align 8, !tbaa !6
  %numeric = getelementptr inbounds %struct.keyfield, %struct.keyfield* %23, i32 0, i32 8
  %24 = load i8, i8* %numeric, align 2, !tbaa !40, !range !25
  %tobool26 = trunc i8 %24 to i1
  br i1 %tobool26, label %if.then27, label %if.end29

if.then27:                                        ; preds = %if.end25
  %25 = load i8*, i8** %opts.addr, align 8, !tbaa !6
  %incdec.ptr28 = getelementptr inbounds i8, i8* %25, i32 1
  store i8* %incdec.ptr28, i8** %opts.addr, align 8, !tbaa !6
  store i8 110, i8* %25, align 1, !tbaa !13
  br label %if.end29

if.end29:                                         ; preds = %if.then27, %if.end25
  %26 = load %struct.keyfield*, %struct.keyfield** %key.addr, align 8, !tbaa !6
  %random = getelementptr inbounds %struct.keyfield, %struct.keyfield* %26, i32 0, i32 9
  %27 = load i8, i8* %random, align 1, !tbaa !44, !range !25
  %tobool30 = trunc i8 %27 to i1
  br i1 %tobool30, label %if.then31, label %if.end33

if.then31:                                        ; preds = %if.end29
  %28 = load i8*, i8** %opts.addr, align 8, !tbaa !6
  %incdec.ptr32 = getelementptr inbounds i8, i8* %28, i32 1
  store i8* %incdec.ptr32, i8** %opts.addr, align 8, !tbaa !6
  store i8 82, i8* %28, align 1, !tbaa !13
  br label %if.end33

if.end33:                                         ; preds = %if.then31, %if.end29
  %29 = load %struct.keyfield*, %struct.keyfield** %key.addr, align 8, !tbaa !6
  %reverse = getelementptr inbounds %struct.keyfield, %struct.keyfield* %29, i32 0, i32 13
  %30 = load i8, i8* %reverse, align 1, !tbaa !34, !range !25
  %tobool34 = trunc i8 %30 to i1
  br i1 %tobool34, label %if.then35, label %if.end37

if.then35:                                        ; preds = %if.end33
  %31 = load i8*, i8** %opts.addr, align 8, !tbaa !6
  %incdec.ptr36 = getelementptr inbounds i8, i8* %31, i32 1
  store i8* %incdec.ptr36, i8** %opts.addr, align 8, !tbaa !6
  store i8 114, i8* %31, align 1, !tbaa !13
  br label %if.end37

if.end37:                                         ; preds = %if.then35, %if.end33
  %32 = load %struct.keyfield*, %struct.keyfield** %key.addr, align 8, !tbaa !6
  %version = getelementptr inbounds %struct.keyfield, %struct.keyfield* %32, i32 0, i32 14
  %33 = load i8, i8* %version, align 8, !tbaa !43, !range !25
  %tobool38 = trunc i8 %33 to i1
  br i1 %tobool38, label %if.then39, label %if.end41

if.then39:                                        ; preds = %if.end37
  %34 = load i8*, i8** %opts.addr, align 8, !tbaa !6
  %incdec.ptr40 = getelementptr inbounds i8, i8* %34, i32 1
  store i8* %incdec.ptr40, i8** %opts.addr, align 8, !tbaa !6
  store i8 86, i8* %34, align 1, !tbaa !13
  br label %if.end41

if.end41:                                         ; preds = %if.then39, %if.end37
  %35 = load i8*, i8** %opts.addr, align 8, !tbaa !6
  store i8 0, i8* %35, align 1, !tbaa !13
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal i64 @select_plural(i64 %n) #2 {
entry:
  %n.addr = alloca i64, align 8
  store i64 %n, i64* %n.addr, align 8, !tbaa !14
  %0 = load i64, i64* %n.addr, align 8, !tbaa !14
  %cmp = icmp ule i64 %0, -1
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %1 = load i64, i64* %n.addr, align 8, !tbaa !14
  br label %cond.end

cond.false:                                       ; preds = %entry
  %2 = load i64, i64* %n.addr, align 8, !tbaa !14
  %rem = urem i64 %2, 1000000
  %add = add i64 %rem, 1000000
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %1, %cond.true ], [ %add, %cond.false ]
  ret i64 %cond
}

; Function Attrs: nounwind
declare dso_local void @clearerr_unlocked(%struct._IO_FILE*) #6

declare dso_local i32 @fflush_unlocked(%struct._IO_FILE*) #1

; Function Attrs: nounwind uwtable
define internal void @cleanup() #7 {
entry:
  %node = alloca %struct.tempnode*, align 8
  %0 = bitcast %struct.tempnode** %node to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #13
  %1 = load volatile %struct.tempnode*, %struct.tempnode** @temphead, align 8, !tbaa !6
  store %struct.tempnode* %1, %struct.tempnode** %node, align 8, !tbaa !6
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load %struct.tempnode*, %struct.tempnode** %node, align 8, !tbaa !6
  %tobool = icmp ne %struct.tempnode* %2, null
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load %struct.tempnode*, %struct.tempnode** %node, align 8, !tbaa !6
  %name = getelementptr inbounds %struct.tempnode, %struct.tempnode* %3, i32 0, i32 3
  %arraydecay = getelementptr inbounds [0 x i8], [0 x i8]* %name, i64 0, i64 0
  %call = call i32 @unlink(i8* %arraydecay) #13
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %4 = load %struct.tempnode*, %struct.tempnode** %node, align 8, !tbaa !6
  %next = getelementptr inbounds %struct.tempnode, %struct.tempnode* %4, i32 0, i32 0
  %5 = load volatile %struct.tempnode*, %struct.tempnode** %next, align 8, !tbaa !6
  store %struct.tempnode* %5, %struct.tempnode** %node, align 8, !tbaa !6
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store volatile %struct.tempnode* null, %struct.tempnode** @temphead, align 8, !tbaa !6
  %6 = bitcast %struct.tempnode** %node to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %6) #13
  ret void
}

; Function Attrs: nounwind
declare dso_local i32 @raise(i32) #6

; Function Attrs: inlinehint nounwind uwtable
define internal zeroext i1 @field_sep(i8 zeroext %ch) #2 {
entry:
  %ch.addr = alloca i8, align 1
  store i8 %ch, i8* %ch.addr, align 1, !tbaa !13
  %call = call i16** @__ctype_b_loc() #26
  %0 = load i16*, i16** %call, align 8, !tbaa !6
  %1 = load i8, i8* %ch.addr, align 1, !tbaa !13
  %conv = zext i8 %1 to i32
  %idxprom = sext i32 %conv to i64
  %arrayidx = getelementptr inbounds i16, i16* %0, i64 %idxprom
  %2 = load i16, i16* %arrayidx, align 2, !tbaa !48
  %conv1 = zext i16 %2 to i32
  %and = and i32 %conv1, 1
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %entry
  %3 = load i8, i8* %ch.addr, align 1, !tbaa !13
  %conv2 = zext i8 %3 to i32
  %cmp = icmp eq i32 %conv2, 10
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %entry
  %4 = phi i1 [ true, %entry ], [ %cmp, %lor.rhs ]
  ret i1 %4
}

; Function Attrs: nounwind readonly
declare dso_local i32 @toupper(i32) #5

; Function Attrs: nounwind
declare dso_local i8* @nl_langinfo(i32) #6

; Function Attrs: nounwind uwtable
define internal i32 @struct_month_cmp(i8* %m1, i8* %m2) #7 {
entry:
  %m1.addr = alloca i8*, align 8
  %m2.addr = alloca i8*, align 8
  %month1 = alloca %struct.month*, align 8
  %month2 = alloca %struct.month*, align 8
  store i8* %m1, i8** %m1.addr, align 8, !tbaa !6
  store i8* %m2, i8** %m2.addr, align 8, !tbaa !6
  %0 = bitcast %struct.month** %month1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #13
  %1 = load i8*, i8** %m1.addr, align 8, !tbaa !6
  %2 = bitcast i8* %1 to %struct.month*
  store %struct.month* %2, %struct.month** %month1, align 8, !tbaa !6
  %3 = bitcast %struct.month** %month2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %3) #13
  %4 = load i8*, i8** %m2.addr, align 8, !tbaa !6
  %5 = bitcast i8* %4 to %struct.month*
  store %struct.month* %5, %struct.month** %month2, align 8, !tbaa !6
  %6 = load %struct.month*, %struct.month** %month1, align 8, !tbaa !6
  %name = getelementptr inbounds %struct.month, %struct.month* %6, i32 0, i32 0
  %7 = load i8*, i8** %name, align 8, !tbaa !50
  %8 = load %struct.month*, %struct.month** %month2, align 8, !tbaa !6
  %name1 = getelementptr inbounds %struct.month, %struct.month* %8, i32 0, i32 0
  %9 = load i8*, i8** %name1, align 8, !tbaa !50
  %call = call i32 @strcmp(i8* %7, i8* %9) #22
  %10 = bitcast %struct.month** %month2 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %10) #13
  %11 = bitcast %struct.month** %month1 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %11) #13
  ret i32 %call
}

declare dso_local void @qsort(i8*, i64, i64, i32 (i8*, i8*)*) #1

; Function Attrs: nounwind uwtable
define internal void @__argmatch_die() #7 {
entry:
  call void @usage(i32 1)
  ret void
}

; Function Attrs: nounwind readonly uwtable
define dso_local i64 @argmatch(i8* %arg, i8** %arglist, i8* %vallist, i64 %valsize) #9 {
entry:
  %retval = alloca i64, align 8
  %arg.addr = alloca i8*, align 8
  %arglist.addr = alloca i8**, align 8
  %vallist.addr = alloca i8*, align 8
  %valsize.addr = alloca i64, align 8
  %i = alloca i64, align 8
  %arglen = alloca i64, align 8
  %matchind = alloca i64, align 8
  %ambiguous = alloca i8, align 1
  %cleanup.dest.slot = alloca i32, align 4
  store i8* %arg, i8** %arg.addr, align 8, !tbaa !6
  store i8** %arglist, i8*** %arglist.addr, align 8, !tbaa !6
  store i8* %vallist, i8** %vallist.addr, align 8, !tbaa !6
  store i64 %valsize, i64* %valsize.addr, align 8, !tbaa !14
  %0 = bitcast i64* %i to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #13
  %1 = bitcast i64* %arglen to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %1) #13
  %2 = bitcast i64* %matchind to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %2) #13
  store i64 -1, i64* %matchind, align 8, !tbaa !14
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %ambiguous) #13
  store i8 0, i8* %ambiguous, align 1, !tbaa !11
  %3 = load i8*, i8** %arg.addr, align 8, !tbaa !6
  %call = call i64 @strlen(i8* %3) #22
  store i64 %call, i64* %arglen, align 8, !tbaa !14
  store i64 0, i64* %i, align 8, !tbaa !14
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i8**, i8*** %arglist.addr, align 8, !tbaa !6
  %5 = load i64, i64* %i, align 8, !tbaa !14
  %arrayidx = getelementptr inbounds i8*, i8** %4, i64 %5
  %6 = load i8*, i8** %arrayidx, align 8, !tbaa !6
  %tobool = icmp ne i8* %6, null
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load i8**, i8*** %arglist.addr, align 8, !tbaa !6
  %8 = load i64, i64* %i, align 8, !tbaa !14
  %arrayidx1 = getelementptr inbounds i8*, i8** %7, i64 %8
  %9 = load i8*, i8** %arrayidx1, align 8, !tbaa !6
  %10 = load i8*, i8** %arg.addr, align 8, !tbaa !6
  %11 = load i64, i64* %arglen, align 8, !tbaa !14
  %call2 = call i32 @strncmp(i8* %9, i8* %10, i64 %11) #22
  %tobool3 = icmp ne i32 %call2, 0
  br i1 %tobool3, label %if.end18, label %if.then

if.then:                                          ; preds = %for.body
  %12 = load i8**, i8*** %arglist.addr, align 8, !tbaa !6
  %13 = load i64, i64* %i, align 8, !tbaa !14
  %arrayidx4 = getelementptr inbounds i8*, i8** %12, i64 %13
  %14 = load i8*, i8** %arrayidx4, align 8, !tbaa !6
  %call5 = call i64 @strlen(i8* %14) #22
  %15 = load i64, i64* %arglen, align 8, !tbaa !14
  %cmp = icmp eq i64 %call5, %15
  br i1 %cmp, label %if.then6, label %if.else

if.then6:                                         ; preds = %if.then
  %16 = load i64, i64* %i, align 8, !tbaa !14
  store i64 %16, i64* %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.else:                                          ; preds = %if.then
  %17 = load i64, i64* %matchind, align 8, !tbaa !14
  %cmp7 = icmp eq i64 %17, -1
  br i1 %cmp7, label %if.then8, label %if.else9

if.then8:                                         ; preds = %if.else
  %18 = load i64, i64* %i, align 8, !tbaa !14
  store i64 %18, i64* %matchind, align 8, !tbaa !14
  br label %if.end16

if.else9:                                         ; preds = %if.else
  %19 = load i8*, i8** %vallist.addr, align 8, !tbaa !6
  %cmp10 = icmp eq i8* %19, null
  br i1 %cmp10, label %if.then15, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.else9
  %20 = load i8*, i8** %vallist.addr, align 8, !tbaa !6
  %21 = load i64, i64* %valsize.addr, align 8, !tbaa !14
  %22 = load i64, i64* %matchind, align 8, !tbaa !14
  %mul = mul i64 %21, %22
  %add.ptr = getelementptr inbounds i8, i8* %20, i64 %mul
  %23 = load i8*, i8** %vallist.addr, align 8, !tbaa !6
  %24 = load i64, i64* %valsize.addr, align 8, !tbaa !14
  %25 = load i64, i64* %i, align 8, !tbaa !14
  %mul11 = mul i64 %24, %25
  %add.ptr12 = getelementptr inbounds i8, i8* %23, i64 %mul11
  %26 = load i64, i64* %valsize.addr, align 8, !tbaa !14
  %call13 = call i32 @memcmp(i8* %add.ptr, i8* %add.ptr12, i64 %26) #22
  %tobool14 = icmp ne i32 %call13, 0
  br i1 %tobool14, label %if.then15, label %if.end

if.then15:                                        ; preds = %lor.lhs.false, %if.else9
  store i8 1, i8* %ambiguous, align 1, !tbaa !11
  br label %if.end

if.end:                                           ; preds = %if.then15, %lor.lhs.false
  br label %if.end16

if.end16:                                         ; preds = %if.end, %if.then8
  br label %if.end17

if.end17:                                         ; preds = %if.end16
  br label %if.end18

if.end18:                                         ; preds = %if.end17, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end18
  %27 = load i64, i64* %i, align 8, !tbaa !14
  %inc = add i64 %27, 1
  store i64 %inc, i64* %i, align 8, !tbaa !14
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %28 = load i8, i8* %ambiguous, align 1, !tbaa !11, !range !25
  %tobool19 = trunc i8 %28 to i1
  br i1 %tobool19, label %if.then20, label %if.else21

if.then20:                                        ; preds = %for.end
  store i64 -2, i64* %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.else21:                                        ; preds = %for.end
  %29 = load i64, i64* %matchind, align 8, !tbaa !14
  store i64 %29, i64* %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.else21, %if.then20, %if.then6
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %ambiguous) #13
  %30 = bitcast i64* %matchind to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %30) #13
  %31 = bitcast i64* %arglen to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %31) #13
  %32 = bitcast i64* %i to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %32) #13
  %33 = load i64, i64* %retval, align 8
  ret i64 %33
}

; Function Attrs: nounwind uwtable
define dso_local void @argmatch_invalid(i8* %context, i8* %value, i64 %problem) #7 {
entry:
  %context.addr = alloca i8*, align 8
  %value.addr = alloca i8*, align 8
  %problem.addr = alloca i64, align 8
  %format = alloca i8*, align 8
  store i8* %context, i8** %context.addr, align 8, !tbaa !6
  store i8* %value, i8** %value.addr, align 8, !tbaa !6
  store i64 %problem, i64* %problem.addr, align 8, !tbaa !14
  %0 = bitcast i8** %format to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #13
  %1 = load i64, i64* %problem.addr, align 8, !tbaa !14
  %cmp = icmp eq i64 %1, -1
  %2 = zext i1 %cmp to i64
  %cond = select i1 %cmp, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.167, i64 0, i64 0), i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.1.168, i64 0, i64 0)
  store i8* %cond, i8** %format, align 8, !tbaa !6
  %3 = load i8*, i8** %format, align 8, !tbaa !6
  %4 = load i8*, i8** %value.addr, align 8, !tbaa !6
  %call = call i8* @quotearg_n_style(i32 0, i32 8, i8* %4)
  %5 = load i8*, i8** %context.addr, align 8, !tbaa !6
  %call1 = call i8* @quote_n(i32 1, i8* %5)
  call void (i32, i32, i8*, ...) @error(i32 0, i32 0, i8* %3, i8* %call, i8* %call1)
  %6 = bitcast i8** %format to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %6) #13
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local void @argmatch_valid(i8** %arglist, i8* %vallist, i64 %valsize) #7 {
entry:
  %arglist.addr = alloca i8**, align 8
  %vallist.addr = alloca i8*, align 8
  %valsize.addr = alloca i64, align 8
  %i = alloca i64, align 8
  %last_val = alloca i8*, align 8
  store i8** %arglist, i8*** %arglist.addr, align 8, !tbaa !6
  store i8* %vallist, i8** %vallist.addr, align 8, !tbaa !6
  store i64 %valsize, i64* %valsize.addr, align 8, !tbaa !14
  %0 = bitcast i64* %i to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #13
  %1 = bitcast i8** %last_val to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %1) #13
  store i8* null, i8** %last_val, align 8, !tbaa !6
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !6
  %call = call i32 @fputs_unlocked(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.2.169, i64 0, i64 0), %struct._IO_FILE* %2)
  store i64 0, i64* %i, align 8, !tbaa !14
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i8**, i8*** %arglist.addr, align 8, !tbaa !6
  %4 = load i64, i64* %i, align 8, !tbaa !14
  %arrayidx = getelementptr inbounds i8*, i8** %3, i64 %4
  %5 = load i8*, i8** %arrayidx, align 8, !tbaa !6
  %tobool = icmp ne i8* %5, null
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = load i64, i64* %i, align 8, !tbaa !14
  %cmp = icmp eq i64 %6, 0
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.body
  %7 = load i8*, i8** %last_val, align 8, !tbaa !6
  %8 = load i8*, i8** %vallist.addr, align 8, !tbaa !6
  %9 = load i64, i64* %valsize.addr, align 8, !tbaa !14
  %10 = load i64, i64* %i, align 8, !tbaa !14
  %mul = mul i64 %9, %10
  %add.ptr = getelementptr inbounds i8, i8* %8, i64 %mul
  %11 = load i64, i64* %valsize.addr, align 8, !tbaa !14
  %call1 = call i32 @memcmp(i8* %7, i8* %add.ptr, i64 %11) #22
  %tobool2 = icmp ne i32 %call1, 0
  br i1 %tobool2, label %if.then, label %if.else

if.then:                                          ; preds = %lor.lhs.false, %for.body
  %12 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !6
  %13 = load i8**, i8*** %arglist.addr, align 8, !tbaa !6
  %14 = load i64, i64* %i, align 8, !tbaa !14
  %arrayidx3 = getelementptr inbounds i8*, i8** %13, i64 %14
  %15 = load i8*, i8** %arrayidx3, align 8, !tbaa !6
  %call4 = call i8* @quote(i8* %15)
  %call5 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %12, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.3.170, i64 0, i64 0), i8* %call4)
  %16 = load i8*, i8** %vallist.addr, align 8, !tbaa !6
  %17 = load i64, i64* %valsize.addr, align 8, !tbaa !14
  %18 = load i64, i64* %i, align 8, !tbaa !14
  %mul6 = mul i64 %17, %18
  %add.ptr7 = getelementptr inbounds i8, i8* %16, i64 %mul6
  store i8* %add.ptr7, i8** %last_val, align 8, !tbaa !6
  br label %if.end

if.else:                                          ; preds = %lor.lhs.false
  %19 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !6
  %20 = load i8**, i8*** %arglist.addr, align 8, !tbaa !6
  %21 = load i64, i64* %i, align 8, !tbaa !14
  %arrayidx8 = getelementptr inbounds i8*, i8** %20, i64 %21
  %22 = load i8*, i8** %arrayidx8, align 8, !tbaa !6
  %call9 = call i8* @quote(i8* %22)
  %call10 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %19, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4.171, i64 0, i64 0), i8* %call9)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %23 = load i64, i64* %i, align 8, !tbaa !14
  %inc = add i64 %23, 1
  store i64 %inc, i64* %i, align 8, !tbaa !14
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %24 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !6
  %call11 = call i32 @putc_unlocked(i32 10, %struct._IO_FILE* %24)
  %25 = bitcast i8** %last_val to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %25) #13
  %26 = bitcast i64* %i to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %26) #13
  ret void
}

declare dso_local i32 @putc_unlocked(i32, %struct._IO_FILE*) #1

; Function Attrs: nounwind uwtable
define dso_local i64 @__xargmatch_internal(i8* %context, i8* %arg, i8** %arglist, i8* %vallist, i64 %valsize, void ()* %exit_fn) #7 {
entry:
  %retval = alloca i64, align 8
  %context.addr = alloca i8*, align 8
  %arg.addr = alloca i8*, align 8
  %arglist.addr = alloca i8**, align 8
  %vallist.addr = alloca i8*, align 8
  %valsize.addr = alloca i64, align 8
  %exit_fn.addr = alloca void ()*, align 8
  %res = alloca i64, align 8
  %cleanup.dest.slot = alloca i32, align 4
  store i8* %context, i8** %context.addr, align 8, !tbaa !6
  store i8* %arg, i8** %arg.addr, align 8, !tbaa !6
  store i8** %arglist, i8*** %arglist.addr, align 8, !tbaa !6
  store i8* %vallist, i8** %vallist.addr, align 8, !tbaa !6
  store i64 %valsize, i64* %valsize.addr, align 8, !tbaa !14
  store void ()* %exit_fn, void ()** %exit_fn.addr, align 8, !tbaa !6
  %0 = bitcast i64* %res to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #13
  %1 = load i8*, i8** %arg.addr, align 8, !tbaa !6
  %2 = load i8**, i8*** %arglist.addr, align 8, !tbaa !6
  %3 = load i8*, i8** %vallist.addr, align 8, !tbaa !6
  %4 = load i64, i64* %valsize.addr, align 8, !tbaa !14
  %call = call i64 @argmatch(i8* %1, i8** %2, i8* %3, i64 %4) #22
  store i64 %call, i64* %res, align 8, !tbaa !14
  %5 = load i64, i64* %res, align 8, !tbaa !14
  %cmp = icmp sge i64 %5, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %6 = load i64, i64* %res, align 8, !tbaa !14
  store i64 %6, i64* %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %entry
  %7 = load i8*, i8** %context.addr, align 8, !tbaa !6
  %8 = load i8*, i8** %arg.addr, align 8, !tbaa !6
  %9 = load i64, i64* %res, align 8, !tbaa !14
  call void @argmatch_invalid(i8* %7, i8* %8, i64 %9)
  %10 = load i8**, i8*** %arglist.addr, align 8, !tbaa !6
  %11 = load i8*, i8** %vallist.addr, align 8, !tbaa !6
  %12 = load i64, i64* %valsize.addr, align 8, !tbaa !14
  call void @argmatch_valid(i8** %10, i8* %11, i64 %12)
  %13 = load void ()*, void ()** %exit_fn.addr, align 8, !tbaa !6
  call void %13()
  store i64 -1, i64* %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end, %if.then
  %14 = bitcast i64* %res to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %14) #13
  %15 = load i64, i64* %retval, align 8
  ret i64 %15
}

; Function Attrs: nounwind readonly uwtable
define dso_local i8* @argmatch_to_argument(i8* %value, i8** %arglist, i8* %vallist, i64 %valsize) #9 {
entry:
  %retval = alloca i8*, align 8
  %value.addr = alloca i8*, align 8
  %arglist.addr = alloca i8**, align 8
  %vallist.addr = alloca i8*, align 8
  %valsize.addr = alloca i64, align 8
  %i = alloca i64, align 8
  %cleanup.dest.slot = alloca i32, align 4
  store i8* %value, i8** %value.addr, align 8, !tbaa !6
  store i8** %arglist, i8*** %arglist.addr, align 8, !tbaa !6
  store i8* %vallist, i8** %vallist.addr, align 8, !tbaa !6
  store i64 %valsize, i64* %valsize.addr, align 8, !tbaa !14
  %0 = bitcast i64* %i to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #13
  store i64 0, i64* %i, align 8, !tbaa !14
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i8**, i8*** %arglist.addr, align 8, !tbaa !6
  %2 = load i64, i64* %i, align 8, !tbaa !14
  %arrayidx = getelementptr inbounds i8*, i8** %1, i64 %2
  %3 = load i8*, i8** %arrayidx, align 8, !tbaa !6
  %tobool = icmp ne i8* %3, null
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i8*, i8** %value.addr, align 8, !tbaa !6
  %5 = load i8*, i8** %vallist.addr, align 8, !tbaa !6
  %6 = load i64, i64* %valsize.addr, align 8, !tbaa !14
  %7 = load i64, i64* %i, align 8, !tbaa !14
  %mul = mul i64 %6, %7
  %add.ptr = getelementptr inbounds i8, i8* %5, i64 %mul
  %8 = load i64, i64* %valsize.addr, align 8, !tbaa !14
  %call = call i32 @memcmp(i8* %4, i8* %add.ptr, i64 %8) #22
  %tobool1 = icmp ne i32 %call, 0
  br i1 %tobool1, label %if.end, label %if.then

if.then:                                          ; preds = %for.body
  %9 = load i8**, i8*** %arglist.addr, align 8, !tbaa !6
  %10 = load i64, i64* %i, align 8, !tbaa !14
  %arrayidx2 = getelementptr inbounds i8*, i8** %9, i64 %10
  %11 = load i8*, i8** %arrayidx2, align 8, !tbaa !6
  store i8* %11, i8** %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %12 = load i64, i64* %i, align 8, !tbaa !14
  %inc = add i64 %12, 1
  store i64 %inc, i64* %i, align 8, !tbaa !14
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i8* null, i8** %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %for.end, %if.then
  %13 = bitcast i64* %i to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %13) #13
  %14 = load i8*, i8** %retval, align 8
  ret i8* %14
}

; Function Attrs: nounwind uwtable
define dso_local void @close_stdout_set_file_name(i8* %file) #7 {
entry:
  %file.addr = alloca i8*, align 8
  store i8* %file, i8** %file.addr, align 8, !tbaa !6
  %0 = load i8*, i8** %file.addr, align 8, !tbaa !6
  store i8* %0, i8** @file_name, align 8, !tbaa !6
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local void @close_stdout_set_ignore_EPIPE(i1 zeroext %ignore) #7 {
entry:
  %ignore.addr = alloca i8, align 1
  %frombool = zext i1 %ignore to i8
  store i8 %frombool, i8* %ignore.addr, align 1, !tbaa !11
  %0 = load i8, i8* %ignore.addr, align 1, !tbaa !11, !range !25
  %tobool = trunc i8 %0 to i1
  %frombool1 = zext i1 %tobool to i8
  store i8 %frombool1, i8* @ignore_EPIPE, align 1, !tbaa !11
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local void @close_stdout() #7 {
entry:
  %write_error = alloca i8*, align 8
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !6
  %call = call i32 @close_stream(%struct._IO_FILE* %0)
  %cmp = icmp ne i32 %call, 0
  br i1 %cmp, label %land.lhs.true, label %if.end9

land.lhs.true:                                    ; preds = %entry
  %1 = load i8, i8* @ignore_EPIPE, align 1, !tbaa !11, !range !25
  %tobool = trunc i8 %1 to i1
  br i1 %tobool, label %land.lhs.true1, label %if.then

land.lhs.true1:                                   ; preds = %land.lhs.true
  %call2 = call i32* @__errno_location() #26
  %2 = load i32, i32* %call2, align 4, !tbaa !2
  %cmp3 = icmp eq i32 %2, 32
  br i1 %cmp3, label %if.end9, label %if.then

if.then:                                          ; preds = %land.lhs.true1, %land.lhs.true
  %3 = bitcast i8** %write_error to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %3) #13
  store i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.189, i64 0, i64 0), i8** %write_error, align 8, !tbaa !6
  %4 = load i8*, i8** @file_name, align 8, !tbaa !6
  %tobool4 = icmp ne i8* %4, null
  br i1 %tobool4, label %if.then5, label %if.else

if.then5:                                         ; preds = %if.then
  %call6 = call i32* @__errno_location() #26
  %5 = load i32, i32* %call6, align 4, !tbaa !2
  %6 = load i8*, i8** @file_name, align 8, !tbaa !6
  %call7 = call i8* @quotearg_colon(i8* %6)
  %7 = load i8*, i8** %write_error, align 8, !tbaa !6
  call void (i32, i32, i8*, ...) @error(i32 0, i32 %5, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1.190, i64 0, i64 0), i8* %call7, i8* %7)
  br label %if.end

if.else:                                          ; preds = %if.then
  %call8 = call i32* @__errno_location() #26
  %8 = load i32, i32* %call8, align 4, !tbaa !2
  %9 = load i8*, i8** %write_error, align 8, !tbaa !6
  call void (i32, i32, i8*, ...) @error(i32 0, i32 %8, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2.191, i64 0, i64 0), i8* %9)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then5
  %10 = load volatile i32, i32* @exit_failure, align 4, !tbaa !2
  call void @_exit(i32 %10) #24
  unreachable

if.end9:                                          ; preds = %land.lhs.true1, %entry
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !6
  %call10 = call i32 @close_stream(%struct._IO_FILE* %11)
  %cmp11 = icmp ne i32 %call10, 0
  br i1 %cmp11, label %if.then12, label %if.end13

if.then12:                                        ; preds = %if.end9
  %12 = load volatile i32, i32* @exit_failure, align 4, !tbaa !2
  call void @_exit(i32 %12) #24
  unreachable

if.end13:                                         ; preds = %if.end9
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local void @md5_init_ctx(%struct.md5_ctx* %ctx) #7 {
entry:
  %ctx.addr = alloca %struct.md5_ctx*, align 8
  store %struct.md5_ctx* %ctx, %struct.md5_ctx** %ctx.addr, align 8, !tbaa !6
  %0 = load %struct.md5_ctx*, %struct.md5_ctx** %ctx.addr, align 8, !tbaa !6
  %A = getelementptr inbounds %struct.md5_ctx, %struct.md5_ctx* %0, i32 0, i32 0
  store i32 1732584193, i32* %A, align 4, !tbaa !113
  %1 = load %struct.md5_ctx*, %struct.md5_ctx** %ctx.addr, align 8, !tbaa !6
  %B = getelementptr inbounds %struct.md5_ctx, %struct.md5_ctx* %1, i32 0, i32 1
  store i32 -271733879, i32* %B, align 4, !tbaa !115
  %2 = load %struct.md5_ctx*, %struct.md5_ctx** %ctx.addr, align 8, !tbaa !6
  %C = getelementptr inbounds %struct.md5_ctx, %struct.md5_ctx* %2, i32 0, i32 2
  store i32 -1732584194, i32* %C, align 4, !tbaa !116
  %3 = load %struct.md5_ctx*, %struct.md5_ctx** %ctx.addr, align 8, !tbaa !6
  %D = getelementptr inbounds %struct.md5_ctx, %struct.md5_ctx* %3, i32 0, i32 3
  store i32 271733878, i32* %D, align 4, !tbaa !117
  %4 = load %struct.md5_ctx*, %struct.md5_ctx** %ctx.addr, align 8, !tbaa !6
  %total = getelementptr inbounds %struct.md5_ctx, %struct.md5_ctx* %4, i32 0, i32 4
  %arrayidx = getelementptr inbounds [2 x i32], [2 x i32]* %total, i64 0, i64 1
  store i32 0, i32* %arrayidx, align 4, !tbaa !2
  %5 = load %struct.md5_ctx*, %struct.md5_ctx** %ctx.addr, align 8, !tbaa !6
  %total1 = getelementptr inbounds %struct.md5_ctx, %struct.md5_ctx* %5, i32 0, i32 4
  %arrayidx2 = getelementptr inbounds [2 x i32], [2 x i32]* %total1, i64 0, i64 0
  store i32 0, i32* %arrayidx2, align 4, !tbaa !2
  %6 = load %struct.md5_ctx*, %struct.md5_ctx** %ctx.addr, align 8, !tbaa !6
  %buflen = getelementptr inbounds %struct.md5_ctx, %struct.md5_ctx* %6, i32 0, i32 5
  store i32 0, i32* %buflen, align 4, !tbaa !118
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i8* @md5_read_ctx(%struct.md5_ctx* %ctx, i8* %resbuf) #7 {
entry:
  %ctx.addr = alloca %struct.md5_ctx*, align 8
  %resbuf.addr = alloca i8*, align 8
  %r = alloca i8*, align 8
  store %struct.md5_ctx* %ctx, %struct.md5_ctx** %ctx.addr, align 8, !tbaa !6
  store i8* %resbuf, i8** %resbuf.addr, align 8, !tbaa !6
  %0 = bitcast i8** %r to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #13
  %1 = load i8*, i8** %resbuf.addr, align 8, !tbaa !6
  store i8* %1, i8** %r, align 8, !tbaa !6
  %2 = load i8*, i8** %r, align 8, !tbaa !6
  %add.ptr = getelementptr inbounds i8, i8* %2, i64 0
  %3 = load %struct.md5_ctx*, %struct.md5_ctx** %ctx.addr, align 8, !tbaa !6
  %A = getelementptr inbounds %struct.md5_ctx, %struct.md5_ctx* %3, i32 0, i32 0
  %4 = load i32, i32* %A, align 4, !tbaa !113
  call void @set_uint32(i8* %add.ptr, i32 %4)
  %5 = load i8*, i8** %r, align 8, !tbaa !6
  %add.ptr1 = getelementptr inbounds i8, i8* %5, i64 4
  %6 = load %struct.md5_ctx*, %struct.md5_ctx** %ctx.addr, align 8, !tbaa !6
  %B = getelementptr inbounds %struct.md5_ctx, %struct.md5_ctx* %6, i32 0, i32 1
  %7 = load i32, i32* %B, align 4, !tbaa !115
  call void @set_uint32(i8* %add.ptr1, i32 %7)
  %8 = load i8*, i8** %r, align 8, !tbaa !6
  %add.ptr2 = getelementptr inbounds i8, i8* %8, i64 8
  %9 = load %struct.md5_ctx*, %struct.md5_ctx** %ctx.addr, align 8, !tbaa !6
  %C = getelementptr inbounds %struct.md5_ctx, %struct.md5_ctx* %9, i32 0, i32 2
  %10 = load i32, i32* %C, align 4, !tbaa !116
  call void @set_uint32(i8* %add.ptr2, i32 %10)
  %11 = load i8*, i8** %r, align 8, !tbaa !6
  %add.ptr3 = getelementptr inbounds i8, i8* %11, i64 12
  %12 = load %struct.md5_ctx*, %struct.md5_ctx** %ctx.addr, align 8, !tbaa !6
  %D = getelementptr inbounds %struct.md5_ctx, %struct.md5_ctx* %12, i32 0, i32 3
  %13 = load i32, i32* %D, align 4, !tbaa !117
  call void @set_uint32(i8* %add.ptr3, i32 %13)
  %14 = load i8*, i8** %resbuf.addr, align 8, !tbaa !6
  %15 = bitcast i8** %r to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %15) #13
  ret i8* %14
}

; Function Attrs: nounwind uwtable
define internal void @set_uint32(i8* %cp, i32 %v) #7 {
entry:
  %cp.addr = alloca i8*, align 8
  %v.addr = alloca i32, align 4
  store i8* %cp, i8** %cp.addr, align 8, !tbaa !6
  store i32 %v, i32* %v.addr, align 4, !tbaa !2
  %0 = load i8*, i8** %cp.addr, align 8, !tbaa !6
  %1 = bitcast i32* %v.addr to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %0, i8* align 4 %1, i64 4, i1 false)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i8* @md5_finish_ctx(%struct.md5_ctx* %ctx, i8* %resbuf) #7 {
entry:
  %ctx.addr = alloca %struct.md5_ctx*, align 8
  %resbuf.addr = alloca i8*, align 8
  %bytes = alloca i32, align 4
  %size = alloca i64, align 8
  store %struct.md5_ctx* %ctx, %struct.md5_ctx** %ctx.addr, align 8, !tbaa !6
  store i8* %resbuf, i8** %resbuf.addr, align 8, !tbaa !6
  %0 = bitcast i32* %bytes to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #13
  %1 = load %struct.md5_ctx*, %struct.md5_ctx** %ctx.addr, align 8, !tbaa !6
  %buflen = getelementptr inbounds %struct.md5_ctx, %struct.md5_ctx* %1, i32 0, i32 5
  %2 = load i32, i32* %buflen, align 4, !tbaa !118
  store i32 %2, i32* %bytes, align 4, !tbaa !2
  %3 = bitcast i64* %size to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %3) #13
  %4 = load i32, i32* %bytes, align 4, !tbaa !2
  %cmp = icmp ult i32 %4, 56
  %5 = zext i1 %cmp to i64
  %cond = select i1 %cmp, i32 16, i32 32
  %conv = sext i32 %cond to i64
  store i64 %conv, i64* %size, align 8, !tbaa !14
  %6 = load i32, i32* %bytes, align 4, !tbaa !2
  %7 = load %struct.md5_ctx*, %struct.md5_ctx** %ctx.addr, align 8, !tbaa !6
  %total = getelementptr inbounds %struct.md5_ctx, %struct.md5_ctx* %7, i32 0, i32 4
  %arrayidx = getelementptr inbounds [2 x i32], [2 x i32]* %total, i64 0, i64 0
  %8 = load i32, i32* %arrayidx, align 4, !tbaa !2
  %add = add i32 %8, %6
  store i32 %add, i32* %arrayidx, align 4, !tbaa !2
  %9 = load %struct.md5_ctx*, %struct.md5_ctx** %ctx.addr, align 8, !tbaa !6
  %total1 = getelementptr inbounds %struct.md5_ctx, %struct.md5_ctx* %9, i32 0, i32 4
  %arrayidx2 = getelementptr inbounds [2 x i32], [2 x i32]* %total1, i64 0, i64 0
  %10 = load i32, i32* %arrayidx2, align 4, !tbaa !2
  %11 = load i32, i32* %bytes, align 4, !tbaa !2
  %cmp3 = icmp ult i32 %10, %11
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %12 = load %struct.md5_ctx*, %struct.md5_ctx** %ctx.addr, align 8, !tbaa !6
  %total5 = getelementptr inbounds %struct.md5_ctx, %struct.md5_ctx* %12, i32 0, i32 4
  %arrayidx6 = getelementptr inbounds [2 x i32], [2 x i32]* %total5, i64 0, i64 1
  %13 = load i32, i32* %arrayidx6, align 4, !tbaa !2
  %inc = add i32 %13, 1
  store i32 %inc, i32* %arrayidx6, align 4, !tbaa !2
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %14 = load %struct.md5_ctx*, %struct.md5_ctx** %ctx.addr, align 8, !tbaa !6
  %total7 = getelementptr inbounds %struct.md5_ctx, %struct.md5_ctx* %14, i32 0, i32 4
  %arrayidx8 = getelementptr inbounds [2 x i32], [2 x i32]* %total7, i64 0, i64 0
  %15 = load i32, i32* %arrayidx8, align 4, !tbaa !2
  %shl = shl i32 %15, 3
  %16 = load %struct.md5_ctx*, %struct.md5_ctx** %ctx.addr, align 8, !tbaa !6
  %buffer = getelementptr inbounds %struct.md5_ctx, %struct.md5_ctx* %16, i32 0, i32 6
  %17 = load i64, i64* %size, align 8, !tbaa !14
  %sub = sub i64 %17, 2
  %arrayidx9 = getelementptr inbounds [32 x i32], [32 x i32]* %buffer, i64 0, i64 %sub
  store i32 %shl, i32* %arrayidx9, align 4, !tbaa !2
  %18 = load %struct.md5_ctx*, %struct.md5_ctx** %ctx.addr, align 8, !tbaa !6
  %total10 = getelementptr inbounds %struct.md5_ctx, %struct.md5_ctx* %18, i32 0, i32 4
  %arrayidx11 = getelementptr inbounds [2 x i32], [2 x i32]* %total10, i64 0, i64 1
  %19 = load i32, i32* %arrayidx11, align 4, !tbaa !2
  %shl12 = shl i32 %19, 3
  %20 = load %struct.md5_ctx*, %struct.md5_ctx** %ctx.addr, align 8, !tbaa !6
  %total13 = getelementptr inbounds %struct.md5_ctx, %struct.md5_ctx* %20, i32 0, i32 4
  %arrayidx14 = getelementptr inbounds [2 x i32], [2 x i32]* %total13, i64 0, i64 0
  %21 = load i32, i32* %arrayidx14, align 4, !tbaa !2
  %shr = lshr i32 %21, 29
  %or = or i32 %shl12, %shr
  %22 = load %struct.md5_ctx*, %struct.md5_ctx** %ctx.addr, align 8, !tbaa !6
  %buffer15 = getelementptr inbounds %struct.md5_ctx, %struct.md5_ctx* %22, i32 0, i32 6
  %23 = load i64, i64* %size, align 8, !tbaa !14
  %sub16 = sub i64 %23, 1
  %arrayidx17 = getelementptr inbounds [32 x i32], [32 x i32]* %buffer15, i64 0, i64 %sub16
  store i32 %or, i32* %arrayidx17, align 4, !tbaa !2
  %24 = load %struct.md5_ctx*, %struct.md5_ctx** %ctx.addr, align 8, !tbaa !6
  %buffer18 = getelementptr inbounds %struct.md5_ctx, %struct.md5_ctx* %24, i32 0, i32 6
  %arraydecay = getelementptr inbounds [32 x i32], [32 x i32]* %buffer18, i64 0, i64 0
  %25 = bitcast i32* %arraydecay to i8*
  %26 = load i32, i32* %bytes, align 4, !tbaa !2
  %idxprom = zext i32 %26 to i64
  %arrayidx19 = getelementptr inbounds i8, i8* %25, i64 %idxprom
  %27 = load i64, i64* %size, align 8, !tbaa !14
  %sub20 = sub i64 %27, 2
  %mul = mul i64 %sub20, 4
  %28 = load i32, i32* %bytes, align 4, !tbaa !2
  %conv21 = zext i32 %28 to i64
  %sub22 = sub i64 %mul, %conv21
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %arrayidx19, i8* align 16 getelementptr inbounds ([64 x i8], [64 x i8]* bitcast (<{ i8, [63 x i8] }>* @fillbuf.196 to [64 x i8]*), i64 0, i64 0), i64 %sub22, i1 false)
  %29 = load %struct.md5_ctx*, %struct.md5_ctx** %ctx.addr, align 8, !tbaa !6
  %buffer23 = getelementptr inbounds %struct.md5_ctx, %struct.md5_ctx* %29, i32 0, i32 6
  %arraydecay24 = getelementptr inbounds [32 x i32], [32 x i32]* %buffer23, i64 0, i64 0
  %30 = bitcast i32* %arraydecay24 to i8*
  %31 = load i64, i64* %size, align 8, !tbaa !14
  %mul25 = mul i64 %31, 4
  %32 = load %struct.md5_ctx*, %struct.md5_ctx** %ctx.addr, align 8, !tbaa !6
  call void @md5_process_block(i8* %30, i64 %mul25, %struct.md5_ctx* %32) #13
  %33 = load %struct.md5_ctx*, %struct.md5_ctx** %ctx.addr, align 8, !tbaa !6
  %34 = load i8*, i8** %resbuf.addr, align 8, !tbaa !6
  %call = call i8* @md5_read_ctx(%struct.md5_ctx* %33, i8* %34) #13
  %35 = bitcast i64* %size to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %35) #13
  %36 = bitcast i32* %bytes to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %36) #13
  ret i8* %call
}

; Function Attrs: nounwind uwtable
define dso_local void @md5_process_block(i8* %buffer, i64 %len, %struct.md5_ctx* %ctx) #7 {
entry:
  %buffer.addr = alloca i8*, align 8
  %len.addr = alloca i64, align 8
  %ctx.addr = alloca %struct.md5_ctx*, align 8
  %correct_words = alloca [16 x i32], align 16
  %words = alloca i32*, align 8
  %nwords = alloca i64, align 8
  %endp = alloca i32*, align 8
  %A = alloca i32, align 4
  %B = alloca i32, align 4
  %C = alloca i32, align 4
  %D = alloca i32, align 4
  %lolen = alloca i32, align 4
  %cwp = alloca i32*, align 8
  %A_save = alloca i32, align 4
  %B_save = alloca i32, align 4
  %C_save = alloca i32, align 4
  %D_save = alloca i32, align 4
  store i8* %buffer, i8** %buffer.addr, align 8, !tbaa !6
  store i64 %len, i64* %len.addr, align 8, !tbaa !14
  store %struct.md5_ctx* %ctx, %struct.md5_ctx** %ctx.addr, align 8, !tbaa !6
  %0 = bitcast [16 x i32]* %correct_words to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* %0) #13
  %1 = bitcast i32** %words to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %1) #13
  %2 = load i8*, i8** %buffer.addr, align 8, !tbaa !6
  %3 = bitcast i8* %2 to i32*
  store i32* %3, i32** %words, align 8, !tbaa !6
  %4 = bitcast i64* %nwords to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %4) #13
  %5 = load i64, i64* %len.addr, align 8, !tbaa !14
  %div = udiv i64 %5, 4
  store i64 %div, i64* %nwords, align 8, !tbaa !14
  %6 = bitcast i32** %endp to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %6) #13
  %7 = load i32*, i32** %words, align 8, !tbaa !6
  %8 = load i64, i64* %nwords, align 8, !tbaa !14
  %add.ptr = getelementptr inbounds i32, i32* %7, i64 %8
  store i32* %add.ptr, i32** %endp, align 8, !tbaa !6
  %9 = bitcast i32* %A to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %9) #13
  %10 = load %struct.md5_ctx*, %struct.md5_ctx** %ctx.addr, align 8, !tbaa !6
  %A1 = getelementptr inbounds %struct.md5_ctx, %struct.md5_ctx* %10, i32 0, i32 0
  %11 = load i32, i32* %A1, align 4, !tbaa !113
  store i32 %11, i32* %A, align 4, !tbaa !2
  %12 = bitcast i32* %B to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %12) #13
  %13 = load %struct.md5_ctx*, %struct.md5_ctx** %ctx.addr, align 8, !tbaa !6
  %B2 = getelementptr inbounds %struct.md5_ctx, %struct.md5_ctx* %13, i32 0, i32 1
  %14 = load i32, i32* %B2, align 4, !tbaa !115
  store i32 %14, i32* %B, align 4, !tbaa !2
  %15 = bitcast i32* %C to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %15) #13
  %16 = load %struct.md5_ctx*, %struct.md5_ctx** %ctx.addr, align 8, !tbaa !6
  %C3 = getelementptr inbounds %struct.md5_ctx, %struct.md5_ctx* %16, i32 0, i32 2
  %17 = load i32, i32* %C3, align 4, !tbaa !116
  store i32 %17, i32* %C, align 4, !tbaa !2
  %18 = bitcast i32* %D to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %18) #13
  %19 = load %struct.md5_ctx*, %struct.md5_ctx** %ctx.addr, align 8, !tbaa !6
  %D4 = getelementptr inbounds %struct.md5_ctx, %struct.md5_ctx* %19, i32 0, i32 3
  %20 = load i32, i32* %D4, align 4, !tbaa !117
  store i32 %20, i32* %D, align 4, !tbaa !2
  %21 = bitcast i32* %lolen to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %21) #13
  %22 = load i64, i64* %len.addr, align 8, !tbaa !14
  %conv = trunc i64 %22 to i32
  store i32 %conv, i32* %lolen, align 4, !tbaa !2
  %23 = load i32, i32* %lolen, align 4, !tbaa !2
  %24 = load %struct.md5_ctx*, %struct.md5_ctx** %ctx.addr, align 8, !tbaa !6
  %total = getelementptr inbounds %struct.md5_ctx, %struct.md5_ctx* %24, i32 0, i32 4
  %arrayidx = getelementptr inbounds [2 x i32], [2 x i32]* %total, i64 0, i64 0
  %25 = load i32, i32* %arrayidx, align 4, !tbaa !2
  %add = add i32 %25, %23
  store i32 %add, i32* %arrayidx, align 4, !tbaa !2
  %26 = load i64, i64* %len.addr, align 8, !tbaa !14
  %shr = lshr i64 %26, 31
  %shr5 = lshr i64 %shr, 1
  %27 = load %struct.md5_ctx*, %struct.md5_ctx** %ctx.addr, align 8, !tbaa !6
  %total6 = getelementptr inbounds %struct.md5_ctx, %struct.md5_ctx* %27, i32 0, i32 4
  %arrayidx7 = getelementptr inbounds [2 x i32], [2 x i32]* %total6, i64 0, i64 0
  %28 = load i32, i32* %arrayidx7, align 4, !tbaa !2
  %29 = load i32, i32* %lolen, align 4, !tbaa !2
  %cmp = icmp ult i32 %28, %29
  %conv8 = zext i1 %cmp to i32
  %conv9 = sext i32 %conv8 to i64
  %add10 = add i64 %shr5, %conv9
  %30 = load %struct.md5_ctx*, %struct.md5_ctx** %ctx.addr, align 8, !tbaa !6
  %total11 = getelementptr inbounds %struct.md5_ctx, %struct.md5_ctx* %30, i32 0, i32 4
  %arrayidx12 = getelementptr inbounds [2 x i32], [2 x i32]* %total11, i64 0, i64 1
  %31 = load i32, i32* %arrayidx12, align 4, !tbaa !2
  %conv13 = zext i32 %31 to i64
  %add14 = add i64 %conv13, %add10
  %conv15 = trunc i64 %add14 to i32
  store i32 %conv15, i32* %arrayidx12, align 4, !tbaa !2
  br label %while.cond

while.cond:                                       ; preds = %do.end904, %entry
  %32 = load i32*, i32** %words, align 8, !tbaa !6
  %33 = load i32*, i32** %endp, align 8, !tbaa !6
  %cmp16 = icmp ult i32* %32, %33
  br i1 %cmp16, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %34 = bitcast i32** %cwp to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %34) #13
  %arraydecay = getelementptr inbounds [16 x i32], [16 x i32]* %correct_words, i64 0, i64 0
  store i32* %arraydecay, i32** %cwp, align 8, !tbaa !6
  %35 = bitcast i32* %A_save to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %35) #13
  %36 = load i32, i32* %A, align 4, !tbaa !2
  store i32 %36, i32* %A_save, align 4, !tbaa !2
  %37 = bitcast i32* %B_save to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %37) #13
  %38 = load i32, i32* %B, align 4, !tbaa !2
  store i32 %38, i32* %B_save, align 4, !tbaa !2
  %39 = bitcast i32* %C_save to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %39) #13
  %40 = load i32, i32* %C, align 4, !tbaa !2
  store i32 %40, i32* %C_save, align 4, !tbaa !2
  %41 = bitcast i32* %D_save to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %41) #13
  %42 = load i32, i32* %D, align 4, !tbaa !2
  store i32 %42, i32* %D_save, align 4, !tbaa !2
  br label %do.body

do.body:                                          ; preds = %while.body
  %43 = load i32, i32* %D, align 4, !tbaa !2
  %44 = load i32, i32* %B, align 4, !tbaa !2
  %45 = load i32, i32* %C, align 4, !tbaa !2
  %46 = load i32, i32* %D, align 4, !tbaa !2
  %xor = xor i32 %45, %46
  %and = and i32 %44, %xor
  %xor18 = xor i32 %43, %and
  %47 = load i32*, i32** %words, align 8, !tbaa !6
  %48 = load i32, i32* %47, align 4, !tbaa !2
  %49 = load i32*, i32** %cwp, align 8, !tbaa !6
  %incdec.ptr = getelementptr inbounds i32, i32* %49, i32 1
  store i32* %incdec.ptr, i32** %cwp, align 8, !tbaa !6
  store i32 %48, i32* %49, align 4, !tbaa !2
  %add19 = add i32 %xor18, %48
  %add20 = add i32 %add19, -680876936
  %50 = load i32, i32* %A, align 4, !tbaa !2
  %add21 = add i32 %50, %add20
  store i32 %add21, i32* %A, align 4, !tbaa !2
  %51 = load i32*, i32** %words, align 8, !tbaa !6
  %incdec.ptr22 = getelementptr inbounds i32, i32* %51, i32 1
  store i32* %incdec.ptr22, i32** %words, align 8, !tbaa !6
  %52 = load i32, i32* %A, align 4, !tbaa !2
  %shl = shl i32 %52, 7
  %53 = load i32, i32* %A, align 4, !tbaa !2
  %shr23 = lshr i32 %53, 25
  %or = or i32 %shl, %shr23
  store i32 %or, i32* %A, align 4, !tbaa !2
  %54 = load i32, i32* %B, align 4, !tbaa !2
  %55 = load i32, i32* %A, align 4, !tbaa !2
  %add24 = add i32 %55, %54
  store i32 %add24, i32* %A, align 4, !tbaa !2
  br label %do.cond

do.cond:                                          ; preds = %do.body
  br label %do.end

do.end:                                           ; preds = %do.cond
  br label %do.body25

do.body25:                                        ; preds = %do.end
  %56 = load i32, i32* %C, align 4, !tbaa !2
  %57 = load i32, i32* %A, align 4, !tbaa !2
  %58 = load i32, i32* %B, align 4, !tbaa !2
  %59 = load i32, i32* %C, align 4, !tbaa !2
  %xor26 = xor i32 %58, %59
  %and27 = and i32 %57, %xor26
  %xor28 = xor i32 %56, %and27
  %60 = load i32*, i32** %words, align 8, !tbaa !6
  %61 = load i32, i32* %60, align 4, !tbaa !2
  %62 = load i32*, i32** %cwp, align 8, !tbaa !6
  %incdec.ptr29 = getelementptr inbounds i32, i32* %62, i32 1
  store i32* %incdec.ptr29, i32** %cwp, align 8, !tbaa !6
  store i32 %61, i32* %62, align 4, !tbaa !2
  %add30 = add i32 %xor28, %61
  %add31 = add i32 %add30, -389564586
  %63 = load i32, i32* %D, align 4, !tbaa !2
  %add32 = add i32 %63, %add31
  store i32 %add32, i32* %D, align 4, !tbaa !2
  %64 = load i32*, i32** %words, align 8, !tbaa !6
  %incdec.ptr33 = getelementptr inbounds i32, i32* %64, i32 1
  store i32* %incdec.ptr33, i32** %words, align 8, !tbaa !6
  %65 = load i32, i32* %D, align 4, !tbaa !2
  %shl34 = shl i32 %65, 12
  %66 = load i32, i32* %D, align 4, !tbaa !2
  %shr35 = lshr i32 %66, 20
  %or36 = or i32 %shl34, %shr35
  store i32 %or36, i32* %D, align 4, !tbaa !2
  %67 = load i32, i32* %A, align 4, !tbaa !2
  %68 = load i32, i32* %D, align 4, !tbaa !2
  %add37 = add i32 %68, %67
  store i32 %add37, i32* %D, align 4, !tbaa !2
  br label %do.cond38

do.cond38:                                        ; preds = %do.body25
  br label %do.end39

do.end39:                                         ; preds = %do.cond38
  br label %do.body40

do.body40:                                        ; preds = %do.end39
  %69 = load i32, i32* %B, align 4, !tbaa !2
  %70 = load i32, i32* %D, align 4, !tbaa !2
  %71 = load i32, i32* %A, align 4, !tbaa !2
  %72 = load i32, i32* %B, align 4, !tbaa !2
  %xor41 = xor i32 %71, %72
  %and42 = and i32 %70, %xor41
  %xor43 = xor i32 %69, %and42
  %73 = load i32*, i32** %words, align 8, !tbaa !6
  %74 = load i32, i32* %73, align 4, !tbaa !2
  %75 = load i32*, i32** %cwp, align 8, !tbaa !6
  %incdec.ptr44 = getelementptr inbounds i32, i32* %75, i32 1
  store i32* %incdec.ptr44, i32** %cwp, align 8, !tbaa !6
  store i32 %74, i32* %75, align 4, !tbaa !2
  %add45 = add i32 %xor43, %74
  %add46 = add i32 %add45, 606105819
  %76 = load i32, i32* %C, align 4, !tbaa !2
  %add47 = add i32 %76, %add46
  store i32 %add47, i32* %C, align 4, !tbaa !2
  %77 = load i32*, i32** %words, align 8, !tbaa !6
  %incdec.ptr48 = getelementptr inbounds i32, i32* %77, i32 1
  store i32* %incdec.ptr48, i32** %words, align 8, !tbaa !6
  %78 = load i32, i32* %C, align 4, !tbaa !2
  %shl49 = shl i32 %78, 17
  %79 = load i32, i32* %C, align 4, !tbaa !2
  %shr50 = lshr i32 %79, 15
  %or51 = or i32 %shl49, %shr50
  store i32 %or51, i32* %C, align 4, !tbaa !2
  %80 = load i32, i32* %D, align 4, !tbaa !2
  %81 = load i32, i32* %C, align 4, !tbaa !2
  %add52 = add i32 %81, %80
  store i32 %add52, i32* %C, align 4, !tbaa !2
  br label %do.cond53

do.cond53:                                        ; preds = %do.body40
  br label %do.end54

do.end54:                                         ; preds = %do.cond53
  br label %do.body55

do.body55:                                        ; preds = %do.end54
  %82 = load i32, i32* %A, align 4, !tbaa !2
  %83 = load i32, i32* %C, align 4, !tbaa !2
  %84 = load i32, i32* %D, align 4, !tbaa !2
  %85 = load i32, i32* %A, align 4, !tbaa !2
  %xor56 = xor i32 %84, %85
  %and57 = and i32 %83, %xor56
  %xor58 = xor i32 %82, %and57
  %86 = load i32*, i32** %words, align 8, !tbaa !6
  %87 = load i32, i32* %86, align 4, !tbaa !2
  %88 = load i32*, i32** %cwp, align 8, !tbaa !6
  %incdec.ptr59 = getelementptr inbounds i32, i32* %88, i32 1
  store i32* %incdec.ptr59, i32** %cwp, align 8, !tbaa !6
  store i32 %87, i32* %88, align 4, !tbaa !2
  %add60 = add i32 %xor58, %87
  %add61 = add i32 %add60, -1044525330
  %89 = load i32, i32* %B, align 4, !tbaa !2
  %add62 = add i32 %89, %add61
  store i32 %add62, i32* %B, align 4, !tbaa !2
  %90 = load i32*, i32** %words, align 8, !tbaa !6
  %incdec.ptr63 = getelementptr inbounds i32, i32* %90, i32 1
  store i32* %incdec.ptr63, i32** %words, align 8, !tbaa !6
  %91 = load i32, i32* %B, align 4, !tbaa !2
  %shl64 = shl i32 %91, 22
  %92 = load i32, i32* %B, align 4, !tbaa !2
  %shr65 = lshr i32 %92, 10
  %or66 = or i32 %shl64, %shr65
  store i32 %or66, i32* %B, align 4, !tbaa !2
  %93 = load i32, i32* %C, align 4, !tbaa !2
  %94 = load i32, i32* %B, align 4, !tbaa !2
  %add67 = add i32 %94, %93
  store i32 %add67, i32* %B, align 4, !tbaa !2
  br label %do.cond68

do.cond68:                                        ; preds = %do.body55
  br label %do.end69

do.end69:                                         ; preds = %do.cond68
  br label %do.body70

do.body70:                                        ; preds = %do.end69
  %95 = load i32, i32* %D, align 4, !tbaa !2
  %96 = load i32, i32* %B, align 4, !tbaa !2
  %97 = load i32, i32* %C, align 4, !tbaa !2
  %98 = load i32, i32* %D, align 4, !tbaa !2
  %xor71 = xor i32 %97, %98
  %and72 = and i32 %96, %xor71
  %xor73 = xor i32 %95, %and72
  %99 = load i32*, i32** %words, align 8, !tbaa !6
  %100 = load i32, i32* %99, align 4, !tbaa !2
  %101 = load i32*, i32** %cwp, align 8, !tbaa !6
  %incdec.ptr74 = getelementptr inbounds i32, i32* %101, i32 1
  store i32* %incdec.ptr74, i32** %cwp, align 8, !tbaa !6
  store i32 %100, i32* %101, align 4, !tbaa !2
  %add75 = add i32 %xor73, %100
  %add76 = add i32 %add75, -176418897
  %102 = load i32, i32* %A, align 4, !tbaa !2
  %add77 = add i32 %102, %add76
  store i32 %add77, i32* %A, align 4, !tbaa !2
  %103 = load i32*, i32** %words, align 8, !tbaa !6
  %incdec.ptr78 = getelementptr inbounds i32, i32* %103, i32 1
  store i32* %incdec.ptr78, i32** %words, align 8, !tbaa !6
  %104 = load i32, i32* %A, align 4, !tbaa !2
  %shl79 = shl i32 %104, 7
  %105 = load i32, i32* %A, align 4, !tbaa !2
  %shr80 = lshr i32 %105, 25
  %or81 = or i32 %shl79, %shr80
  store i32 %or81, i32* %A, align 4, !tbaa !2
  %106 = load i32, i32* %B, align 4, !tbaa !2
  %107 = load i32, i32* %A, align 4, !tbaa !2
  %add82 = add i32 %107, %106
  store i32 %add82, i32* %A, align 4, !tbaa !2
  br label %do.cond83

do.cond83:                                        ; preds = %do.body70
  br label %do.end84

do.end84:                                         ; preds = %do.cond83
  br label %do.body85

do.body85:                                        ; preds = %do.end84
  %108 = load i32, i32* %C, align 4, !tbaa !2
  %109 = load i32, i32* %A, align 4, !tbaa !2
  %110 = load i32, i32* %B, align 4, !tbaa !2
  %111 = load i32, i32* %C, align 4, !tbaa !2
  %xor86 = xor i32 %110, %111
  %and87 = and i32 %109, %xor86
  %xor88 = xor i32 %108, %and87
  %112 = load i32*, i32** %words, align 8, !tbaa !6
  %113 = load i32, i32* %112, align 4, !tbaa !2
  %114 = load i32*, i32** %cwp, align 8, !tbaa !6
  %incdec.ptr89 = getelementptr inbounds i32, i32* %114, i32 1
  store i32* %incdec.ptr89, i32** %cwp, align 8, !tbaa !6
  store i32 %113, i32* %114, align 4, !tbaa !2
  %add90 = add i32 %xor88, %113
  %add91 = add i32 %add90, 1200080426
  %115 = load i32, i32* %D, align 4, !tbaa !2
  %add92 = add i32 %115, %add91
  store i32 %add92, i32* %D, align 4, !tbaa !2
  %116 = load i32*, i32** %words, align 8, !tbaa !6
  %incdec.ptr93 = getelementptr inbounds i32, i32* %116, i32 1
  store i32* %incdec.ptr93, i32** %words, align 8, !tbaa !6
  %117 = load i32, i32* %D, align 4, !tbaa !2
  %shl94 = shl i32 %117, 12
  %118 = load i32, i32* %D, align 4, !tbaa !2
  %shr95 = lshr i32 %118, 20
  %or96 = or i32 %shl94, %shr95
  store i32 %or96, i32* %D, align 4, !tbaa !2
  %119 = load i32, i32* %A, align 4, !tbaa !2
  %120 = load i32, i32* %D, align 4, !tbaa !2
  %add97 = add i32 %120, %119
  store i32 %add97, i32* %D, align 4, !tbaa !2
  br label %do.cond98

do.cond98:                                        ; preds = %do.body85
  br label %do.end99

do.end99:                                         ; preds = %do.cond98
  br label %do.body100

do.body100:                                       ; preds = %do.end99
  %121 = load i32, i32* %B, align 4, !tbaa !2
  %122 = load i32, i32* %D, align 4, !tbaa !2
  %123 = load i32, i32* %A, align 4, !tbaa !2
  %124 = load i32, i32* %B, align 4, !tbaa !2
  %xor101 = xor i32 %123, %124
  %and102 = and i32 %122, %xor101
  %xor103 = xor i32 %121, %and102
  %125 = load i32*, i32** %words, align 8, !tbaa !6
  %126 = load i32, i32* %125, align 4, !tbaa !2
  %127 = load i32*, i32** %cwp, align 8, !tbaa !6
  %incdec.ptr104 = getelementptr inbounds i32, i32* %127, i32 1
  store i32* %incdec.ptr104, i32** %cwp, align 8, !tbaa !6
  store i32 %126, i32* %127, align 4, !tbaa !2
  %add105 = add i32 %xor103, %126
  %add106 = add i32 %add105, -1473231341
  %128 = load i32, i32* %C, align 4, !tbaa !2
  %add107 = add i32 %128, %add106
  store i32 %add107, i32* %C, align 4, !tbaa !2
  %129 = load i32*, i32** %words, align 8, !tbaa !6
  %incdec.ptr108 = getelementptr inbounds i32, i32* %129, i32 1
  store i32* %incdec.ptr108, i32** %words, align 8, !tbaa !6
  %130 = load i32, i32* %C, align 4, !tbaa !2
  %shl109 = shl i32 %130, 17
  %131 = load i32, i32* %C, align 4, !tbaa !2
  %shr110 = lshr i32 %131, 15
  %or111 = or i32 %shl109, %shr110
  store i32 %or111, i32* %C, align 4, !tbaa !2
  %132 = load i32, i32* %D, align 4, !tbaa !2
  %133 = load i32, i32* %C, align 4, !tbaa !2
  %add112 = add i32 %133, %132
  store i32 %add112, i32* %C, align 4, !tbaa !2
  br label %do.cond113

do.cond113:                                       ; preds = %do.body100
  br label %do.end114

do.end114:                                        ; preds = %do.cond113
  br label %do.body115

do.body115:                                       ; preds = %do.end114
  %134 = load i32, i32* %A, align 4, !tbaa !2
  %135 = load i32, i32* %C, align 4, !tbaa !2
  %136 = load i32, i32* %D, align 4, !tbaa !2
  %137 = load i32, i32* %A, align 4, !tbaa !2
  %xor116 = xor i32 %136, %137
  %and117 = and i32 %135, %xor116
  %xor118 = xor i32 %134, %and117
  %138 = load i32*, i32** %words, align 8, !tbaa !6
  %139 = load i32, i32* %138, align 4, !tbaa !2
  %140 = load i32*, i32** %cwp, align 8, !tbaa !6
  %incdec.ptr119 = getelementptr inbounds i32, i32* %140, i32 1
  store i32* %incdec.ptr119, i32** %cwp, align 8, !tbaa !6
  store i32 %139, i32* %140, align 4, !tbaa !2
  %add120 = add i32 %xor118, %139
  %add121 = add i32 %add120, -45705983
  %141 = load i32, i32* %B, align 4, !tbaa !2
  %add122 = add i32 %141, %add121
  store i32 %add122, i32* %B, align 4, !tbaa !2
  %142 = load i32*, i32** %words, align 8, !tbaa !6
  %incdec.ptr123 = getelementptr inbounds i32, i32* %142, i32 1
  store i32* %incdec.ptr123, i32** %words, align 8, !tbaa !6
  %143 = load i32, i32* %B, align 4, !tbaa !2
  %shl124 = shl i32 %143, 22
  %144 = load i32, i32* %B, align 4, !tbaa !2
  %shr125 = lshr i32 %144, 10
  %or126 = or i32 %shl124, %shr125
  store i32 %or126, i32* %B, align 4, !tbaa !2
  %145 = load i32, i32* %C, align 4, !tbaa !2
  %146 = load i32, i32* %B, align 4, !tbaa !2
  %add127 = add i32 %146, %145
  store i32 %add127, i32* %B, align 4, !tbaa !2
  br label %do.cond128

do.cond128:                                       ; preds = %do.body115
  br label %do.end129

do.end129:                                        ; preds = %do.cond128
  br label %do.body130

do.body130:                                       ; preds = %do.end129
  %147 = load i32, i32* %D, align 4, !tbaa !2
  %148 = load i32, i32* %B, align 4, !tbaa !2
  %149 = load i32, i32* %C, align 4, !tbaa !2
  %150 = load i32, i32* %D, align 4, !tbaa !2
  %xor131 = xor i32 %149, %150
  %and132 = and i32 %148, %xor131
  %xor133 = xor i32 %147, %and132
  %151 = load i32*, i32** %words, align 8, !tbaa !6
  %152 = load i32, i32* %151, align 4, !tbaa !2
  %153 = load i32*, i32** %cwp, align 8, !tbaa !6
  %incdec.ptr134 = getelementptr inbounds i32, i32* %153, i32 1
  store i32* %incdec.ptr134, i32** %cwp, align 8, !tbaa !6
  store i32 %152, i32* %153, align 4, !tbaa !2
  %add135 = add i32 %xor133, %152
  %add136 = add i32 %add135, 1770035416
  %154 = load i32, i32* %A, align 4, !tbaa !2
  %add137 = add i32 %154, %add136
  store i32 %add137, i32* %A, align 4, !tbaa !2
  %155 = load i32*, i32** %words, align 8, !tbaa !6
  %incdec.ptr138 = getelementptr inbounds i32, i32* %155, i32 1
  store i32* %incdec.ptr138, i32** %words, align 8, !tbaa !6
  %156 = load i32, i32* %A, align 4, !tbaa !2
  %shl139 = shl i32 %156, 7
  %157 = load i32, i32* %A, align 4, !tbaa !2
  %shr140 = lshr i32 %157, 25
  %or141 = or i32 %shl139, %shr140
  store i32 %or141, i32* %A, align 4, !tbaa !2
  %158 = load i32, i32* %B, align 4, !tbaa !2
  %159 = load i32, i32* %A, align 4, !tbaa !2
  %add142 = add i32 %159, %158
  store i32 %add142, i32* %A, align 4, !tbaa !2
  br label %do.cond143

do.cond143:                                       ; preds = %do.body130
  br label %do.end144

do.end144:                                        ; preds = %do.cond143
  br label %do.body145

do.body145:                                       ; preds = %do.end144
  %160 = load i32, i32* %C, align 4, !tbaa !2
  %161 = load i32, i32* %A, align 4, !tbaa !2
  %162 = load i32, i32* %B, align 4, !tbaa !2
  %163 = load i32, i32* %C, align 4, !tbaa !2
  %xor146 = xor i32 %162, %163
  %and147 = and i32 %161, %xor146
  %xor148 = xor i32 %160, %and147
  %164 = load i32*, i32** %words, align 8, !tbaa !6
  %165 = load i32, i32* %164, align 4, !tbaa !2
  %166 = load i32*, i32** %cwp, align 8, !tbaa !6
  %incdec.ptr149 = getelementptr inbounds i32, i32* %166, i32 1
  store i32* %incdec.ptr149, i32** %cwp, align 8, !tbaa !6
  store i32 %165, i32* %166, align 4, !tbaa !2
  %add150 = add i32 %xor148, %165
  %add151 = add i32 %add150, -1958414417
  %167 = load i32, i32* %D, align 4, !tbaa !2
  %add152 = add i32 %167, %add151
  store i32 %add152, i32* %D, align 4, !tbaa !2
  %168 = load i32*, i32** %words, align 8, !tbaa !6
  %incdec.ptr153 = getelementptr inbounds i32, i32* %168, i32 1
  store i32* %incdec.ptr153, i32** %words, align 8, !tbaa !6
  %169 = load i32, i32* %D, align 4, !tbaa !2
  %shl154 = shl i32 %169, 12
  %170 = load i32, i32* %D, align 4, !tbaa !2
  %shr155 = lshr i32 %170, 20
  %or156 = or i32 %shl154, %shr155
  store i32 %or156, i32* %D, align 4, !tbaa !2
  %171 = load i32, i32* %A, align 4, !tbaa !2
  %172 = load i32, i32* %D, align 4, !tbaa !2
  %add157 = add i32 %172, %171
  store i32 %add157, i32* %D, align 4, !tbaa !2
  br label %do.cond158

do.cond158:                                       ; preds = %do.body145
  br label %do.end159

do.end159:                                        ; preds = %do.cond158
  br label %do.body160

do.body160:                                       ; preds = %do.end159
  %173 = load i32, i32* %B, align 4, !tbaa !2
  %174 = load i32, i32* %D, align 4, !tbaa !2
  %175 = load i32, i32* %A, align 4, !tbaa !2
  %176 = load i32, i32* %B, align 4, !tbaa !2
  %xor161 = xor i32 %175, %176
  %and162 = and i32 %174, %xor161
  %xor163 = xor i32 %173, %and162
  %177 = load i32*, i32** %words, align 8, !tbaa !6
  %178 = load i32, i32* %177, align 4, !tbaa !2
  %179 = load i32*, i32** %cwp, align 8, !tbaa !6
  %incdec.ptr164 = getelementptr inbounds i32, i32* %179, i32 1
  store i32* %incdec.ptr164, i32** %cwp, align 8, !tbaa !6
  store i32 %178, i32* %179, align 4, !tbaa !2
  %add165 = add i32 %xor163, %178
  %add166 = add i32 %add165, -42063
  %180 = load i32, i32* %C, align 4, !tbaa !2
  %add167 = add i32 %180, %add166
  store i32 %add167, i32* %C, align 4, !tbaa !2
  %181 = load i32*, i32** %words, align 8, !tbaa !6
  %incdec.ptr168 = getelementptr inbounds i32, i32* %181, i32 1
  store i32* %incdec.ptr168, i32** %words, align 8, !tbaa !6
  %182 = load i32, i32* %C, align 4, !tbaa !2
  %shl169 = shl i32 %182, 17
  %183 = load i32, i32* %C, align 4, !tbaa !2
  %shr170 = lshr i32 %183, 15
  %or171 = or i32 %shl169, %shr170
  store i32 %or171, i32* %C, align 4, !tbaa !2
  %184 = load i32, i32* %D, align 4, !tbaa !2
  %185 = load i32, i32* %C, align 4, !tbaa !2
  %add172 = add i32 %185, %184
  store i32 %add172, i32* %C, align 4, !tbaa !2
  br label %do.cond173

do.cond173:                                       ; preds = %do.body160
  br label %do.end174

do.end174:                                        ; preds = %do.cond173
  br label %do.body175

do.body175:                                       ; preds = %do.end174
  %186 = load i32, i32* %A, align 4, !tbaa !2
  %187 = load i32, i32* %C, align 4, !tbaa !2
  %188 = load i32, i32* %D, align 4, !tbaa !2
  %189 = load i32, i32* %A, align 4, !tbaa !2
  %xor176 = xor i32 %188, %189
  %and177 = and i32 %187, %xor176
  %xor178 = xor i32 %186, %and177
  %190 = load i32*, i32** %words, align 8, !tbaa !6
  %191 = load i32, i32* %190, align 4, !tbaa !2
  %192 = load i32*, i32** %cwp, align 8, !tbaa !6
  %incdec.ptr179 = getelementptr inbounds i32, i32* %192, i32 1
  store i32* %incdec.ptr179, i32** %cwp, align 8, !tbaa !6
  store i32 %191, i32* %192, align 4, !tbaa !2
  %add180 = add i32 %xor178, %191
  %add181 = add i32 %add180, -1990404162
  %193 = load i32, i32* %B, align 4, !tbaa !2
  %add182 = add i32 %193, %add181
  store i32 %add182, i32* %B, align 4, !tbaa !2
  %194 = load i32*, i32** %words, align 8, !tbaa !6
  %incdec.ptr183 = getelementptr inbounds i32, i32* %194, i32 1
  store i32* %incdec.ptr183, i32** %words, align 8, !tbaa !6
  %195 = load i32, i32* %B, align 4, !tbaa !2
  %shl184 = shl i32 %195, 22
  %196 = load i32, i32* %B, align 4, !tbaa !2
  %shr185 = lshr i32 %196, 10
  %or186 = or i32 %shl184, %shr185
  store i32 %or186, i32* %B, align 4, !tbaa !2
  %197 = load i32, i32* %C, align 4, !tbaa !2
  %198 = load i32, i32* %B, align 4, !tbaa !2
  %add187 = add i32 %198, %197
  store i32 %add187, i32* %B, align 4, !tbaa !2
  br label %do.cond188

do.cond188:                                       ; preds = %do.body175
  br label %do.end189

do.end189:                                        ; preds = %do.cond188
  br label %do.body190

do.body190:                                       ; preds = %do.end189
  %199 = load i32, i32* %D, align 4, !tbaa !2
  %200 = load i32, i32* %B, align 4, !tbaa !2
  %201 = load i32, i32* %C, align 4, !tbaa !2
  %202 = load i32, i32* %D, align 4, !tbaa !2
  %xor191 = xor i32 %201, %202
  %and192 = and i32 %200, %xor191
  %xor193 = xor i32 %199, %and192
  %203 = load i32*, i32** %words, align 8, !tbaa !6
  %204 = load i32, i32* %203, align 4, !tbaa !2
  %205 = load i32*, i32** %cwp, align 8, !tbaa !6
  %incdec.ptr194 = getelementptr inbounds i32, i32* %205, i32 1
  store i32* %incdec.ptr194, i32** %cwp, align 8, !tbaa !6
  store i32 %204, i32* %205, align 4, !tbaa !2
  %add195 = add i32 %xor193, %204
  %add196 = add i32 %add195, 1804603682
  %206 = load i32, i32* %A, align 4, !tbaa !2
  %add197 = add i32 %206, %add196
  store i32 %add197, i32* %A, align 4, !tbaa !2
  %207 = load i32*, i32** %words, align 8, !tbaa !6
  %incdec.ptr198 = getelementptr inbounds i32, i32* %207, i32 1
  store i32* %incdec.ptr198, i32** %words, align 8, !tbaa !6
  %208 = load i32, i32* %A, align 4, !tbaa !2
  %shl199 = shl i32 %208, 7
  %209 = load i32, i32* %A, align 4, !tbaa !2
  %shr200 = lshr i32 %209, 25
  %or201 = or i32 %shl199, %shr200
  store i32 %or201, i32* %A, align 4, !tbaa !2
  %210 = load i32, i32* %B, align 4, !tbaa !2
  %211 = load i32, i32* %A, align 4, !tbaa !2
  %add202 = add i32 %211, %210
  store i32 %add202, i32* %A, align 4, !tbaa !2
  br label %do.cond203

do.cond203:                                       ; preds = %do.body190
  br label %do.end204

do.end204:                                        ; preds = %do.cond203
  br label %do.body205

do.body205:                                       ; preds = %do.end204
  %212 = load i32, i32* %C, align 4, !tbaa !2
  %213 = load i32, i32* %A, align 4, !tbaa !2
  %214 = load i32, i32* %B, align 4, !tbaa !2
  %215 = load i32, i32* %C, align 4, !tbaa !2
  %xor206 = xor i32 %214, %215
  %and207 = and i32 %213, %xor206
  %xor208 = xor i32 %212, %and207
  %216 = load i32*, i32** %words, align 8, !tbaa !6
  %217 = load i32, i32* %216, align 4, !tbaa !2
  %218 = load i32*, i32** %cwp, align 8, !tbaa !6
  %incdec.ptr209 = getelementptr inbounds i32, i32* %218, i32 1
  store i32* %incdec.ptr209, i32** %cwp, align 8, !tbaa !6
  store i32 %217, i32* %218, align 4, !tbaa !2
  %add210 = add i32 %xor208, %217
  %add211 = add i32 %add210, -40341101
  %219 = load i32, i32* %D, align 4, !tbaa !2
  %add212 = add i32 %219, %add211
  store i32 %add212, i32* %D, align 4, !tbaa !2
  %220 = load i32*, i32** %words, align 8, !tbaa !6
  %incdec.ptr213 = getelementptr inbounds i32, i32* %220, i32 1
  store i32* %incdec.ptr213, i32** %words, align 8, !tbaa !6
  %221 = load i32, i32* %D, align 4, !tbaa !2
  %shl214 = shl i32 %221, 12
  %222 = load i32, i32* %D, align 4, !tbaa !2
  %shr215 = lshr i32 %222, 20
  %or216 = or i32 %shl214, %shr215
  store i32 %or216, i32* %D, align 4, !tbaa !2
  %223 = load i32, i32* %A, align 4, !tbaa !2
  %224 = load i32, i32* %D, align 4, !tbaa !2
  %add217 = add i32 %224, %223
  store i32 %add217, i32* %D, align 4, !tbaa !2
  br label %do.cond218

do.cond218:                                       ; preds = %do.body205
  br label %do.end219

do.end219:                                        ; preds = %do.cond218
  br label %do.body220

do.body220:                                       ; preds = %do.end219
  %225 = load i32, i32* %B, align 4, !tbaa !2
  %226 = load i32, i32* %D, align 4, !tbaa !2
  %227 = load i32, i32* %A, align 4, !tbaa !2
  %228 = load i32, i32* %B, align 4, !tbaa !2
  %xor221 = xor i32 %227, %228
  %and222 = and i32 %226, %xor221
  %xor223 = xor i32 %225, %and222
  %229 = load i32*, i32** %words, align 8, !tbaa !6
  %230 = load i32, i32* %229, align 4, !tbaa !2
  %231 = load i32*, i32** %cwp, align 8, !tbaa !6
  %incdec.ptr224 = getelementptr inbounds i32, i32* %231, i32 1
  store i32* %incdec.ptr224, i32** %cwp, align 8, !tbaa !6
  store i32 %230, i32* %231, align 4, !tbaa !2
  %add225 = add i32 %xor223, %230
  %add226 = add i32 %add225, -1502002290
  %232 = load i32, i32* %C, align 4, !tbaa !2
  %add227 = add i32 %232, %add226
  store i32 %add227, i32* %C, align 4, !tbaa !2
  %233 = load i32*, i32** %words, align 8, !tbaa !6
  %incdec.ptr228 = getelementptr inbounds i32, i32* %233, i32 1
  store i32* %incdec.ptr228, i32** %words, align 8, !tbaa !6
  %234 = load i32, i32* %C, align 4, !tbaa !2
  %shl229 = shl i32 %234, 17
  %235 = load i32, i32* %C, align 4, !tbaa !2
  %shr230 = lshr i32 %235, 15
  %or231 = or i32 %shl229, %shr230
  store i32 %or231, i32* %C, align 4, !tbaa !2
  %236 = load i32, i32* %D, align 4, !tbaa !2
  %237 = load i32, i32* %C, align 4, !tbaa !2
  %add232 = add i32 %237, %236
  store i32 %add232, i32* %C, align 4, !tbaa !2
  br label %do.cond233

do.cond233:                                       ; preds = %do.body220
  br label %do.end234

do.end234:                                        ; preds = %do.cond233
  br label %do.body235

do.body235:                                       ; preds = %do.end234
  %238 = load i32, i32* %A, align 4, !tbaa !2
  %239 = load i32, i32* %C, align 4, !tbaa !2
  %240 = load i32, i32* %D, align 4, !tbaa !2
  %241 = load i32, i32* %A, align 4, !tbaa !2
  %xor236 = xor i32 %240, %241
  %and237 = and i32 %239, %xor236
  %xor238 = xor i32 %238, %and237
  %242 = load i32*, i32** %words, align 8, !tbaa !6
  %243 = load i32, i32* %242, align 4, !tbaa !2
  %244 = load i32*, i32** %cwp, align 8, !tbaa !6
  %incdec.ptr239 = getelementptr inbounds i32, i32* %244, i32 1
  store i32* %incdec.ptr239, i32** %cwp, align 8, !tbaa !6
  store i32 %243, i32* %244, align 4, !tbaa !2
  %add240 = add i32 %xor238, %243
  %add241 = add i32 %add240, 1236535329
  %245 = load i32, i32* %B, align 4, !tbaa !2
  %add242 = add i32 %245, %add241
  store i32 %add242, i32* %B, align 4, !tbaa !2
  %246 = load i32*, i32** %words, align 8, !tbaa !6
  %incdec.ptr243 = getelementptr inbounds i32, i32* %246, i32 1
  store i32* %incdec.ptr243, i32** %words, align 8, !tbaa !6
  %247 = load i32, i32* %B, align 4, !tbaa !2
  %shl244 = shl i32 %247, 22
  %248 = load i32, i32* %B, align 4, !tbaa !2
  %shr245 = lshr i32 %248, 10
  %or246 = or i32 %shl244, %shr245
  store i32 %or246, i32* %B, align 4, !tbaa !2
  %249 = load i32, i32* %C, align 4, !tbaa !2
  %250 = load i32, i32* %B, align 4, !tbaa !2
  %add247 = add i32 %250, %249
  store i32 %add247, i32* %B, align 4, !tbaa !2
  br label %do.cond248

do.cond248:                                       ; preds = %do.body235
  br label %do.end249

do.end249:                                        ; preds = %do.cond248
  br label %do.body250

do.body250:                                       ; preds = %do.end249
  %251 = load i32, i32* %C, align 4, !tbaa !2
  %252 = load i32, i32* %D, align 4, !tbaa !2
  %253 = load i32, i32* %B, align 4, !tbaa !2
  %254 = load i32, i32* %C, align 4, !tbaa !2
  %xor251 = xor i32 %253, %254
  %and252 = and i32 %252, %xor251
  %xor253 = xor i32 %251, %and252
  %arrayidx254 = getelementptr inbounds [16 x i32], [16 x i32]* %correct_words, i64 0, i64 1
  %255 = load i32, i32* %arrayidx254, align 4, !tbaa !2
  %add255 = add i32 %xor253, %255
  %add256 = add i32 %add255, -165796510
  %256 = load i32, i32* %A, align 4, !tbaa !2
  %add257 = add i32 %256, %add256
  store i32 %add257, i32* %A, align 4, !tbaa !2
  %257 = load i32, i32* %A, align 4, !tbaa !2
  %shl258 = shl i32 %257, 5
  %258 = load i32, i32* %A, align 4, !tbaa !2
  %shr259 = lshr i32 %258, 27
  %or260 = or i32 %shl258, %shr259
  store i32 %or260, i32* %A, align 4, !tbaa !2
  %259 = load i32, i32* %B, align 4, !tbaa !2
  %260 = load i32, i32* %A, align 4, !tbaa !2
  %add261 = add i32 %260, %259
  store i32 %add261, i32* %A, align 4, !tbaa !2
  br label %do.cond262

do.cond262:                                       ; preds = %do.body250
  br label %do.end263

do.end263:                                        ; preds = %do.cond262
  br label %do.body264

do.body264:                                       ; preds = %do.end263
  %261 = load i32, i32* %B, align 4, !tbaa !2
  %262 = load i32, i32* %C, align 4, !tbaa !2
  %263 = load i32, i32* %A, align 4, !tbaa !2
  %264 = load i32, i32* %B, align 4, !tbaa !2
  %xor265 = xor i32 %263, %264
  %and266 = and i32 %262, %xor265
  %xor267 = xor i32 %261, %and266
  %arrayidx268 = getelementptr inbounds [16 x i32], [16 x i32]* %correct_words, i64 0, i64 6
  %265 = load i32, i32* %arrayidx268, align 8, !tbaa !2
  %add269 = add i32 %xor267, %265
  %add270 = add i32 %add269, -1069501632
  %266 = load i32, i32* %D, align 4, !tbaa !2
  %add271 = add i32 %266, %add270
  store i32 %add271, i32* %D, align 4, !tbaa !2
  %267 = load i32, i32* %D, align 4, !tbaa !2
  %shl272 = shl i32 %267, 9
  %268 = load i32, i32* %D, align 4, !tbaa !2
  %shr273 = lshr i32 %268, 23
  %or274 = or i32 %shl272, %shr273
  store i32 %or274, i32* %D, align 4, !tbaa !2
  %269 = load i32, i32* %A, align 4, !tbaa !2
  %270 = load i32, i32* %D, align 4, !tbaa !2
  %add275 = add i32 %270, %269
  store i32 %add275, i32* %D, align 4, !tbaa !2
  br label %do.cond276

do.cond276:                                       ; preds = %do.body264
  br label %do.end277

do.end277:                                        ; preds = %do.cond276
  br label %do.body278

do.body278:                                       ; preds = %do.end277
  %271 = load i32, i32* %A, align 4, !tbaa !2
  %272 = load i32, i32* %B, align 4, !tbaa !2
  %273 = load i32, i32* %D, align 4, !tbaa !2
  %274 = load i32, i32* %A, align 4, !tbaa !2
  %xor279 = xor i32 %273, %274
  %and280 = and i32 %272, %xor279
  %xor281 = xor i32 %271, %and280
  %arrayidx282 = getelementptr inbounds [16 x i32], [16 x i32]* %correct_words, i64 0, i64 11
  %275 = load i32, i32* %arrayidx282, align 4, !tbaa !2
  %add283 = add i32 %xor281, %275
  %add284 = add i32 %add283, 643717713
  %276 = load i32, i32* %C, align 4, !tbaa !2
  %add285 = add i32 %276, %add284
  store i32 %add285, i32* %C, align 4, !tbaa !2
  %277 = load i32, i32* %C, align 4, !tbaa !2
  %shl286 = shl i32 %277, 14
  %278 = load i32, i32* %C, align 4, !tbaa !2
  %shr287 = lshr i32 %278, 18
  %or288 = or i32 %shl286, %shr287
  store i32 %or288, i32* %C, align 4, !tbaa !2
  %279 = load i32, i32* %D, align 4, !tbaa !2
  %280 = load i32, i32* %C, align 4, !tbaa !2
  %add289 = add i32 %280, %279
  store i32 %add289, i32* %C, align 4, !tbaa !2
  br label %do.cond290

do.cond290:                                       ; preds = %do.body278
  br label %do.end291

do.end291:                                        ; preds = %do.cond290
  br label %do.body292

do.body292:                                       ; preds = %do.end291
  %281 = load i32, i32* %D, align 4, !tbaa !2
  %282 = load i32, i32* %A, align 4, !tbaa !2
  %283 = load i32, i32* %C, align 4, !tbaa !2
  %284 = load i32, i32* %D, align 4, !tbaa !2
  %xor293 = xor i32 %283, %284
  %and294 = and i32 %282, %xor293
  %xor295 = xor i32 %281, %and294
  %arrayidx296 = getelementptr inbounds [16 x i32], [16 x i32]* %correct_words, i64 0, i64 0
  %285 = load i32, i32* %arrayidx296, align 16, !tbaa !2
  %add297 = add i32 %xor295, %285
  %add298 = add i32 %add297, -373897302
  %286 = load i32, i32* %B, align 4, !tbaa !2
  %add299 = add i32 %286, %add298
  store i32 %add299, i32* %B, align 4, !tbaa !2
  %287 = load i32, i32* %B, align 4, !tbaa !2
  %shl300 = shl i32 %287, 20
  %288 = load i32, i32* %B, align 4, !tbaa !2
  %shr301 = lshr i32 %288, 12
  %or302 = or i32 %shl300, %shr301
  store i32 %or302, i32* %B, align 4, !tbaa !2
  %289 = load i32, i32* %C, align 4, !tbaa !2
  %290 = load i32, i32* %B, align 4, !tbaa !2
  %add303 = add i32 %290, %289
  store i32 %add303, i32* %B, align 4, !tbaa !2
  br label %do.cond304

do.cond304:                                       ; preds = %do.body292
  br label %do.end305

do.end305:                                        ; preds = %do.cond304
  br label %do.body306

do.body306:                                       ; preds = %do.end305
  %291 = load i32, i32* %C, align 4, !tbaa !2
  %292 = load i32, i32* %D, align 4, !tbaa !2
  %293 = load i32, i32* %B, align 4, !tbaa !2
  %294 = load i32, i32* %C, align 4, !tbaa !2
  %xor307 = xor i32 %293, %294
  %and308 = and i32 %292, %xor307
  %xor309 = xor i32 %291, %and308
  %arrayidx310 = getelementptr inbounds [16 x i32], [16 x i32]* %correct_words, i64 0, i64 5
  %295 = load i32, i32* %arrayidx310, align 4, !tbaa !2
  %add311 = add i32 %xor309, %295
  %add312 = add i32 %add311, -701558691
  %296 = load i32, i32* %A, align 4, !tbaa !2
  %add313 = add i32 %296, %add312
  store i32 %add313, i32* %A, align 4, !tbaa !2
  %297 = load i32, i32* %A, align 4, !tbaa !2
  %shl314 = shl i32 %297, 5
  %298 = load i32, i32* %A, align 4, !tbaa !2
  %shr315 = lshr i32 %298, 27
  %or316 = or i32 %shl314, %shr315
  store i32 %or316, i32* %A, align 4, !tbaa !2
  %299 = load i32, i32* %B, align 4, !tbaa !2
  %300 = load i32, i32* %A, align 4, !tbaa !2
  %add317 = add i32 %300, %299
  store i32 %add317, i32* %A, align 4, !tbaa !2
  br label %do.cond318

do.cond318:                                       ; preds = %do.body306
  br label %do.end319

do.end319:                                        ; preds = %do.cond318
  br label %do.body320

do.body320:                                       ; preds = %do.end319
  %301 = load i32, i32* %B, align 4, !tbaa !2
  %302 = load i32, i32* %C, align 4, !tbaa !2
  %303 = load i32, i32* %A, align 4, !tbaa !2
  %304 = load i32, i32* %B, align 4, !tbaa !2
  %xor321 = xor i32 %303, %304
  %and322 = and i32 %302, %xor321
  %xor323 = xor i32 %301, %and322
  %arrayidx324 = getelementptr inbounds [16 x i32], [16 x i32]* %correct_words, i64 0, i64 10
  %305 = load i32, i32* %arrayidx324, align 8, !tbaa !2
  %add325 = add i32 %xor323, %305
  %add326 = add i32 %add325, 38016083
  %306 = load i32, i32* %D, align 4, !tbaa !2
  %add327 = add i32 %306, %add326
  store i32 %add327, i32* %D, align 4, !tbaa !2
  %307 = load i32, i32* %D, align 4, !tbaa !2
  %shl328 = shl i32 %307, 9
  %308 = load i32, i32* %D, align 4, !tbaa !2
  %shr329 = lshr i32 %308, 23
  %or330 = or i32 %shl328, %shr329
  store i32 %or330, i32* %D, align 4, !tbaa !2
  %309 = load i32, i32* %A, align 4, !tbaa !2
  %310 = load i32, i32* %D, align 4, !tbaa !2
  %add331 = add i32 %310, %309
  store i32 %add331, i32* %D, align 4, !tbaa !2
  br label %do.cond332

do.cond332:                                       ; preds = %do.body320
  br label %do.end333

do.end333:                                        ; preds = %do.cond332
  br label %do.body334

do.body334:                                       ; preds = %do.end333
  %311 = load i32, i32* %A, align 4, !tbaa !2
  %312 = load i32, i32* %B, align 4, !tbaa !2
  %313 = load i32, i32* %D, align 4, !tbaa !2
  %314 = load i32, i32* %A, align 4, !tbaa !2
  %xor335 = xor i32 %313, %314
  %and336 = and i32 %312, %xor335
  %xor337 = xor i32 %311, %and336
  %arrayidx338 = getelementptr inbounds [16 x i32], [16 x i32]* %correct_words, i64 0, i64 15
  %315 = load i32, i32* %arrayidx338, align 4, !tbaa !2
  %add339 = add i32 %xor337, %315
  %add340 = add i32 %add339, -660478335
  %316 = load i32, i32* %C, align 4, !tbaa !2
  %add341 = add i32 %316, %add340
  store i32 %add341, i32* %C, align 4, !tbaa !2
  %317 = load i32, i32* %C, align 4, !tbaa !2
  %shl342 = shl i32 %317, 14
  %318 = load i32, i32* %C, align 4, !tbaa !2
  %shr343 = lshr i32 %318, 18
  %or344 = or i32 %shl342, %shr343
  store i32 %or344, i32* %C, align 4, !tbaa !2
  %319 = load i32, i32* %D, align 4, !tbaa !2
  %320 = load i32, i32* %C, align 4, !tbaa !2
  %add345 = add i32 %320, %319
  store i32 %add345, i32* %C, align 4, !tbaa !2
  br label %do.cond346

do.cond346:                                       ; preds = %do.body334
  br label %do.end347

do.end347:                                        ; preds = %do.cond346
  br label %do.body348

do.body348:                                       ; preds = %do.end347
  %321 = load i32, i32* %D, align 4, !tbaa !2
  %322 = load i32, i32* %A, align 4, !tbaa !2
  %323 = load i32, i32* %C, align 4, !tbaa !2
  %324 = load i32, i32* %D, align 4, !tbaa !2
  %xor349 = xor i32 %323, %324
  %and350 = and i32 %322, %xor349
  %xor351 = xor i32 %321, %and350
  %arrayidx352 = getelementptr inbounds [16 x i32], [16 x i32]* %correct_words, i64 0, i64 4
  %325 = load i32, i32* %arrayidx352, align 16, !tbaa !2
  %add353 = add i32 %xor351, %325
  %add354 = add i32 %add353, -405537848
  %326 = load i32, i32* %B, align 4, !tbaa !2
  %add355 = add i32 %326, %add354
  store i32 %add355, i32* %B, align 4, !tbaa !2
  %327 = load i32, i32* %B, align 4, !tbaa !2
  %shl356 = shl i32 %327, 20
  %328 = load i32, i32* %B, align 4, !tbaa !2
  %shr357 = lshr i32 %328, 12
  %or358 = or i32 %shl356, %shr357
  store i32 %or358, i32* %B, align 4, !tbaa !2
  %329 = load i32, i32* %C, align 4, !tbaa !2
  %330 = load i32, i32* %B, align 4, !tbaa !2
  %add359 = add i32 %330, %329
  store i32 %add359, i32* %B, align 4, !tbaa !2
  br label %do.cond360

do.cond360:                                       ; preds = %do.body348
  br label %do.end361

do.end361:                                        ; preds = %do.cond360
  br label %do.body362

do.body362:                                       ; preds = %do.end361
  %331 = load i32, i32* %C, align 4, !tbaa !2
  %332 = load i32, i32* %D, align 4, !tbaa !2
  %333 = load i32, i32* %B, align 4, !tbaa !2
  %334 = load i32, i32* %C, align 4, !tbaa !2
  %xor363 = xor i32 %333, %334
  %and364 = and i32 %332, %xor363
  %xor365 = xor i32 %331, %and364
  %arrayidx366 = getelementptr inbounds [16 x i32], [16 x i32]* %correct_words, i64 0, i64 9
  %335 = load i32, i32* %arrayidx366, align 4, !tbaa !2
  %add367 = add i32 %xor365, %335
  %add368 = add i32 %add367, 568446438
  %336 = load i32, i32* %A, align 4, !tbaa !2
  %add369 = add i32 %336, %add368
  store i32 %add369, i32* %A, align 4, !tbaa !2
  %337 = load i32, i32* %A, align 4, !tbaa !2
  %shl370 = shl i32 %337, 5
  %338 = load i32, i32* %A, align 4, !tbaa !2
  %shr371 = lshr i32 %338, 27
  %or372 = or i32 %shl370, %shr371
  store i32 %or372, i32* %A, align 4, !tbaa !2
  %339 = load i32, i32* %B, align 4, !tbaa !2
  %340 = load i32, i32* %A, align 4, !tbaa !2
  %add373 = add i32 %340, %339
  store i32 %add373, i32* %A, align 4, !tbaa !2
  br label %do.cond374

do.cond374:                                       ; preds = %do.body362
  br label %do.end375

do.end375:                                        ; preds = %do.cond374
  br label %do.body376

do.body376:                                       ; preds = %do.end375
  %341 = load i32, i32* %B, align 4, !tbaa !2
  %342 = load i32, i32* %C, align 4, !tbaa !2
  %343 = load i32, i32* %A, align 4, !tbaa !2
  %344 = load i32, i32* %B, align 4, !tbaa !2
  %xor377 = xor i32 %343, %344
  %and378 = and i32 %342, %xor377
  %xor379 = xor i32 %341, %and378
  %arrayidx380 = getelementptr inbounds [16 x i32], [16 x i32]* %correct_words, i64 0, i64 14
  %345 = load i32, i32* %arrayidx380, align 8, !tbaa !2
  %add381 = add i32 %xor379, %345
  %add382 = add i32 %add381, -1019803690
  %346 = load i32, i32* %D, align 4, !tbaa !2
  %add383 = add i32 %346, %add382
  store i32 %add383, i32* %D, align 4, !tbaa !2
  %347 = load i32, i32* %D, align 4, !tbaa !2
  %shl384 = shl i32 %347, 9
  %348 = load i32, i32* %D, align 4, !tbaa !2
  %shr385 = lshr i32 %348, 23
  %or386 = or i32 %shl384, %shr385
  store i32 %or386, i32* %D, align 4, !tbaa !2
  %349 = load i32, i32* %A, align 4, !tbaa !2
  %350 = load i32, i32* %D, align 4, !tbaa !2
  %add387 = add i32 %350, %349
  store i32 %add387, i32* %D, align 4, !tbaa !2
  br label %do.cond388

do.cond388:                                       ; preds = %do.body376
  br label %do.end389

do.end389:                                        ; preds = %do.cond388
  br label %do.body390

do.body390:                                       ; preds = %do.end389
  %351 = load i32, i32* %A, align 4, !tbaa !2
  %352 = load i32, i32* %B, align 4, !tbaa !2
  %353 = load i32, i32* %D, align 4, !tbaa !2
  %354 = load i32, i32* %A, align 4, !tbaa !2
  %xor391 = xor i32 %353, %354
  %and392 = and i32 %352, %xor391
  %xor393 = xor i32 %351, %and392
  %arrayidx394 = getelementptr inbounds [16 x i32], [16 x i32]* %correct_words, i64 0, i64 3
  %355 = load i32, i32* %arrayidx394, align 4, !tbaa !2
  %add395 = add i32 %xor393, %355
  %add396 = add i32 %add395, -187363961
  %356 = load i32, i32* %C, align 4, !tbaa !2
  %add397 = add i32 %356, %add396
  store i32 %add397, i32* %C, align 4, !tbaa !2
  %357 = load i32, i32* %C, align 4, !tbaa !2
  %shl398 = shl i32 %357, 14
  %358 = load i32, i32* %C, align 4, !tbaa !2
  %shr399 = lshr i32 %358, 18
  %or400 = or i32 %shl398, %shr399
  store i32 %or400, i32* %C, align 4, !tbaa !2
  %359 = load i32, i32* %D, align 4, !tbaa !2
  %360 = load i32, i32* %C, align 4, !tbaa !2
  %add401 = add i32 %360, %359
  store i32 %add401, i32* %C, align 4, !tbaa !2
  br label %do.cond402

do.cond402:                                       ; preds = %do.body390
  br label %do.end403

do.end403:                                        ; preds = %do.cond402
  br label %do.body404

do.body404:                                       ; preds = %do.end403
  %361 = load i32, i32* %D, align 4, !tbaa !2
  %362 = load i32, i32* %A, align 4, !tbaa !2
  %363 = load i32, i32* %C, align 4, !tbaa !2
  %364 = load i32, i32* %D, align 4, !tbaa !2
  %xor405 = xor i32 %363, %364
  %and406 = and i32 %362, %xor405
  %xor407 = xor i32 %361, %and406
  %arrayidx408 = getelementptr inbounds [16 x i32], [16 x i32]* %correct_words, i64 0, i64 8
  %365 = load i32, i32* %arrayidx408, align 16, !tbaa !2
  %add409 = add i32 %xor407, %365
  %add410 = add i32 %add409, 1163531501
  %366 = load i32, i32* %B, align 4, !tbaa !2
  %add411 = add i32 %366, %add410
  store i32 %add411, i32* %B, align 4, !tbaa !2
  %367 = load i32, i32* %B, align 4, !tbaa !2
  %shl412 = shl i32 %367, 20
  %368 = load i32, i32* %B, align 4, !tbaa !2
  %shr413 = lshr i32 %368, 12
  %or414 = or i32 %shl412, %shr413
  store i32 %or414, i32* %B, align 4, !tbaa !2
  %369 = load i32, i32* %C, align 4, !tbaa !2
  %370 = load i32, i32* %B, align 4, !tbaa !2
  %add415 = add i32 %370, %369
  store i32 %add415, i32* %B, align 4, !tbaa !2
  br label %do.cond416

do.cond416:                                       ; preds = %do.body404
  br label %do.end417

do.end417:                                        ; preds = %do.cond416
  br label %do.body418

do.body418:                                       ; preds = %do.end417
  %371 = load i32, i32* %C, align 4, !tbaa !2
  %372 = load i32, i32* %D, align 4, !tbaa !2
  %373 = load i32, i32* %B, align 4, !tbaa !2
  %374 = load i32, i32* %C, align 4, !tbaa !2
  %xor419 = xor i32 %373, %374
  %and420 = and i32 %372, %xor419
  %xor421 = xor i32 %371, %and420
  %arrayidx422 = getelementptr inbounds [16 x i32], [16 x i32]* %correct_words, i64 0, i64 13
  %375 = load i32, i32* %arrayidx422, align 4, !tbaa !2
  %add423 = add i32 %xor421, %375
  %add424 = add i32 %add423, -1444681467
  %376 = load i32, i32* %A, align 4, !tbaa !2
  %add425 = add i32 %376, %add424
  store i32 %add425, i32* %A, align 4, !tbaa !2
  %377 = load i32, i32* %A, align 4, !tbaa !2
  %shl426 = shl i32 %377, 5
  %378 = load i32, i32* %A, align 4, !tbaa !2
  %shr427 = lshr i32 %378, 27
  %or428 = or i32 %shl426, %shr427
  store i32 %or428, i32* %A, align 4, !tbaa !2
  %379 = load i32, i32* %B, align 4, !tbaa !2
  %380 = load i32, i32* %A, align 4, !tbaa !2
  %add429 = add i32 %380, %379
  store i32 %add429, i32* %A, align 4, !tbaa !2
  br label %do.cond430

do.cond430:                                       ; preds = %do.body418
  br label %do.end431

do.end431:                                        ; preds = %do.cond430
  br label %do.body432

do.body432:                                       ; preds = %do.end431
  %381 = load i32, i32* %B, align 4, !tbaa !2
  %382 = load i32, i32* %C, align 4, !tbaa !2
  %383 = load i32, i32* %A, align 4, !tbaa !2
  %384 = load i32, i32* %B, align 4, !tbaa !2
  %xor433 = xor i32 %383, %384
  %and434 = and i32 %382, %xor433
  %xor435 = xor i32 %381, %and434
  %arrayidx436 = getelementptr inbounds [16 x i32], [16 x i32]* %correct_words, i64 0, i64 2
  %385 = load i32, i32* %arrayidx436, align 8, !tbaa !2
  %add437 = add i32 %xor435, %385
  %add438 = add i32 %add437, -51403784
  %386 = load i32, i32* %D, align 4, !tbaa !2
  %add439 = add i32 %386, %add438
  store i32 %add439, i32* %D, align 4, !tbaa !2
  %387 = load i32, i32* %D, align 4, !tbaa !2
  %shl440 = shl i32 %387, 9
  %388 = load i32, i32* %D, align 4, !tbaa !2
  %shr441 = lshr i32 %388, 23
  %or442 = or i32 %shl440, %shr441
  store i32 %or442, i32* %D, align 4, !tbaa !2
  %389 = load i32, i32* %A, align 4, !tbaa !2
  %390 = load i32, i32* %D, align 4, !tbaa !2
  %add443 = add i32 %390, %389
  store i32 %add443, i32* %D, align 4, !tbaa !2
  br label %do.cond444

do.cond444:                                       ; preds = %do.body432
  br label %do.end445

do.end445:                                        ; preds = %do.cond444
  br label %do.body446

do.body446:                                       ; preds = %do.end445
  %391 = load i32, i32* %A, align 4, !tbaa !2
  %392 = load i32, i32* %B, align 4, !tbaa !2
  %393 = load i32, i32* %D, align 4, !tbaa !2
  %394 = load i32, i32* %A, align 4, !tbaa !2
  %xor447 = xor i32 %393, %394
  %and448 = and i32 %392, %xor447
  %xor449 = xor i32 %391, %and448
  %arrayidx450 = getelementptr inbounds [16 x i32], [16 x i32]* %correct_words, i64 0, i64 7
  %395 = load i32, i32* %arrayidx450, align 4, !tbaa !2
  %add451 = add i32 %xor449, %395
  %add452 = add i32 %add451, 1735328473
  %396 = load i32, i32* %C, align 4, !tbaa !2
  %add453 = add i32 %396, %add452
  store i32 %add453, i32* %C, align 4, !tbaa !2
  %397 = load i32, i32* %C, align 4, !tbaa !2
  %shl454 = shl i32 %397, 14
  %398 = load i32, i32* %C, align 4, !tbaa !2
  %shr455 = lshr i32 %398, 18
  %or456 = or i32 %shl454, %shr455
  store i32 %or456, i32* %C, align 4, !tbaa !2
  %399 = load i32, i32* %D, align 4, !tbaa !2
  %400 = load i32, i32* %C, align 4, !tbaa !2
  %add457 = add i32 %400, %399
  store i32 %add457, i32* %C, align 4, !tbaa !2
  br label %do.cond458

do.cond458:                                       ; preds = %do.body446
  br label %do.end459

do.end459:                                        ; preds = %do.cond458
  br label %do.body460

do.body460:                                       ; preds = %do.end459
  %401 = load i32, i32* %D, align 4, !tbaa !2
  %402 = load i32, i32* %A, align 4, !tbaa !2
  %403 = load i32, i32* %C, align 4, !tbaa !2
  %404 = load i32, i32* %D, align 4, !tbaa !2
  %xor461 = xor i32 %403, %404
  %and462 = and i32 %402, %xor461
  %xor463 = xor i32 %401, %and462
  %arrayidx464 = getelementptr inbounds [16 x i32], [16 x i32]* %correct_words, i64 0, i64 12
  %405 = load i32, i32* %arrayidx464, align 16, !tbaa !2
  %add465 = add i32 %xor463, %405
  %add466 = add i32 %add465, -1926607734
  %406 = load i32, i32* %B, align 4, !tbaa !2
  %add467 = add i32 %406, %add466
  store i32 %add467, i32* %B, align 4, !tbaa !2
  %407 = load i32, i32* %B, align 4, !tbaa !2
  %shl468 = shl i32 %407, 20
  %408 = load i32, i32* %B, align 4, !tbaa !2
  %shr469 = lshr i32 %408, 12
  %or470 = or i32 %shl468, %shr469
  store i32 %or470, i32* %B, align 4, !tbaa !2
  %409 = load i32, i32* %C, align 4, !tbaa !2
  %410 = load i32, i32* %B, align 4, !tbaa !2
  %add471 = add i32 %410, %409
  store i32 %add471, i32* %B, align 4, !tbaa !2
  br label %do.cond472

do.cond472:                                       ; preds = %do.body460
  br label %do.end473

do.end473:                                        ; preds = %do.cond472
  br label %do.body474

do.body474:                                       ; preds = %do.end473
  %411 = load i32, i32* %B, align 4, !tbaa !2
  %412 = load i32, i32* %C, align 4, !tbaa !2
  %xor475 = xor i32 %411, %412
  %413 = load i32, i32* %D, align 4, !tbaa !2
  %xor476 = xor i32 %xor475, %413
  %arrayidx477 = getelementptr inbounds [16 x i32], [16 x i32]* %correct_words, i64 0, i64 5
  %414 = load i32, i32* %arrayidx477, align 4, !tbaa !2
  %add478 = add i32 %xor476, %414
  %add479 = add i32 %add478, -378558
  %415 = load i32, i32* %A, align 4, !tbaa !2
  %add480 = add i32 %415, %add479
  store i32 %add480, i32* %A, align 4, !tbaa !2
  %416 = load i32, i32* %A, align 4, !tbaa !2
  %shl481 = shl i32 %416, 4
  %417 = load i32, i32* %A, align 4, !tbaa !2
  %shr482 = lshr i32 %417, 28
  %or483 = or i32 %shl481, %shr482
  store i32 %or483, i32* %A, align 4, !tbaa !2
  %418 = load i32, i32* %B, align 4, !tbaa !2
  %419 = load i32, i32* %A, align 4, !tbaa !2
  %add484 = add i32 %419, %418
  store i32 %add484, i32* %A, align 4, !tbaa !2
  br label %do.cond485

do.cond485:                                       ; preds = %do.body474
  br label %do.end486

do.end486:                                        ; preds = %do.cond485
  br label %do.body487

do.body487:                                       ; preds = %do.end486
  %420 = load i32, i32* %A, align 4, !tbaa !2
  %421 = load i32, i32* %B, align 4, !tbaa !2
  %xor488 = xor i32 %420, %421
  %422 = load i32, i32* %C, align 4, !tbaa !2
  %xor489 = xor i32 %xor488, %422
  %arrayidx490 = getelementptr inbounds [16 x i32], [16 x i32]* %correct_words, i64 0, i64 8
  %423 = load i32, i32* %arrayidx490, align 16, !tbaa !2
  %add491 = add i32 %xor489, %423
  %add492 = add i32 %add491, -2022574463
  %424 = load i32, i32* %D, align 4, !tbaa !2
  %add493 = add i32 %424, %add492
  store i32 %add493, i32* %D, align 4, !tbaa !2
  %425 = load i32, i32* %D, align 4, !tbaa !2
  %shl494 = shl i32 %425, 11
  %426 = load i32, i32* %D, align 4, !tbaa !2
  %shr495 = lshr i32 %426, 21
  %or496 = or i32 %shl494, %shr495
  store i32 %or496, i32* %D, align 4, !tbaa !2
  %427 = load i32, i32* %A, align 4, !tbaa !2
  %428 = load i32, i32* %D, align 4, !tbaa !2
  %add497 = add i32 %428, %427
  store i32 %add497, i32* %D, align 4, !tbaa !2
  br label %do.cond498

do.cond498:                                       ; preds = %do.body487
  br label %do.end499

do.end499:                                        ; preds = %do.cond498
  br label %do.body500

do.body500:                                       ; preds = %do.end499
  %429 = load i32, i32* %D, align 4, !tbaa !2
  %430 = load i32, i32* %A, align 4, !tbaa !2
  %xor501 = xor i32 %429, %430
  %431 = load i32, i32* %B, align 4, !tbaa !2
  %xor502 = xor i32 %xor501, %431
  %arrayidx503 = getelementptr inbounds [16 x i32], [16 x i32]* %correct_words, i64 0, i64 11
  %432 = load i32, i32* %arrayidx503, align 4, !tbaa !2
  %add504 = add i32 %xor502, %432
  %add505 = add i32 %add504, 1839030562
  %433 = load i32, i32* %C, align 4, !tbaa !2
  %add506 = add i32 %433, %add505
  store i32 %add506, i32* %C, align 4, !tbaa !2
  %434 = load i32, i32* %C, align 4, !tbaa !2
  %shl507 = shl i32 %434, 16
  %435 = load i32, i32* %C, align 4, !tbaa !2
  %shr508 = lshr i32 %435, 16
  %or509 = or i32 %shl507, %shr508
  store i32 %or509, i32* %C, align 4, !tbaa !2
  %436 = load i32, i32* %D, align 4, !tbaa !2
  %437 = load i32, i32* %C, align 4, !tbaa !2
  %add510 = add i32 %437, %436
  store i32 %add510, i32* %C, align 4, !tbaa !2
  br label %do.cond511

do.cond511:                                       ; preds = %do.body500
  br label %do.end512

do.end512:                                        ; preds = %do.cond511
  br label %do.body513

do.body513:                                       ; preds = %do.end512
  %438 = load i32, i32* %C, align 4, !tbaa !2
  %439 = load i32, i32* %D, align 4, !tbaa !2
  %xor514 = xor i32 %438, %439
  %440 = load i32, i32* %A, align 4, !tbaa !2
  %xor515 = xor i32 %xor514, %440
  %arrayidx516 = getelementptr inbounds [16 x i32], [16 x i32]* %correct_words, i64 0, i64 14
  %441 = load i32, i32* %arrayidx516, align 8, !tbaa !2
  %add517 = add i32 %xor515, %441
  %add518 = add i32 %add517, -35309556
  %442 = load i32, i32* %B, align 4, !tbaa !2
  %add519 = add i32 %442, %add518
  store i32 %add519, i32* %B, align 4, !tbaa !2
  %443 = load i32, i32* %B, align 4, !tbaa !2
  %shl520 = shl i32 %443, 23
  %444 = load i32, i32* %B, align 4, !tbaa !2
  %shr521 = lshr i32 %444, 9
  %or522 = or i32 %shl520, %shr521
  store i32 %or522, i32* %B, align 4, !tbaa !2
  %445 = load i32, i32* %C, align 4, !tbaa !2
  %446 = load i32, i32* %B, align 4, !tbaa !2
  %add523 = add i32 %446, %445
  store i32 %add523, i32* %B, align 4, !tbaa !2
  br label %do.cond524

do.cond524:                                       ; preds = %do.body513
  br label %do.end525

do.end525:                                        ; preds = %do.cond524
  br label %do.body526

do.body526:                                       ; preds = %do.end525
  %447 = load i32, i32* %B, align 4, !tbaa !2
  %448 = load i32, i32* %C, align 4, !tbaa !2
  %xor527 = xor i32 %447, %448
  %449 = load i32, i32* %D, align 4, !tbaa !2
  %xor528 = xor i32 %xor527, %449
  %arrayidx529 = getelementptr inbounds [16 x i32], [16 x i32]* %correct_words, i64 0, i64 1
  %450 = load i32, i32* %arrayidx529, align 4, !tbaa !2
  %add530 = add i32 %xor528, %450
  %add531 = add i32 %add530, -1530992060
  %451 = load i32, i32* %A, align 4, !tbaa !2
  %add532 = add i32 %451, %add531
  store i32 %add532, i32* %A, align 4, !tbaa !2
  %452 = load i32, i32* %A, align 4, !tbaa !2
  %shl533 = shl i32 %452, 4
  %453 = load i32, i32* %A, align 4, !tbaa !2
  %shr534 = lshr i32 %453, 28
  %or535 = or i32 %shl533, %shr534
  store i32 %or535, i32* %A, align 4, !tbaa !2
  %454 = load i32, i32* %B, align 4, !tbaa !2
  %455 = load i32, i32* %A, align 4, !tbaa !2
  %add536 = add i32 %455, %454
  store i32 %add536, i32* %A, align 4, !tbaa !2
  br label %do.cond537

do.cond537:                                       ; preds = %do.body526
  br label %do.end538

do.end538:                                        ; preds = %do.cond537
  br label %do.body539

do.body539:                                       ; preds = %do.end538
  %456 = load i32, i32* %A, align 4, !tbaa !2
  %457 = load i32, i32* %B, align 4, !tbaa !2
  %xor540 = xor i32 %456, %457
  %458 = load i32, i32* %C, align 4, !tbaa !2
  %xor541 = xor i32 %xor540, %458
  %arrayidx542 = getelementptr inbounds [16 x i32], [16 x i32]* %correct_words, i64 0, i64 4
  %459 = load i32, i32* %arrayidx542, align 16, !tbaa !2
  %add543 = add i32 %xor541, %459
  %add544 = add i32 %add543, 1272893353
  %460 = load i32, i32* %D, align 4, !tbaa !2
  %add545 = add i32 %460, %add544
  store i32 %add545, i32* %D, align 4, !tbaa !2
  %461 = load i32, i32* %D, align 4, !tbaa !2
  %shl546 = shl i32 %461, 11
  %462 = load i32, i32* %D, align 4, !tbaa !2
  %shr547 = lshr i32 %462, 21
  %or548 = or i32 %shl546, %shr547
  store i32 %or548, i32* %D, align 4, !tbaa !2
  %463 = load i32, i32* %A, align 4, !tbaa !2
  %464 = load i32, i32* %D, align 4, !tbaa !2
  %add549 = add i32 %464, %463
  store i32 %add549, i32* %D, align 4, !tbaa !2
  br label %do.cond550

do.cond550:                                       ; preds = %do.body539
  br label %do.end551

do.end551:                                        ; preds = %do.cond550
  br label %do.body552

do.body552:                                       ; preds = %do.end551
  %465 = load i32, i32* %D, align 4, !tbaa !2
  %466 = load i32, i32* %A, align 4, !tbaa !2
  %xor553 = xor i32 %465, %466
  %467 = load i32, i32* %B, align 4, !tbaa !2
  %xor554 = xor i32 %xor553, %467
  %arrayidx555 = getelementptr inbounds [16 x i32], [16 x i32]* %correct_words, i64 0, i64 7
  %468 = load i32, i32* %arrayidx555, align 4, !tbaa !2
  %add556 = add i32 %xor554, %468
  %add557 = add i32 %add556, -155497632
  %469 = load i32, i32* %C, align 4, !tbaa !2
  %add558 = add i32 %469, %add557
  store i32 %add558, i32* %C, align 4, !tbaa !2
  %470 = load i32, i32* %C, align 4, !tbaa !2
  %shl559 = shl i32 %470, 16
  %471 = load i32, i32* %C, align 4, !tbaa !2
  %shr560 = lshr i32 %471, 16
  %or561 = or i32 %shl559, %shr560
  store i32 %or561, i32* %C, align 4, !tbaa !2
  %472 = load i32, i32* %D, align 4, !tbaa !2
  %473 = load i32, i32* %C, align 4, !tbaa !2
  %add562 = add i32 %473, %472
  store i32 %add562, i32* %C, align 4, !tbaa !2
  br label %do.cond563

do.cond563:                                       ; preds = %do.body552
  br label %do.end564

do.end564:                                        ; preds = %do.cond563
  br label %do.body565

do.body565:                                       ; preds = %do.end564
  %474 = load i32, i32* %C, align 4, !tbaa !2
  %475 = load i32, i32* %D, align 4, !tbaa !2
  %xor566 = xor i32 %474, %475
  %476 = load i32, i32* %A, align 4, !tbaa !2
  %xor567 = xor i32 %xor566, %476
  %arrayidx568 = getelementptr inbounds [16 x i32], [16 x i32]* %correct_words, i64 0, i64 10
  %477 = load i32, i32* %arrayidx568, align 8, !tbaa !2
  %add569 = add i32 %xor567, %477
  %add570 = add i32 %add569, -1094730640
  %478 = load i32, i32* %B, align 4, !tbaa !2
  %add571 = add i32 %478, %add570
  store i32 %add571, i32* %B, align 4, !tbaa !2
  %479 = load i32, i32* %B, align 4, !tbaa !2
  %shl572 = shl i32 %479, 23
  %480 = load i32, i32* %B, align 4, !tbaa !2
  %shr573 = lshr i32 %480, 9
  %or574 = or i32 %shl572, %shr573
  store i32 %or574, i32* %B, align 4, !tbaa !2
  %481 = load i32, i32* %C, align 4, !tbaa !2
  %482 = load i32, i32* %B, align 4, !tbaa !2
  %add575 = add i32 %482, %481
  store i32 %add575, i32* %B, align 4, !tbaa !2
  br label %do.cond576

do.cond576:                                       ; preds = %do.body565
  br label %do.end577

do.end577:                                        ; preds = %do.cond576
  br label %do.body578

do.body578:                                       ; preds = %do.end577
  %483 = load i32, i32* %B, align 4, !tbaa !2
  %484 = load i32, i32* %C, align 4, !tbaa !2
  %xor579 = xor i32 %483, %484
  %485 = load i32, i32* %D, align 4, !tbaa !2
  %xor580 = xor i32 %xor579, %485
  %arrayidx581 = getelementptr inbounds [16 x i32], [16 x i32]* %correct_words, i64 0, i64 13
  %486 = load i32, i32* %arrayidx581, align 4, !tbaa !2
  %add582 = add i32 %xor580, %486
  %add583 = add i32 %add582, 681279174
  %487 = load i32, i32* %A, align 4, !tbaa !2
  %add584 = add i32 %487, %add583
  store i32 %add584, i32* %A, align 4, !tbaa !2
  %488 = load i32, i32* %A, align 4, !tbaa !2
  %shl585 = shl i32 %488, 4
  %489 = load i32, i32* %A, align 4, !tbaa !2
  %shr586 = lshr i32 %489, 28
  %or587 = or i32 %shl585, %shr586
  store i32 %or587, i32* %A, align 4, !tbaa !2
  %490 = load i32, i32* %B, align 4, !tbaa !2
  %491 = load i32, i32* %A, align 4, !tbaa !2
  %add588 = add i32 %491, %490
  store i32 %add588, i32* %A, align 4, !tbaa !2
  br label %do.cond589

do.cond589:                                       ; preds = %do.body578
  br label %do.end590

do.end590:                                        ; preds = %do.cond589
  br label %do.body591

do.body591:                                       ; preds = %do.end590
  %492 = load i32, i32* %A, align 4, !tbaa !2
  %493 = load i32, i32* %B, align 4, !tbaa !2
  %xor592 = xor i32 %492, %493
  %494 = load i32, i32* %C, align 4, !tbaa !2
  %xor593 = xor i32 %xor592, %494
  %arrayidx594 = getelementptr inbounds [16 x i32], [16 x i32]* %correct_words, i64 0, i64 0
  %495 = load i32, i32* %arrayidx594, align 16, !tbaa !2
  %add595 = add i32 %xor593, %495
  %add596 = add i32 %add595, -358537222
  %496 = load i32, i32* %D, align 4, !tbaa !2
  %add597 = add i32 %496, %add596
  store i32 %add597, i32* %D, align 4, !tbaa !2
  %497 = load i32, i32* %D, align 4, !tbaa !2
  %shl598 = shl i32 %497, 11
  %498 = load i32, i32* %D, align 4, !tbaa !2
  %shr599 = lshr i32 %498, 21
  %or600 = or i32 %shl598, %shr599
  store i32 %or600, i32* %D, align 4, !tbaa !2
  %499 = load i32, i32* %A, align 4, !tbaa !2
  %500 = load i32, i32* %D, align 4, !tbaa !2
  %add601 = add i32 %500, %499
  store i32 %add601, i32* %D, align 4, !tbaa !2
  br label %do.cond602

do.cond602:                                       ; preds = %do.body591
  br label %do.end603

do.end603:                                        ; preds = %do.cond602
  br label %do.body604

do.body604:                                       ; preds = %do.end603
  %501 = load i32, i32* %D, align 4, !tbaa !2
  %502 = load i32, i32* %A, align 4, !tbaa !2
  %xor605 = xor i32 %501, %502
  %503 = load i32, i32* %B, align 4, !tbaa !2
  %xor606 = xor i32 %xor605, %503
  %arrayidx607 = getelementptr inbounds [16 x i32], [16 x i32]* %correct_words, i64 0, i64 3
  %504 = load i32, i32* %arrayidx607, align 4, !tbaa !2
  %add608 = add i32 %xor606, %504
  %add609 = add i32 %add608, -722521979
  %505 = load i32, i32* %C, align 4, !tbaa !2
  %add610 = add i32 %505, %add609
  store i32 %add610, i32* %C, align 4, !tbaa !2
  %506 = load i32, i32* %C, align 4, !tbaa !2
  %shl611 = shl i32 %506, 16
  %507 = load i32, i32* %C, align 4, !tbaa !2
  %shr612 = lshr i32 %507, 16
  %or613 = or i32 %shl611, %shr612
  store i32 %or613, i32* %C, align 4, !tbaa !2
  %508 = load i32, i32* %D, align 4, !tbaa !2
  %509 = load i32, i32* %C, align 4, !tbaa !2
  %add614 = add i32 %509, %508
  store i32 %add614, i32* %C, align 4, !tbaa !2
  br label %do.cond615

do.cond615:                                       ; preds = %do.body604
  br label %do.end616

do.end616:                                        ; preds = %do.cond615
  br label %do.body617

do.body617:                                       ; preds = %do.end616
  %510 = load i32, i32* %C, align 4, !tbaa !2
  %511 = load i32, i32* %D, align 4, !tbaa !2
  %xor618 = xor i32 %510, %511
  %512 = load i32, i32* %A, align 4, !tbaa !2
  %xor619 = xor i32 %xor618, %512
  %arrayidx620 = getelementptr inbounds [16 x i32], [16 x i32]* %correct_words, i64 0, i64 6
  %513 = load i32, i32* %arrayidx620, align 8, !tbaa !2
  %add621 = add i32 %xor619, %513
  %add622 = add i32 %add621, 76029189
  %514 = load i32, i32* %B, align 4, !tbaa !2
  %add623 = add i32 %514, %add622
  store i32 %add623, i32* %B, align 4, !tbaa !2
  %515 = load i32, i32* %B, align 4, !tbaa !2
  %shl624 = shl i32 %515, 23
  %516 = load i32, i32* %B, align 4, !tbaa !2
  %shr625 = lshr i32 %516, 9
  %or626 = or i32 %shl624, %shr625
  store i32 %or626, i32* %B, align 4, !tbaa !2
  %517 = load i32, i32* %C, align 4, !tbaa !2
  %518 = load i32, i32* %B, align 4, !tbaa !2
  %add627 = add i32 %518, %517
  store i32 %add627, i32* %B, align 4, !tbaa !2
  br label %do.cond628

do.cond628:                                       ; preds = %do.body617
  br label %do.end629

do.end629:                                        ; preds = %do.cond628
  br label %do.body630

do.body630:                                       ; preds = %do.end629
  %519 = load i32, i32* %B, align 4, !tbaa !2
  %520 = load i32, i32* %C, align 4, !tbaa !2
  %xor631 = xor i32 %519, %520
  %521 = load i32, i32* %D, align 4, !tbaa !2
  %xor632 = xor i32 %xor631, %521
  %arrayidx633 = getelementptr inbounds [16 x i32], [16 x i32]* %correct_words, i64 0, i64 9
  %522 = load i32, i32* %arrayidx633, align 4, !tbaa !2
  %add634 = add i32 %xor632, %522
  %add635 = add i32 %add634, -640364487
  %523 = load i32, i32* %A, align 4, !tbaa !2
  %add636 = add i32 %523, %add635
  store i32 %add636, i32* %A, align 4, !tbaa !2
  %524 = load i32, i32* %A, align 4, !tbaa !2
  %shl637 = shl i32 %524, 4
  %525 = load i32, i32* %A, align 4, !tbaa !2
  %shr638 = lshr i32 %525, 28
  %or639 = or i32 %shl637, %shr638
  store i32 %or639, i32* %A, align 4, !tbaa !2
  %526 = load i32, i32* %B, align 4, !tbaa !2
  %527 = load i32, i32* %A, align 4, !tbaa !2
  %add640 = add i32 %527, %526
  store i32 %add640, i32* %A, align 4, !tbaa !2
  br label %do.cond641

do.cond641:                                       ; preds = %do.body630
  br label %do.end642

do.end642:                                        ; preds = %do.cond641
  br label %do.body643

do.body643:                                       ; preds = %do.end642
  %528 = load i32, i32* %A, align 4, !tbaa !2
  %529 = load i32, i32* %B, align 4, !tbaa !2
  %xor644 = xor i32 %528, %529
  %530 = load i32, i32* %C, align 4, !tbaa !2
  %xor645 = xor i32 %xor644, %530
  %arrayidx646 = getelementptr inbounds [16 x i32], [16 x i32]* %correct_words, i64 0, i64 12
  %531 = load i32, i32* %arrayidx646, align 16, !tbaa !2
  %add647 = add i32 %xor645, %531
  %add648 = add i32 %add647, -421815835
  %532 = load i32, i32* %D, align 4, !tbaa !2
  %add649 = add i32 %532, %add648
  store i32 %add649, i32* %D, align 4, !tbaa !2
  %533 = load i32, i32* %D, align 4, !tbaa !2
  %shl650 = shl i32 %533, 11
  %534 = load i32, i32* %D, align 4, !tbaa !2
  %shr651 = lshr i32 %534, 21
  %or652 = or i32 %shl650, %shr651
  store i32 %or652, i32* %D, align 4, !tbaa !2
  %535 = load i32, i32* %A, align 4, !tbaa !2
  %536 = load i32, i32* %D, align 4, !tbaa !2
  %add653 = add i32 %536, %535
  store i32 %add653, i32* %D, align 4, !tbaa !2
  br label %do.cond654

do.cond654:                                       ; preds = %do.body643
  br label %do.end655

do.end655:                                        ; preds = %do.cond654
  br label %do.body656

do.body656:                                       ; preds = %do.end655
  %537 = load i32, i32* %D, align 4, !tbaa !2
  %538 = load i32, i32* %A, align 4, !tbaa !2
  %xor657 = xor i32 %537, %538
  %539 = load i32, i32* %B, align 4, !tbaa !2
  %xor658 = xor i32 %xor657, %539
  %arrayidx659 = getelementptr inbounds [16 x i32], [16 x i32]* %correct_words, i64 0, i64 15
  %540 = load i32, i32* %arrayidx659, align 4, !tbaa !2
  %add660 = add i32 %xor658, %540
  %add661 = add i32 %add660, 530742520
  %541 = load i32, i32* %C, align 4, !tbaa !2
  %add662 = add i32 %541, %add661
  store i32 %add662, i32* %C, align 4, !tbaa !2
  %542 = load i32, i32* %C, align 4, !tbaa !2
  %shl663 = shl i32 %542, 16
  %543 = load i32, i32* %C, align 4, !tbaa !2
  %shr664 = lshr i32 %543, 16
  %or665 = or i32 %shl663, %shr664
  store i32 %or665, i32* %C, align 4, !tbaa !2
  %544 = load i32, i32* %D, align 4, !tbaa !2
  %545 = load i32, i32* %C, align 4, !tbaa !2
  %add666 = add i32 %545, %544
  store i32 %add666, i32* %C, align 4, !tbaa !2
  br label %do.cond667

do.cond667:                                       ; preds = %do.body656
  br label %do.end668

do.end668:                                        ; preds = %do.cond667
  br label %do.body669

do.body669:                                       ; preds = %do.end668
  %546 = load i32, i32* %C, align 4, !tbaa !2
  %547 = load i32, i32* %D, align 4, !tbaa !2
  %xor670 = xor i32 %546, %547
  %548 = load i32, i32* %A, align 4, !tbaa !2
  %xor671 = xor i32 %xor670, %548
  %arrayidx672 = getelementptr inbounds [16 x i32], [16 x i32]* %correct_words, i64 0, i64 2
  %549 = load i32, i32* %arrayidx672, align 8, !tbaa !2
  %add673 = add i32 %xor671, %549
  %add674 = add i32 %add673, -995338651
  %550 = load i32, i32* %B, align 4, !tbaa !2
  %add675 = add i32 %550, %add674
  store i32 %add675, i32* %B, align 4, !tbaa !2
  %551 = load i32, i32* %B, align 4, !tbaa !2
  %shl676 = shl i32 %551, 23
  %552 = load i32, i32* %B, align 4, !tbaa !2
  %shr677 = lshr i32 %552, 9
  %or678 = or i32 %shl676, %shr677
  store i32 %or678, i32* %B, align 4, !tbaa !2
  %553 = load i32, i32* %C, align 4, !tbaa !2
  %554 = load i32, i32* %B, align 4, !tbaa !2
  %add679 = add i32 %554, %553
  store i32 %add679, i32* %B, align 4, !tbaa !2
  br label %do.cond680

do.cond680:                                       ; preds = %do.body669
  br label %do.end681

do.end681:                                        ; preds = %do.cond680
  br label %do.body682

do.body682:                                       ; preds = %do.end681
  %555 = load i32, i32* %C, align 4, !tbaa !2
  %556 = load i32, i32* %B, align 4, !tbaa !2
  %557 = load i32, i32* %D, align 4, !tbaa !2
  %neg = xor i32 %557, -1
  %or683 = or i32 %556, %neg
  %xor684 = xor i32 %555, %or683
  %arrayidx685 = getelementptr inbounds [16 x i32], [16 x i32]* %correct_words, i64 0, i64 0
  %558 = load i32, i32* %arrayidx685, align 16, !tbaa !2
  %add686 = add i32 %xor684, %558
  %add687 = add i32 %add686, -198630844
  %559 = load i32, i32* %A, align 4, !tbaa !2
  %add688 = add i32 %559, %add687
  store i32 %add688, i32* %A, align 4, !tbaa !2
  %560 = load i32, i32* %A, align 4, !tbaa !2
  %shl689 = shl i32 %560, 6
  %561 = load i32, i32* %A, align 4, !tbaa !2
  %shr690 = lshr i32 %561, 26
  %or691 = or i32 %shl689, %shr690
  store i32 %or691, i32* %A, align 4, !tbaa !2
  %562 = load i32, i32* %B, align 4, !tbaa !2
  %563 = load i32, i32* %A, align 4, !tbaa !2
  %add692 = add i32 %563, %562
  store i32 %add692, i32* %A, align 4, !tbaa !2
  br label %do.cond693

do.cond693:                                       ; preds = %do.body682
  br label %do.end694

do.end694:                                        ; preds = %do.cond693
  br label %do.body695

do.body695:                                       ; preds = %do.end694
  %564 = load i32, i32* %B, align 4, !tbaa !2
  %565 = load i32, i32* %A, align 4, !tbaa !2
  %566 = load i32, i32* %C, align 4, !tbaa !2
  %neg696 = xor i32 %566, -1
  %or697 = or i32 %565, %neg696
  %xor698 = xor i32 %564, %or697
  %arrayidx699 = getelementptr inbounds [16 x i32], [16 x i32]* %correct_words, i64 0, i64 7
  %567 = load i32, i32* %arrayidx699, align 4, !tbaa !2
  %add700 = add i32 %xor698, %567
  %add701 = add i32 %add700, 1126891415
  %568 = load i32, i32* %D, align 4, !tbaa !2
  %add702 = add i32 %568, %add701
  store i32 %add702, i32* %D, align 4, !tbaa !2
  %569 = load i32, i32* %D, align 4, !tbaa !2
  %shl703 = shl i32 %569, 10
  %570 = load i32, i32* %D, align 4, !tbaa !2
  %shr704 = lshr i32 %570, 22
  %or705 = or i32 %shl703, %shr704
  store i32 %or705, i32* %D, align 4, !tbaa !2
  %571 = load i32, i32* %A, align 4, !tbaa !2
  %572 = load i32, i32* %D, align 4, !tbaa !2
  %add706 = add i32 %572, %571
  store i32 %add706, i32* %D, align 4, !tbaa !2
  br label %do.cond707

do.cond707:                                       ; preds = %do.body695
  br label %do.end708

do.end708:                                        ; preds = %do.cond707
  br label %do.body709

do.body709:                                       ; preds = %do.end708
  %573 = load i32, i32* %A, align 4, !tbaa !2
  %574 = load i32, i32* %D, align 4, !tbaa !2
  %575 = load i32, i32* %B, align 4, !tbaa !2
  %neg710 = xor i32 %575, -1
  %or711 = or i32 %574, %neg710
  %xor712 = xor i32 %573, %or711
  %arrayidx713 = getelementptr inbounds [16 x i32], [16 x i32]* %correct_words, i64 0, i64 14
  %576 = load i32, i32* %arrayidx713, align 8, !tbaa !2
  %add714 = add i32 %xor712, %576
  %add715 = add i32 %add714, -1416354905
  %577 = load i32, i32* %C, align 4, !tbaa !2
  %add716 = add i32 %577, %add715
  store i32 %add716, i32* %C, align 4, !tbaa !2
  %578 = load i32, i32* %C, align 4, !tbaa !2
  %shl717 = shl i32 %578, 15
  %579 = load i32, i32* %C, align 4, !tbaa !2
  %shr718 = lshr i32 %579, 17
  %or719 = or i32 %shl717, %shr718
  store i32 %or719, i32* %C, align 4, !tbaa !2
  %580 = load i32, i32* %D, align 4, !tbaa !2
  %581 = load i32, i32* %C, align 4, !tbaa !2
  %add720 = add i32 %581, %580
  store i32 %add720, i32* %C, align 4, !tbaa !2
  br label %do.cond721

do.cond721:                                       ; preds = %do.body709
  br label %do.end722

do.end722:                                        ; preds = %do.cond721
  br label %do.body723

do.body723:                                       ; preds = %do.end722
  %582 = load i32, i32* %D, align 4, !tbaa !2
  %583 = load i32, i32* %C, align 4, !tbaa !2
  %584 = load i32, i32* %A, align 4, !tbaa !2
  %neg724 = xor i32 %584, -1
  %or725 = or i32 %583, %neg724
  %xor726 = xor i32 %582, %or725
  %arrayidx727 = getelementptr inbounds [16 x i32], [16 x i32]* %correct_words, i64 0, i64 5
  %585 = load i32, i32* %arrayidx727, align 4, !tbaa !2
  %add728 = add i32 %xor726, %585
  %add729 = add i32 %add728, -57434055
  %586 = load i32, i32* %B, align 4, !tbaa !2
  %add730 = add i32 %586, %add729
  store i32 %add730, i32* %B, align 4, !tbaa !2
  %587 = load i32, i32* %B, align 4, !tbaa !2
  %shl731 = shl i32 %587, 21
  %588 = load i32, i32* %B, align 4, !tbaa !2
  %shr732 = lshr i32 %588, 11
  %or733 = or i32 %shl731, %shr732
  store i32 %or733, i32* %B, align 4, !tbaa !2
  %589 = load i32, i32* %C, align 4, !tbaa !2
  %590 = load i32, i32* %B, align 4, !tbaa !2
  %add734 = add i32 %590, %589
  store i32 %add734, i32* %B, align 4, !tbaa !2
  br label %do.cond735

do.cond735:                                       ; preds = %do.body723
  br label %do.end736

do.end736:                                        ; preds = %do.cond735
  br label %do.body737

do.body737:                                       ; preds = %do.end736
  %591 = load i32, i32* %C, align 4, !tbaa !2
  %592 = load i32, i32* %B, align 4, !tbaa !2
  %593 = load i32, i32* %D, align 4, !tbaa !2
  %neg738 = xor i32 %593, -1
  %or739 = or i32 %592, %neg738
  %xor740 = xor i32 %591, %or739
  %arrayidx741 = getelementptr inbounds [16 x i32], [16 x i32]* %correct_words, i64 0, i64 12
  %594 = load i32, i32* %arrayidx741, align 16, !tbaa !2
  %add742 = add i32 %xor740, %594
  %add743 = add i32 %add742, 1700485571
  %595 = load i32, i32* %A, align 4, !tbaa !2
  %add744 = add i32 %595, %add743
  store i32 %add744, i32* %A, align 4, !tbaa !2
  %596 = load i32, i32* %A, align 4, !tbaa !2
  %shl745 = shl i32 %596, 6
  %597 = load i32, i32* %A, align 4, !tbaa !2
  %shr746 = lshr i32 %597, 26
  %or747 = or i32 %shl745, %shr746
  store i32 %or747, i32* %A, align 4, !tbaa !2
  %598 = load i32, i32* %B, align 4, !tbaa !2
  %599 = load i32, i32* %A, align 4, !tbaa !2
  %add748 = add i32 %599, %598
  store i32 %add748, i32* %A, align 4, !tbaa !2
  br label %do.cond749

do.cond749:                                       ; preds = %do.body737
  br label %do.end750

do.end750:                                        ; preds = %do.cond749
  br label %do.body751

do.body751:                                       ; preds = %do.end750
  %600 = load i32, i32* %B, align 4, !tbaa !2
  %601 = load i32, i32* %A, align 4, !tbaa !2
  %602 = load i32, i32* %C, align 4, !tbaa !2
  %neg752 = xor i32 %602, -1
  %or753 = or i32 %601, %neg752
  %xor754 = xor i32 %600, %or753
  %arrayidx755 = getelementptr inbounds [16 x i32], [16 x i32]* %correct_words, i64 0, i64 3
  %603 = load i32, i32* %arrayidx755, align 4, !tbaa !2
  %add756 = add i32 %xor754, %603
  %add757 = add i32 %add756, -1894986606
  %604 = load i32, i32* %D, align 4, !tbaa !2
  %add758 = add i32 %604, %add757
  store i32 %add758, i32* %D, align 4, !tbaa !2
  %605 = load i32, i32* %D, align 4, !tbaa !2
  %shl759 = shl i32 %605, 10
  %606 = load i32, i32* %D, align 4, !tbaa !2
  %shr760 = lshr i32 %606, 22
  %or761 = or i32 %shl759, %shr760
  store i32 %or761, i32* %D, align 4, !tbaa !2
  %607 = load i32, i32* %A, align 4, !tbaa !2
  %608 = load i32, i32* %D, align 4, !tbaa !2
  %add762 = add i32 %608, %607
  store i32 %add762, i32* %D, align 4, !tbaa !2
  br label %do.cond763

do.cond763:                                       ; preds = %do.body751
  br label %do.end764

do.end764:                                        ; preds = %do.cond763
  br label %do.body765

do.body765:                                       ; preds = %do.end764
  %609 = load i32, i32* %A, align 4, !tbaa !2
  %610 = load i32, i32* %D, align 4, !tbaa !2
  %611 = load i32, i32* %B, align 4, !tbaa !2
  %neg766 = xor i32 %611, -1
  %or767 = or i32 %610, %neg766
  %xor768 = xor i32 %609, %or767
  %arrayidx769 = getelementptr inbounds [16 x i32], [16 x i32]* %correct_words, i64 0, i64 10
  %612 = load i32, i32* %arrayidx769, align 8, !tbaa !2
  %add770 = add i32 %xor768, %612
  %add771 = add i32 %add770, -1051523
  %613 = load i32, i32* %C, align 4, !tbaa !2
  %add772 = add i32 %613, %add771
  store i32 %add772, i32* %C, align 4, !tbaa !2
  %614 = load i32, i32* %C, align 4, !tbaa !2
  %shl773 = shl i32 %614, 15
  %615 = load i32, i32* %C, align 4, !tbaa !2
  %shr774 = lshr i32 %615, 17
  %or775 = or i32 %shl773, %shr774
  store i32 %or775, i32* %C, align 4, !tbaa !2
  %616 = load i32, i32* %D, align 4, !tbaa !2
  %617 = load i32, i32* %C, align 4, !tbaa !2
  %add776 = add i32 %617, %616
  store i32 %add776, i32* %C, align 4, !tbaa !2
  br label %do.cond777

do.cond777:                                       ; preds = %do.body765
  br label %do.end778

do.end778:                                        ; preds = %do.cond777
  br label %do.body779

do.body779:                                       ; preds = %do.end778
  %618 = load i32, i32* %D, align 4, !tbaa !2
  %619 = load i32, i32* %C, align 4, !tbaa !2
  %620 = load i32, i32* %A, align 4, !tbaa !2
  %neg780 = xor i32 %620, -1
  %or781 = or i32 %619, %neg780
  %xor782 = xor i32 %618, %or781
  %arrayidx783 = getelementptr inbounds [16 x i32], [16 x i32]* %correct_words, i64 0, i64 1
  %621 = load i32, i32* %arrayidx783, align 4, !tbaa !2
  %add784 = add i32 %xor782, %621
  %add785 = add i32 %add784, -2054922799
  %622 = load i32, i32* %B, align 4, !tbaa !2
  %add786 = add i32 %622, %add785
  store i32 %add786, i32* %B, align 4, !tbaa !2
  %623 = load i32, i32* %B, align 4, !tbaa !2
  %shl787 = shl i32 %623, 21
  %624 = load i32, i32* %B, align 4, !tbaa !2
  %shr788 = lshr i32 %624, 11
  %or789 = or i32 %shl787, %shr788
  store i32 %or789, i32* %B, align 4, !tbaa !2
  %625 = load i32, i32* %C, align 4, !tbaa !2
  %626 = load i32, i32* %B, align 4, !tbaa !2
  %add790 = add i32 %626, %625
  store i32 %add790, i32* %B, align 4, !tbaa !2
  br label %do.cond791

do.cond791:                                       ; preds = %do.body779
  br label %do.end792

do.end792:                                        ; preds = %do.cond791
  br label %do.body793

do.body793:                                       ; preds = %do.end792
  %627 = load i32, i32* %C, align 4, !tbaa !2
  %628 = load i32, i32* %B, align 4, !tbaa !2
  %629 = load i32, i32* %D, align 4, !tbaa !2
  %neg794 = xor i32 %629, -1
  %or795 = or i32 %628, %neg794
  %xor796 = xor i32 %627, %or795
  %arrayidx797 = getelementptr inbounds [16 x i32], [16 x i32]* %correct_words, i64 0, i64 8
  %630 = load i32, i32* %arrayidx797, align 16, !tbaa !2
  %add798 = add i32 %xor796, %630
  %add799 = add i32 %add798, 1873313359
  %631 = load i32, i32* %A, align 4, !tbaa !2
  %add800 = add i32 %631, %add799
  store i32 %add800, i32* %A, align 4, !tbaa !2
  %632 = load i32, i32* %A, align 4, !tbaa !2
  %shl801 = shl i32 %632, 6
  %633 = load i32, i32* %A, align 4, !tbaa !2
  %shr802 = lshr i32 %633, 26
  %or803 = or i32 %shl801, %shr802
  store i32 %or803, i32* %A, align 4, !tbaa !2
  %634 = load i32, i32* %B, align 4, !tbaa !2
  %635 = load i32, i32* %A, align 4, !tbaa !2
  %add804 = add i32 %635, %634
  store i32 %add804, i32* %A, align 4, !tbaa !2
  br label %do.cond805

do.cond805:                                       ; preds = %do.body793
  br label %do.end806

do.end806:                                        ; preds = %do.cond805
  br label %do.body807

do.body807:                                       ; preds = %do.end806
  %636 = load i32, i32* %B, align 4, !tbaa !2
  %637 = load i32, i32* %A, align 4, !tbaa !2
  %638 = load i32, i32* %C, align 4, !tbaa !2
  %neg808 = xor i32 %638, -1
  %or809 = or i32 %637, %neg808
  %xor810 = xor i32 %636, %or809
  %arrayidx811 = getelementptr inbounds [16 x i32], [16 x i32]* %correct_words, i64 0, i64 15
  %639 = load i32, i32* %arrayidx811, align 4, !tbaa !2
  %add812 = add i32 %xor810, %639
  %add813 = add i32 %add812, -30611744
  %640 = load i32, i32* %D, align 4, !tbaa !2
  %add814 = add i32 %640, %add813
  store i32 %add814, i32* %D, align 4, !tbaa !2
  %641 = load i32, i32* %D, align 4, !tbaa !2
  %shl815 = shl i32 %641, 10
  %642 = load i32, i32* %D, align 4, !tbaa !2
  %shr816 = lshr i32 %642, 22
  %or817 = or i32 %shl815, %shr816
  store i32 %or817, i32* %D, align 4, !tbaa !2
  %643 = load i32, i32* %A, align 4, !tbaa !2
  %644 = load i32, i32* %D, align 4, !tbaa !2
  %add818 = add i32 %644, %643
  store i32 %add818, i32* %D, align 4, !tbaa !2
  br label %do.cond819

do.cond819:                                       ; preds = %do.body807
  br label %do.end820

do.end820:                                        ; preds = %do.cond819
  br label %do.body821

do.body821:                                       ; preds = %do.end820
  %645 = load i32, i32* %A, align 4, !tbaa !2
  %646 = load i32, i32* %D, align 4, !tbaa !2
  %647 = load i32, i32* %B, align 4, !tbaa !2
  %neg822 = xor i32 %647, -1
  %or823 = or i32 %646, %neg822
  %xor824 = xor i32 %645, %or823
  %arrayidx825 = getelementptr inbounds [16 x i32], [16 x i32]* %correct_words, i64 0, i64 6
  %648 = load i32, i32* %arrayidx825, align 8, !tbaa !2
  %add826 = add i32 %xor824, %648
  %add827 = add i32 %add826, -1560198380
  %649 = load i32, i32* %C, align 4, !tbaa !2
  %add828 = add i32 %649, %add827
  store i32 %add828, i32* %C, align 4, !tbaa !2
  %650 = load i32, i32* %C, align 4, !tbaa !2
  %shl829 = shl i32 %650, 15
  %651 = load i32, i32* %C, align 4, !tbaa !2
  %shr830 = lshr i32 %651, 17
  %or831 = or i32 %shl829, %shr830
  store i32 %or831, i32* %C, align 4, !tbaa !2
  %652 = load i32, i32* %D, align 4, !tbaa !2
  %653 = load i32, i32* %C, align 4, !tbaa !2
  %add832 = add i32 %653, %652
  store i32 %add832, i32* %C, align 4, !tbaa !2
  br label %do.cond833

do.cond833:                                       ; preds = %do.body821
  br label %do.end834

do.end834:                                        ; preds = %do.cond833
  br label %do.body835

do.body835:                                       ; preds = %do.end834
  %654 = load i32, i32* %D, align 4, !tbaa !2
  %655 = load i32, i32* %C, align 4, !tbaa !2
  %656 = load i32, i32* %A, align 4, !tbaa !2
  %neg836 = xor i32 %656, -1
  %or837 = or i32 %655, %neg836
  %xor838 = xor i32 %654, %or837
  %arrayidx839 = getelementptr inbounds [16 x i32], [16 x i32]* %correct_words, i64 0, i64 13
  %657 = load i32, i32* %arrayidx839, align 4, !tbaa !2
  %add840 = add i32 %xor838, %657
  %add841 = add i32 %add840, 1309151649
  %658 = load i32, i32* %B, align 4, !tbaa !2
  %add842 = add i32 %658, %add841
  store i32 %add842, i32* %B, align 4, !tbaa !2
  %659 = load i32, i32* %B, align 4, !tbaa !2
  %shl843 = shl i32 %659, 21
  %660 = load i32, i32* %B, align 4, !tbaa !2
  %shr844 = lshr i32 %660, 11
  %or845 = or i32 %shl843, %shr844
  store i32 %or845, i32* %B, align 4, !tbaa !2
  %661 = load i32, i32* %C, align 4, !tbaa !2
  %662 = load i32, i32* %B, align 4, !tbaa !2
  %add846 = add i32 %662, %661
  store i32 %add846, i32* %B, align 4, !tbaa !2
  br label %do.cond847

do.cond847:                                       ; preds = %do.body835
  br label %do.end848

do.end848:                                        ; preds = %do.cond847
  br label %do.body849

do.body849:                                       ; preds = %do.end848
  %663 = load i32, i32* %C, align 4, !tbaa !2
  %664 = load i32, i32* %B, align 4, !tbaa !2
  %665 = load i32, i32* %D, align 4, !tbaa !2
  %neg850 = xor i32 %665, -1
  %or851 = or i32 %664, %neg850
  %xor852 = xor i32 %663, %or851
  %arrayidx853 = getelementptr inbounds [16 x i32], [16 x i32]* %correct_words, i64 0, i64 4
  %666 = load i32, i32* %arrayidx853, align 16, !tbaa !2
  %add854 = add i32 %xor852, %666
  %add855 = add i32 %add854, -145523070
  %667 = load i32, i32* %A, align 4, !tbaa !2
  %add856 = add i32 %667, %add855
  store i32 %add856, i32* %A, align 4, !tbaa !2
  %668 = load i32, i32* %A, align 4, !tbaa !2
  %shl857 = shl i32 %668, 6
  %669 = load i32, i32* %A, align 4, !tbaa !2
  %shr858 = lshr i32 %669, 26
  %or859 = or i32 %shl857, %shr858
  store i32 %or859, i32* %A, align 4, !tbaa !2
  %670 = load i32, i32* %B, align 4, !tbaa !2
  %671 = load i32, i32* %A, align 4, !tbaa !2
  %add860 = add i32 %671, %670
  store i32 %add860, i32* %A, align 4, !tbaa !2
  br label %do.cond861

do.cond861:                                       ; preds = %do.body849
  br label %do.end862

do.end862:                                        ; preds = %do.cond861
  br label %do.body863

do.body863:                                       ; preds = %do.end862
  %672 = load i32, i32* %B, align 4, !tbaa !2
  %673 = load i32, i32* %A, align 4, !tbaa !2
  %674 = load i32, i32* %C, align 4, !tbaa !2
  %neg864 = xor i32 %674, -1
  %or865 = or i32 %673, %neg864
  %xor866 = xor i32 %672, %or865
  %arrayidx867 = getelementptr inbounds [16 x i32], [16 x i32]* %correct_words, i64 0, i64 11
  %675 = load i32, i32* %arrayidx867, align 4, !tbaa !2
  %add868 = add i32 %xor866, %675
  %add869 = add i32 %add868, -1120210379
  %676 = load i32, i32* %D, align 4, !tbaa !2
  %add870 = add i32 %676, %add869
  store i32 %add870, i32* %D, align 4, !tbaa !2
  %677 = load i32, i32* %D, align 4, !tbaa !2
  %shl871 = shl i32 %677, 10
  %678 = load i32, i32* %D, align 4, !tbaa !2
  %shr872 = lshr i32 %678, 22
  %or873 = or i32 %shl871, %shr872
  store i32 %or873, i32* %D, align 4, !tbaa !2
  %679 = load i32, i32* %A, align 4, !tbaa !2
  %680 = load i32, i32* %D, align 4, !tbaa !2
  %add874 = add i32 %680, %679
  store i32 %add874, i32* %D, align 4, !tbaa !2
  br label %do.cond875

do.cond875:                                       ; preds = %do.body863
  br label %do.end876

do.end876:                                        ; preds = %do.cond875
  br label %do.body877

do.body877:                                       ; preds = %do.end876
  %681 = load i32, i32* %A, align 4, !tbaa !2
  %682 = load i32, i32* %D, align 4, !tbaa !2
  %683 = load i32, i32* %B, align 4, !tbaa !2
  %neg878 = xor i32 %683, -1
  %or879 = or i32 %682, %neg878
  %xor880 = xor i32 %681, %or879
  %arrayidx881 = getelementptr inbounds [16 x i32], [16 x i32]* %correct_words, i64 0, i64 2
  %684 = load i32, i32* %arrayidx881, align 8, !tbaa !2
  %add882 = add i32 %xor880, %684
  %add883 = add i32 %add882, 718787259
  %685 = load i32, i32* %C, align 4, !tbaa !2
  %add884 = add i32 %685, %add883
  store i32 %add884, i32* %C, align 4, !tbaa !2
  %686 = load i32, i32* %C, align 4, !tbaa !2
  %shl885 = shl i32 %686, 15
  %687 = load i32, i32* %C, align 4, !tbaa !2
  %shr886 = lshr i32 %687, 17
  %or887 = or i32 %shl885, %shr886
  store i32 %or887, i32* %C, align 4, !tbaa !2
  %688 = load i32, i32* %D, align 4, !tbaa !2
  %689 = load i32, i32* %C, align 4, !tbaa !2
  %add888 = add i32 %689, %688
  store i32 %add888, i32* %C, align 4, !tbaa !2
  br label %do.cond889

do.cond889:                                       ; preds = %do.body877
  br label %do.end890

do.end890:                                        ; preds = %do.cond889
  br label %do.body891

do.body891:                                       ; preds = %do.end890
  %690 = load i32, i32* %D, align 4, !tbaa !2
  %691 = load i32, i32* %C, align 4, !tbaa !2
  %692 = load i32, i32* %A, align 4, !tbaa !2
  %neg892 = xor i32 %692, -1
  %or893 = or i32 %691, %neg892
  %xor894 = xor i32 %690, %or893
  %arrayidx895 = getelementptr inbounds [16 x i32], [16 x i32]* %correct_words, i64 0, i64 9
  %693 = load i32, i32* %arrayidx895, align 4, !tbaa !2
  %add896 = add i32 %xor894, %693
  %add897 = add i32 %add896, -343485551
  %694 = load i32, i32* %B, align 4, !tbaa !2
  %add898 = add i32 %694, %add897
  store i32 %add898, i32* %B, align 4, !tbaa !2
  %695 = load i32, i32* %B, align 4, !tbaa !2
  %shl899 = shl i32 %695, 21
  %696 = load i32, i32* %B, align 4, !tbaa !2
  %shr900 = lshr i32 %696, 11
  %or901 = or i32 %shl899, %shr900
  store i32 %or901, i32* %B, align 4, !tbaa !2
  %697 = load i32, i32* %C, align 4, !tbaa !2
  %698 = load i32, i32* %B, align 4, !tbaa !2
  %add902 = add i32 %698, %697
  store i32 %add902, i32* %B, align 4, !tbaa !2
  br label %do.cond903

do.cond903:                                       ; preds = %do.body891
  br label %do.end904

do.end904:                                        ; preds = %do.cond903
  %699 = load i32, i32* %A_save, align 4, !tbaa !2
  %700 = load i32, i32* %A, align 4, !tbaa !2
  %add905 = add i32 %700, %699
  store i32 %add905, i32* %A, align 4, !tbaa !2
  %701 = load i32, i32* %B_save, align 4, !tbaa !2
  %702 = load i32, i32* %B, align 4, !tbaa !2
  %add906 = add i32 %702, %701
  store i32 %add906, i32* %B, align 4, !tbaa !2
  %703 = load i32, i32* %C_save, align 4, !tbaa !2
  %704 = load i32, i32* %C, align 4, !tbaa !2
  %add907 = add i32 %704, %703
  store i32 %add907, i32* %C, align 4, !tbaa !2
  %705 = load i32, i32* %D_save, align 4, !tbaa !2
  %706 = load i32, i32* %D, align 4, !tbaa !2
  %add908 = add i32 %706, %705
  store i32 %add908, i32* %D, align 4, !tbaa !2
  %707 = bitcast i32* %D_save to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %707) #13
  %708 = bitcast i32* %C_save to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %708) #13
  %709 = bitcast i32* %B_save to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %709) #13
  %710 = bitcast i32* %A_save to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %710) #13
  %711 = bitcast i32** %cwp to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %711) #13
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %712 = load i32, i32* %A, align 4, !tbaa !2
  %713 = load %struct.md5_ctx*, %struct.md5_ctx** %ctx.addr, align 8, !tbaa !6
  %A909 = getelementptr inbounds %struct.md5_ctx, %struct.md5_ctx* %713, i32 0, i32 0
  store i32 %712, i32* %A909, align 4, !tbaa !113
  %714 = load i32, i32* %B, align 4, !tbaa !2
  %715 = load %struct.md5_ctx*, %struct.md5_ctx** %ctx.addr, align 8, !tbaa !6
  %B910 = getelementptr inbounds %struct.md5_ctx, %struct.md5_ctx* %715, i32 0, i32 1
  store i32 %714, i32* %B910, align 4, !tbaa !115
  %716 = load i32, i32* %C, align 4, !tbaa !2
  %717 = load %struct.md5_ctx*, %struct.md5_ctx** %ctx.addr, align 8, !tbaa !6
  %C911 = getelementptr inbounds %struct.md5_ctx, %struct.md5_ctx* %717, i32 0, i32 2
  store i32 %716, i32* %C911, align 4, !tbaa !116
  %718 = load i32, i32* %D, align 4, !tbaa !2
  %719 = load %struct.md5_ctx*, %struct.md5_ctx** %ctx.addr, align 8, !tbaa !6
  %D912 = getelementptr inbounds %struct.md5_ctx, %struct.md5_ctx* %719, i32 0, i32 3
  store i32 %718, i32* %D912, align 4, !tbaa !117
  %720 = bitcast i32* %lolen to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %720) #13
  %721 = bitcast i32* %D to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %721) #13
  %722 = bitcast i32* %C to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %722) #13
  %723 = bitcast i32* %B to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %723) #13
  %724 = bitcast i32* %A to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %724) #13
  %725 = bitcast i32** %endp to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %725) #13
  %726 = bitcast i64* %nwords to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %726) #13
  %727 = bitcast i32** %words to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %727) #13
  %728 = bitcast [16 x i32]* %correct_words to i8*
  call void @llvm.lifetime.end.p0i8(i64 64, i8* %728) #13
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i8* @md5_buffer(i8* %buffer, i64 %len, i8* %resblock) #7 {
entry:
  %buffer.addr = alloca i8*, align 8
  %len.addr = alloca i64, align 8
  %resblock.addr = alloca i8*, align 8
  %ctx = alloca %struct.md5_ctx, align 4
  store i8* %buffer, i8** %buffer.addr, align 8, !tbaa !6
  store i64 %len, i64* %len.addr, align 8, !tbaa !14
  store i8* %resblock, i8** %resblock.addr, align 8, !tbaa !6
  %0 = bitcast %struct.md5_ctx* %ctx to i8*
  call void @llvm.lifetime.start.p0i8(i64 156, i8* %0) #13
  call void @md5_init_ctx(%struct.md5_ctx* %ctx) #13
  %1 = load i8*, i8** %buffer.addr, align 8, !tbaa !6
  %2 = load i64, i64* %len.addr, align 8, !tbaa !14
  call void @md5_process_bytes(i8* %1, i64 %2, %struct.md5_ctx* %ctx) #13
  %3 = load i8*, i8** %resblock.addr, align 8, !tbaa !6
  %call = call i8* @md5_finish_ctx(%struct.md5_ctx* %ctx, i8* %3) #13
  %4 = bitcast %struct.md5_ctx* %ctx to i8*
  call void @llvm.lifetime.end.p0i8(i64 156, i8* %4) #13
  ret i8* %call
}

; Function Attrs: nounwind uwtable
define dso_local void @md5_process_bytes(i8* %buffer, i64 %len, %struct.md5_ctx* %ctx) #7 {
entry:
  %buffer.addr = alloca i8*, align 8
  %len.addr = alloca i64, align 8
  %ctx.addr = alloca %struct.md5_ctx*, align 8
  %left_over = alloca i64, align 8
  %add = alloca i64, align 8
  %left_over52 = alloca i64, align 8
  store i8* %buffer, i8** %buffer.addr, align 8, !tbaa !6
  store i64 %len, i64* %len.addr, align 8, !tbaa !14
  store %struct.md5_ctx* %ctx, %struct.md5_ctx** %ctx.addr, align 8, !tbaa !6
  %0 = load %struct.md5_ctx*, %struct.md5_ctx** %ctx.addr, align 8, !tbaa !6
  %buflen = getelementptr inbounds %struct.md5_ctx, %struct.md5_ctx* %0, i32 0, i32 5
  %1 = load i32, i32* %buflen, align 4, !tbaa !118
  %cmp = icmp ne i32 %1, 0
  br i1 %cmp, label %if.then, label %if.end30

if.then:                                          ; preds = %entry
  %2 = bitcast i64* %left_over to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %2) #13
  %3 = load %struct.md5_ctx*, %struct.md5_ctx** %ctx.addr, align 8, !tbaa !6
  %buflen1 = getelementptr inbounds %struct.md5_ctx, %struct.md5_ctx* %3, i32 0, i32 5
  %4 = load i32, i32* %buflen1, align 4, !tbaa !118
  %conv = zext i32 %4 to i64
  store i64 %conv, i64* %left_over, align 8, !tbaa !14
  %5 = bitcast i64* %add to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %5) #13
  %6 = load i64, i64* %left_over, align 8, !tbaa !14
  %sub = sub i64 128, %6
  %7 = load i64, i64* %len.addr, align 8, !tbaa !14
  %cmp2 = icmp ugt i64 %sub, %7
  br i1 %cmp2, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then
  %8 = load i64, i64* %len.addr, align 8, !tbaa !14
  br label %cond.end

cond.false:                                       ; preds = %if.then
  %9 = load i64, i64* %left_over, align 8, !tbaa !14
  %sub4 = sub i64 128, %9
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %8, %cond.true ], [ %sub4, %cond.false ]
  store i64 %cond, i64* %add, align 8, !tbaa !14
  %10 = load %struct.md5_ctx*, %struct.md5_ctx** %ctx.addr, align 8, !tbaa !6
  %buffer5 = getelementptr inbounds %struct.md5_ctx, %struct.md5_ctx* %10, i32 0, i32 6
  %arraydecay = getelementptr inbounds [32 x i32], [32 x i32]* %buffer5, i64 0, i64 0
  %11 = bitcast i32* %arraydecay to i8*
  %12 = load i64, i64* %left_over, align 8, !tbaa !14
  %arrayidx = getelementptr inbounds i8, i8* %11, i64 %12
  %13 = load i8*, i8** %buffer.addr, align 8, !tbaa !6
  %14 = load i64, i64* %add, align 8, !tbaa !14
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %arrayidx, i8* align 1 %13, i64 %14, i1 false)
  %15 = load i64, i64* %add, align 8, !tbaa !14
  %16 = load %struct.md5_ctx*, %struct.md5_ctx** %ctx.addr, align 8, !tbaa !6
  %buflen6 = getelementptr inbounds %struct.md5_ctx, %struct.md5_ctx* %16, i32 0, i32 5
  %17 = load i32, i32* %buflen6, align 4, !tbaa !118
  %conv7 = zext i32 %17 to i64
  %add8 = add i64 %conv7, %15
  %conv9 = trunc i64 %add8 to i32
  store i32 %conv9, i32* %buflen6, align 4, !tbaa !118
  %18 = load %struct.md5_ctx*, %struct.md5_ctx** %ctx.addr, align 8, !tbaa !6
  %buflen10 = getelementptr inbounds %struct.md5_ctx, %struct.md5_ctx* %18, i32 0, i32 5
  %19 = load i32, i32* %buflen10, align 4, !tbaa !118
  %cmp11 = icmp ugt i32 %19, 64
  br i1 %cmp11, label %if.then13, label %if.end

if.then13:                                        ; preds = %cond.end
  %20 = load %struct.md5_ctx*, %struct.md5_ctx** %ctx.addr, align 8, !tbaa !6
  %buffer14 = getelementptr inbounds %struct.md5_ctx, %struct.md5_ctx* %20, i32 0, i32 6
  %arraydecay15 = getelementptr inbounds [32 x i32], [32 x i32]* %buffer14, i64 0, i64 0
  %21 = bitcast i32* %arraydecay15 to i8*
  %22 = load %struct.md5_ctx*, %struct.md5_ctx** %ctx.addr, align 8, !tbaa !6
  %buflen16 = getelementptr inbounds %struct.md5_ctx, %struct.md5_ctx* %22, i32 0, i32 5
  %23 = load i32, i32* %buflen16, align 4, !tbaa !118
  %and = and i32 %23, -64
  %conv17 = zext i32 %and to i64
  %24 = load %struct.md5_ctx*, %struct.md5_ctx** %ctx.addr, align 8, !tbaa !6
  call void @md5_process_block(i8* %21, i64 %conv17, %struct.md5_ctx* %24) #13
  %25 = load %struct.md5_ctx*, %struct.md5_ctx** %ctx.addr, align 8, !tbaa !6
  %buflen18 = getelementptr inbounds %struct.md5_ctx, %struct.md5_ctx* %25, i32 0, i32 5
  %26 = load i32, i32* %buflen18, align 4, !tbaa !118
  %and19 = and i32 %26, 63
  store i32 %and19, i32* %buflen18, align 4, !tbaa !118
  %27 = load %struct.md5_ctx*, %struct.md5_ctx** %ctx.addr, align 8, !tbaa !6
  %buffer20 = getelementptr inbounds %struct.md5_ctx, %struct.md5_ctx* %27, i32 0, i32 6
  %arraydecay21 = getelementptr inbounds [32 x i32], [32 x i32]* %buffer20, i64 0, i64 0
  %28 = bitcast i32* %arraydecay21 to i8*
  %29 = load %struct.md5_ctx*, %struct.md5_ctx** %ctx.addr, align 8, !tbaa !6
  %buffer22 = getelementptr inbounds %struct.md5_ctx, %struct.md5_ctx* %29, i32 0, i32 6
  %arraydecay23 = getelementptr inbounds [32 x i32], [32 x i32]* %buffer22, i64 0, i64 0
  %30 = bitcast i32* %arraydecay23 to i8*
  %31 = load i64, i64* %left_over, align 8, !tbaa !14
  %32 = load i64, i64* %add, align 8, !tbaa !14
  %add24 = add i64 %31, %32
  %and25 = and i64 %add24, -64
  %arrayidx26 = getelementptr inbounds i8, i8* %30, i64 %and25
  %33 = load %struct.md5_ctx*, %struct.md5_ctx** %ctx.addr, align 8, !tbaa !6
  %buflen27 = getelementptr inbounds %struct.md5_ctx, %struct.md5_ctx* %33, i32 0, i32 5
  %34 = load i32, i32* %buflen27, align 4, !tbaa !118
  %conv28 = zext i32 %34 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %28, i8* align 1 %arrayidx26, i64 %conv28, i1 false)
  br label %if.end

if.end:                                           ; preds = %if.then13, %cond.end
  %35 = load i8*, i8** %buffer.addr, align 8, !tbaa !6
  %36 = load i64, i64* %add, align 8, !tbaa !14
  %add.ptr = getelementptr inbounds i8, i8* %35, i64 %36
  store i8* %add.ptr, i8** %buffer.addr, align 8, !tbaa !6
  %37 = load i64, i64* %add, align 8, !tbaa !14
  %38 = load i64, i64* %len.addr, align 8, !tbaa !14
  %sub29 = sub i64 %38, %37
  store i64 %sub29, i64* %len.addr, align 8, !tbaa !14
  %39 = bitcast i64* %add to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %39) #13
  %40 = bitcast i64* %left_over to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %40) #13
  br label %if.end30

if.end30:                                         ; preds = %if.end, %entry
  %41 = load i64, i64* %len.addr, align 8, !tbaa !14
  %cmp31 = icmp uge i64 %41, 64
  br i1 %cmp31, label %if.then33, label %if.end48

if.then33:                                        ; preds = %if.end30
  %42 = load i8*, i8** %buffer.addr, align 8, !tbaa !6
  %43 = ptrtoint i8* %42 to i64
  %rem = urem i64 %43, 4
  %cmp34 = icmp ne i64 %rem, 0
  br i1 %cmp34, label %if.then36, label %if.else

if.then36:                                        ; preds = %if.then33
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then36
  %44 = load i64, i64* %len.addr, align 8, !tbaa !14
  %cmp37 = icmp ugt i64 %44, 64
  br i1 %cmp37, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %45 = load %struct.md5_ctx*, %struct.md5_ctx** %ctx.addr, align 8, !tbaa !6
  %buffer39 = getelementptr inbounds %struct.md5_ctx, %struct.md5_ctx* %45, i32 0, i32 6
  %arraydecay40 = getelementptr inbounds [32 x i32], [32 x i32]* %buffer39, i64 0, i64 0
  %46 = bitcast i32* %arraydecay40 to i8*
  %47 = load i8*, i8** %buffer.addr, align 8, !tbaa !6
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %46, i8* align 1 %47, i64 64, i1 false)
  %48 = load %struct.md5_ctx*, %struct.md5_ctx** %ctx.addr, align 8, !tbaa !6
  call void @md5_process_block(i8* %46, i64 64, %struct.md5_ctx* %48) #13
  %49 = load i8*, i8** %buffer.addr, align 8, !tbaa !6
  %add.ptr41 = getelementptr inbounds i8, i8* %49, i64 64
  store i8* %add.ptr41, i8** %buffer.addr, align 8, !tbaa !6
  %50 = load i64, i64* %len.addr, align 8, !tbaa !14
  %sub42 = sub i64 %50, 64
  store i64 %sub42, i64* %len.addr, align 8, !tbaa !14
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %if.end47

if.else:                                          ; preds = %if.then33
  %51 = load i8*, i8** %buffer.addr, align 8, !tbaa !6
  %52 = load i64, i64* %len.addr, align 8, !tbaa !14
  %and43 = and i64 %52, -64
  %53 = load %struct.md5_ctx*, %struct.md5_ctx** %ctx.addr, align 8, !tbaa !6
  call void @md5_process_block(i8* %51, i64 %and43, %struct.md5_ctx* %53) #13
  %54 = load i8*, i8** %buffer.addr, align 8, !tbaa !6
  %55 = load i64, i64* %len.addr, align 8, !tbaa !14
  %and44 = and i64 %55, -64
  %add.ptr45 = getelementptr inbounds i8, i8* %54, i64 %and44
  store i8* %add.ptr45, i8** %buffer.addr, align 8, !tbaa !6
  %56 = load i64, i64* %len.addr, align 8, !tbaa !14
  %and46 = and i64 %56, 63
  store i64 %and46, i64* %len.addr, align 8, !tbaa !14
  br label %if.end47

if.end47:                                         ; preds = %if.else, %while.end
  br label %if.end48

if.end48:                                         ; preds = %if.end47, %if.end30
  %57 = load i64, i64* %len.addr, align 8, !tbaa !14
  %cmp49 = icmp ugt i64 %57, 0
  br i1 %cmp49, label %if.then51, label %if.end72

if.then51:                                        ; preds = %if.end48
  %58 = bitcast i64* %left_over52 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %58) #13
  %59 = load %struct.md5_ctx*, %struct.md5_ctx** %ctx.addr, align 8, !tbaa !6
  %buflen53 = getelementptr inbounds %struct.md5_ctx, %struct.md5_ctx* %59, i32 0, i32 5
  %60 = load i32, i32* %buflen53, align 4, !tbaa !118
  %conv54 = zext i32 %60 to i64
  store i64 %conv54, i64* %left_over52, align 8, !tbaa !14
  %61 = load %struct.md5_ctx*, %struct.md5_ctx** %ctx.addr, align 8, !tbaa !6
  %buffer55 = getelementptr inbounds %struct.md5_ctx, %struct.md5_ctx* %61, i32 0, i32 6
  %arraydecay56 = getelementptr inbounds [32 x i32], [32 x i32]* %buffer55, i64 0, i64 0
  %62 = bitcast i32* %arraydecay56 to i8*
  %63 = load i64, i64* %left_over52, align 8, !tbaa !14
  %arrayidx57 = getelementptr inbounds i8, i8* %62, i64 %63
  %64 = load i8*, i8** %buffer.addr, align 8, !tbaa !6
  %65 = load i64, i64* %len.addr, align 8, !tbaa !14
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %arrayidx57, i8* align 1 %64, i64 %65, i1 false)
  %66 = load i64, i64* %len.addr, align 8, !tbaa !14
  %67 = load i64, i64* %left_over52, align 8, !tbaa !14
  %add58 = add i64 %67, %66
  store i64 %add58, i64* %left_over52, align 8, !tbaa !14
  %68 = load i64, i64* %left_over52, align 8, !tbaa !14
  %cmp59 = icmp uge i64 %68, 64
  br i1 %cmp59, label %if.then61, label %if.end69

if.then61:                                        ; preds = %if.then51
  %69 = load %struct.md5_ctx*, %struct.md5_ctx** %ctx.addr, align 8, !tbaa !6
  %buffer62 = getelementptr inbounds %struct.md5_ctx, %struct.md5_ctx* %69, i32 0, i32 6
  %arraydecay63 = getelementptr inbounds [32 x i32], [32 x i32]* %buffer62, i64 0, i64 0
  %70 = bitcast i32* %arraydecay63 to i8*
  %71 = load %struct.md5_ctx*, %struct.md5_ctx** %ctx.addr, align 8, !tbaa !6
  call void @md5_process_block(i8* %70, i64 64, %struct.md5_ctx* %71) #13
  %72 = load i64, i64* %left_over52, align 8, !tbaa !14
  %sub64 = sub i64 %72, 64
  store i64 %sub64, i64* %left_over52, align 8, !tbaa !14
  %73 = load %struct.md5_ctx*, %struct.md5_ctx** %ctx.addr, align 8, !tbaa !6
  %buffer65 = getelementptr inbounds %struct.md5_ctx, %struct.md5_ctx* %73, i32 0, i32 6
  %arraydecay66 = getelementptr inbounds [32 x i32], [32 x i32]* %buffer65, i64 0, i64 0
  %74 = bitcast i32* %arraydecay66 to i8*
  %75 = load %struct.md5_ctx*, %struct.md5_ctx** %ctx.addr, align 8, !tbaa !6
  %buffer67 = getelementptr inbounds %struct.md5_ctx, %struct.md5_ctx* %75, i32 0, i32 6
  %arrayidx68 = getelementptr inbounds [32 x i32], [32 x i32]* %buffer67, i64 0, i64 16
  %76 = bitcast i32* %arrayidx68 to i8*
  %77 = load i64, i64* %left_over52, align 8, !tbaa !14
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %74, i8* align 4 %76, i64 %77, i1 false)
  br label %if.end69

if.end69:                                         ; preds = %if.then61, %if.then51
  %78 = load i64, i64* %left_over52, align 8, !tbaa !14
  %conv70 = trunc i64 %78 to i32
  %79 = load %struct.md5_ctx*, %struct.md5_ctx** %ctx.addr, align 8, !tbaa !6
  %buflen71 = getelementptr inbounds %struct.md5_ctx, %struct.md5_ctx* %79, i32 0, i32 5
  store i32 %conv70, i32* %buflen71, align 4, !tbaa !118
  %80 = bitcast i64* %left_over52 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %80) #13
  br label %if.end72

if.end72:                                         ; preds = %if.end69, %if.end48
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local void @fdadvise(i32 %fd, i64 %offset, i64 %len, i32 %advice) #7 {
entry:
  %fd.addr = alloca i32, align 4
  %offset.addr = alloca i64, align 8
  %len.addr = alloca i64, align 8
  %advice.addr = alloca i32, align 4
  store i32 %fd, i32* %fd.addr, align 4, !tbaa !2
  store i64 %offset, i64* %offset.addr, align 8, !tbaa !14
  store i64 %len, i64* %len.addr, align 8, !tbaa !14
  store i32 %advice, i32* %advice.addr, align 4, !tbaa !13
  %0 = load i32, i32* %fd.addr, align 4, !tbaa !2
  %1 = load i64, i64* %offset.addr, align 8, !tbaa !14
  %2 = load i64, i64* %len.addr, align 8, !tbaa !14
  %3 = load i32, i32* %advice.addr, align 4, !tbaa !13
  %call = call i32 @posix_fadvise(i32 %0, i64 %1, i64 %2, i32 %3) #13
  ret void
}

; Function Attrs: nounwind
declare dso_local i32 @posix_fadvise(i32, i64, i64, i32) #6

; Function Attrs: nounwind uwtable
define dso_local void @fadvise(%struct._IO_FILE* %fp, i32 %advice) #7 {
entry:
  %fp.addr = alloca %struct._IO_FILE*, align 8
  %advice.addr = alloca i32, align 4
  store %struct._IO_FILE* %fp, %struct._IO_FILE** %fp.addr, align 8, !tbaa !6
  store i32 %advice, i32* %advice.addr, align 4, !tbaa !13
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** %fp.addr, align 8, !tbaa !6
  %tobool = icmp ne %struct._IO_FILE* %0, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** %fp.addr, align 8, !tbaa !6
  %call = call i32 @fileno(%struct._IO_FILE* %1) #13
  %2 = load i32, i32* %advice.addr, align 4, !tbaa !13
  call void @fdadvise(i32 %call, i64 0, i64 0, i32 %2)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind readonly uwtable
define dso_local i32 @filevercmp(i8* %s1, i8* %s2) #9 {
entry:
  %retval = alloca i32, align 4
  %s1.addr = alloca i8*, align 8
  %s2.addr = alloca i8*, align 8
  %s1_pos = alloca i8*, align 8
  %s2_pos = alloca i8*, align 8
  %s1_suffix = alloca i8*, align 8
  %s2_suffix = alloca i8*, align 8
  %s1_len = alloca i64, align 8
  %s2_len = alloca i64, align 8
  %result = alloca i32, align 4
  %simple_cmp = alloca i32, align 4
  %cleanup.dest.slot = alloca i32, align 4
  store i8* %s1, i8** %s1.addr, align 8, !tbaa !6
  store i8* %s2, i8** %s2.addr, align 8, !tbaa !6
  %0 = bitcast i8** %s1_pos to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #13
  %1 = bitcast i8** %s2_pos to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %1) #13
  %2 = bitcast i8** %s1_suffix to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %2) #13
  %3 = bitcast i8** %s2_suffix to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %3) #13
  %4 = bitcast i64* %s1_len to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %4) #13
  %5 = bitcast i64* %s2_len to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %5) #13
  %6 = bitcast i32* %result to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %6) #13
  %7 = bitcast i32* %simple_cmp to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %7) #13
  %8 = load i8*, i8** %s1.addr, align 8, !tbaa !6
  %9 = load i8*, i8** %s2.addr, align 8, !tbaa !6
  %call = call i32 @strcmp(i8* %8, i8* %9) #22
  store i32 %call, i32* %simple_cmp, align 4, !tbaa !2
  %10 = load i32, i32* %simple_cmp, align 4, !tbaa !2
  %cmp = icmp eq i32 %10, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %entry
  %11 = load i8*, i8** %s1.addr, align 8, !tbaa !6
  %12 = load i8, i8* %11, align 1, !tbaa !13
  %tobool = icmp ne i8 %12, 0
  br i1 %tobool, label %if.end2, label %if.then1

if.then1:                                         ; preds = %if.end
  store i32 -1, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end2:                                          ; preds = %if.end
  %13 = load i8*, i8** %s2.addr, align 8, !tbaa !6
  %14 = load i8, i8* %13, align 1, !tbaa !13
  %tobool3 = icmp ne i8 %14, 0
  br i1 %tobool3, label %if.end5, label %if.then4

if.then4:                                         ; preds = %if.end2
  store i32 1, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end5:                                          ; preds = %if.end2
  %15 = load i8*, i8** %s1.addr, align 8, !tbaa !6
  %call6 = call i32 @strcmp(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.205, i64 0, i64 0), i8* %15) #22
  %cmp7 = icmp eq i32 0, %call6
  br i1 %cmp7, label %if.then8, label %if.end9

if.then8:                                         ; preds = %if.end5
  store i32 -1, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end9:                                          ; preds = %if.end5
  %16 = load i8*, i8** %s2.addr, align 8, !tbaa !6
  %call10 = call i32 @strcmp(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.205, i64 0, i64 0), i8* %16) #22
  %cmp11 = icmp eq i32 0, %call10
  br i1 %cmp11, label %if.then12, label %if.end13

if.then12:                                        ; preds = %if.end9
  store i32 1, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end13:                                         ; preds = %if.end9
  %17 = load i8*, i8** %s1.addr, align 8, !tbaa !6
  %call14 = call i32 @strcmp(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1.206, i64 0, i64 0), i8* %17) #22
  %cmp15 = icmp eq i32 0, %call14
  br i1 %cmp15, label %if.then16, label %if.end17

if.then16:                                        ; preds = %if.end13
  store i32 -1, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end17:                                         ; preds = %if.end13
  %18 = load i8*, i8** %s2.addr, align 8, !tbaa !6
  %call18 = call i32 @strcmp(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1.206, i64 0, i64 0), i8* %18) #22
  %cmp19 = icmp eq i32 0, %call18
  br i1 %cmp19, label %if.then20, label %if.end21

if.then20:                                        ; preds = %if.end17
  store i32 1, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end21:                                         ; preds = %if.end17
  %19 = load i8*, i8** %s1.addr, align 8, !tbaa !6
  %20 = load i8, i8* %19, align 1, !tbaa !13
  %conv = sext i8 %20 to i32
  %cmp22 = icmp eq i32 %conv, 46
  br i1 %cmp22, label %land.lhs.true, label %if.end28

land.lhs.true:                                    ; preds = %if.end21
  %21 = load i8*, i8** %s2.addr, align 8, !tbaa !6
  %22 = load i8, i8* %21, align 1, !tbaa !13
  %conv24 = sext i8 %22 to i32
  %cmp25 = icmp ne i32 %conv24, 46
  br i1 %cmp25, label %if.then27, label %if.end28

if.then27:                                        ; preds = %land.lhs.true
  store i32 -1, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end28:                                         ; preds = %land.lhs.true, %if.end21
  %23 = load i8*, i8** %s1.addr, align 8, !tbaa !6
  %24 = load i8, i8* %23, align 1, !tbaa !13
  %conv29 = sext i8 %24 to i32
  %cmp30 = icmp ne i32 %conv29, 46
  br i1 %cmp30, label %land.lhs.true32, label %if.end37

land.lhs.true32:                                  ; preds = %if.end28
  %25 = load i8*, i8** %s2.addr, align 8, !tbaa !6
  %26 = load i8, i8* %25, align 1, !tbaa !13
  %conv33 = sext i8 %26 to i32
  %cmp34 = icmp eq i32 %conv33, 46
  br i1 %cmp34, label %if.then36, label %if.end37

if.then36:                                        ; preds = %land.lhs.true32
  store i32 1, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end37:                                         ; preds = %land.lhs.true32, %if.end28
  %27 = load i8*, i8** %s1.addr, align 8, !tbaa !6
  %28 = load i8, i8* %27, align 1, !tbaa !13
  %conv38 = sext i8 %28 to i32
  %cmp39 = icmp eq i32 %conv38, 46
  br i1 %cmp39, label %land.lhs.true41, label %if.end47

land.lhs.true41:                                  ; preds = %if.end37
  %29 = load i8*, i8** %s2.addr, align 8, !tbaa !6
  %30 = load i8, i8* %29, align 1, !tbaa !13
  %conv42 = sext i8 %30 to i32
  %cmp43 = icmp eq i32 %conv42, 46
  br i1 %cmp43, label %if.then45, label %if.end47

if.then45:                                        ; preds = %land.lhs.true41
  %31 = load i8*, i8** %s1.addr, align 8, !tbaa !6
  %incdec.ptr = getelementptr inbounds i8, i8* %31, i32 1
  store i8* %incdec.ptr, i8** %s1.addr, align 8, !tbaa !6
  %32 = load i8*, i8** %s2.addr, align 8, !tbaa !6
  %incdec.ptr46 = getelementptr inbounds i8, i8* %32, i32 1
  store i8* %incdec.ptr46, i8** %s2.addr, align 8, !tbaa !6
  br label %if.end47

if.end47:                                         ; preds = %if.then45, %land.lhs.true41, %if.end37
  %33 = load i8*, i8** %s1.addr, align 8, !tbaa !6
  store i8* %33, i8** %s1_pos, align 8, !tbaa !6
  %34 = load i8*, i8** %s2.addr, align 8, !tbaa !6
  store i8* %34, i8** %s2_pos, align 8, !tbaa !6
  %call48 = call i8* @match_suffix(i8** %s1_pos)
  store i8* %call48, i8** %s1_suffix, align 8, !tbaa !6
  %call49 = call i8* @match_suffix(i8** %s2_pos)
  store i8* %call49, i8** %s2_suffix, align 8, !tbaa !6
  %35 = load i8*, i8** %s1_suffix, align 8, !tbaa !6
  %tobool50 = icmp ne i8* %35, null
  br i1 %tobool50, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end47
  %36 = load i8*, i8** %s1_suffix, align 8, !tbaa !6
  br label %cond.end

cond.false:                                       ; preds = %if.end47
  %37 = load i8*, i8** %s1_pos, align 8, !tbaa !6
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %36, %cond.true ], [ %37, %cond.false ]
  %38 = load i8*, i8** %s1.addr, align 8, !tbaa !6
  %sub.ptr.lhs.cast = ptrtoint i8* %cond to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %38 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  store i64 %sub.ptr.sub, i64* %s1_len, align 8, !tbaa !14
  %39 = load i8*, i8** %s2_suffix, align 8, !tbaa !6
  %tobool51 = icmp ne i8* %39, null
  br i1 %tobool51, label %cond.true52, label %cond.false53

cond.true52:                                      ; preds = %cond.end
  %40 = load i8*, i8** %s2_suffix, align 8, !tbaa !6
  br label %cond.end54

cond.false53:                                     ; preds = %cond.end
  %41 = load i8*, i8** %s2_pos, align 8, !tbaa !6
  br label %cond.end54

cond.end54:                                       ; preds = %cond.false53, %cond.true52
  %cond55 = phi i8* [ %40, %cond.true52 ], [ %41, %cond.false53 ]
  %42 = load i8*, i8** %s2.addr, align 8, !tbaa !6
  %sub.ptr.lhs.cast56 = ptrtoint i8* %cond55 to i64
  %sub.ptr.rhs.cast57 = ptrtoint i8* %42 to i64
  %sub.ptr.sub58 = sub i64 %sub.ptr.lhs.cast56, %sub.ptr.rhs.cast57
  store i64 %sub.ptr.sub58, i64* %s2_len, align 8, !tbaa !14
  %43 = load i8*, i8** %s1_suffix, align 8, !tbaa !6
  %tobool59 = icmp ne i8* %43, null
  br i1 %tobool59, label %land.lhs.true61, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %cond.end54
  %44 = load i8*, i8** %s2_suffix, align 8, !tbaa !6
  %tobool60 = icmp ne i8* %44, null
  br i1 %tobool60, label %land.lhs.true61, label %if.end75

land.lhs.true61:                                  ; preds = %lor.lhs.false, %cond.end54
  %45 = load i64, i64* %s1_len, align 8, !tbaa !14
  %46 = load i64, i64* %s2_len, align 8, !tbaa !14
  %cmp62 = icmp eq i64 %45, %46
  br i1 %cmp62, label %land.lhs.true64, label %if.end75

land.lhs.true64:                                  ; preds = %land.lhs.true61
  %47 = load i8*, i8** %s1.addr, align 8, !tbaa !6
  %48 = load i8*, i8** %s2.addr, align 8, !tbaa !6
  %49 = load i64, i64* %s1_len, align 8, !tbaa !14
  %call65 = call i32 @strncmp(i8* %47, i8* %48, i64 %49) #22
  %cmp66 = icmp eq i32 0, %call65
  br i1 %cmp66, label %if.then68, label %if.end75

if.then68:                                        ; preds = %land.lhs.true64
  %50 = load i8*, i8** %s1_pos, align 8, !tbaa !6
  %51 = load i8*, i8** %s1.addr, align 8, !tbaa !6
  %sub.ptr.lhs.cast69 = ptrtoint i8* %50 to i64
  %sub.ptr.rhs.cast70 = ptrtoint i8* %51 to i64
  %sub.ptr.sub71 = sub i64 %sub.ptr.lhs.cast69, %sub.ptr.rhs.cast70
  store i64 %sub.ptr.sub71, i64* %s1_len, align 8, !tbaa !14
  %52 = load i8*, i8** %s2_pos, align 8, !tbaa !6
  %53 = load i8*, i8** %s2.addr, align 8, !tbaa !6
  %sub.ptr.lhs.cast72 = ptrtoint i8* %52 to i64
  %sub.ptr.rhs.cast73 = ptrtoint i8* %53 to i64
  %sub.ptr.sub74 = sub i64 %sub.ptr.lhs.cast72, %sub.ptr.rhs.cast73
  store i64 %sub.ptr.sub74, i64* %s2_len, align 8, !tbaa !14
  br label %if.end75

if.end75:                                         ; preds = %if.then68, %land.lhs.true64, %land.lhs.true61, %lor.lhs.false
  %54 = load i8*, i8** %s1.addr, align 8, !tbaa !6
  %55 = load i64, i64* %s1_len, align 8, !tbaa !14
  %56 = load i8*, i8** %s2.addr, align 8, !tbaa !6
  %57 = load i64, i64* %s2_len, align 8, !tbaa !14
  %call76 = call i32 @verrevcmp(i8* %54, i64 %55, i8* %56, i64 %57) #22
  store i32 %call76, i32* %result, align 4, !tbaa !2
  %58 = load i32, i32* %result, align 4, !tbaa !2
  %cmp77 = icmp eq i32 %58, 0
  br i1 %cmp77, label %cond.true79, label %cond.false80

cond.true79:                                      ; preds = %if.end75
  %59 = load i32, i32* %simple_cmp, align 4, !tbaa !2
  br label %cond.end81

cond.false80:                                     ; preds = %if.end75
  %60 = load i32, i32* %result, align 4, !tbaa !2
  br label %cond.end81

cond.end81:                                       ; preds = %cond.false80, %cond.true79
  %cond82 = phi i32 [ %59, %cond.true79 ], [ %60, %cond.false80 ]
  store i32 %cond82, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %cond.end81, %if.then36, %if.then27, %if.then20, %if.then16, %if.then12, %if.then8, %if.then4, %if.then1, %if.then
  %61 = bitcast i32* %simple_cmp to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %61) #13
  %62 = bitcast i32* %result to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %62) #13
  %63 = bitcast i64* %s2_len to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %63) #13
  %64 = bitcast i64* %s1_len to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %64) #13
  %65 = bitcast i8** %s2_suffix to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %65) #13
  %66 = bitcast i8** %s1_suffix to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %66) #13
  %67 = bitcast i8** %s2_pos to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %67) #13
  %68 = bitcast i8** %s1_pos to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %68) #13
  %69 = load i32, i32* %retval, align 4
  ret i32 %69
}

; Function Attrs: nounwind uwtable
define internal i8* @match_suffix(i8** %str) #7 {
entry:
  %str.addr = alloca i8**, align 8
  %match = alloca i8*, align 8
  %read_alpha = alloca i8, align 1
  store i8** %str, i8*** %str.addr, align 8, !tbaa !6
  %0 = bitcast i8** %match to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #13
  store i8* null, i8** %match, align 8, !tbaa !6
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %read_alpha) #13
  store i8 0, i8* %read_alpha, align 1, !tbaa !11
  br label %while.cond

while.cond:                                       ; preds = %if.end22, %entry
  %1 = load i8**, i8*** %str.addr, align 8, !tbaa !6
  %2 = load i8*, i8** %1, align 8, !tbaa !6
  %3 = load i8, i8* %2, align 1, !tbaa !13
  %tobool = icmp ne i8 %3, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %4 = load i8, i8* %read_alpha, align 1, !tbaa !11, !range !25
  %tobool1 = trunc i8 %4 to i1
  br i1 %tobool1, label %if.then, label %if.else

if.then:                                          ; preds = %while.body
  store i8 0, i8* %read_alpha, align 1, !tbaa !11
  %5 = load i8**, i8*** %str.addr, align 8, !tbaa !6
  %6 = load i8*, i8** %5, align 8, !tbaa !6
  %7 = load i8, i8* %6, align 1, !tbaa !13
  %conv = sext i8 %7 to i32
  %call = call zeroext i1 @c_isalpha(i32 %conv)
  br i1 %call, label %if.end, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.then
  %8 = load i8**, i8*** %str.addr, align 8, !tbaa !6
  %9 = load i8*, i8** %8, align 8, !tbaa !6
  %10 = load i8, i8* %9, align 1, !tbaa !13
  %conv2 = sext i8 %10 to i32
  %cmp = icmp ne i32 126, %conv2
  br i1 %cmp, label %if.then4, label %if.end

if.then4:                                         ; preds = %land.lhs.true
  store i8* null, i8** %match, align 8, !tbaa !6
  br label %if.end

if.end:                                           ; preds = %if.then4, %land.lhs.true, %if.then
  br label %if.end22

if.else:                                          ; preds = %while.body
  %11 = load i8**, i8*** %str.addr, align 8, !tbaa !6
  %12 = load i8*, i8** %11, align 8, !tbaa !6
  %13 = load i8, i8* %12, align 1, !tbaa !13
  %conv5 = sext i8 %13 to i32
  %cmp6 = icmp eq i32 46, %conv5
  br i1 %cmp6, label %if.then8, label %if.else12

if.then8:                                         ; preds = %if.else
  store i8 1, i8* %read_alpha, align 1, !tbaa !11
  %14 = load i8*, i8** %match, align 8, !tbaa !6
  %tobool9 = icmp ne i8* %14, null
  br i1 %tobool9, label %if.end11, label %if.then10

if.then10:                                        ; preds = %if.then8
  %15 = load i8**, i8*** %str.addr, align 8, !tbaa !6
  %16 = load i8*, i8** %15, align 8, !tbaa !6
  store i8* %16, i8** %match, align 8, !tbaa !6
  br label %if.end11

if.end11:                                         ; preds = %if.then10, %if.then8
  br label %if.end21

if.else12:                                        ; preds = %if.else
  %17 = load i8**, i8*** %str.addr, align 8, !tbaa !6
  %18 = load i8*, i8** %17, align 8, !tbaa !6
  %19 = load i8, i8* %18, align 1, !tbaa !13
  %conv13 = sext i8 %19 to i32
  %call14 = call zeroext i1 @c_isalnum(i32 %conv13)
  br i1 %call14, label %if.end20, label %land.lhs.true15

land.lhs.true15:                                  ; preds = %if.else12
  %20 = load i8**, i8*** %str.addr, align 8, !tbaa !6
  %21 = load i8*, i8** %20, align 8, !tbaa !6
  %22 = load i8, i8* %21, align 1, !tbaa !13
  %conv16 = sext i8 %22 to i32
  %cmp17 = icmp ne i32 126, %conv16
  br i1 %cmp17, label %if.then19, label %if.end20

if.then19:                                        ; preds = %land.lhs.true15
  store i8* null, i8** %match, align 8, !tbaa !6
  br label %if.end20

if.end20:                                         ; preds = %if.then19, %land.lhs.true15, %if.else12
  br label %if.end21

if.end21:                                         ; preds = %if.end20, %if.end11
  br label %if.end22

if.end22:                                         ; preds = %if.end21, %if.end
  %23 = load i8**, i8*** %str.addr, align 8, !tbaa !6
  %24 = load i8*, i8** %23, align 8, !tbaa !6
  %incdec.ptr = getelementptr inbounds i8, i8* %24, i32 1
  store i8* %incdec.ptr, i8** %23, align 8, !tbaa !6
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %25 = load i8*, i8** %match, align 8, !tbaa !6
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %read_alpha) #13
  %26 = bitcast i8** %match to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %26) #13
  ret i8* %25
}

; Function Attrs: nounwind readonly uwtable
define internal i32 @verrevcmp(i8* %s1, i64 %s1_len, i8* %s2, i64 %s2_len) #9 {
entry:
  %retval = alloca i32, align 4
  %s1.addr = alloca i8*, align 8
  %s1_len.addr = alloca i64, align 8
  %s2.addr = alloca i8*, align 8
  %s2_len.addr = alloca i64, align 8
  %s1_pos = alloca i64, align 8
  %s2_pos = alloca i64, align 8
  %first_diff = alloca i32, align 4
  %s1_c = alloca i32, align 4
  %s2_c = alloca i32, align 4
  %cleanup.dest.slot = alloca i32, align 4
  store i8* %s1, i8** %s1.addr, align 8, !tbaa !6
  store i64 %s1_len, i64* %s1_len.addr, align 8, !tbaa !14
  store i8* %s2, i8** %s2.addr, align 8, !tbaa !6
  store i64 %s2_len, i64* %s2_len.addr, align 8, !tbaa !14
  %0 = bitcast i64* %s1_pos to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #13
  store i64 0, i64* %s1_pos, align 8, !tbaa !14
  %1 = bitcast i64* %s2_pos to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %1) #13
  store i64 0, i64* %s2_pos, align 8, !tbaa !14
  br label %while.cond

while.cond:                                       ; preds = %cleanup.cont81, %entry
  %2 = load i64, i64* %s1_pos, align 8, !tbaa !14
  %3 = load i64, i64* %s1_len.addr, align 8, !tbaa !14
  %cmp = icmp ult i64 %2, %3
  br i1 %cmp, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %while.cond
  %4 = load i64, i64* %s2_pos, align 8, !tbaa !14
  %5 = load i64, i64* %s2_len.addr, align 8, !tbaa !14
  %cmp1 = icmp ult i64 %4, %5
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %while.cond
  %6 = phi i1 [ true, %while.cond ], [ %cmp1, %lor.rhs ]
  br i1 %6, label %while.body, label %while.end82

while.body:                                       ; preds = %lor.end
  %7 = bitcast i32* %first_diff to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %7) #13
  store i32 0, i32* %first_diff, align 4, !tbaa !2
  br label %while.cond2

while.cond2:                                      ; preds = %cleanup.cont, %while.body
  %8 = load i64, i64* %s1_pos, align 8, !tbaa !14
  %9 = load i64, i64* %s1_len.addr, align 8, !tbaa !14
  %cmp3 = icmp ult i64 %8, %9
  br i1 %cmp3, label %land.lhs.true, label %lor.rhs4

land.lhs.true:                                    ; preds = %while.cond2
  %10 = load i8*, i8** %s1.addr, align 8, !tbaa !6
  %11 = load i64, i64* %s1_pos, align 8, !tbaa !14
  %arrayidx = getelementptr inbounds i8, i8* %10, i64 %11
  %12 = load i8, i8* %arrayidx, align 1, !tbaa !13
  %conv = sext i8 %12 to i32
  %call = call zeroext i1 @c_isdigit(i32 %conv)
  br i1 %call, label %lor.rhs4, label %lor.end10

lor.rhs4:                                         ; preds = %land.lhs.true, %while.cond2
  %13 = load i64, i64* %s2_pos, align 8, !tbaa !14
  %14 = load i64, i64* %s2_len.addr, align 8, !tbaa !14
  %cmp5 = icmp ult i64 %13, %14
  br i1 %cmp5, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %lor.rhs4
  %15 = load i8*, i8** %s2.addr, align 8, !tbaa !6
  %16 = load i64, i64* %s2_pos, align 8, !tbaa !14
  %arrayidx7 = getelementptr inbounds i8, i8* %15, i64 %16
  %17 = load i8, i8* %arrayidx7, align 1, !tbaa !13
  %conv8 = sext i8 %17 to i32
  %call9 = call zeroext i1 @c_isdigit(i32 %conv8)
  %lnot = xor i1 %call9, true
  br label %land.end

land.end:                                         ; preds = %land.rhs, %lor.rhs4
  %18 = phi i1 [ false, %lor.rhs4 ], [ %lnot, %land.rhs ]
  br label %lor.end10

lor.end10:                                        ; preds = %land.end, %land.lhs.true
  %19 = phi i1 [ true, %land.lhs.true ], [ %18, %land.end ]
  br i1 %19, label %while.body11, label %while.end

while.body11:                                     ; preds = %lor.end10
  %20 = bitcast i32* %s1_c to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %20) #13
  %21 = load i64, i64* %s1_pos, align 8, !tbaa !14
  %22 = load i64, i64* %s1_len.addr, align 8, !tbaa !14
  %cmp12 = icmp eq i64 %21, %22
  br i1 %cmp12, label %cond.true, label %cond.false

cond.true:                                        ; preds = %while.body11
  br label %cond.end

cond.false:                                       ; preds = %while.body11
  %23 = load i8*, i8** %s1.addr, align 8, !tbaa !6
  %24 = load i64, i64* %s1_pos, align 8, !tbaa !14
  %arrayidx14 = getelementptr inbounds i8, i8* %23, i64 %24
  %25 = load i8, i8* %arrayidx14, align 1, !tbaa !13
  %call15 = call i32 @order(i8 zeroext %25)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ %call15, %cond.false ]
  store i32 %cond, i32* %s1_c, align 4, !tbaa !2
  %26 = bitcast i32* %s2_c to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %26) #13
  %27 = load i64, i64* %s2_pos, align 8, !tbaa !14
  %28 = load i64, i64* %s2_len.addr, align 8, !tbaa !14
  %cmp16 = icmp eq i64 %27, %28
  br i1 %cmp16, label %cond.true18, label %cond.false19

cond.true18:                                      ; preds = %cond.end
  br label %cond.end22

cond.false19:                                     ; preds = %cond.end
  %29 = load i8*, i8** %s2.addr, align 8, !tbaa !6
  %30 = load i64, i64* %s2_pos, align 8, !tbaa !14
  %arrayidx20 = getelementptr inbounds i8, i8* %29, i64 %30
  %31 = load i8, i8* %arrayidx20, align 1, !tbaa !13
  %call21 = call i32 @order(i8 zeroext %31)
  br label %cond.end22

cond.end22:                                       ; preds = %cond.false19, %cond.true18
  %cond23 = phi i32 [ 0, %cond.true18 ], [ %call21, %cond.false19 ]
  store i32 %cond23, i32* %s2_c, align 4, !tbaa !2
  %32 = load i32, i32* %s1_c, align 4, !tbaa !2
  %33 = load i32, i32* %s2_c, align 4, !tbaa !2
  %cmp24 = icmp ne i32 %32, %33
  br i1 %cmp24, label %if.then, label %if.end

if.then:                                          ; preds = %cond.end22
  %34 = load i32, i32* %s1_c, align 4, !tbaa !2
  %35 = load i32, i32* %s2_c, align 4, !tbaa !2
  %sub = sub nsw i32 %34, %35
  store i32 %sub, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %cond.end22
  %36 = load i64, i64* %s1_pos, align 8, !tbaa !14
  %inc = add i64 %36, 1
  store i64 %inc, i64* %s1_pos, align 8, !tbaa !14
  %37 = load i64, i64* %s2_pos, align 8, !tbaa !14
  %inc26 = add i64 %37, 1
  store i64 %inc26, i64* %s2_pos, align 8, !tbaa !14
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end, %if.then
  %38 = bitcast i32* %s2_c to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %38) #13
  %39 = bitcast i32* %s1_c to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %39) #13
  %cleanup.dest = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest, label %cleanup79 [
    i32 0, label %cleanup.cont
  ]

cleanup.cont:                                     ; preds = %cleanup
  br label %while.cond2

while.end:                                        ; preds = %lor.end10
  br label %while.cond28

while.cond28:                                     ; preds = %while.body33, %while.end
  %40 = load i8*, i8** %s1.addr, align 8, !tbaa !6
  %41 = load i64, i64* %s1_pos, align 8, !tbaa !14
  %arrayidx29 = getelementptr inbounds i8, i8* %40, i64 %41
  %42 = load i8, i8* %arrayidx29, align 1, !tbaa !13
  %conv30 = sext i8 %42 to i32
  %cmp31 = icmp eq i32 %conv30, 48
  br i1 %cmp31, label %while.body33, label %while.end35

while.body33:                                     ; preds = %while.cond28
  %43 = load i64, i64* %s1_pos, align 8, !tbaa !14
  %inc34 = add i64 %43, 1
  store i64 %inc34, i64* %s1_pos, align 8, !tbaa !14
  br label %while.cond28

while.end35:                                      ; preds = %while.cond28
  br label %while.cond36

while.cond36:                                     ; preds = %while.body41, %while.end35
  %44 = load i8*, i8** %s2.addr, align 8, !tbaa !6
  %45 = load i64, i64* %s2_pos, align 8, !tbaa !14
  %arrayidx37 = getelementptr inbounds i8, i8* %44, i64 %45
  %46 = load i8, i8* %arrayidx37, align 1, !tbaa !13
  %conv38 = sext i8 %46 to i32
  %cmp39 = icmp eq i32 %conv38, 48
  br i1 %cmp39, label %while.body41, label %while.end43

while.body41:                                     ; preds = %while.cond36
  %47 = load i64, i64* %s2_pos, align 8, !tbaa !14
  %inc42 = add i64 %47, 1
  store i64 %inc42, i64* %s2_pos, align 8, !tbaa !14
  br label %while.cond36

while.end43:                                      ; preds = %while.cond36
  br label %while.cond44

while.cond44:                                     ; preds = %if.end62, %while.end43
  %48 = load i8*, i8** %s1.addr, align 8, !tbaa !6
  %49 = load i64, i64* %s1_pos, align 8, !tbaa !14
  %arrayidx45 = getelementptr inbounds i8, i8* %48, i64 %49
  %50 = load i8, i8* %arrayidx45, align 1, !tbaa !13
  %conv46 = sext i8 %50 to i32
  %call47 = call zeroext i1 @c_isdigit(i32 %conv46)
  br i1 %call47, label %land.rhs49, label %land.end54

land.rhs49:                                       ; preds = %while.cond44
  %51 = load i8*, i8** %s2.addr, align 8, !tbaa !6
  %52 = load i64, i64* %s2_pos, align 8, !tbaa !14
  %arrayidx50 = getelementptr inbounds i8, i8* %51, i64 %52
  %53 = load i8, i8* %arrayidx50, align 1, !tbaa !13
  %conv51 = sext i8 %53 to i32
  %call52 = call zeroext i1 @c_isdigit(i32 %conv51)
  br label %land.end54

land.end54:                                       ; preds = %land.rhs49, %while.cond44
  %54 = phi i1 [ false, %while.cond44 ], [ %call52, %land.rhs49 ]
  br i1 %54, label %while.body55, label %while.end65

while.body55:                                     ; preds = %land.end54
  %55 = load i32, i32* %first_diff, align 4, !tbaa !2
  %tobool = icmp ne i32 %55, 0
  br i1 %tobool, label %if.end62, label %if.then56

if.then56:                                        ; preds = %while.body55
  %56 = load i8*, i8** %s1.addr, align 8, !tbaa !6
  %57 = load i64, i64* %s1_pos, align 8, !tbaa !14
  %arrayidx57 = getelementptr inbounds i8, i8* %56, i64 %57
  %58 = load i8, i8* %arrayidx57, align 1, !tbaa !13
  %conv58 = sext i8 %58 to i32
  %59 = load i8*, i8** %s2.addr, align 8, !tbaa !6
  %60 = load i64, i64* %s2_pos, align 8, !tbaa !14
  %arrayidx59 = getelementptr inbounds i8, i8* %59, i64 %60
  %61 = load i8, i8* %arrayidx59, align 1, !tbaa !13
  %conv60 = sext i8 %61 to i32
  %sub61 = sub nsw i32 %conv58, %conv60
  store i32 %sub61, i32* %first_diff, align 4, !tbaa !2
  br label %if.end62

if.end62:                                         ; preds = %if.then56, %while.body55
  %62 = load i64, i64* %s1_pos, align 8, !tbaa !14
  %inc63 = add i64 %62, 1
  store i64 %inc63, i64* %s1_pos, align 8, !tbaa !14
  %63 = load i64, i64* %s2_pos, align 8, !tbaa !14
  %inc64 = add i64 %63, 1
  store i64 %inc64, i64* %s2_pos, align 8, !tbaa !14
  br label %while.cond44

while.end65:                                      ; preds = %land.end54
  %64 = load i8*, i8** %s1.addr, align 8, !tbaa !6
  %65 = load i64, i64* %s1_pos, align 8, !tbaa !14
  %arrayidx66 = getelementptr inbounds i8, i8* %64, i64 %65
  %66 = load i8, i8* %arrayidx66, align 1, !tbaa !13
  %conv67 = sext i8 %66 to i32
  %call68 = call zeroext i1 @c_isdigit(i32 %conv67)
  br i1 %call68, label %if.then69, label %if.end70

if.then69:                                        ; preds = %while.end65
  store i32 1, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup79

if.end70:                                         ; preds = %while.end65
  %67 = load i8*, i8** %s2.addr, align 8, !tbaa !6
  %68 = load i64, i64* %s2_pos, align 8, !tbaa !14
  %arrayidx71 = getelementptr inbounds i8, i8* %67, i64 %68
  %69 = load i8, i8* %arrayidx71, align 1, !tbaa !13
  %conv72 = sext i8 %69 to i32
  %call73 = call zeroext i1 @c_isdigit(i32 %conv72)
  br i1 %call73, label %if.then74, label %if.end75

if.then74:                                        ; preds = %if.end70
  store i32 -1, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup79

if.end75:                                         ; preds = %if.end70
  %70 = load i32, i32* %first_diff, align 4, !tbaa !2
  %tobool76 = icmp ne i32 %70, 0
  br i1 %tobool76, label %if.then77, label %if.end78

if.then77:                                        ; preds = %if.end75
  %71 = load i32, i32* %first_diff, align 4, !tbaa !2
  store i32 %71, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup79

if.end78:                                         ; preds = %if.end75
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup79

cleanup79:                                        ; preds = %if.end78, %if.then77, %if.then74, %if.then69, %cleanup
  %72 = bitcast i32* %first_diff to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %72) #13
  %cleanup.dest80 = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest80, label %cleanup83 [
    i32 0, label %cleanup.cont81
  ]

cleanup.cont81:                                   ; preds = %cleanup79
  br label %while.cond

while.end82:                                      ; preds = %lor.end
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup83

cleanup83:                                        ; preds = %while.end82, %cleanup79
  %73 = bitcast i64* %s2_pos to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %73) #13
  %74 = bitcast i64* %s1_pos to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %74) #13
  %75 = load i32, i32* %retval, align 4
  ret i32 %75
}

; Function Attrs: nounwind uwtable
define internal i32 @order(i8 zeroext %c) #7 {
entry:
  %retval = alloca i32, align 4
  %c.addr = alloca i8, align 1
  store i8 %c, i8* %c.addr, align 1, !tbaa !13
  %0 = load i8, i8* %c.addr, align 1, !tbaa !13
  %conv = zext i8 %0 to i32
  %call = call zeroext i1 @c_isdigit(i32 %conv)
  br i1 %call, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4
  br label %return

if.else:                                          ; preds = %entry
  %1 = load i8, i8* %c.addr, align 1, !tbaa !13
  %conv1 = zext i8 %1 to i32
  %call2 = call zeroext i1 @c_isalpha(i32 %conv1)
  br i1 %call2, label %if.then3, label %if.else5

if.then3:                                         ; preds = %if.else
  %2 = load i8, i8* %c.addr, align 1, !tbaa !13
  %conv4 = zext i8 %2 to i32
  store i32 %conv4, i32* %retval, align 4
  br label %return

if.else5:                                         ; preds = %if.else
  %3 = load i8, i8* %c.addr, align 1, !tbaa !13
  %conv6 = zext i8 %3 to i32
  %cmp = icmp eq i32 %conv6, 126
  br i1 %cmp, label %if.then8, label %if.else9

if.then8:                                         ; preds = %if.else5
  store i32 -1, i32* %retval, align 4
  br label %return

if.else9:                                         ; preds = %if.else5
  %4 = load i8, i8* %c.addr, align 1, !tbaa !13
  %conv10 = zext i8 %4 to i32
  %add = add nsw i32 %conv10, 255
  %add11 = add nsw i32 %add, 1
  store i32 %add11, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.else9, %if.then8, %if.then3, %if.then
  %5 = load i32, i32* %retval, align 4
  ret i32 %5
}

; Function Attrs: nounwind uwtable
define dso_local zeroext i1 @hard_locale(i32 %category) #7 {
entry:
  %retval = alloca i1, align 1
  %category.addr = alloca i32, align 4
  %locale = alloca [257 x i8], align 16
  %cleanup.dest.slot = alloca i32, align 4
  store i32 %category, i32* %category.addr, align 4, !tbaa !2
  %0 = bitcast [257 x i8]* %locale to i8*
  call void @llvm.lifetime.start.p0i8(i64 257, i8* %0) #13
  %1 = load i32, i32* %category.addr, align 4, !tbaa !2
  %arraydecay = getelementptr inbounds [257 x i8], [257 x i8]* %locale, i64 0, i64 0
  %call = call i32 @setlocale_null_r(i32 %1, i8* %arraydecay, i64 257)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i1 false, i1* %retval, align 1
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %entry
  %arraydecay1 = getelementptr inbounds [257 x i8], [257 x i8]* %locale, i64 0, i64 0
  %call2 = call i32 @strcmp(i8* %arraydecay1, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.209, i64 0, i64 0)) #22
  %cmp = icmp eq i32 %call2, 0
  br i1 %cmp, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %if.end
  %arraydecay3 = getelementptr inbounds [257 x i8], [257 x i8]* %locale, i64 0, i64 0
  %call4 = call i32 @strcmp(i8* %arraydecay3, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1.210, i64 0, i64 0)) #22
  %cmp5 = icmp eq i32 %call4, 0
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %if.end
  %2 = phi i1 [ true, %if.end ], [ %cmp5, %lor.rhs ]
  %lnot = xor i1 %2, true
  store i1 %lnot, i1* %retval, align 1
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %lor.end, %if.then
  %3 = bitcast [257 x i8]* %locale to i8*
  call void @llvm.lifetime.end.p0i8(i64 257, i8* %3) #13
  %4 = load i1, i1* %retval, align 1
  ret i1 %4
}

; Function Attrs: nounwind readonly uwtable
define dso_local i64 @hash_get_n_buckets(%struct.hash_table* %table) #9 {
entry:
  %table.addr = alloca %struct.hash_table*, align 8
  store %struct.hash_table* %table, %struct.hash_table** %table.addr, align 8, !tbaa !6
  %0 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !tbaa !6
  %n_buckets = getelementptr inbounds %struct.hash_table, %struct.hash_table* %0, i32 0, i32 2
  %1 = load i64, i64* %n_buckets, align 8, !tbaa !119
  ret i64 %1
}

; Function Attrs: nounwind readonly uwtable
define dso_local i64 @hash_get_n_buckets_used(%struct.hash_table* %table) #9 {
entry:
  %table.addr = alloca %struct.hash_table*, align 8
  store %struct.hash_table* %table, %struct.hash_table** %table.addr, align 8, !tbaa !6
  %0 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !tbaa !6
  %n_buckets_used = getelementptr inbounds %struct.hash_table, %struct.hash_table* %0, i32 0, i32 3
  %1 = load i64, i64* %n_buckets_used, align 8, !tbaa !121
  ret i64 %1
}

; Function Attrs: nounwind readonly uwtable
define dso_local i64 @hash_get_n_entries(%struct.hash_table* %table) #9 {
entry:
  %table.addr = alloca %struct.hash_table*, align 8
  store %struct.hash_table* %table, %struct.hash_table** %table.addr, align 8, !tbaa !6
  %0 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !tbaa !6
  %n_entries = getelementptr inbounds %struct.hash_table, %struct.hash_table* %0, i32 0, i32 4
  %1 = load i64, i64* %n_entries, align 8, !tbaa !122
  ret i64 %1
}

; Function Attrs: nounwind readonly uwtable
define dso_local i64 @hash_get_max_bucket_length(%struct.hash_table* %table) #9 {
entry:
  %table.addr = alloca %struct.hash_table*, align 8
  %bucket = alloca %struct.hash_entry*, align 8
  %max_bucket_length = alloca i64, align 8
  %cursor = alloca %struct.hash_entry*, align 8
  %bucket_length = alloca i64, align 8
  store %struct.hash_table* %table, %struct.hash_table** %table.addr, align 8, !tbaa !6
  %0 = bitcast %struct.hash_entry** %bucket to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #13
  %1 = bitcast i64* %max_bucket_length to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %1) #13
  store i64 0, i64* %max_bucket_length, align 8, !tbaa !14
  %2 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !tbaa !6
  %bucket1 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %2, i32 0, i32 0
  %3 = load %struct.hash_entry*, %struct.hash_entry** %bucket1, align 8, !tbaa !123
  store %struct.hash_entry* %3, %struct.hash_entry** %bucket, align 8, !tbaa !6
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !tbaa !6
  %5 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !tbaa !6
  %bucket_limit = getelementptr inbounds %struct.hash_table, %struct.hash_table* %5, i32 0, i32 1
  %6 = load %struct.hash_entry*, %struct.hash_entry** %bucket_limit, align 8, !tbaa !124
  %cmp = icmp ult %struct.hash_entry* %4, %6
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !tbaa !6
  %data = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %7, i32 0, i32 0
  %8 = load i8*, i8** %data, align 8, !tbaa !125
  %tobool = icmp ne i8* %8, null
  br i1 %tobool, label %if.then, label %if.end5

if.then:                                          ; preds = %for.body
  %9 = bitcast %struct.hash_entry** %cursor to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %9) #13
  %10 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !tbaa !6
  store %struct.hash_entry* %10, %struct.hash_entry** %cursor, align 8, !tbaa !6
  %11 = bitcast i64* %bucket_length to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %11) #13
  store i64 1, i64* %bucket_length, align 8, !tbaa !14
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then
  %12 = load %struct.hash_entry*, %struct.hash_entry** %cursor, align 8, !tbaa !6
  %next = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %12, i32 0, i32 1
  %13 = load %struct.hash_entry*, %struct.hash_entry** %next, align 8, !tbaa !127
  store %struct.hash_entry* %13, %struct.hash_entry** %cursor, align 8, !tbaa !6
  %14 = load %struct.hash_entry*, %struct.hash_entry** %cursor, align 8, !tbaa !6
  %tobool2 = icmp ne %struct.hash_entry* %14, null
  br i1 %tobool2, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %15 = load i64, i64* %bucket_length, align 8, !tbaa !14
  %inc = add i64 %15, 1
  store i64 %inc, i64* %bucket_length, align 8, !tbaa !14
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %16 = load i64, i64* %bucket_length, align 8, !tbaa !14
  %17 = load i64, i64* %max_bucket_length, align 8, !tbaa !14
  %cmp3 = icmp ugt i64 %16, %17
  br i1 %cmp3, label %if.then4, label %if.end

if.then4:                                         ; preds = %while.end
  %18 = load i64, i64* %bucket_length, align 8, !tbaa !14
  store i64 %18, i64* %max_bucket_length, align 8, !tbaa !14
  br label %if.end

if.end:                                           ; preds = %if.then4, %while.end
  %19 = bitcast i64* %bucket_length to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %19) #13
  %20 = bitcast %struct.hash_entry** %cursor to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %20) #13
  br label %if.end5

if.end5:                                          ; preds = %if.end, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end5
  %21 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !tbaa !6
  %incdec.ptr = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %21, i32 1
  store %struct.hash_entry* %incdec.ptr, %struct.hash_entry** %bucket, align 8, !tbaa !6
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %22 = load i64, i64* %max_bucket_length, align 8, !tbaa !14
  %23 = bitcast i64* %max_bucket_length to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %23) #13
  %24 = bitcast %struct.hash_entry** %bucket to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %24) #13
  ret i64 %22
}

; Function Attrs: nounwind readonly uwtable
define dso_local zeroext i1 @hash_table_ok(%struct.hash_table* %table) #9 {
entry:
  %retval = alloca i1, align 1
  %table.addr = alloca %struct.hash_table*, align 8
  %bucket = alloca %struct.hash_entry*, align 8
  %n_buckets_used = alloca i64, align 8
  %n_entries = alloca i64, align 8
  %cursor = alloca %struct.hash_entry*, align 8
  %cleanup.dest.slot = alloca i32, align 4
  store %struct.hash_table* %table, %struct.hash_table** %table.addr, align 8, !tbaa !6
  %0 = bitcast %struct.hash_entry** %bucket to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #13
  %1 = bitcast i64* %n_buckets_used to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %1) #13
  store i64 0, i64* %n_buckets_used, align 8, !tbaa !14
  %2 = bitcast i64* %n_entries to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %2) #13
  store i64 0, i64* %n_entries, align 8, !tbaa !14
  %3 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !tbaa !6
  %bucket1 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %3, i32 0, i32 0
  %4 = load %struct.hash_entry*, %struct.hash_entry** %bucket1, align 8, !tbaa !123
  store %struct.hash_entry* %4, %struct.hash_entry** %bucket, align 8, !tbaa !6
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %5 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !tbaa !6
  %6 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !tbaa !6
  %bucket_limit = getelementptr inbounds %struct.hash_table, %struct.hash_table* %6, i32 0, i32 1
  %7 = load %struct.hash_entry*, %struct.hash_entry** %bucket_limit, align 8, !tbaa !124
  %cmp = icmp ult %struct.hash_entry* %5, %7
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %8 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !tbaa !6
  %data = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %8, i32 0, i32 0
  %9 = load i8*, i8** %data, align 8, !tbaa !125
  %tobool = icmp ne i8* %9, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %10 = bitcast %struct.hash_entry** %cursor to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %10) #13
  %11 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !tbaa !6
  store %struct.hash_entry* %11, %struct.hash_entry** %cursor, align 8, !tbaa !6
  %12 = load i64, i64* %n_buckets_used, align 8, !tbaa !14
  %inc = add i64 %12, 1
  store i64 %inc, i64* %n_buckets_used, align 8, !tbaa !14
  %13 = load i64, i64* %n_entries, align 8, !tbaa !14
  %inc2 = add i64 %13, 1
  store i64 %inc2, i64* %n_entries, align 8, !tbaa !14
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then
  %14 = load %struct.hash_entry*, %struct.hash_entry** %cursor, align 8, !tbaa !6
  %next = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %14, i32 0, i32 1
  %15 = load %struct.hash_entry*, %struct.hash_entry** %next, align 8, !tbaa !127
  store %struct.hash_entry* %15, %struct.hash_entry** %cursor, align 8, !tbaa !6
  %16 = load %struct.hash_entry*, %struct.hash_entry** %cursor, align 8, !tbaa !6
  %tobool3 = icmp ne %struct.hash_entry* %16, null
  br i1 %tobool3, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %17 = load i64, i64* %n_entries, align 8, !tbaa !14
  %inc4 = add i64 %17, 1
  store i64 %inc4, i64* %n_entries, align 8, !tbaa !14
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %18 = bitcast %struct.hash_entry** %cursor to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %18) #13
  br label %if.end

if.end:                                           ; preds = %while.end, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %19 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !tbaa !6
  %incdec.ptr = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %19, i32 1
  store %struct.hash_entry* %incdec.ptr, %struct.hash_entry** %bucket, align 8, !tbaa !6
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %20 = load i64, i64* %n_buckets_used, align 8, !tbaa !14
  %21 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !tbaa !6
  %n_buckets_used5 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %21, i32 0, i32 3
  %22 = load i64, i64* %n_buckets_used5, align 8, !tbaa !121
  %cmp6 = icmp eq i64 %20, %22
  br i1 %cmp6, label %land.lhs.true, label %if.end10

land.lhs.true:                                    ; preds = %for.end
  %23 = load i64, i64* %n_entries, align 8, !tbaa !14
  %24 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !tbaa !6
  %n_entries7 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %24, i32 0, i32 4
  %25 = load i64, i64* %n_entries7, align 8, !tbaa !122
  %cmp8 = icmp eq i64 %23, %25
  br i1 %cmp8, label %if.then9, label %if.end10

if.then9:                                         ; preds = %land.lhs.true
  store i1 true, i1* %retval, align 1
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end10:                                         ; preds = %land.lhs.true, %for.end
  store i1 false, i1* %retval, align 1
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end10, %if.then9
  %26 = bitcast i64* %n_entries to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %26) #13
  %27 = bitcast i64* %n_buckets_used to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %27) #13
  %28 = bitcast %struct.hash_entry** %bucket to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %28) #13
  %29 = load i1, i1* %retval, align 1
  ret i1 %29
}

; Function Attrs: nounwind uwtable
define dso_local void @hash_print_statistics(%struct.hash_table* %table, %struct._IO_FILE* %stream) #7 {
entry:
  %table.addr = alloca %struct.hash_table*, align 8
  %stream.addr = alloca %struct._IO_FILE*, align 8
  %n_entries = alloca i64, align 8
  %n_buckets = alloca i64, align 8
  %n_buckets_used = alloca i64, align 8
  %max_bucket_length = alloca i64, align 8
  store %struct.hash_table* %table, %struct.hash_table** %table.addr, align 8, !tbaa !6
  store %struct._IO_FILE* %stream, %struct._IO_FILE** %stream.addr, align 8, !tbaa !6
  %0 = bitcast i64* %n_entries to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #13
  %1 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !tbaa !6
  %call = call i64 @hash_get_n_entries(%struct.hash_table* %1) #22
  store i64 %call, i64* %n_entries, align 8, !tbaa !14
  %2 = bitcast i64* %n_buckets to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %2) #13
  %3 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !tbaa !6
  %call1 = call i64 @hash_get_n_buckets(%struct.hash_table* %3) #22
  store i64 %call1, i64* %n_buckets, align 8, !tbaa !14
  %4 = bitcast i64* %n_buckets_used to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %4) #13
  %5 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !tbaa !6
  %call2 = call i64 @hash_get_n_buckets_used(%struct.hash_table* %5) #22
  store i64 %call2, i64* %n_buckets_used, align 8, !tbaa !14
  %6 = bitcast i64* %max_bucket_length to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %6) #13
  %7 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !tbaa !6
  %call3 = call i64 @hash_get_max_bucket_length(%struct.hash_table* %7) #22
  store i64 %call3, i64* %max_bucket_length, align 8, !tbaa !14
  %8 = load %struct._IO_FILE*, %struct._IO_FILE** %stream.addr, align 8, !tbaa !6
  %9 = load i64, i64* %n_entries, align 8, !tbaa !14
  %call4 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %8, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.211, i64 0, i64 0), i64 %9)
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** %stream.addr, align 8, !tbaa !6
  %11 = load i64, i64* %n_buckets, align 8, !tbaa !14
  %call5 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %10, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.1.212, i64 0, i64 0), i64 %11)
  %12 = load %struct._IO_FILE*, %struct._IO_FILE** %stream.addr, align 8, !tbaa !6
  %13 = load i64, i64* %n_buckets_used, align 8, !tbaa !14
  %14 = load i64, i64* %n_buckets_used, align 8, !tbaa !14
  %conv = uitofp i64 %14 to double
  %mul = fmul double 1.000000e+02, %conv
  %15 = load i64, i64* %n_buckets, align 8, !tbaa !14
  %conv6 = uitofp i64 %15 to double
  %div = fdiv double %mul, %conv6
  %call7 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %12, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.2.213, i64 0, i64 0), i64 %13, double %div)
  %16 = load %struct._IO_FILE*, %struct._IO_FILE** %stream.addr, align 8, !tbaa !6
  %17 = load i64, i64* %max_bucket_length, align 8, !tbaa !14
  %call8 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %16, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.3.214, i64 0, i64 0), i64 %17)
  %18 = bitcast i64* %max_bucket_length to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %18) #13
  %19 = bitcast i64* %n_buckets_used to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %19) #13
  %20 = bitcast i64* %n_buckets to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %20) #13
  %21 = bitcast i64* %n_entries to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %21) #13
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i8* @hash_lookup(%struct.hash_table* %table, i8* %entry1) #7 {
entry:
  %retval = alloca i8*, align 8
  %table.addr = alloca %struct.hash_table*, align 8
  %entry.addr = alloca i8*, align 8
  %bucket = alloca %struct.hash_entry*, align 8
  %cursor = alloca %struct.hash_entry*, align 8
  %cleanup.dest.slot = alloca i32, align 4
  store %struct.hash_table* %table, %struct.hash_table** %table.addr, align 8, !tbaa !6
  store i8* %entry1, i8** %entry.addr, align 8, !tbaa !6
  %0 = bitcast %struct.hash_entry** %bucket to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #13
  %1 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !tbaa !6
  %2 = load i8*, i8** %entry.addr, align 8, !tbaa !6
  %call = call %struct.hash_entry* @safe_hasher(%struct.hash_table* %1, i8* %2)
  store %struct.hash_entry* %call, %struct.hash_entry** %bucket, align 8, !tbaa !6
  %3 = bitcast %struct.hash_entry** %cursor to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %3) #13
  %4 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !tbaa !6
  %data = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %4, i32 0, i32 0
  %5 = load i8*, i8** %data, align 8, !tbaa !125
  %cmp = icmp eq i8* %5, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i8* null, i8** %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %entry
  %6 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !tbaa !6
  store %struct.hash_entry* %6, %struct.hash_entry** %cursor, align 8, !tbaa !6
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %7 = load %struct.hash_entry*, %struct.hash_entry** %cursor, align 8, !tbaa !6
  %tobool = icmp ne %struct.hash_entry* %7, null
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %8 = load i8*, i8** %entry.addr, align 8, !tbaa !6
  %9 = load %struct.hash_entry*, %struct.hash_entry** %cursor, align 8, !tbaa !6
  %data2 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %9, i32 0, i32 0
  %10 = load i8*, i8** %data2, align 8, !tbaa !125
  %cmp3 = icmp eq i8* %8, %10
  br i1 %cmp3, label %if.then6, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.body
  %11 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !tbaa !6
  %comparator = getelementptr inbounds %struct.hash_table, %struct.hash_table* %11, i32 0, i32 7
  %12 = load i1 (i8*, i8*)*, i1 (i8*, i8*)** %comparator, align 8, !tbaa !128
  %13 = load i8*, i8** %entry.addr, align 8, !tbaa !6
  %14 = load %struct.hash_entry*, %struct.hash_entry** %cursor, align 8, !tbaa !6
  %data4 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %14, i32 0, i32 0
  %15 = load i8*, i8** %data4, align 8, !tbaa !125
  %call5 = call zeroext i1 %12(i8* %13, i8* %15)
  br i1 %call5, label %if.then6, label %if.end8

if.then6:                                         ; preds = %lor.lhs.false, %for.body
  %16 = load %struct.hash_entry*, %struct.hash_entry** %cursor, align 8, !tbaa !6
  %data7 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %16, i32 0, i32 0
  %17 = load i8*, i8** %data7, align 8, !tbaa !125
  store i8* %17, i8** %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end8:                                          ; preds = %lor.lhs.false
  br label %for.inc

for.inc:                                          ; preds = %if.end8
  %18 = load %struct.hash_entry*, %struct.hash_entry** %cursor, align 8, !tbaa !6
  %next = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %18, i32 0, i32 1
  %19 = load %struct.hash_entry*, %struct.hash_entry** %next, align 8, !tbaa !127
  store %struct.hash_entry* %19, %struct.hash_entry** %cursor, align 8, !tbaa !6
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i8* null, i8** %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %for.end, %if.then6, %if.then
  %20 = bitcast %struct.hash_entry** %cursor to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %20) #13
  %21 = bitcast %struct.hash_entry** %bucket to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %21) #13
  %22 = load i8*, i8** %retval, align 8
  ret i8* %22
}

; Function Attrs: nounwind uwtable
define internal %struct.hash_entry* @safe_hasher(%struct.hash_table* %table, i8* %key) #7 {
entry:
  %table.addr = alloca %struct.hash_table*, align 8
  %key.addr = alloca i8*, align 8
  %n = alloca i64, align 8
  store %struct.hash_table* %table, %struct.hash_table** %table.addr, align 8, !tbaa !6
  store i8* %key, i8** %key.addr, align 8, !tbaa !6
  %0 = bitcast i64* %n to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #13
  %1 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !tbaa !6
  %hasher = getelementptr inbounds %struct.hash_table, %struct.hash_table* %1, i32 0, i32 6
  %2 = load i64 (i8*, i64)*, i64 (i8*, i64)** %hasher, align 8, !tbaa !129
  %3 = load i8*, i8** %key.addr, align 8, !tbaa !6
  %4 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !tbaa !6
  %n_buckets = getelementptr inbounds %struct.hash_table, %struct.hash_table* %4, i32 0, i32 2
  %5 = load i64, i64* %n_buckets, align 8, !tbaa !119
  %call = call i64 %2(i8* %3, i64 %5)
  store i64 %call, i64* %n, align 8, !tbaa !14
  %6 = load i64, i64* %n, align 8, !tbaa !14
  %7 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !tbaa !6
  %n_buckets1 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %7, i32 0, i32 2
  %8 = load i64, i64* %n_buckets1, align 8, !tbaa !119
  %cmp = icmp ult i64 %6, %8
  br i1 %cmp, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  call void @abort() #21
  unreachable

if.end:                                           ; preds = %entry
  %9 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !tbaa !6
  %bucket = getelementptr inbounds %struct.hash_table, %struct.hash_table* %9, i32 0, i32 0
  %10 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !tbaa !123
  %11 = load i64, i64* %n, align 8, !tbaa !14
  %add.ptr = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %10, i64 %11
  %12 = bitcast i64* %n to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %12) #13
  ret %struct.hash_entry* %add.ptr
}

; Function Attrs: noreturn nounwind
declare dso_local void @abort() #3

; Function Attrs: nounwind readonly uwtable
define dso_local i8* @hash_get_first(%struct.hash_table* %table) #9 {
entry:
  %retval = alloca i8*, align 8
  %table.addr = alloca %struct.hash_table*, align 8
  %bucket = alloca %struct.hash_entry*, align 8
  %cleanup.dest.slot = alloca i32, align 4
  store %struct.hash_table* %table, %struct.hash_table** %table.addr, align 8, !tbaa !6
  %0 = bitcast %struct.hash_entry** %bucket to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #13
  %1 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !tbaa !6
  %n_entries = getelementptr inbounds %struct.hash_table, %struct.hash_table* %1, i32 0, i32 4
  %2 = load i64, i64* %n_entries, align 8, !tbaa !122
  %cmp = icmp eq i64 %2, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i8* null, i8** %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %entry
  %3 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !tbaa !6
  %bucket1 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %3, i32 0, i32 0
  %4 = load %struct.hash_entry*, %struct.hash_entry** %bucket1, align 8, !tbaa !123
  store %struct.hash_entry* %4, %struct.hash_entry** %bucket, align 8, !tbaa !6
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %5 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !tbaa !6
  %6 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !tbaa !6
  %bucket_limit = getelementptr inbounds %struct.hash_table, %struct.hash_table* %6, i32 0, i32 1
  %7 = load %struct.hash_entry*, %struct.hash_entry** %bucket_limit, align 8, !tbaa !124
  %cmp2 = icmp ult %struct.hash_entry* %5, %7
  br i1 %cmp2, label %if.else, label %if.then3

if.then3:                                         ; preds = %for.cond
  call void @abort() #21
  unreachable

if.else:                                          ; preds = %for.cond
  %8 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !tbaa !6
  %data = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %8, i32 0, i32 0
  %9 = load i8*, i8** %data, align 8, !tbaa !125
  %tobool = icmp ne i8* %9, null
  br i1 %tobool, label %if.then4, label %if.end6

if.then4:                                         ; preds = %if.else
  %10 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !tbaa !6
  %data5 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %10, i32 0, i32 0
  %11 = load i8*, i8** %data5, align 8, !tbaa !125
  store i8* %11, i8** %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end6:                                          ; preds = %if.else
  br label %if.end7

if.end7:                                          ; preds = %if.end6
  br label %for.inc

for.inc:                                          ; preds = %if.end7
  %12 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !tbaa !6
  %incdec.ptr = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %12, i32 1
  store %struct.hash_entry* %incdec.ptr, %struct.hash_entry** %bucket, align 8, !tbaa !6
  br label %for.cond

cleanup:                                          ; preds = %if.then4, %if.then
  %13 = bitcast %struct.hash_entry** %bucket to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %13) #13
  %14 = load i8*, i8** %retval, align 8
  ret i8* %14
}

; Function Attrs: nounwind uwtable
define dso_local i8* @hash_get_next(%struct.hash_table* %table, i8* %entry1) #7 {
entry:
  %retval = alloca i8*, align 8
  %table.addr = alloca %struct.hash_table*, align 8
  %entry.addr = alloca i8*, align 8
  %bucket = alloca %struct.hash_entry*, align 8
  %cursor = alloca %struct.hash_entry*, align 8
  %cleanup.dest.slot = alloca i32, align 4
  store %struct.hash_table* %table, %struct.hash_table** %table.addr, align 8, !tbaa !6
  store i8* %entry1, i8** %entry.addr, align 8, !tbaa !6
  %0 = bitcast %struct.hash_entry** %bucket to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #13
  %1 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !tbaa !6
  %2 = load i8*, i8** %entry.addr, align 8, !tbaa !6
  %call = call %struct.hash_entry* @safe_hasher(%struct.hash_table* %1, i8* %2)
  store %struct.hash_entry* %call, %struct.hash_entry** %bucket, align 8, !tbaa !6
  %3 = bitcast %struct.hash_entry** %cursor to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %3) #13
  %4 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !tbaa !6
  store %struct.hash_entry* %4, %struct.hash_entry** %cursor, align 8, !tbaa !6
  br label %do.body

do.body:                                          ; preds = %do.cond, %entry
  %5 = load %struct.hash_entry*, %struct.hash_entry** %cursor, align 8, !tbaa !6
  %data = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %5, i32 0, i32 0
  %6 = load i8*, i8** %data, align 8, !tbaa !125
  %7 = load i8*, i8** %entry.addr, align 8, !tbaa !6
  %cmp = icmp eq i8* %6, %7
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %do.body
  %8 = load %struct.hash_entry*, %struct.hash_entry** %cursor, align 8, !tbaa !6
  %next = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %8, i32 0, i32 1
  %9 = load %struct.hash_entry*, %struct.hash_entry** %next, align 8, !tbaa !127
  %tobool = icmp ne %struct.hash_entry* %9, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %10 = load %struct.hash_entry*, %struct.hash_entry** %cursor, align 8, !tbaa !6
  %next2 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %10, i32 0, i32 1
  %11 = load %struct.hash_entry*, %struct.hash_entry** %next2, align 8, !tbaa !127
  %data3 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %11, i32 0, i32 0
  %12 = load i8*, i8** %data3, align 8, !tbaa !125
  store i8* %12, i8** %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %land.lhs.true, %do.body
  %13 = load %struct.hash_entry*, %struct.hash_entry** %cursor, align 8, !tbaa !6
  %next4 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %13, i32 0, i32 1
  %14 = load %struct.hash_entry*, %struct.hash_entry** %next4, align 8, !tbaa !127
  store %struct.hash_entry* %14, %struct.hash_entry** %cursor, align 8, !tbaa !6
  br label %do.cond

do.cond:                                          ; preds = %if.end
  %15 = load %struct.hash_entry*, %struct.hash_entry** %cursor, align 8, !tbaa !6
  %cmp5 = icmp ne %struct.hash_entry* %15, null
  br i1 %cmp5, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  br label %while.cond

while.cond:                                       ; preds = %if.end11, %do.end
  %16 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !tbaa !6
  %incdec.ptr = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %16, i32 1
  store %struct.hash_entry* %incdec.ptr, %struct.hash_entry** %bucket, align 8, !tbaa !6
  %17 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !tbaa !6
  %bucket_limit = getelementptr inbounds %struct.hash_table, %struct.hash_table* %17, i32 0, i32 1
  %18 = load %struct.hash_entry*, %struct.hash_entry** %bucket_limit, align 8, !tbaa !124
  %cmp6 = icmp ult %struct.hash_entry* %incdec.ptr, %18
  br i1 %cmp6, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %19 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !tbaa !6
  %data7 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %19, i32 0, i32 0
  %20 = load i8*, i8** %data7, align 8, !tbaa !125
  %tobool8 = icmp ne i8* %20, null
  br i1 %tobool8, label %if.then9, label %if.end11

if.then9:                                         ; preds = %while.body
  %21 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !tbaa !6
  %data10 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %21, i32 0, i32 0
  %22 = load i8*, i8** %data10, align 8, !tbaa !125
  store i8* %22, i8** %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end11:                                         ; preds = %while.body
  br label %while.cond

while.end:                                        ; preds = %while.cond
  store i8* null, i8** %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %while.end, %if.then9, %if.then
  %23 = bitcast %struct.hash_entry** %cursor to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %23) #13
  %24 = bitcast %struct.hash_entry** %bucket to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %24) #13
  %25 = load i8*, i8** %retval, align 8
  ret i8* %25
}

; Function Attrs: nounwind uwtable
define dso_local i64 @hash_get_entries(%struct.hash_table* %table, i8** %buffer, i64 %buffer_size) #7 {
entry:
  %retval = alloca i64, align 8
  %table.addr = alloca %struct.hash_table*, align 8
  %buffer.addr = alloca i8**, align 8
  %buffer_size.addr = alloca i64, align 8
  %counter = alloca i64, align 8
  %bucket = alloca %struct.hash_entry*, align 8
  %cursor = alloca %struct.hash_entry*, align 8
  %cleanup.dest.slot = alloca i32, align 4
  store %struct.hash_table* %table, %struct.hash_table** %table.addr, align 8, !tbaa !6
  store i8** %buffer, i8*** %buffer.addr, align 8, !tbaa !6
  store i64 %buffer_size, i64* %buffer_size.addr, align 8, !tbaa !14
  %0 = bitcast i64* %counter to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #13
  store i64 0, i64* %counter, align 8, !tbaa !14
  %1 = bitcast %struct.hash_entry** %bucket to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %1) #13
  %2 = bitcast %struct.hash_entry** %cursor to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %2) #13
  %3 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !tbaa !6
  %bucket1 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %3, i32 0, i32 0
  %4 = load %struct.hash_entry*, %struct.hash_entry** %bucket1, align 8, !tbaa !123
  store %struct.hash_entry* %4, %struct.hash_entry** %bucket, align 8, !tbaa !6
  br label %for.cond

for.cond:                                         ; preds = %for.inc9, %entry
  %5 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !tbaa !6
  %6 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !tbaa !6
  %bucket_limit = getelementptr inbounds %struct.hash_table, %struct.hash_table* %6, i32 0, i32 1
  %7 = load %struct.hash_entry*, %struct.hash_entry** %bucket_limit, align 8, !tbaa !124
  %cmp = icmp ult %struct.hash_entry* %5, %7
  br i1 %cmp, label %for.body, label %for.end10

for.body:                                         ; preds = %for.cond
  %8 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !tbaa !6
  %data = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %8, i32 0, i32 0
  %9 = load i8*, i8** %data, align 8, !tbaa !125
  %tobool = icmp ne i8* %9, null
  br i1 %tobool, label %if.then, label %if.end8

if.then:                                          ; preds = %for.body
  %10 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !tbaa !6
  store %struct.hash_entry* %10, %struct.hash_entry** %cursor, align 8, !tbaa !6
  br label %for.cond2

for.cond2:                                        ; preds = %for.inc, %if.then
  %11 = load %struct.hash_entry*, %struct.hash_entry** %cursor, align 8, !tbaa !6
  %tobool3 = icmp ne %struct.hash_entry* %11, null
  br i1 %tobool3, label %for.body4, label %for.end

for.body4:                                        ; preds = %for.cond2
  %12 = load i64, i64* %counter, align 8, !tbaa !14
  %13 = load i64, i64* %buffer_size.addr, align 8, !tbaa !14
  %cmp5 = icmp uge i64 %12, %13
  br i1 %cmp5, label %if.then6, label %if.end

if.then6:                                         ; preds = %for.body4
  %14 = load i64, i64* %counter, align 8, !tbaa !14
  store i64 %14, i64* %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %for.body4
  %15 = load %struct.hash_entry*, %struct.hash_entry** %cursor, align 8, !tbaa !6
  %data7 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %15, i32 0, i32 0
  %16 = load i8*, i8** %data7, align 8, !tbaa !125
  %17 = load i8**, i8*** %buffer.addr, align 8, !tbaa !6
  %18 = load i64, i64* %counter, align 8, !tbaa !14
  %inc = add i64 %18, 1
  store i64 %inc, i64* %counter, align 8, !tbaa !14
  %arrayidx = getelementptr inbounds i8*, i8** %17, i64 %18
  store i8* %16, i8** %arrayidx, align 8, !tbaa !6
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %19 = load %struct.hash_entry*, %struct.hash_entry** %cursor, align 8, !tbaa !6
  %next = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %19, i32 0, i32 1
  %20 = load %struct.hash_entry*, %struct.hash_entry** %next, align 8, !tbaa !127
  store %struct.hash_entry* %20, %struct.hash_entry** %cursor, align 8, !tbaa !6
  br label %for.cond2

for.end:                                          ; preds = %for.cond2
  br label %if.end8

if.end8:                                          ; preds = %for.end, %for.body
  br label %for.inc9

for.inc9:                                         ; preds = %if.end8
  %21 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !tbaa !6
  %incdec.ptr = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %21, i32 1
  store %struct.hash_entry* %incdec.ptr, %struct.hash_entry** %bucket, align 8, !tbaa !6
  br label %for.cond

for.end10:                                        ; preds = %for.cond
  %22 = load i64, i64* %counter, align 8, !tbaa !14
  store i64 %22, i64* %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %for.end10, %if.then6
  %23 = bitcast %struct.hash_entry** %cursor to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %23) #13
  %24 = bitcast %struct.hash_entry** %bucket to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %24) #13
  %25 = bitcast i64* %counter to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %25) #13
  %26 = load i64, i64* %retval, align 8
  ret i64 %26
}

; Function Attrs: nounwind uwtable
define dso_local i64 @hash_do_for_each(%struct.hash_table* %table, i1 (i8*, i8*)* %processor, i8* %processor_data) #7 {
entry:
  %retval = alloca i64, align 8
  %table.addr = alloca %struct.hash_table*, align 8
  %processor.addr = alloca i1 (i8*, i8*)*, align 8
  %processor_data.addr = alloca i8*, align 8
  %counter = alloca i64, align 8
  %bucket = alloca %struct.hash_entry*, align 8
  %cursor = alloca %struct.hash_entry*, align 8
  %cleanup.dest.slot = alloca i32, align 4
  store %struct.hash_table* %table, %struct.hash_table** %table.addr, align 8, !tbaa !6
  store i1 (i8*, i8*)* %processor, i1 (i8*, i8*)** %processor.addr, align 8, !tbaa !6
  store i8* %processor_data, i8** %processor_data.addr, align 8, !tbaa !6
  %0 = bitcast i64* %counter to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #13
  store i64 0, i64* %counter, align 8, !tbaa !14
  %1 = bitcast %struct.hash_entry** %bucket to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %1) #13
  %2 = bitcast %struct.hash_entry** %cursor to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %2) #13
  %3 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !tbaa !6
  %bucket1 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %3, i32 0, i32 0
  %4 = load %struct.hash_entry*, %struct.hash_entry** %bucket1, align 8, !tbaa !123
  store %struct.hash_entry* %4, %struct.hash_entry** %bucket, align 8, !tbaa !6
  br label %for.cond

for.cond:                                         ; preds = %for.inc8, %entry
  %5 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !tbaa !6
  %6 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !tbaa !6
  %bucket_limit = getelementptr inbounds %struct.hash_table, %struct.hash_table* %6, i32 0, i32 1
  %7 = load %struct.hash_entry*, %struct.hash_entry** %bucket_limit, align 8, !tbaa !124
  %cmp = icmp ult %struct.hash_entry* %5, %7
  br i1 %cmp, label %for.body, label %for.end9

for.body:                                         ; preds = %for.cond
  %8 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !tbaa !6
  %data = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %8, i32 0, i32 0
  %9 = load i8*, i8** %data, align 8, !tbaa !125
  %tobool = icmp ne i8* %9, null
  br i1 %tobool, label %if.then, label %if.end7

if.then:                                          ; preds = %for.body
  %10 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !tbaa !6
  store %struct.hash_entry* %10, %struct.hash_entry** %cursor, align 8, !tbaa !6
  br label %for.cond2

for.cond2:                                        ; preds = %for.inc, %if.then
  %11 = load %struct.hash_entry*, %struct.hash_entry** %cursor, align 8, !tbaa !6
  %tobool3 = icmp ne %struct.hash_entry* %11, null
  br i1 %tobool3, label %for.body4, label %for.end

for.body4:                                        ; preds = %for.cond2
  %12 = load i1 (i8*, i8*)*, i1 (i8*, i8*)** %processor.addr, align 8, !tbaa !6
  %13 = load %struct.hash_entry*, %struct.hash_entry** %cursor, align 8, !tbaa !6
  %data5 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %13, i32 0, i32 0
  %14 = load i8*, i8** %data5, align 8, !tbaa !125
  %15 = load i8*, i8** %processor_data.addr, align 8, !tbaa !6
  %call = call zeroext i1 %12(i8* %14, i8* %15)
  br i1 %call, label %if.end, label %if.then6

if.then6:                                         ; preds = %for.body4
  %16 = load i64, i64* %counter, align 8, !tbaa !14
  store i64 %16, i64* %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %for.body4
  %17 = load i64, i64* %counter, align 8, !tbaa !14
  %inc = add i64 %17, 1
  store i64 %inc, i64* %counter, align 8, !tbaa !14
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %18 = load %struct.hash_entry*, %struct.hash_entry** %cursor, align 8, !tbaa !6
  %next = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %18, i32 0, i32 1
  %19 = load %struct.hash_entry*, %struct.hash_entry** %next, align 8, !tbaa !127
  store %struct.hash_entry* %19, %struct.hash_entry** %cursor, align 8, !tbaa !6
  br label %for.cond2

for.end:                                          ; preds = %for.cond2
  br label %if.end7

if.end7:                                          ; preds = %for.end, %for.body
  br label %for.inc8

for.inc8:                                         ; preds = %if.end7
  %20 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !tbaa !6
  %incdec.ptr = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %20, i32 1
  store %struct.hash_entry* %incdec.ptr, %struct.hash_entry** %bucket, align 8, !tbaa !6
  br label %for.cond

for.end9:                                         ; preds = %for.cond
  %21 = load i64, i64* %counter, align 8, !tbaa !14
  store i64 %21, i64* %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %for.end9, %if.then6
  %22 = bitcast %struct.hash_entry** %cursor to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %22) #13
  %23 = bitcast %struct.hash_entry** %bucket to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %23) #13
  %24 = bitcast i64* %counter to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %24) #13
  %25 = load i64, i64* %retval, align 8
  ret i64 %25
}

; Function Attrs: nounwind readonly uwtable
define dso_local i64 @hash_string(i8* %string, i64 %n_buckets) #9 {
entry:
  %string.addr = alloca i8*, align 8
  %n_buckets.addr = alloca i64, align 8
  %value = alloca i64, align 8
  %ch = alloca i8, align 1
  store i8* %string, i8** %string.addr, align 8, !tbaa !6
  store i64 %n_buckets, i64* %n_buckets.addr, align 8, !tbaa !14
  %0 = bitcast i64* %value to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #13
  store i64 0, i64* %value, align 8, !tbaa !14
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %ch) #13
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i8*, i8** %string.addr, align 8, !tbaa !6
  %2 = load i8, i8* %1, align 1, !tbaa !13
  store i8 %2, i8* %ch, align 1, !tbaa !13
  %tobool = icmp ne i8 %2, 0
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i64, i64* %value, align 8, !tbaa !14
  %mul = mul i64 %3, 31
  %4 = load i8, i8* %ch, align 1, !tbaa !13
  %conv = zext i8 %4 to i64
  %add = add i64 %mul, %conv
  %5 = load i64, i64* %n_buckets.addr, align 8, !tbaa !14
  %rem = urem i64 %add, %5
  store i64 %rem, i64* %value, align 8, !tbaa !14
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %6 = load i8*, i8** %string.addr, align 8, !tbaa !6
  %incdec.ptr = getelementptr inbounds i8, i8* %6, i32 1
  store i8* %incdec.ptr, i8** %string.addr, align 8, !tbaa !6
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %7 = load i64, i64* %value, align 8, !tbaa !14
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %ch) #13
  %8 = bitcast i64* %value to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %8) #13
  ret i64 %7
}

; Function Attrs: nounwind uwtable
define dso_local void @hash_reset_tuning(%struct.hash_tuning* %tuning) #7 {
entry:
  %tuning.addr = alloca %struct.hash_tuning*, align 8
  store %struct.hash_tuning* %tuning, %struct.hash_tuning** %tuning.addr, align 8, !tbaa !6
  %0 = load %struct.hash_tuning*, %struct.hash_tuning** %tuning.addr, align 8, !tbaa !6
  %1 = bitcast %struct.hash_tuning* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %1, i8* align 4 bitcast (%struct.hash_tuning* @default_tuning to i8*), i64 20, i1 false), !tbaa.struct !130
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local noalias %struct.hash_table* @hash_initialize(i64 %candidate, %struct.hash_tuning* %tuning, i64 (i8*, i64)* %hasher, i1 (i8*, i8*)* %comparator, void (i8*)* %data_freer) #7 {
entry:
  %retval = alloca %struct.hash_table*, align 8
  %candidate.addr = alloca i64, align 8
  %tuning.addr = alloca %struct.hash_tuning*, align 8
  %hasher.addr = alloca i64 (i8*, i64)*, align 8
  %comparator.addr = alloca i1 (i8*, i8*)*, align 8
  %data_freer.addr = alloca void (i8*)*, align 8
  %table = alloca %struct.hash_table*, align 8
  %cleanup.dest.slot = alloca i32, align 4
  store i64 %candidate, i64* %candidate.addr, align 8, !tbaa !14
  store %struct.hash_tuning* %tuning, %struct.hash_tuning** %tuning.addr, align 8, !tbaa !6
  store i64 (i8*, i64)* %hasher, i64 (i8*, i64)** %hasher.addr, align 8, !tbaa !6
  store i1 (i8*, i8*)* %comparator, i1 (i8*, i8*)** %comparator.addr, align 8, !tbaa !6
  store void (i8*)* %data_freer, void (i8*)** %data_freer.addr, align 8, !tbaa !6
  %0 = bitcast %struct.hash_table** %table to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #13
  %1 = load i64 (i8*, i64)*, i64 (i8*, i64)** %hasher.addr, align 8, !tbaa !6
  %cmp = icmp eq i64 (i8*, i64)* %1, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i64 (i8*, i64)* @raw_hasher, i64 (i8*, i64)** %hasher.addr, align 8, !tbaa !6
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %2 = load i1 (i8*, i8*)*, i1 (i8*, i8*)** %comparator.addr, align 8, !tbaa !6
  %cmp1 = icmp eq i1 (i8*, i8*)* %2, null
  br i1 %cmp1, label %if.then2, label %if.end3

if.then2:                                         ; preds = %if.end
  store i1 (i8*, i8*)* @raw_comparator, i1 (i8*, i8*)** %comparator.addr, align 8, !tbaa !6
  br label %if.end3

if.end3:                                          ; preds = %if.then2, %if.end
  %call = call noalias i8* @malloc(i64 80) #13
  %3 = bitcast i8* %call to %struct.hash_table*
  store %struct.hash_table* %3, %struct.hash_table** %table, align 8, !tbaa !6
  %4 = load %struct.hash_table*, %struct.hash_table** %table, align 8, !tbaa !6
  %cmp4 = icmp eq %struct.hash_table* %4, null
  br i1 %cmp4, label %if.then5, label %if.end6

if.then5:                                         ; preds = %if.end3
  store %struct.hash_table* null, %struct.hash_table** %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end6:                                          ; preds = %if.end3
  %5 = load %struct.hash_tuning*, %struct.hash_tuning** %tuning.addr, align 8, !tbaa !6
  %tobool = icmp ne %struct.hash_tuning* %5, null
  br i1 %tobool, label %if.end8, label %if.then7

if.then7:                                         ; preds = %if.end6
  store %struct.hash_tuning* @default_tuning, %struct.hash_tuning** %tuning.addr, align 8, !tbaa !6
  br label %if.end8

if.end8:                                          ; preds = %if.then7, %if.end6
  %6 = load %struct.hash_tuning*, %struct.hash_tuning** %tuning.addr, align 8, !tbaa !6
  %7 = load %struct.hash_table*, %struct.hash_table** %table, align 8, !tbaa !6
  %tuning9 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %7, i32 0, i32 5
  store %struct.hash_tuning* %6, %struct.hash_tuning** %tuning9, align 8, !tbaa !133
  %8 = load %struct.hash_table*, %struct.hash_table** %table, align 8, !tbaa !6
  %call10 = call zeroext i1 @check_tuning(%struct.hash_table* %8)
  br i1 %call10, label %if.end12, label %if.then11

if.then11:                                        ; preds = %if.end8
  br label %fail

if.end12:                                         ; preds = %if.end8
  %9 = load i64, i64* %candidate.addr, align 8, !tbaa !14
  %10 = load %struct.hash_tuning*, %struct.hash_tuning** %tuning.addr, align 8, !tbaa !6
  %call13 = call i64 @compute_bucket_size(i64 %9, %struct.hash_tuning* %10) #22
  %11 = load %struct.hash_table*, %struct.hash_table** %table, align 8, !tbaa !6
  %n_buckets = getelementptr inbounds %struct.hash_table, %struct.hash_table* %11, i32 0, i32 2
  store i64 %call13, i64* %n_buckets, align 8, !tbaa !119
  %12 = load %struct.hash_table*, %struct.hash_table** %table, align 8, !tbaa !6
  %n_buckets14 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %12, i32 0, i32 2
  %13 = load i64, i64* %n_buckets14, align 8, !tbaa !119
  %tobool15 = icmp ne i64 %13, 0
  br i1 %tobool15, label %if.end17, label %if.then16

if.then16:                                        ; preds = %if.end12
  br label %fail

if.end17:                                         ; preds = %if.end12
  %14 = load %struct.hash_table*, %struct.hash_table** %table, align 8, !tbaa !6
  %n_buckets18 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %14, i32 0, i32 2
  %15 = load i64, i64* %n_buckets18, align 8, !tbaa !119
  %call19 = call noalias i8* @calloc(i64 %15, i64 16) #13
  %16 = bitcast i8* %call19 to %struct.hash_entry*
  %17 = load %struct.hash_table*, %struct.hash_table** %table, align 8, !tbaa !6
  %bucket = getelementptr inbounds %struct.hash_table, %struct.hash_table* %17, i32 0, i32 0
  store %struct.hash_entry* %16, %struct.hash_entry** %bucket, align 8, !tbaa !123
  %18 = load %struct.hash_table*, %struct.hash_table** %table, align 8, !tbaa !6
  %bucket20 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %18, i32 0, i32 0
  %19 = load %struct.hash_entry*, %struct.hash_entry** %bucket20, align 8, !tbaa !123
  %cmp21 = icmp eq %struct.hash_entry* %19, null
  br i1 %cmp21, label %if.then22, label %if.end23

if.then22:                                        ; preds = %if.end17
  br label %fail

if.end23:                                         ; preds = %if.end17
  %20 = load %struct.hash_table*, %struct.hash_table** %table, align 8, !tbaa !6
  %bucket24 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %20, i32 0, i32 0
  %21 = load %struct.hash_entry*, %struct.hash_entry** %bucket24, align 8, !tbaa !123
  %22 = load %struct.hash_table*, %struct.hash_table** %table, align 8, !tbaa !6
  %n_buckets25 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %22, i32 0, i32 2
  %23 = load i64, i64* %n_buckets25, align 8, !tbaa !119
  %add.ptr = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %21, i64 %23
  %24 = load %struct.hash_table*, %struct.hash_table** %table, align 8, !tbaa !6
  %bucket_limit = getelementptr inbounds %struct.hash_table, %struct.hash_table* %24, i32 0, i32 1
  store %struct.hash_entry* %add.ptr, %struct.hash_entry** %bucket_limit, align 8, !tbaa !124
  %25 = load %struct.hash_table*, %struct.hash_table** %table, align 8, !tbaa !6
  %n_buckets_used = getelementptr inbounds %struct.hash_table, %struct.hash_table* %25, i32 0, i32 3
  store i64 0, i64* %n_buckets_used, align 8, !tbaa !121
  %26 = load %struct.hash_table*, %struct.hash_table** %table, align 8, !tbaa !6
  %n_entries = getelementptr inbounds %struct.hash_table, %struct.hash_table* %26, i32 0, i32 4
  store i64 0, i64* %n_entries, align 8, !tbaa !122
  %27 = load i64 (i8*, i64)*, i64 (i8*, i64)** %hasher.addr, align 8, !tbaa !6
  %28 = load %struct.hash_table*, %struct.hash_table** %table, align 8, !tbaa !6
  %hasher26 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %28, i32 0, i32 6
  store i64 (i8*, i64)* %27, i64 (i8*, i64)** %hasher26, align 8, !tbaa !129
  %29 = load i1 (i8*, i8*)*, i1 (i8*, i8*)** %comparator.addr, align 8, !tbaa !6
  %30 = load %struct.hash_table*, %struct.hash_table** %table, align 8, !tbaa !6
  %comparator27 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %30, i32 0, i32 7
  store i1 (i8*, i8*)* %29, i1 (i8*, i8*)** %comparator27, align 8, !tbaa !128
  %31 = load void (i8*)*, void (i8*)** %data_freer.addr, align 8, !tbaa !6
  %32 = load %struct.hash_table*, %struct.hash_table** %table, align 8, !tbaa !6
  %data_freer28 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %32, i32 0, i32 8
  store void (i8*)* %31, void (i8*)** %data_freer28, align 8, !tbaa !134
  %33 = load %struct.hash_table*, %struct.hash_table** %table, align 8, !tbaa !6
  %free_entry_list = getelementptr inbounds %struct.hash_table, %struct.hash_table* %33, i32 0, i32 9
  store %struct.hash_entry* null, %struct.hash_entry** %free_entry_list, align 8, !tbaa !135
  %34 = load %struct.hash_table*, %struct.hash_table** %table, align 8, !tbaa !6
  store %struct.hash_table* %34, %struct.hash_table** %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

fail:                                             ; preds = %if.then22, %if.then16, %if.then11
  %35 = load %struct.hash_table*, %struct.hash_table** %table, align 8, !tbaa !6
  %36 = bitcast %struct.hash_table* %35 to i8*
  call void @rpl_free(i8* %36)
  store %struct.hash_table* null, %struct.hash_table** %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %fail, %if.end23, %if.then5
  %37 = bitcast %struct.hash_table** %table to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %37) #13
  %38 = load %struct.hash_table*, %struct.hash_table** %retval, align 8
  ret %struct.hash_table* %38
}

; Function Attrs: nounwind uwtable
define internal i64 @raw_hasher(i8* %data, i64 %n) #7 {
entry:
  %data.addr = alloca i8*, align 8
  %n.addr = alloca i64, align 8
  %val = alloca i64, align 8
  store i8* %data, i8** %data.addr, align 8, !tbaa !6
  store i64 %n, i64* %n.addr, align 8, !tbaa !14
  %0 = bitcast i64* %val to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #13
  %1 = load i8*, i8** %data.addr, align 8, !tbaa !6
  %2 = ptrtoint i8* %1 to i64
  %call = call i64 @rotr_sz(i64 %2, i32 3)
  store i64 %call, i64* %val, align 8, !tbaa !14
  %3 = load i64, i64* %val, align 8, !tbaa !14
  %4 = load i64, i64* %n.addr, align 8, !tbaa !14
  %rem = urem i64 %3, %4
  %5 = bitcast i64* %val to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %5) #13
  ret i64 %rem
}

; Function Attrs: nounwind uwtable
define internal zeroext i1 @raw_comparator(i8* %a, i8* %b) #7 {
entry:
  %a.addr = alloca i8*, align 8
  %b.addr = alloca i8*, align 8
  store i8* %a, i8** %a.addr, align 8, !tbaa !6
  store i8* %b, i8** %b.addr, align 8, !tbaa !6
  %0 = load i8*, i8** %a.addr, align 8, !tbaa !6
  %1 = load i8*, i8** %b.addr, align 8, !tbaa !6
  %cmp = icmp eq i8* %0, %1
  ret i1 %cmp
}

; Function Attrs: nounwind uwtable
define internal zeroext i1 @check_tuning(%struct.hash_table* %table) #7 {
entry:
  %retval = alloca i1, align 1
  %table.addr = alloca %struct.hash_table*, align 8
  %tuning = alloca %struct.hash_tuning*, align 8
  %epsilon = alloca float, align 4
  %cleanup.dest.slot = alloca i32, align 4
  store %struct.hash_table* %table, %struct.hash_table** %table.addr, align 8, !tbaa !6
  %0 = bitcast %struct.hash_tuning** %tuning to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #13
  %1 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !tbaa !6
  %tuning1 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %1, i32 0, i32 5
  %2 = load %struct.hash_tuning*, %struct.hash_tuning** %tuning1, align 8, !tbaa !133
  store %struct.hash_tuning* %2, %struct.hash_tuning** %tuning, align 8, !tbaa !6
  %3 = bitcast float* %epsilon to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %3) #13
  %4 = load %struct.hash_tuning*, %struct.hash_tuning** %tuning, align 8, !tbaa !6
  %cmp = icmp eq %struct.hash_tuning* %4, @default_tuning
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i1 true, i1* %retval, align 1
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %entry
  store float 0x3FB99999A0000000, float* %epsilon, align 4, !tbaa !131
  %5 = load float, float* %epsilon, align 4, !tbaa !131
  %6 = load %struct.hash_tuning*, %struct.hash_tuning** %tuning, align 8, !tbaa !6
  %growth_threshold = getelementptr inbounds %struct.hash_tuning, %struct.hash_tuning* %6, i32 0, i32 2
  %7 = load float, float* %growth_threshold, align 4, !tbaa !136
  %cmp2 = fcmp olt float %5, %7
  br i1 %cmp2, label %land.lhs.true, label %if.end22

land.lhs.true:                                    ; preds = %if.end
  %8 = load %struct.hash_tuning*, %struct.hash_tuning** %tuning, align 8, !tbaa !6
  %growth_threshold3 = getelementptr inbounds %struct.hash_tuning, %struct.hash_tuning* %8, i32 0, i32 2
  %9 = load float, float* %growth_threshold3, align 4, !tbaa !136
  %10 = load float, float* %epsilon, align 4, !tbaa !131
  %sub = fsub float 1.000000e+00, %10
  %cmp4 = fcmp olt float %9, %sub
  br i1 %cmp4, label %land.lhs.true5, label %if.end22

land.lhs.true5:                                   ; preds = %land.lhs.true
  %11 = load float, float* %epsilon, align 4, !tbaa !131
  %add = fadd float 1.000000e+00, %11
  %12 = load %struct.hash_tuning*, %struct.hash_tuning** %tuning, align 8, !tbaa !6
  %growth_factor = getelementptr inbounds %struct.hash_tuning, %struct.hash_tuning* %12, i32 0, i32 3
  %13 = load float, float* %growth_factor, align 4, !tbaa !138
  %cmp6 = fcmp olt float %add, %13
  br i1 %cmp6, label %land.lhs.true7, label %if.end22

land.lhs.true7:                                   ; preds = %land.lhs.true5
  %14 = load %struct.hash_tuning*, %struct.hash_tuning** %tuning, align 8, !tbaa !6
  %shrink_threshold = getelementptr inbounds %struct.hash_tuning, %struct.hash_tuning* %14, i32 0, i32 0
  %15 = load float, float* %shrink_threshold, align 4, !tbaa !139
  %cmp8 = fcmp ole float 0.000000e+00, %15
  br i1 %cmp8, label %land.lhs.true9, label %if.end22

land.lhs.true9:                                   ; preds = %land.lhs.true7
  %16 = load %struct.hash_tuning*, %struct.hash_tuning** %tuning, align 8, !tbaa !6
  %shrink_threshold10 = getelementptr inbounds %struct.hash_tuning, %struct.hash_tuning* %16, i32 0, i32 0
  %17 = load float, float* %shrink_threshold10, align 4, !tbaa !139
  %18 = load float, float* %epsilon, align 4, !tbaa !131
  %add11 = fadd float %17, %18
  %19 = load %struct.hash_tuning*, %struct.hash_tuning** %tuning, align 8, !tbaa !6
  %shrink_factor = getelementptr inbounds %struct.hash_tuning, %struct.hash_tuning* %19, i32 0, i32 1
  %20 = load float, float* %shrink_factor, align 4, !tbaa !140
  %cmp12 = fcmp olt float %add11, %20
  br i1 %cmp12, label %land.lhs.true13, label %if.end22

land.lhs.true13:                                  ; preds = %land.lhs.true9
  %21 = load %struct.hash_tuning*, %struct.hash_tuning** %tuning, align 8, !tbaa !6
  %shrink_factor14 = getelementptr inbounds %struct.hash_tuning, %struct.hash_tuning* %21, i32 0, i32 1
  %22 = load float, float* %shrink_factor14, align 4, !tbaa !140
  %cmp15 = fcmp ole float %22, 1.000000e+00
  br i1 %cmp15, label %land.lhs.true16, label %if.end22

land.lhs.true16:                                  ; preds = %land.lhs.true13
  %23 = load %struct.hash_tuning*, %struct.hash_tuning** %tuning, align 8, !tbaa !6
  %shrink_threshold17 = getelementptr inbounds %struct.hash_tuning, %struct.hash_tuning* %23, i32 0, i32 0
  %24 = load float, float* %shrink_threshold17, align 4, !tbaa !139
  %25 = load float, float* %epsilon, align 4, !tbaa !131
  %add18 = fadd float %24, %25
  %26 = load %struct.hash_tuning*, %struct.hash_tuning** %tuning, align 8, !tbaa !6
  %growth_threshold19 = getelementptr inbounds %struct.hash_tuning, %struct.hash_tuning* %26, i32 0, i32 2
  %27 = load float, float* %growth_threshold19, align 4, !tbaa !136
  %cmp20 = fcmp olt float %add18, %27
  br i1 %cmp20, label %if.then21, label %if.end22

if.then21:                                        ; preds = %land.lhs.true16
  store i1 true, i1* %retval, align 1
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end22:                                         ; preds = %land.lhs.true16, %land.lhs.true13, %land.lhs.true9, %land.lhs.true7, %land.lhs.true5, %land.lhs.true, %if.end
  %28 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !tbaa !6
  %tuning23 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %28, i32 0, i32 5
  store %struct.hash_tuning* @default_tuning, %struct.hash_tuning** %tuning23, align 8, !tbaa !133
  store i1 false, i1* %retval, align 1
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end22, %if.then21, %if.then
  %29 = bitcast float* %epsilon to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %29) #13
  %30 = bitcast %struct.hash_tuning** %tuning to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %30) #13
  %31 = load i1, i1* %retval, align 1
  ret i1 %31
}

; Function Attrs: nounwind readonly uwtable
define internal i64 @compute_bucket_size(i64 %candidate, %struct.hash_tuning* %tuning) #9 {
entry:
  %retval = alloca i64, align 8
  %candidate.addr = alloca i64, align 8
  %tuning.addr = alloca %struct.hash_tuning*, align 8
  %new_candidate = alloca float, align 4
  %cleanup.dest.slot = alloca i32, align 4
  store i64 %candidate, i64* %candidate.addr, align 8, !tbaa !14
  store %struct.hash_tuning* %tuning, %struct.hash_tuning** %tuning.addr, align 8, !tbaa !6
  %0 = load %struct.hash_tuning*, %struct.hash_tuning** %tuning.addr, align 8, !tbaa !6
  %is_n_buckets = getelementptr inbounds %struct.hash_tuning, %struct.hash_tuning* %0, i32 0, i32 4
  %1 = load i8, i8* %is_n_buckets, align 4, !tbaa !141, !range !25
  %tobool = trunc i8 %1 to i1
  br i1 %tobool, label %if.end4, label %if.then

if.then:                                          ; preds = %entry
  %2 = bitcast float* %new_candidate to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %2) #13
  %3 = load i64, i64* %candidate.addr, align 8, !tbaa !14
  %conv = uitofp i64 %3 to float
  %4 = load %struct.hash_tuning*, %struct.hash_tuning** %tuning.addr, align 8, !tbaa !6
  %growth_threshold = getelementptr inbounds %struct.hash_tuning, %struct.hash_tuning* %4, i32 0, i32 2
  %5 = load float, float* %growth_threshold, align 4, !tbaa !136
  %div = fdiv float %conv, %5
  store float %div, float* %new_candidate, align 4, !tbaa !131
  %6 = load float, float* %new_candidate, align 4, !tbaa !131
  %cmp = fcmp ole float 0x43F0000000000000, %6
  br i1 %cmp, label %if.then2, label %if.end

if.then2:                                         ; preds = %if.then
  store i64 0, i64* %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %if.then
  %7 = load float, float* %new_candidate, align 4, !tbaa !131
  %conv3 = fptoui float %7 to i64
  store i64 %conv3, i64* %candidate.addr, align 8, !tbaa !14
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end, %if.then2
  %8 = bitcast float* %new_candidate to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %8) #13
  %cleanup.dest = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest, label %unreachable [
    i32 0, label %cleanup.cont
    i32 1, label %return
  ]

cleanup.cont:                                     ; preds = %cleanup
  br label %if.end4

if.end4:                                          ; preds = %cleanup.cont, %entry
  %9 = load i64, i64* %candidate.addr, align 8, !tbaa !14
  %call = call i64 @next_prime(i64 %9) #26
  store i64 %call, i64* %candidate.addr, align 8, !tbaa !14
  %10 = load i64, i64* %candidate.addr, align 8, !tbaa !14
  %cmp5 = icmp ult i64 1152921504606846975, %10
  br i1 %cmp5, label %if.then7, label %if.end8

if.then7:                                         ; preds = %if.end4
  store i64 0, i64* %retval, align 8
  br label %return

if.end8:                                          ; preds = %if.end4
  %11 = load i64, i64* %candidate.addr, align 8, !tbaa !14
  store i64 %11, i64* %retval, align 8
  br label %return

return:                                           ; preds = %if.end8, %if.then7, %cleanup
  %12 = load i64, i64* %retval, align 8
  ret i64 %12

unreachable:                                      ; preds = %cleanup
  unreachable
}

; Function Attrs: nounwind
declare dso_local noalias i8* @calloc(i64, i64) #6

; Function Attrs: nounwind readnone uwtable
define internal i64 @next_prime(i64 %candidate) #11 {
entry:
  %candidate.addr = alloca i64, align 8
  store i64 %candidate, i64* %candidate.addr, align 8, !tbaa !14
  %0 = load i64, i64* %candidate.addr, align 8, !tbaa !14
  %cmp = icmp ult i64 %0, 10
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i64 10, i64* %candidate.addr, align 8, !tbaa !14
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %1 = load i64, i64* %candidate.addr, align 8, !tbaa !14
  %or = or i64 %1, 1
  store i64 %or, i64* %candidate.addr, align 8, !tbaa !14
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end
  %2 = load i64, i64* %candidate.addr, align 8, !tbaa !14
  %cmp1 = icmp ne i64 -1, %2
  br i1 %cmp1, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %3 = load i64, i64* %candidate.addr, align 8, !tbaa !14
  %call = call zeroext i1 @is_prime(i64 %3) #26
  %lnot = xor i1 %call, true
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %4 = phi i1 [ false, %while.cond ], [ %lnot, %land.rhs ]
  br i1 %4, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %5 = load i64, i64* %candidate.addr, align 8, !tbaa !14
  %add = add i64 %5, 2
  store i64 %add, i64* %candidate.addr, align 8, !tbaa !14
  br label %while.cond

while.end:                                        ; preds = %land.end
  %6 = load i64, i64* %candidate.addr, align 8, !tbaa !14
  ret i64 %6
}

; Function Attrs: nounwind readnone uwtable
define internal zeroext i1 @is_prime(i64 %candidate) #11 {
entry:
  %candidate.addr = alloca i64, align 8
  %divisor = alloca i64, align 8
  %square = alloca i64, align 8
  store i64 %candidate, i64* %candidate.addr, align 8, !tbaa !14
  %0 = bitcast i64* %divisor to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #13
  store i64 3, i64* %divisor, align 8, !tbaa !14
  %1 = bitcast i64* %square to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %1) #13
  %2 = load i64, i64* %divisor, align 8, !tbaa !14
  %3 = load i64, i64* %divisor, align 8, !tbaa !14
  %mul = mul i64 %2, %3
  store i64 %mul, i64* %square, align 8, !tbaa !14
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %4 = load i64, i64* %square, align 8, !tbaa !14
  %5 = load i64, i64* %candidate.addr, align 8, !tbaa !14
  %cmp = icmp ult i64 %4, %5
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %6 = load i64, i64* %candidate.addr, align 8, !tbaa !14
  %7 = load i64, i64* %divisor, align 8, !tbaa !14
  %rem = urem i64 %6, %7
  %tobool = icmp ne i64 %rem, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %8 = phi i1 [ false, %while.cond ], [ %tobool, %land.rhs ]
  br i1 %8, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %9 = load i64, i64* %divisor, align 8, !tbaa !14
  %inc = add i64 %9, 1
  store i64 %inc, i64* %divisor, align 8, !tbaa !14
  %10 = load i64, i64* %divisor, align 8, !tbaa !14
  %mul1 = mul i64 4, %10
  %11 = load i64, i64* %square, align 8, !tbaa !14
  %add = add i64 %11, %mul1
  store i64 %add, i64* %square, align 8, !tbaa !14
  %12 = load i64, i64* %divisor, align 8, !tbaa !14
  %inc2 = add i64 %12, 1
  store i64 %inc2, i64* %divisor, align 8, !tbaa !14
  br label %while.cond

while.end:                                        ; preds = %land.end
  %13 = load i64, i64* %candidate.addr, align 8, !tbaa !14
  %14 = load i64, i64* %divisor, align 8, !tbaa !14
  %rem3 = urem i64 %13, %14
  %tobool4 = icmp ne i64 %rem3, 0
  %15 = zext i1 %tobool4 to i64
  %cond = select i1 %tobool4, i32 1, i32 0
  %tobool5 = icmp ne i32 %cond, 0
  %16 = bitcast i64* %square to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %16) #13
  %17 = bitcast i64* %divisor to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %17) #13
  ret i1 %tobool5
}

; Function Attrs: nounwind uwtable
define dso_local void @hash_clear(%struct.hash_table* %table) #7 {
entry:
  %table.addr = alloca %struct.hash_table*, align 8
  %bucket = alloca %struct.hash_entry*, align 8
  %cursor = alloca %struct.hash_entry*, align 8
  %next = alloca %struct.hash_entry*, align 8
  store %struct.hash_table* %table, %struct.hash_table** %table.addr, align 8, !tbaa !6
  %0 = bitcast %struct.hash_entry** %bucket to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #13
  %1 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !tbaa !6
  %bucket1 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %1, i32 0, i32 0
  %2 = load %struct.hash_entry*, %struct.hash_entry** %bucket1, align 8, !tbaa !123
  store %struct.hash_entry* %2, %struct.hash_entry** %bucket, align 8, !tbaa !6
  br label %for.cond

for.cond:                                         ; preds = %for.inc23, %entry
  %3 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !tbaa !6
  %4 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !tbaa !6
  %bucket_limit = getelementptr inbounds %struct.hash_table, %struct.hash_table* %4, i32 0, i32 1
  %5 = load %struct.hash_entry*, %struct.hash_entry** %bucket_limit, align 8, !tbaa !124
  %cmp = icmp ult %struct.hash_entry* %3, %5
  br i1 %cmp, label %for.body, label %for.end24

for.body:                                         ; preds = %for.cond
  %6 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !tbaa !6
  %data = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %6, i32 0, i32 0
  %7 = load i8*, i8** %data, align 8, !tbaa !125
  %tobool = icmp ne i8* %7, null
  br i1 %tobool, label %if.then, label %if.end22

if.then:                                          ; preds = %for.body
  %8 = bitcast %struct.hash_entry** %cursor to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %8) #13
  %9 = bitcast %struct.hash_entry** %next to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %9) #13
  %10 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !tbaa !6
  %next2 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %10, i32 0, i32 1
  %11 = load %struct.hash_entry*, %struct.hash_entry** %next2, align 8, !tbaa !127
  store %struct.hash_entry* %11, %struct.hash_entry** %cursor, align 8, !tbaa !6
  br label %for.cond3

for.cond3:                                        ; preds = %for.inc, %if.then
  %12 = load %struct.hash_entry*, %struct.hash_entry** %cursor, align 8, !tbaa !6
  %tobool4 = icmp ne %struct.hash_entry* %12, null
  br i1 %tobool4, label %for.body5, label %for.end

for.body5:                                        ; preds = %for.cond3
  %13 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !tbaa !6
  %data_freer = getelementptr inbounds %struct.hash_table, %struct.hash_table* %13, i32 0, i32 8
  %14 = load void (i8*)*, void (i8*)** %data_freer, align 8, !tbaa !134
  %tobool6 = icmp ne void (i8*)* %14, null
  br i1 %tobool6, label %if.then7, label %if.end

if.then7:                                         ; preds = %for.body5
  %15 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !tbaa !6
  %data_freer8 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %15, i32 0, i32 8
  %16 = load void (i8*)*, void (i8*)** %data_freer8, align 8, !tbaa !134
  %17 = load %struct.hash_entry*, %struct.hash_entry** %cursor, align 8, !tbaa !6
  %data9 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %17, i32 0, i32 0
  %18 = load i8*, i8** %data9, align 8, !tbaa !125
  call void %16(i8* %18)
  br label %if.end

if.end:                                           ; preds = %if.then7, %for.body5
  %19 = load %struct.hash_entry*, %struct.hash_entry** %cursor, align 8, !tbaa !6
  %data10 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %19, i32 0, i32 0
  store i8* null, i8** %data10, align 8, !tbaa !125
  %20 = load %struct.hash_entry*, %struct.hash_entry** %cursor, align 8, !tbaa !6
  %next11 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %20, i32 0, i32 1
  %21 = load %struct.hash_entry*, %struct.hash_entry** %next11, align 8, !tbaa !127
  store %struct.hash_entry* %21, %struct.hash_entry** %next, align 8, !tbaa !6
  %22 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !tbaa !6
  %free_entry_list = getelementptr inbounds %struct.hash_table, %struct.hash_table* %22, i32 0, i32 9
  %23 = load %struct.hash_entry*, %struct.hash_entry** %free_entry_list, align 8, !tbaa !135
  %24 = load %struct.hash_entry*, %struct.hash_entry** %cursor, align 8, !tbaa !6
  %next12 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %24, i32 0, i32 1
  store %struct.hash_entry* %23, %struct.hash_entry** %next12, align 8, !tbaa !127
  %25 = load %struct.hash_entry*, %struct.hash_entry** %cursor, align 8, !tbaa !6
  %26 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !tbaa !6
  %free_entry_list13 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %26, i32 0, i32 9
  store %struct.hash_entry* %25, %struct.hash_entry** %free_entry_list13, align 8, !tbaa !135
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %27 = load %struct.hash_entry*, %struct.hash_entry** %next, align 8, !tbaa !6
  store %struct.hash_entry* %27, %struct.hash_entry** %cursor, align 8, !tbaa !6
  br label %for.cond3

for.end:                                          ; preds = %for.cond3
  %28 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !tbaa !6
  %data_freer14 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %28, i32 0, i32 8
  %29 = load void (i8*)*, void (i8*)** %data_freer14, align 8, !tbaa !134
  %tobool15 = icmp ne void (i8*)* %29, null
  br i1 %tobool15, label %if.then16, label %if.end19

if.then16:                                        ; preds = %for.end
  %30 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !tbaa !6
  %data_freer17 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %30, i32 0, i32 8
  %31 = load void (i8*)*, void (i8*)** %data_freer17, align 8, !tbaa !134
  %32 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !tbaa !6
  %data18 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %32, i32 0, i32 0
  %33 = load i8*, i8** %data18, align 8, !tbaa !125
  call void %31(i8* %33)
  br label %if.end19

if.end19:                                         ; preds = %if.then16, %for.end
  %34 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !tbaa !6
  %data20 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %34, i32 0, i32 0
  store i8* null, i8** %data20, align 8, !tbaa !125
  %35 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !tbaa !6
  %next21 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %35, i32 0, i32 1
  store %struct.hash_entry* null, %struct.hash_entry** %next21, align 8, !tbaa !127
  %36 = bitcast %struct.hash_entry** %next to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %36) #13
  %37 = bitcast %struct.hash_entry** %cursor to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %37) #13
  br label %if.end22

if.end22:                                         ; preds = %if.end19, %for.body
  br label %for.inc23

for.inc23:                                        ; preds = %if.end22
  %38 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !tbaa !6
  %incdec.ptr = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %38, i32 1
  store %struct.hash_entry* %incdec.ptr, %struct.hash_entry** %bucket, align 8, !tbaa !6
  br label %for.cond

for.end24:                                        ; preds = %for.cond
  %39 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !tbaa !6
  %n_buckets_used = getelementptr inbounds %struct.hash_table, %struct.hash_table* %39, i32 0, i32 3
  store i64 0, i64* %n_buckets_used, align 8, !tbaa !121
  %40 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !tbaa !6
  %n_entries = getelementptr inbounds %struct.hash_table, %struct.hash_table* %40, i32 0, i32 4
  store i64 0, i64* %n_entries, align 8, !tbaa !122
  %41 = bitcast %struct.hash_entry** %bucket to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %41) #13
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local void @hash_free(%struct.hash_table* %table) #7 {
entry:
  %table.addr = alloca %struct.hash_table*, align 8
  %bucket = alloca %struct.hash_entry*, align 8
  %cursor = alloca %struct.hash_entry*, align 8
  %next = alloca %struct.hash_entry*, align 8
  store %struct.hash_table* %table, %struct.hash_table** %table.addr, align 8, !tbaa !6
  %0 = bitcast %struct.hash_entry** %bucket to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #13
  %1 = bitcast %struct.hash_entry** %cursor to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %1) #13
  %2 = bitcast %struct.hash_entry** %next to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %2) #13
  %3 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !tbaa !6
  %data_freer = getelementptr inbounds %struct.hash_table, %struct.hash_table* %3, i32 0, i32 8
  %4 = load void (i8*)*, void (i8*)** %data_freer, align 8, !tbaa !134
  %tobool = icmp ne void (i8*)* %4, null
  br i1 %tobool, label %land.lhs.true, label %if.end13

land.lhs.true:                                    ; preds = %entry
  %5 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !tbaa !6
  %n_entries = getelementptr inbounds %struct.hash_table, %struct.hash_table* %5, i32 0, i32 4
  %6 = load i64, i64* %n_entries, align 8, !tbaa !122
  %tobool1 = icmp ne i64 %6, 0
  br i1 %tobool1, label %if.then, label %if.end13

if.then:                                          ; preds = %land.lhs.true
  %7 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !tbaa !6
  %bucket2 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %7, i32 0, i32 0
  %8 = load %struct.hash_entry*, %struct.hash_entry** %bucket2, align 8, !tbaa !123
  store %struct.hash_entry* %8, %struct.hash_entry** %bucket, align 8, !tbaa !6
  br label %for.cond

for.cond:                                         ; preds = %for.inc11, %if.then
  %9 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !tbaa !6
  %10 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !tbaa !6
  %bucket_limit = getelementptr inbounds %struct.hash_table, %struct.hash_table* %10, i32 0, i32 1
  %11 = load %struct.hash_entry*, %struct.hash_entry** %bucket_limit, align 8, !tbaa !124
  %cmp = icmp ult %struct.hash_entry* %9, %11
  br i1 %cmp, label %for.body, label %for.end12

for.body:                                         ; preds = %for.cond
  %12 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !tbaa !6
  %data = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %12, i32 0, i32 0
  %13 = load i8*, i8** %data, align 8, !tbaa !125
  %tobool3 = icmp ne i8* %13, null
  br i1 %tobool3, label %if.then4, label %if.end

if.then4:                                         ; preds = %for.body
  %14 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !tbaa !6
  store %struct.hash_entry* %14, %struct.hash_entry** %cursor, align 8, !tbaa !6
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc, %if.then4
  %15 = load %struct.hash_entry*, %struct.hash_entry** %cursor, align 8, !tbaa !6
  %tobool6 = icmp ne %struct.hash_entry* %15, null
  br i1 %tobool6, label %for.body7, label %for.end

for.body7:                                        ; preds = %for.cond5
  %16 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !tbaa !6
  %data_freer8 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %16, i32 0, i32 8
  %17 = load void (i8*)*, void (i8*)** %data_freer8, align 8, !tbaa !134
  %18 = load %struct.hash_entry*, %struct.hash_entry** %cursor, align 8, !tbaa !6
  %data9 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %18, i32 0, i32 0
  %19 = load i8*, i8** %data9, align 8, !tbaa !125
  call void %17(i8* %19)
  br label %for.inc

for.inc:                                          ; preds = %for.body7
  %20 = load %struct.hash_entry*, %struct.hash_entry** %cursor, align 8, !tbaa !6
  %next10 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %20, i32 0, i32 1
  %21 = load %struct.hash_entry*, %struct.hash_entry** %next10, align 8, !tbaa !127
  store %struct.hash_entry* %21, %struct.hash_entry** %cursor, align 8, !tbaa !6
  br label %for.cond5

for.end:                                          ; preds = %for.cond5
  br label %if.end

if.end:                                           ; preds = %for.end, %for.body
  br label %for.inc11

for.inc11:                                        ; preds = %if.end
  %22 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !tbaa !6
  %incdec.ptr = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %22, i32 1
  store %struct.hash_entry* %incdec.ptr, %struct.hash_entry** %bucket, align 8, !tbaa !6
  br label %for.cond

for.end12:                                        ; preds = %for.cond
  br label %if.end13

if.end13:                                         ; preds = %for.end12, %land.lhs.true, %entry
  %23 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !tbaa !6
  %bucket14 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %23, i32 0, i32 0
  %24 = load %struct.hash_entry*, %struct.hash_entry** %bucket14, align 8, !tbaa !123
  store %struct.hash_entry* %24, %struct.hash_entry** %bucket, align 8, !tbaa !6
  br label %for.cond15

for.cond15:                                       ; preds = %for.inc26, %if.end13
  %25 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !tbaa !6
  %26 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !tbaa !6
  %bucket_limit16 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %26, i32 0, i32 1
  %27 = load %struct.hash_entry*, %struct.hash_entry** %bucket_limit16, align 8, !tbaa !124
  %cmp17 = icmp ult %struct.hash_entry* %25, %27
  br i1 %cmp17, label %for.body18, label %for.end28

for.body18:                                       ; preds = %for.cond15
  %28 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !tbaa !6
  %next19 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %28, i32 0, i32 1
  %29 = load %struct.hash_entry*, %struct.hash_entry** %next19, align 8, !tbaa !127
  store %struct.hash_entry* %29, %struct.hash_entry** %cursor, align 8, !tbaa !6
  br label %for.cond20

for.cond20:                                       ; preds = %for.inc24, %for.body18
  %30 = load %struct.hash_entry*, %struct.hash_entry** %cursor, align 8, !tbaa !6
  %tobool21 = icmp ne %struct.hash_entry* %30, null
  br i1 %tobool21, label %for.body22, label %for.end25

for.body22:                                       ; preds = %for.cond20
  %31 = load %struct.hash_entry*, %struct.hash_entry** %cursor, align 8, !tbaa !6
  %next23 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %31, i32 0, i32 1
  %32 = load %struct.hash_entry*, %struct.hash_entry** %next23, align 8, !tbaa !127
  store %struct.hash_entry* %32, %struct.hash_entry** %next, align 8, !tbaa !6
  %33 = load %struct.hash_entry*, %struct.hash_entry** %cursor, align 8, !tbaa !6
  %34 = bitcast %struct.hash_entry* %33 to i8*
  call void @rpl_free(i8* %34)
  br label %for.inc24

for.inc24:                                        ; preds = %for.body22
  %35 = load %struct.hash_entry*, %struct.hash_entry** %next, align 8, !tbaa !6
  store %struct.hash_entry* %35, %struct.hash_entry** %cursor, align 8, !tbaa !6
  br label %for.cond20

for.end25:                                        ; preds = %for.cond20
  br label %for.inc26

for.inc26:                                        ; preds = %for.end25
  %36 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !tbaa !6
  %incdec.ptr27 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %36, i32 1
  store %struct.hash_entry* %incdec.ptr27, %struct.hash_entry** %bucket, align 8, !tbaa !6
  br label %for.cond15

for.end28:                                        ; preds = %for.cond15
  %37 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !tbaa !6
  %free_entry_list = getelementptr inbounds %struct.hash_table, %struct.hash_table* %37, i32 0, i32 9
  %38 = load %struct.hash_entry*, %struct.hash_entry** %free_entry_list, align 8, !tbaa !135
  store %struct.hash_entry* %38, %struct.hash_entry** %cursor, align 8, !tbaa !6
  br label %for.cond29

for.cond29:                                       ; preds = %for.inc33, %for.end28
  %39 = load %struct.hash_entry*, %struct.hash_entry** %cursor, align 8, !tbaa !6
  %tobool30 = icmp ne %struct.hash_entry* %39, null
  br i1 %tobool30, label %for.body31, label %for.end34

for.body31:                                       ; preds = %for.cond29
  %40 = load %struct.hash_entry*, %struct.hash_entry** %cursor, align 8, !tbaa !6
  %next32 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %40, i32 0, i32 1
  %41 = load %struct.hash_entry*, %struct.hash_entry** %next32, align 8, !tbaa !127
  store %struct.hash_entry* %41, %struct.hash_entry** %next, align 8, !tbaa !6
  %42 = load %struct.hash_entry*, %struct.hash_entry** %cursor, align 8, !tbaa !6
  %43 = bitcast %struct.hash_entry* %42 to i8*
  call void @rpl_free(i8* %43)
  br label %for.inc33

for.inc33:                                        ; preds = %for.body31
  %44 = load %struct.hash_entry*, %struct.hash_entry** %next, align 8, !tbaa !6
  store %struct.hash_entry* %44, %struct.hash_entry** %cursor, align 8, !tbaa !6
  br label %for.cond29

for.end34:                                        ; preds = %for.cond29
  %45 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !tbaa !6
  %bucket35 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %45, i32 0, i32 0
  %46 = load %struct.hash_entry*, %struct.hash_entry** %bucket35, align 8, !tbaa !123
  %47 = bitcast %struct.hash_entry* %46 to i8*
  call void @rpl_free(i8* %47)
  %48 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !tbaa !6
  %49 = bitcast %struct.hash_table* %48 to i8*
  call void @rpl_free(i8* %49)
  %50 = bitcast %struct.hash_entry** %next to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %50) #13
  %51 = bitcast %struct.hash_entry** %cursor to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %51) #13
  %52 = bitcast %struct.hash_entry** %bucket to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %52) #13
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local zeroext i1 @hash_rehash(%struct.hash_table* %table, i64 %candidate) #7 {
entry:
  %retval = alloca i1, align 1
  %table.addr = alloca %struct.hash_table*, align 8
  %candidate.addr = alloca i64, align 8
  %storage = alloca %struct.hash_table, align 8
  %new_table = alloca %struct.hash_table*, align 8
  %new_size = alloca i64, align 8
  %cleanup.dest.slot = alloca i32, align 4
  store %struct.hash_table* %table, %struct.hash_table** %table.addr, align 8, !tbaa !6
  store i64 %candidate, i64* %candidate.addr, align 8, !tbaa !14
  %0 = bitcast %struct.hash_table* %storage to i8*
  call void @llvm.lifetime.start.p0i8(i64 80, i8* %0) #13
  %1 = bitcast %struct.hash_table** %new_table to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %1) #13
  %2 = bitcast i64* %new_size to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %2) #13
  %3 = load i64, i64* %candidate.addr, align 8, !tbaa !14
  %4 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !tbaa !6
  %tuning = getelementptr inbounds %struct.hash_table, %struct.hash_table* %4, i32 0, i32 5
  %5 = load %struct.hash_tuning*, %struct.hash_tuning** %tuning, align 8, !tbaa !133
  %call = call i64 @compute_bucket_size(i64 %3, %struct.hash_tuning* %5) #22
  store i64 %call, i64* %new_size, align 8, !tbaa !14
  %6 = load i64, i64* %new_size, align 8, !tbaa !14
  %tobool = icmp ne i64 %6, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i1 false, i1* %retval, align 1
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %entry
  %7 = load i64, i64* %new_size, align 8, !tbaa !14
  %8 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !tbaa !6
  %n_buckets = getelementptr inbounds %struct.hash_table, %struct.hash_table* %8, i32 0, i32 2
  %9 = load i64, i64* %n_buckets, align 8, !tbaa !119
  %cmp = icmp eq i64 %7, %9
  br i1 %cmp, label %if.then1, label %if.end2

if.then1:                                         ; preds = %if.end
  store i1 true, i1* %retval, align 1
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end2:                                          ; preds = %if.end
  store %struct.hash_table* %storage, %struct.hash_table** %new_table, align 8, !tbaa !6
  %10 = load i64, i64* %new_size, align 8, !tbaa !14
  %call3 = call noalias i8* @calloc(i64 %10, i64 16) #13
  %11 = bitcast i8* %call3 to %struct.hash_entry*
  %12 = load %struct.hash_table*, %struct.hash_table** %new_table, align 8, !tbaa !6
  %bucket = getelementptr inbounds %struct.hash_table, %struct.hash_table* %12, i32 0, i32 0
  store %struct.hash_entry* %11, %struct.hash_entry** %bucket, align 8, !tbaa !123
  %13 = load %struct.hash_table*, %struct.hash_table** %new_table, align 8, !tbaa !6
  %bucket4 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %13, i32 0, i32 0
  %14 = load %struct.hash_entry*, %struct.hash_entry** %bucket4, align 8, !tbaa !123
  %cmp5 = icmp eq %struct.hash_entry* %14, null
  br i1 %cmp5, label %if.then6, label %if.end7

if.then6:                                         ; preds = %if.end2
  store i1 false, i1* %retval, align 1
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end7:                                          ; preds = %if.end2
  %15 = load i64, i64* %new_size, align 8, !tbaa !14
  %16 = load %struct.hash_table*, %struct.hash_table** %new_table, align 8, !tbaa !6
  %n_buckets8 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %16, i32 0, i32 2
  store i64 %15, i64* %n_buckets8, align 8, !tbaa !119
  %17 = load %struct.hash_table*, %struct.hash_table** %new_table, align 8, !tbaa !6
  %bucket9 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %17, i32 0, i32 0
  %18 = load %struct.hash_entry*, %struct.hash_entry** %bucket9, align 8, !tbaa !123
  %19 = load i64, i64* %new_size, align 8, !tbaa !14
  %add.ptr = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %18, i64 %19
  %20 = load %struct.hash_table*, %struct.hash_table** %new_table, align 8, !tbaa !6
  %bucket_limit = getelementptr inbounds %struct.hash_table, %struct.hash_table* %20, i32 0, i32 1
  store %struct.hash_entry* %add.ptr, %struct.hash_entry** %bucket_limit, align 8, !tbaa !124
  %21 = load %struct.hash_table*, %struct.hash_table** %new_table, align 8, !tbaa !6
  %n_buckets_used = getelementptr inbounds %struct.hash_table, %struct.hash_table* %21, i32 0, i32 3
  store i64 0, i64* %n_buckets_used, align 8, !tbaa !121
  %22 = load %struct.hash_table*, %struct.hash_table** %new_table, align 8, !tbaa !6
  %n_entries = getelementptr inbounds %struct.hash_table, %struct.hash_table* %22, i32 0, i32 4
  store i64 0, i64* %n_entries, align 8, !tbaa !122
  %23 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !tbaa !6
  %tuning10 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %23, i32 0, i32 5
  %24 = load %struct.hash_tuning*, %struct.hash_tuning** %tuning10, align 8, !tbaa !133
  %25 = load %struct.hash_table*, %struct.hash_table** %new_table, align 8, !tbaa !6
  %tuning11 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %25, i32 0, i32 5
  store %struct.hash_tuning* %24, %struct.hash_tuning** %tuning11, align 8, !tbaa !133
  %26 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !tbaa !6
  %hasher = getelementptr inbounds %struct.hash_table, %struct.hash_table* %26, i32 0, i32 6
  %27 = load i64 (i8*, i64)*, i64 (i8*, i64)** %hasher, align 8, !tbaa !129
  %28 = load %struct.hash_table*, %struct.hash_table** %new_table, align 8, !tbaa !6
  %hasher12 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %28, i32 0, i32 6
  store i64 (i8*, i64)* %27, i64 (i8*, i64)** %hasher12, align 8, !tbaa !129
  %29 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !tbaa !6
  %comparator = getelementptr inbounds %struct.hash_table, %struct.hash_table* %29, i32 0, i32 7
  %30 = load i1 (i8*, i8*)*, i1 (i8*, i8*)** %comparator, align 8, !tbaa !128
  %31 = load %struct.hash_table*, %struct.hash_table** %new_table, align 8, !tbaa !6
  %comparator13 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %31, i32 0, i32 7
  store i1 (i8*, i8*)* %30, i1 (i8*, i8*)** %comparator13, align 8, !tbaa !128
  %32 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !tbaa !6
  %data_freer = getelementptr inbounds %struct.hash_table, %struct.hash_table* %32, i32 0, i32 8
  %33 = load void (i8*)*, void (i8*)** %data_freer, align 8, !tbaa !134
  %34 = load %struct.hash_table*, %struct.hash_table** %new_table, align 8, !tbaa !6
  %data_freer14 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %34, i32 0, i32 8
  store void (i8*)* %33, void (i8*)** %data_freer14, align 8, !tbaa !134
  %35 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !tbaa !6
  %free_entry_list = getelementptr inbounds %struct.hash_table, %struct.hash_table* %35, i32 0, i32 9
  %36 = load %struct.hash_entry*, %struct.hash_entry** %free_entry_list, align 8, !tbaa !135
  %37 = load %struct.hash_table*, %struct.hash_table** %new_table, align 8, !tbaa !6
  %free_entry_list15 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %37, i32 0, i32 9
  store %struct.hash_entry* %36, %struct.hash_entry** %free_entry_list15, align 8, !tbaa !135
  %38 = load %struct.hash_table*, %struct.hash_table** %new_table, align 8, !tbaa !6
  %39 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !tbaa !6
  %call16 = call zeroext i1 @transfer_entries(%struct.hash_table* %38, %struct.hash_table* %39, i1 zeroext false)
  br i1 %call16, label %if.then17, label %if.end29

if.then17:                                        ; preds = %if.end7
  %40 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !tbaa !6
  %bucket18 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %40, i32 0, i32 0
  %41 = load %struct.hash_entry*, %struct.hash_entry** %bucket18, align 8, !tbaa !123
  %42 = bitcast %struct.hash_entry* %41 to i8*
  call void @rpl_free(i8* %42)
  %43 = load %struct.hash_table*, %struct.hash_table** %new_table, align 8, !tbaa !6
  %bucket19 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %43, i32 0, i32 0
  %44 = load %struct.hash_entry*, %struct.hash_entry** %bucket19, align 8, !tbaa !123
  %45 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !tbaa !6
  %bucket20 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %45, i32 0, i32 0
  store %struct.hash_entry* %44, %struct.hash_entry** %bucket20, align 8, !tbaa !123
  %46 = load %struct.hash_table*, %struct.hash_table** %new_table, align 8, !tbaa !6
  %bucket_limit21 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %46, i32 0, i32 1
  %47 = load %struct.hash_entry*, %struct.hash_entry** %bucket_limit21, align 8, !tbaa !124
  %48 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !tbaa !6
  %bucket_limit22 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %48, i32 0, i32 1
  store %struct.hash_entry* %47, %struct.hash_entry** %bucket_limit22, align 8, !tbaa !124
  %49 = load %struct.hash_table*, %struct.hash_table** %new_table, align 8, !tbaa !6
  %n_buckets23 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %49, i32 0, i32 2
  %50 = load i64, i64* %n_buckets23, align 8, !tbaa !119
  %51 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !tbaa !6
  %n_buckets24 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %51, i32 0, i32 2
  store i64 %50, i64* %n_buckets24, align 8, !tbaa !119
  %52 = load %struct.hash_table*, %struct.hash_table** %new_table, align 8, !tbaa !6
  %n_buckets_used25 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %52, i32 0, i32 3
  %53 = load i64, i64* %n_buckets_used25, align 8, !tbaa !121
  %54 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !tbaa !6
  %n_buckets_used26 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %54, i32 0, i32 3
  store i64 %53, i64* %n_buckets_used26, align 8, !tbaa !121
  %55 = load %struct.hash_table*, %struct.hash_table** %new_table, align 8, !tbaa !6
  %free_entry_list27 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %55, i32 0, i32 9
  %56 = load %struct.hash_entry*, %struct.hash_entry** %free_entry_list27, align 8, !tbaa !135
  %57 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !tbaa !6
  %free_entry_list28 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %57, i32 0, i32 9
  store %struct.hash_entry* %56, %struct.hash_entry** %free_entry_list28, align 8, !tbaa !135
  store i1 true, i1* %retval, align 1
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end29:                                         ; preds = %if.end7
  %58 = load %struct.hash_table*, %struct.hash_table** %new_table, align 8, !tbaa !6
  %free_entry_list30 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %58, i32 0, i32 9
  %59 = load %struct.hash_entry*, %struct.hash_entry** %free_entry_list30, align 8, !tbaa !135
  %60 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !tbaa !6
  %free_entry_list31 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %60, i32 0, i32 9
  store %struct.hash_entry* %59, %struct.hash_entry** %free_entry_list31, align 8, !tbaa !135
  %61 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !tbaa !6
  %62 = load %struct.hash_table*, %struct.hash_table** %new_table, align 8, !tbaa !6
  %call32 = call zeroext i1 @transfer_entries(%struct.hash_table* %61, %struct.hash_table* %62, i1 zeroext true)
  br i1 %call32, label %land.lhs.true, label %if.then34

land.lhs.true:                                    ; preds = %if.end29
  %63 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !tbaa !6
  %64 = load %struct.hash_table*, %struct.hash_table** %new_table, align 8, !tbaa !6
  %call33 = call zeroext i1 @transfer_entries(%struct.hash_table* %63, %struct.hash_table* %64, i1 zeroext false)
  br i1 %call33, label %if.end35, label %if.then34

if.then34:                                        ; preds = %land.lhs.true, %if.end29
  call void @abort() #21
  unreachable

if.end35:                                         ; preds = %land.lhs.true
  %65 = load %struct.hash_table*, %struct.hash_table** %new_table, align 8, !tbaa !6
  %bucket36 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %65, i32 0, i32 0
  %66 = load %struct.hash_entry*, %struct.hash_entry** %bucket36, align 8, !tbaa !123
  %67 = bitcast %struct.hash_entry* %66 to i8*
  call void @rpl_free(i8* %67)
  store i1 false, i1* %retval, align 1
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end35, %if.then17, %if.then6, %if.then1, %if.then
  %68 = bitcast i64* %new_size to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %68) #13
  %69 = bitcast %struct.hash_table** %new_table to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %69) #13
  %70 = bitcast %struct.hash_table* %storage to i8*
  call void @llvm.lifetime.end.p0i8(i64 80, i8* %70) #13
  %71 = load i1, i1* %retval, align 1
  ret i1 %71
}

; Function Attrs: nounwind uwtable
define internal zeroext i1 @transfer_entries(%struct.hash_table* %dst, %struct.hash_table* %src, i1 zeroext %safe) #7 {
entry:
  %retval = alloca i1, align 1
  %dst.addr = alloca %struct.hash_table*, align 8
  %src.addr = alloca %struct.hash_table*, align 8
  %safe.addr = alloca i8, align 1
  %bucket = alloca %struct.hash_entry*, align 8
  %cursor = alloca %struct.hash_entry*, align 8
  %next = alloca %struct.hash_entry*, align 8
  %data2 = alloca i8*, align 8
  %new_bucket = alloca %struct.hash_entry*, align 8
  %cleanup.dest.slot = alloca i32, align 4
  %new_entry = alloca %struct.hash_entry*, align 8
  store %struct.hash_table* %dst, %struct.hash_table** %dst.addr, align 8, !tbaa !6
  store %struct.hash_table* %src, %struct.hash_table** %src.addr, align 8, !tbaa !6
  %frombool = zext i1 %safe to i8
  store i8 %frombool, i8* %safe.addr, align 1, !tbaa !11
  %0 = bitcast %struct.hash_entry** %bucket to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #13
  %1 = bitcast %struct.hash_entry** %cursor to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %1) #13
  %2 = bitcast %struct.hash_entry** %next to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %2) #13
  %3 = load %struct.hash_table*, %struct.hash_table** %src.addr, align 8, !tbaa !6
  %bucket1 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %3, i32 0, i32 0
  %4 = load %struct.hash_entry*, %struct.hash_entry** %bucket1, align 8, !tbaa !123
  store %struct.hash_entry* %4, %struct.hash_entry** %bucket, align 8, !tbaa !6
  br label %for.cond

for.cond:                                         ; preds = %for.inc45, %entry
  %5 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !tbaa !6
  %6 = load %struct.hash_table*, %struct.hash_table** %src.addr, align 8, !tbaa !6
  %bucket_limit = getelementptr inbounds %struct.hash_table, %struct.hash_table* %6, i32 0, i32 1
  %7 = load %struct.hash_entry*, %struct.hash_entry** %bucket_limit, align 8, !tbaa !124
  %cmp = icmp ult %struct.hash_entry* %5, %7
  br i1 %cmp, label %for.body, label %for.end46

for.body:                                         ; preds = %for.cond
  %8 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !tbaa !6
  %data = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %8, i32 0, i32 0
  %9 = load i8*, i8** %data, align 8, !tbaa !125
  %tobool = icmp ne i8* %9, null
  br i1 %tobool, label %if.then, label %if.end44

if.then:                                          ; preds = %for.body
  %10 = bitcast i8** %data2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %10) #13
  %11 = bitcast %struct.hash_entry** %new_bucket to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %11) #13
  %12 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !tbaa !6
  %next3 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %12, i32 0, i32 1
  %13 = load %struct.hash_entry*, %struct.hash_entry** %next3, align 8, !tbaa !127
  store %struct.hash_entry* %13, %struct.hash_entry** %cursor, align 8, !tbaa !6
  br label %for.cond4

for.cond4:                                        ; preds = %for.inc, %if.then
  %14 = load %struct.hash_entry*, %struct.hash_entry** %cursor, align 8, !tbaa !6
  %tobool5 = icmp ne %struct.hash_entry* %14, null
  br i1 %tobool5, label %for.body6, label %for.end

for.body6:                                        ; preds = %for.cond4
  %15 = load %struct.hash_entry*, %struct.hash_entry** %cursor, align 8, !tbaa !6
  %data7 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %15, i32 0, i32 0
  %16 = load i8*, i8** %data7, align 8, !tbaa !125
  store i8* %16, i8** %data2, align 8, !tbaa !6
  %17 = load %struct.hash_table*, %struct.hash_table** %dst.addr, align 8, !tbaa !6
  %18 = load i8*, i8** %data2, align 8, !tbaa !6
  %call = call %struct.hash_entry* @safe_hasher(%struct.hash_table* %17, i8* %18)
  store %struct.hash_entry* %call, %struct.hash_entry** %new_bucket, align 8, !tbaa !6
  %19 = load %struct.hash_entry*, %struct.hash_entry** %cursor, align 8, !tbaa !6
  %next8 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %19, i32 0, i32 1
  %20 = load %struct.hash_entry*, %struct.hash_entry** %next8, align 8, !tbaa !127
  store %struct.hash_entry* %20, %struct.hash_entry** %next, align 8, !tbaa !6
  %21 = load %struct.hash_entry*, %struct.hash_entry** %new_bucket, align 8, !tbaa !6
  %data9 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %21, i32 0, i32 0
  %22 = load i8*, i8** %data9, align 8, !tbaa !125
  %tobool10 = icmp ne i8* %22, null
  br i1 %tobool10, label %if.then11, label %if.else

if.then11:                                        ; preds = %for.body6
  %23 = load %struct.hash_entry*, %struct.hash_entry** %new_bucket, align 8, !tbaa !6
  %next12 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %23, i32 0, i32 1
  %24 = load %struct.hash_entry*, %struct.hash_entry** %next12, align 8, !tbaa !127
  %25 = load %struct.hash_entry*, %struct.hash_entry** %cursor, align 8, !tbaa !6
  %next13 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %25, i32 0, i32 1
  store %struct.hash_entry* %24, %struct.hash_entry** %next13, align 8, !tbaa !127
  %26 = load %struct.hash_entry*, %struct.hash_entry** %cursor, align 8, !tbaa !6
  %27 = load %struct.hash_entry*, %struct.hash_entry** %new_bucket, align 8, !tbaa !6
  %next14 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %27, i32 0, i32 1
  store %struct.hash_entry* %26, %struct.hash_entry** %next14, align 8, !tbaa !127
  br label %if.end

if.else:                                          ; preds = %for.body6
  %28 = load i8*, i8** %data2, align 8, !tbaa !6
  %29 = load %struct.hash_entry*, %struct.hash_entry** %new_bucket, align 8, !tbaa !6
  %data15 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %29, i32 0, i32 0
  store i8* %28, i8** %data15, align 8, !tbaa !125
  %30 = load %struct.hash_table*, %struct.hash_table** %dst.addr, align 8, !tbaa !6
  %n_buckets_used = getelementptr inbounds %struct.hash_table, %struct.hash_table* %30, i32 0, i32 3
  %31 = load i64, i64* %n_buckets_used, align 8, !tbaa !121
  %inc = add i64 %31, 1
  store i64 %inc, i64* %n_buckets_used, align 8, !tbaa !121
  %32 = load %struct.hash_table*, %struct.hash_table** %dst.addr, align 8, !tbaa !6
  %33 = load %struct.hash_entry*, %struct.hash_entry** %cursor, align 8, !tbaa !6
  call void @free_entry(%struct.hash_table* %32, %struct.hash_entry* %33)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then11
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %34 = load %struct.hash_entry*, %struct.hash_entry** %next, align 8, !tbaa !6
  store %struct.hash_entry* %34, %struct.hash_entry** %cursor, align 8, !tbaa !6
  br label %for.cond4

for.end:                                          ; preds = %for.cond4
  %35 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !tbaa !6
  %data16 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %35, i32 0, i32 0
  %36 = load i8*, i8** %data16, align 8, !tbaa !125
  store i8* %36, i8** %data2, align 8, !tbaa !6
  %37 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !tbaa !6
  %next17 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %37, i32 0, i32 1
  store %struct.hash_entry* null, %struct.hash_entry** %next17, align 8, !tbaa !127
  %38 = load i8, i8* %safe.addr, align 1, !tbaa !11, !range !25
  %tobool18 = trunc i8 %38 to i1
  br i1 %tobool18, label %if.then19, label %if.end20

if.then19:                                        ; preds = %for.end
  store i32 4, i32* %cleanup.dest.slot, align 4
  br label %cleanup40

if.end20:                                         ; preds = %for.end
  %39 = load %struct.hash_table*, %struct.hash_table** %dst.addr, align 8, !tbaa !6
  %40 = load i8*, i8** %data2, align 8, !tbaa !6
  %call21 = call %struct.hash_entry* @safe_hasher(%struct.hash_table* %39, i8* %40)
  store %struct.hash_entry* %call21, %struct.hash_entry** %new_bucket, align 8, !tbaa !6
  %41 = load %struct.hash_entry*, %struct.hash_entry** %new_bucket, align 8, !tbaa !6
  %data22 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %41, i32 0, i32 0
  %42 = load i8*, i8** %data22, align 8, !tbaa !125
  %tobool23 = icmp ne i8* %42, null
  br i1 %tobool23, label %if.then24, label %if.else33

if.then24:                                        ; preds = %if.end20
  %43 = bitcast %struct.hash_entry** %new_entry to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %43) #13
  %44 = load %struct.hash_table*, %struct.hash_table** %dst.addr, align 8, !tbaa !6
  %call25 = call %struct.hash_entry* @allocate_entry(%struct.hash_table* %44)
  store %struct.hash_entry* %call25, %struct.hash_entry** %new_entry, align 8, !tbaa !6
  %45 = load %struct.hash_entry*, %struct.hash_entry** %new_entry, align 8, !tbaa !6
  %cmp26 = icmp eq %struct.hash_entry* %45, null
  br i1 %cmp26, label %if.then27, label %if.end28

if.then27:                                        ; preds = %if.then24
  store i1 false, i1* %retval, align 1
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end28:                                         ; preds = %if.then24
  %46 = load i8*, i8** %data2, align 8, !tbaa !6
  %47 = load %struct.hash_entry*, %struct.hash_entry** %new_entry, align 8, !tbaa !6
  %data29 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %47, i32 0, i32 0
  store i8* %46, i8** %data29, align 8, !tbaa !125
  %48 = load %struct.hash_entry*, %struct.hash_entry** %new_bucket, align 8, !tbaa !6
  %next30 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %48, i32 0, i32 1
  %49 = load %struct.hash_entry*, %struct.hash_entry** %next30, align 8, !tbaa !127
  %50 = load %struct.hash_entry*, %struct.hash_entry** %new_entry, align 8, !tbaa !6
  %next31 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %50, i32 0, i32 1
  store %struct.hash_entry* %49, %struct.hash_entry** %next31, align 8, !tbaa !127
  %51 = load %struct.hash_entry*, %struct.hash_entry** %new_entry, align 8, !tbaa !6
  %52 = load %struct.hash_entry*, %struct.hash_entry** %new_bucket, align 8, !tbaa !6
  %next32 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %52, i32 0, i32 1
  store %struct.hash_entry* %51, %struct.hash_entry** %next32, align 8, !tbaa !127
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end28, %if.then27
  %53 = bitcast %struct.hash_entry** %new_entry to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %53) #13
  %cleanup.dest = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest, label %cleanup40 [
    i32 0, label %cleanup.cont
  ]

cleanup.cont:                                     ; preds = %cleanup
  br label %if.end37

if.else33:                                        ; preds = %if.end20
  %54 = load i8*, i8** %data2, align 8, !tbaa !6
  %55 = load %struct.hash_entry*, %struct.hash_entry** %new_bucket, align 8, !tbaa !6
  %data34 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %55, i32 0, i32 0
  store i8* %54, i8** %data34, align 8, !tbaa !125
  %56 = load %struct.hash_table*, %struct.hash_table** %dst.addr, align 8, !tbaa !6
  %n_buckets_used35 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %56, i32 0, i32 3
  %57 = load i64, i64* %n_buckets_used35, align 8, !tbaa !121
  %inc36 = add i64 %57, 1
  store i64 %inc36, i64* %n_buckets_used35, align 8, !tbaa !121
  br label %if.end37

if.end37:                                         ; preds = %if.else33, %cleanup.cont
  %58 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !tbaa !6
  %data38 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %58, i32 0, i32 0
  store i8* null, i8** %data38, align 8, !tbaa !125
  %59 = load %struct.hash_table*, %struct.hash_table** %src.addr, align 8, !tbaa !6
  %n_buckets_used39 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %59, i32 0, i32 3
  %60 = load i64, i64* %n_buckets_used39, align 8, !tbaa !121
  %dec = add i64 %60, -1
  store i64 %dec, i64* %n_buckets_used39, align 8, !tbaa !121
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup40

cleanup40:                                        ; preds = %if.end37, %cleanup, %if.then19
  %61 = bitcast %struct.hash_entry** %new_bucket to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %61) #13
  %62 = bitcast i8** %data2 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %62) #13
  %cleanup.dest42 = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest42, label %cleanup47 [
    i32 0, label %cleanup.cont43
    i32 4, label %for.inc45
  ]

cleanup.cont43:                                   ; preds = %cleanup40
  br label %if.end44

if.end44:                                         ; preds = %cleanup.cont43, %for.body
  br label %for.inc45

for.inc45:                                        ; preds = %if.end44, %cleanup40
  %63 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !tbaa !6
  %incdec.ptr = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %63, i32 1
  store %struct.hash_entry* %incdec.ptr, %struct.hash_entry** %bucket, align 8, !tbaa !6
  br label %for.cond

for.end46:                                        ; preds = %for.cond
  store i1 true, i1* %retval, align 1
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup47

cleanup47:                                        ; preds = %for.end46, %cleanup40
  %64 = bitcast %struct.hash_entry** %next to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %64) #13
  %65 = bitcast %struct.hash_entry** %cursor to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %65) #13
  %66 = bitcast %struct.hash_entry** %bucket to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %66) #13
  %67 = load i1, i1* %retval, align 1
  ret i1 %67
}

; Function Attrs: nounwind uwtable
define internal void @free_entry(%struct.hash_table* %table, %struct.hash_entry* %entry1) #7 {
entry:
  %table.addr = alloca %struct.hash_table*, align 8
  %entry.addr = alloca %struct.hash_entry*, align 8
  store %struct.hash_table* %table, %struct.hash_table** %table.addr, align 8, !tbaa !6
  store %struct.hash_entry* %entry1, %struct.hash_entry** %entry.addr, align 8, !tbaa !6
  %0 = load %struct.hash_entry*, %struct.hash_entry** %entry.addr, align 8, !tbaa !6
  %data = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %0, i32 0, i32 0
  store i8* null, i8** %data, align 8, !tbaa !125
  %1 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !tbaa !6
  %free_entry_list = getelementptr inbounds %struct.hash_table, %struct.hash_table* %1, i32 0, i32 9
  %2 = load %struct.hash_entry*, %struct.hash_entry** %free_entry_list, align 8, !tbaa !135
  %3 = load %struct.hash_entry*, %struct.hash_entry** %entry.addr, align 8, !tbaa !6
  %next = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %3, i32 0, i32 1
  store %struct.hash_entry* %2, %struct.hash_entry** %next, align 8, !tbaa !127
  %4 = load %struct.hash_entry*, %struct.hash_entry** %entry.addr, align 8, !tbaa !6
  %5 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !tbaa !6
  %free_entry_list2 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %5, i32 0, i32 9
  store %struct.hash_entry* %4, %struct.hash_entry** %free_entry_list2, align 8, !tbaa !135
  ret void
}

; Function Attrs: nounwind uwtable
define internal %struct.hash_entry* @allocate_entry(%struct.hash_table* %table) #7 {
entry:
  %table.addr = alloca %struct.hash_table*, align 8
  %new = alloca %struct.hash_entry*, align 8
  store %struct.hash_table* %table, %struct.hash_table** %table.addr, align 8, !tbaa !6
  %0 = bitcast %struct.hash_entry** %new to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #13
  %1 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !tbaa !6
  %free_entry_list = getelementptr inbounds %struct.hash_table, %struct.hash_table* %1, i32 0, i32 9
  %2 = load %struct.hash_entry*, %struct.hash_entry** %free_entry_list, align 8, !tbaa !135
  %tobool = icmp ne %struct.hash_entry* %2, null
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %3 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !tbaa !6
  %free_entry_list1 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %3, i32 0, i32 9
  %4 = load %struct.hash_entry*, %struct.hash_entry** %free_entry_list1, align 8, !tbaa !135
  store %struct.hash_entry* %4, %struct.hash_entry** %new, align 8, !tbaa !6
  %5 = load %struct.hash_entry*, %struct.hash_entry** %new, align 8, !tbaa !6
  %next = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %5, i32 0, i32 1
  %6 = load %struct.hash_entry*, %struct.hash_entry** %next, align 8, !tbaa !127
  %7 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !tbaa !6
  %free_entry_list2 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %7, i32 0, i32 9
  store %struct.hash_entry* %6, %struct.hash_entry** %free_entry_list2, align 8, !tbaa !135
  br label %if.end

if.else:                                          ; preds = %entry
  %call = call noalias i8* @malloc(i64 16) #13
  %8 = bitcast i8* %call to %struct.hash_entry*
  store %struct.hash_entry* %8, %struct.hash_entry** %new, align 8, !tbaa !6
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %9 = load %struct.hash_entry*, %struct.hash_entry** %new, align 8, !tbaa !6
  %10 = bitcast %struct.hash_entry** %new to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %10) #13
  ret %struct.hash_entry* %9
}

; Function Attrs: nounwind uwtable
define dso_local i32 @hash_insert_if_absent(%struct.hash_table* %table, i8* %entry1, i8** %matched_ent) #7 {
entry:
  %retval = alloca i32, align 4
  %table.addr = alloca %struct.hash_table*, align 8
  %entry.addr = alloca i8*, align 8
  %matched_ent.addr = alloca i8**, align 8
  %data = alloca i8*, align 8
  %bucket = alloca %struct.hash_entry*, align 8
  %cleanup.dest.slot = alloca i32, align 4
  %tuning22 = alloca %struct.hash_tuning*, align 8
  %candidate = alloca float, align 4
  %new_entry = alloca %struct.hash_entry*, align 8
  store %struct.hash_table* %table, %struct.hash_table** %table.addr, align 8, !tbaa !6
  store i8* %entry1, i8** %entry.addr, align 8, !tbaa !6
  store i8** %matched_ent, i8*** %matched_ent.addr, align 8, !tbaa !6
  %0 = bitcast i8** %data to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #13
  %1 = bitcast %struct.hash_entry** %bucket to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %1) #13
  %2 = load i8*, i8** %entry.addr, align 8, !tbaa !6
  %tobool = icmp ne i8* %2, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  call void @abort() #21
  unreachable

if.end:                                           ; preds = %entry
  %3 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !tbaa !6
  %4 = load i8*, i8** %entry.addr, align 8, !tbaa !6
  %call = call i8* @hash_find_entry(%struct.hash_table* %3, i8* %4, %struct.hash_entry** %bucket, i1 zeroext false)
  store i8* %call, i8** %data, align 8, !tbaa !6
  %cmp = icmp ne i8* %call, null
  br i1 %cmp, label %if.then2, label %if.end6

if.then2:                                         ; preds = %if.end
  %5 = load i8**, i8*** %matched_ent.addr, align 8, !tbaa !6
  %tobool3 = icmp ne i8** %5, null
  br i1 %tobool3, label %if.then4, label %if.end5

if.then4:                                         ; preds = %if.then2
  %6 = load i8*, i8** %data, align 8, !tbaa !6
  %7 = load i8**, i8*** %matched_ent.addr, align 8, !tbaa !6
  store i8* %6, i8** %7, align 8, !tbaa !6
  br label %if.end5

if.end5:                                          ; preds = %if.then4, %if.then2
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup69

if.end6:                                          ; preds = %if.end
  %8 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !tbaa !6
  %n_buckets_used = getelementptr inbounds %struct.hash_table, %struct.hash_table* %8, i32 0, i32 3
  %9 = load i64, i64* %n_buckets_used, align 8, !tbaa !121
  %conv = uitofp i64 %9 to float
  %10 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !tbaa !6
  %tuning = getelementptr inbounds %struct.hash_table, %struct.hash_table* %10, i32 0, i32 5
  %11 = load %struct.hash_tuning*, %struct.hash_tuning** %tuning, align 8, !tbaa !133
  %growth_threshold = getelementptr inbounds %struct.hash_tuning, %struct.hash_tuning* %11, i32 0, i32 2
  %12 = load float, float* %growth_threshold, align 4, !tbaa !136
  %13 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !tbaa !6
  %n_buckets = getelementptr inbounds %struct.hash_table, %struct.hash_table* %13, i32 0, i32 2
  %14 = load i64, i64* %n_buckets, align 8, !tbaa !119
  %conv7 = uitofp i64 %14 to float
  %mul = fmul float %12, %conv7
  %cmp8 = fcmp ogt float %conv, %mul
  br i1 %cmp8, label %if.then10, label %if.end50

if.then10:                                        ; preds = %if.end6
  %15 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !tbaa !6
  %call11 = call zeroext i1 @check_tuning(%struct.hash_table* %15)
  %16 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !tbaa !6
  %n_buckets_used12 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %16, i32 0, i32 3
  %17 = load i64, i64* %n_buckets_used12, align 8, !tbaa !121
  %conv13 = uitofp i64 %17 to float
  %18 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !tbaa !6
  %tuning14 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %18, i32 0, i32 5
  %19 = load %struct.hash_tuning*, %struct.hash_tuning** %tuning14, align 8, !tbaa !133
  %growth_threshold15 = getelementptr inbounds %struct.hash_tuning, %struct.hash_tuning* %19, i32 0, i32 2
  %20 = load float, float* %growth_threshold15, align 4, !tbaa !136
  %21 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !tbaa !6
  %n_buckets16 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %21, i32 0, i32 2
  %22 = load i64, i64* %n_buckets16, align 8, !tbaa !119
  %conv17 = uitofp i64 %22 to float
  %mul18 = fmul float %20, %conv17
  %cmp19 = fcmp ogt float %conv13, %mul18
  br i1 %cmp19, label %if.then21, label %if.end49

if.then21:                                        ; preds = %if.then10
  %23 = bitcast %struct.hash_tuning** %tuning22 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %23) #13
  %24 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !tbaa !6
  %tuning23 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %24, i32 0, i32 5
  %25 = load %struct.hash_tuning*, %struct.hash_tuning** %tuning23, align 8, !tbaa !133
  store %struct.hash_tuning* %25, %struct.hash_tuning** %tuning22, align 8, !tbaa !6
  %26 = bitcast float* %candidate to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %26) #13
  %27 = load %struct.hash_tuning*, %struct.hash_tuning** %tuning22, align 8, !tbaa !6
  %is_n_buckets = getelementptr inbounds %struct.hash_tuning, %struct.hash_tuning* %27, i32 0, i32 4
  %28 = load i8, i8* %is_n_buckets, align 4, !tbaa !141, !range !25
  %tobool24 = trunc i8 %28 to i1
  br i1 %tobool24, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then21
  %29 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !tbaa !6
  %n_buckets26 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %29, i32 0, i32 2
  %30 = load i64, i64* %n_buckets26, align 8, !tbaa !119
  %conv27 = uitofp i64 %30 to float
  %31 = load %struct.hash_tuning*, %struct.hash_tuning** %tuning22, align 8, !tbaa !6
  %growth_factor = getelementptr inbounds %struct.hash_tuning, %struct.hash_tuning* %31, i32 0, i32 3
  %32 = load float, float* %growth_factor, align 4, !tbaa !138
  %mul28 = fmul float %conv27, %32
  br label %cond.end

cond.false:                                       ; preds = %if.then21
  %33 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !tbaa !6
  %n_buckets29 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %33, i32 0, i32 2
  %34 = load i64, i64* %n_buckets29, align 8, !tbaa !119
  %conv30 = uitofp i64 %34 to float
  %35 = load %struct.hash_tuning*, %struct.hash_tuning** %tuning22, align 8, !tbaa !6
  %growth_factor31 = getelementptr inbounds %struct.hash_tuning, %struct.hash_tuning* %35, i32 0, i32 3
  %36 = load float, float* %growth_factor31, align 4, !tbaa !138
  %mul32 = fmul float %conv30, %36
  %37 = load %struct.hash_tuning*, %struct.hash_tuning** %tuning22, align 8, !tbaa !6
  %growth_threshold33 = getelementptr inbounds %struct.hash_tuning, %struct.hash_tuning* %37, i32 0, i32 2
  %38 = load float, float* %growth_threshold33, align 4, !tbaa !136
  %mul34 = fmul float %mul32, %38
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi float [ %mul28, %cond.true ], [ %mul34, %cond.false ]
  store float %cond, float* %candidate, align 4, !tbaa !131
  %39 = load float, float* %candidate, align 4, !tbaa !131
  %cmp35 = fcmp ole float 0x43F0000000000000, %39
  br i1 %cmp35, label %if.then37, label %if.end38

if.then37:                                        ; preds = %cond.end
  store i32 -1, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end38:                                         ; preds = %cond.end
  %40 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !tbaa !6
  %41 = load float, float* %candidate, align 4, !tbaa !131
  %conv39 = fptoui float %41 to i64
  %call40 = call zeroext i1 @hash_rehash(%struct.hash_table* %40, i64 %conv39)
  br i1 %call40, label %if.end42, label %if.then41

if.then41:                                        ; preds = %if.end38
  store i32 -1, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end42:                                         ; preds = %if.end38
  %42 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !tbaa !6
  %43 = load i8*, i8** %entry.addr, align 8, !tbaa !6
  %call43 = call i8* @hash_find_entry(%struct.hash_table* %42, i8* %43, %struct.hash_entry** %bucket, i1 zeroext false)
  %cmp44 = icmp ne i8* %call43, null
  br i1 %cmp44, label %if.then46, label %if.end47

if.then46:                                        ; preds = %if.end42
  call void @abort() #21
  unreachable

if.end47:                                         ; preds = %if.end42
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end47, %if.then41, %if.then37
  %44 = bitcast float* %candidate to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %44) #13
  %45 = bitcast %struct.hash_tuning** %tuning22 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %45) #13
  %cleanup.dest = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest, label %cleanup69 [
    i32 0, label %cleanup.cont
  ]

cleanup.cont:                                     ; preds = %cleanup
  br label %if.end49

if.end49:                                         ; preds = %cleanup.cont, %if.then10
  br label %if.end50

if.end50:                                         ; preds = %if.end49, %if.end6
  %46 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !tbaa !6
  %data51 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %46, i32 0, i32 0
  %47 = load i8*, i8** %data51, align 8, !tbaa !125
  %tobool52 = icmp ne i8* %47, null
  br i1 %tobool52, label %if.then53, label %if.end63

if.then53:                                        ; preds = %if.end50
  %48 = bitcast %struct.hash_entry** %new_entry to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %48) #13
  %49 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !tbaa !6
  %call54 = call %struct.hash_entry* @allocate_entry(%struct.hash_table* %49)
  store %struct.hash_entry* %call54, %struct.hash_entry** %new_entry, align 8, !tbaa !6
  %50 = load %struct.hash_entry*, %struct.hash_entry** %new_entry, align 8, !tbaa !6
  %cmp55 = icmp eq %struct.hash_entry* %50, null
  br i1 %cmp55, label %if.then57, label %if.end58

if.then57:                                        ; preds = %if.then53
  store i32 -1, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup62

if.end58:                                         ; preds = %if.then53
  %51 = load i8*, i8** %entry.addr, align 8, !tbaa !6
  %52 = load %struct.hash_entry*, %struct.hash_entry** %new_entry, align 8, !tbaa !6
  %data59 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %52, i32 0, i32 0
  store i8* %51, i8** %data59, align 8, !tbaa !125
  %53 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !tbaa !6
  %next = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %53, i32 0, i32 1
  %54 = load %struct.hash_entry*, %struct.hash_entry** %next, align 8, !tbaa !127
  %55 = load %struct.hash_entry*, %struct.hash_entry** %new_entry, align 8, !tbaa !6
  %next60 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %55, i32 0, i32 1
  store %struct.hash_entry* %54, %struct.hash_entry** %next60, align 8, !tbaa !127
  %56 = load %struct.hash_entry*, %struct.hash_entry** %new_entry, align 8, !tbaa !6
  %57 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !tbaa !6
  %next61 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %57, i32 0, i32 1
  store %struct.hash_entry* %56, %struct.hash_entry** %next61, align 8, !tbaa !127
  %58 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !tbaa !6
  %n_entries = getelementptr inbounds %struct.hash_table, %struct.hash_table* %58, i32 0, i32 4
  %59 = load i64, i64* %n_entries, align 8, !tbaa !122
  %inc = add i64 %59, 1
  store i64 %inc, i64* %n_entries, align 8, !tbaa !122
  store i32 1, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup62

cleanup62:                                        ; preds = %if.end58, %if.then57
  %60 = bitcast %struct.hash_entry** %new_entry to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %60) #13
  br label %cleanup69

if.end63:                                         ; preds = %if.end50
  %61 = load i8*, i8** %entry.addr, align 8, !tbaa !6
  %62 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !tbaa !6
  %data64 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %62, i32 0, i32 0
  store i8* %61, i8** %data64, align 8, !tbaa !125
  %63 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !tbaa !6
  %n_entries65 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %63, i32 0, i32 4
  %64 = load i64, i64* %n_entries65, align 8, !tbaa !122
  %inc66 = add i64 %64, 1
  store i64 %inc66, i64* %n_entries65, align 8, !tbaa !122
  %65 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !tbaa !6
  %n_buckets_used67 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %65, i32 0, i32 3
  %66 = load i64, i64* %n_buckets_used67, align 8, !tbaa !121
  %inc68 = add i64 %66, 1
  store i64 %inc68, i64* %n_buckets_used67, align 8, !tbaa !121
  store i32 1, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup69

cleanup69:                                        ; preds = %if.end63, %cleanup62, %cleanup, %if.end5
  %67 = bitcast %struct.hash_entry** %bucket to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %67) #13
  %68 = bitcast i8** %data to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %68) #13
  %69 = load i32, i32* %retval, align 4
  ret i32 %69
}

; Function Attrs: nounwind uwtable
define internal i8* @hash_find_entry(%struct.hash_table* %table, i8* %entry1, %struct.hash_entry** %bucket_head, i1 zeroext %delete) #7 {
entry:
  %retval = alloca i8*, align 8
  %table.addr = alloca %struct.hash_table*, align 8
  %entry.addr = alloca i8*, align 8
  %bucket_head.addr = alloca %struct.hash_entry**, align 8
  %delete.addr = alloca i8, align 1
  %bucket = alloca %struct.hash_entry*, align 8
  %cursor = alloca %struct.hash_entry*, align 8
  %cleanup.dest.slot = alloca i32, align 4
  %data7 = alloca i8*, align 8
  %next12 = alloca %struct.hash_entry*, align 8
  %data29 = alloca i8*, align 8
  %next34 = alloca %struct.hash_entry*, align 8
  store %struct.hash_table* %table, %struct.hash_table** %table.addr, align 8, !tbaa !6
  store i8* %entry1, i8** %entry.addr, align 8, !tbaa !6
  store %struct.hash_entry** %bucket_head, %struct.hash_entry*** %bucket_head.addr, align 8, !tbaa !6
  %frombool = zext i1 %delete to i8
  store i8 %frombool, i8* %delete.addr, align 1, !tbaa !11
  %0 = bitcast %struct.hash_entry** %bucket to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #13
  %1 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !tbaa !6
  %2 = load i8*, i8** %entry.addr, align 8, !tbaa !6
  %call = call %struct.hash_entry* @safe_hasher(%struct.hash_table* %1, i8* %2)
  store %struct.hash_entry* %call, %struct.hash_entry** %bucket, align 8, !tbaa !6
  %3 = bitcast %struct.hash_entry** %cursor to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %3) #13
  %4 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !tbaa !6
  %5 = load %struct.hash_entry**, %struct.hash_entry*** %bucket_head.addr, align 8, !tbaa !6
  store %struct.hash_entry* %4, %struct.hash_entry** %5, align 8, !tbaa !6
  %6 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !tbaa !6
  %data = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %6, i32 0, i32 0
  %7 = load i8*, i8** %data, align 8, !tbaa !125
  %cmp = icmp eq i8* %7, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i8* null, i8** %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %entry
  %8 = load i8*, i8** %entry.addr, align 8, !tbaa !6
  %9 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !tbaa !6
  %data2 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %9, i32 0, i32 0
  %10 = load i8*, i8** %data2, align 8, !tbaa !125
  %cmp3 = icmp eq i8* %8, %10
  br i1 %cmp3, label %if.then6, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end
  %11 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !tbaa !6
  %comparator = getelementptr inbounds %struct.hash_table, %struct.hash_table* %11, i32 0, i32 7
  %12 = load i1 (i8*, i8*)*, i1 (i8*, i8*)** %comparator, align 8, !tbaa !128
  %13 = load i8*, i8** %entry.addr, align 8, !tbaa !6
  %14 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !tbaa !6
  %data4 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %14, i32 0, i32 0
  %15 = load i8*, i8** %data4, align 8, !tbaa !125
  %call5 = call zeroext i1 %12(i8* %13, i8* %15)
  br i1 %call5, label %if.then6, label %if.end17

if.then6:                                         ; preds = %lor.lhs.false, %if.end
  %16 = bitcast i8** %data7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %16) #13
  %17 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !tbaa !6
  %data8 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %17, i32 0, i32 0
  %18 = load i8*, i8** %data8, align 8, !tbaa !125
  store i8* %18, i8** %data7, align 8, !tbaa !6
  %19 = load i8, i8* %delete.addr, align 1, !tbaa !11, !range !25
  %tobool = trunc i8 %19 to i1
  br i1 %tobool, label %if.then9, label %if.end16

if.then9:                                         ; preds = %if.then6
  %20 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !tbaa !6
  %next = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %20, i32 0, i32 1
  %21 = load %struct.hash_entry*, %struct.hash_entry** %next, align 8, !tbaa !127
  %tobool10 = icmp ne %struct.hash_entry* %21, null
  br i1 %tobool10, label %if.then11, label %if.else

if.then11:                                        ; preds = %if.then9
  %22 = bitcast %struct.hash_entry** %next12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %22) #13
  %23 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !tbaa !6
  %next13 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %23, i32 0, i32 1
  %24 = load %struct.hash_entry*, %struct.hash_entry** %next13, align 8, !tbaa !127
  store %struct.hash_entry* %24, %struct.hash_entry** %next12, align 8, !tbaa !6
  %25 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !tbaa !6
  %26 = load %struct.hash_entry*, %struct.hash_entry** %next12, align 8, !tbaa !6
  %27 = bitcast %struct.hash_entry* %25 to i8*
  %28 = bitcast %struct.hash_entry* %26 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %27, i8* align 8 %28, i64 16, i1 false), !tbaa.struct !111
  %29 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !tbaa !6
  %30 = load %struct.hash_entry*, %struct.hash_entry** %next12, align 8, !tbaa !6
  call void @free_entry(%struct.hash_table* %29, %struct.hash_entry* %30)
  %31 = bitcast %struct.hash_entry** %next12 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %31) #13
  br label %if.end15

if.else:                                          ; preds = %if.then9
  %32 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !tbaa !6
  %data14 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %32, i32 0, i32 0
  store i8* null, i8** %data14, align 8, !tbaa !125
  br label %if.end15

if.end15:                                         ; preds = %if.else, %if.then11
  br label %if.end16

if.end16:                                         ; preds = %if.end15, %if.then6
  %33 = load i8*, i8** %data7, align 8, !tbaa !6
  store i8* %33, i8** %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  %34 = bitcast i8** %data7 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %34) #13
  br label %cleanup

if.end17:                                         ; preds = %lor.lhs.false
  %35 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !tbaa !6
  store %struct.hash_entry* %35, %struct.hash_entry** %cursor, align 8, !tbaa !6
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end17
  %36 = load %struct.hash_entry*, %struct.hash_entry** %cursor, align 8, !tbaa !6
  %next18 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %36, i32 0, i32 1
  %37 = load %struct.hash_entry*, %struct.hash_entry** %next18, align 8, !tbaa !127
  %tobool19 = icmp ne %struct.hash_entry* %37, null
  br i1 %tobool19, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %38 = load i8*, i8** %entry.addr, align 8, !tbaa !6
  %39 = load %struct.hash_entry*, %struct.hash_entry** %cursor, align 8, !tbaa !6
  %next20 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %39, i32 0, i32 1
  %40 = load %struct.hash_entry*, %struct.hash_entry** %next20, align 8, !tbaa !127
  %data21 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %40, i32 0, i32 0
  %41 = load i8*, i8** %data21, align 8, !tbaa !125
  %cmp22 = icmp eq i8* %38, %41
  br i1 %cmp22, label %if.then28, label %lor.lhs.false23

lor.lhs.false23:                                  ; preds = %for.body
  %42 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !tbaa !6
  %comparator24 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %42, i32 0, i32 7
  %43 = load i1 (i8*, i8*)*, i1 (i8*, i8*)** %comparator24, align 8, !tbaa !128
  %44 = load i8*, i8** %entry.addr, align 8, !tbaa !6
  %45 = load %struct.hash_entry*, %struct.hash_entry** %cursor, align 8, !tbaa !6
  %next25 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %45, i32 0, i32 1
  %46 = load %struct.hash_entry*, %struct.hash_entry** %next25, align 8, !tbaa !127
  %data26 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %46, i32 0, i32 0
  %47 = load i8*, i8** %data26, align 8, !tbaa !125
  %call27 = call zeroext i1 %43(i8* %44, i8* %47)
  br i1 %call27, label %if.then28, label %if.end39

if.then28:                                        ; preds = %lor.lhs.false23, %for.body
  %48 = bitcast i8** %data29 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %48) #13
  %49 = load %struct.hash_entry*, %struct.hash_entry** %cursor, align 8, !tbaa !6
  %next30 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %49, i32 0, i32 1
  %50 = load %struct.hash_entry*, %struct.hash_entry** %next30, align 8, !tbaa !127
  %data31 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %50, i32 0, i32 0
  %51 = load i8*, i8** %data31, align 8, !tbaa !125
  store i8* %51, i8** %data29, align 8, !tbaa !6
  %52 = load i8, i8* %delete.addr, align 1, !tbaa !11, !range !25
  %tobool32 = trunc i8 %52 to i1
  br i1 %tobool32, label %if.then33, label %if.end38

if.then33:                                        ; preds = %if.then28
  %53 = bitcast %struct.hash_entry** %next34 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %53) #13
  %54 = load %struct.hash_entry*, %struct.hash_entry** %cursor, align 8, !tbaa !6
  %next35 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %54, i32 0, i32 1
  %55 = load %struct.hash_entry*, %struct.hash_entry** %next35, align 8, !tbaa !127
  store %struct.hash_entry* %55, %struct.hash_entry** %next34, align 8, !tbaa !6
  %56 = load %struct.hash_entry*, %struct.hash_entry** %next34, align 8, !tbaa !6
  %next36 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %56, i32 0, i32 1
  %57 = load %struct.hash_entry*, %struct.hash_entry** %next36, align 8, !tbaa !127
  %58 = load %struct.hash_entry*, %struct.hash_entry** %cursor, align 8, !tbaa !6
  %next37 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %58, i32 0, i32 1
  store %struct.hash_entry* %57, %struct.hash_entry** %next37, align 8, !tbaa !127
  %59 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !tbaa !6
  %60 = load %struct.hash_entry*, %struct.hash_entry** %next34, align 8, !tbaa !6
  call void @free_entry(%struct.hash_table* %59, %struct.hash_entry* %60)
  %61 = bitcast %struct.hash_entry** %next34 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %61) #13
  br label %if.end38

if.end38:                                         ; preds = %if.then33, %if.then28
  %62 = load i8*, i8** %data29, align 8, !tbaa !6
  store i8* %62, i8** %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  %63 = bitcast i8** %data29 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %63) #13
  br label %cleanup

if.end39:                                         ; preds = %lor.lhs.false23
  br label %for.inc

for.inc:                                          ; preds = %if.end39
  %64 = load %struct.hash_entry*, %struct.hash_entry** %cursor, align 8, !tbaa !6
  %next40 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %64, i32 0, i32 1
  %65 = load %struct.hash_entry*, %struct.hash_entry** %next40, align 8, !tbaa !127
  store %struct.hash_entry* %65, %struct.hash_entry** %cursor, align 8, !tbaa !6
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i8* null, i8** %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %for.end, %if.end38, %if.end16, %if.then
  %66 = bitcast %struct.hash_entry** %cursor to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %66) #13
  %67 = bitcast %struct.hash_entry** %bucket to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %67) #13
  %68 = load i8*, i8** %retval, align 8
  ret i8* %68
}

; Function Attrs: nounwind uwtable
define dso_local i8* @hash_insert(%struct.hash_table* %table, i8* %entry1) #7 {
entry:
  %table.addr = alloca %struct.hash_table*, align 8
  %entry.addr = alloca i8*, align 8
  %matched_ent = alloca i8*, align 8
  %err = alloca i32, align 4
  store %struct.hash_table* %table, %struct.hash_table** %table.addr, align 8, !tbaa !6
  store i8* %entry1, i8** %entry.addr, align 8, !tbaa !6
  %0 = bitcast i8** %matched_ent to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #13
  %1 = bitcast i32* %err to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %1) #13
  %2 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !tbaa !6
  %3 = load i8*, i8** %entry.addr, align 8, !tbaa !6
  %call = call i32 @hash_insert_if_absent(%struct.hash_table* %2, i8* %3, i8** %matched_ent)
  store i32 %call, i32* %err, align 4, !tbaa !2
  %4 = load i32, i32* %err, align 4, !tbaa !2
  %cmp = icmp eq i32 %4, -1
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br label %cond.end5

cond.false:                                       ; preds = %entry
  %5 = load i32, i32* %err, align 4, !tbaa !2
  %cmp2 = icmp eq i32 %5, 0
  br i1 %cmp2, label %cond.true3, label %cond.false4

cond.true3:                                       ; preds = %cond.false
  %6 = load i8*, i8** %matched_ent, align 8, !tbaa !6
  br label %cond.end

cond.false4:                                      ; preds = %cond.false
  %7 = load i8*, i8** %entry.addr, align 8, !tbaa !6
  br label %cond.end

cond.end:                                         ; preds = %cond.false4, %cond.true3
  %cond = phi i8* [ %6, %cond.true3 ], [ %7, %cond.false4 ]
  br label %cond.end5

cond.end5:                                        ; preds = %cond.end, %cond.true
  %cond6 = phi i8* [ null, %cond.true ], [ %cond, %cond.end ]
  %8 = bitcast i32* %err to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %8) #13
  %9 = bitcast i8** %matched_ent to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %9) #13
  ret i8* %cond6
}

; Function Attrs: nounwind uwtable
define dso_local i8* @hash_remove(%struct.hash_table* %table, i8* %entry1) #7 {
entry:
  %retval = alloca i8*, align 8
  %table.addr = alloca %struct.hash_table*, align 8
  %entry.addr = alloca i8*, align 8
  %data = alloca i8*, align 8
  %bucket = alloca %struct.hash_entry*, align 8
  %cleanup.dest.slot = alloca i32, align 4
  %tuning21 = alloca %struct.hash_tuning*, align 8
  %candidate = alloca i64, align 8
  %cursor = alloca %struct.hash_entry*, align 8
  %next = alloca %struct.hash_entry*, align 8
  store %struct.hash_table* %table, %struct.hash_table** %table.addr, align 8, !tbaa !6
  store i8* %entry1, i8** %entry.addr, align 8, !tbaa !6
  %0 = bitcast i8** %data to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #13
  %1 = bitcast %struct.hash_entry** %bucket to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %1) #13
  %2 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !tbaa !6
  %3 = load i8*, i8** %entry.addr, align 8, !tbaa !6
  %call = call i8* @hash_find_entry(%struct.hash_table* %2, i8* %3, %struct.hash_entry** %bucket, i1 zeroext true)
  store i8* %call, i8** %data, align 8, !tbaa !6
  %4 = load i8*, i8** %data, align 8, !tbaa !6
  %tobool = icmp ne i8* %4, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i8* null, i8** %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %entry
  %5 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !tbaa !6
  %n_entries = getelementptr inbounds %struct.hash_table, %struct.hash_table* %5, i32 0, i32 4
  %6 = load i64, i64* %n_entries, align 8, !tbaa !122
  %dec = add i64 %6, -1
  store i64 %dec, i64* %n_entries, align 8, !tbaa !122
  %7 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !tbaa !6
  %data2 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %7, i32 0, i32 0
  %8 = load i8*, i8** %data2, align 8, !tbaa !125
  %tobool3 = icmp ne i8* %8, null
  br i1 %tobool3, label %if.end42, label %if.then4

if.then4:                                         ; preds = %if.end
  %9 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !tbaa !6
  %n_buckets_used = getelementptr inbounds %struct.hash_table, %struct.hash_table* %9, i32 0, i32 3
  %10 = load i64, i64* %n_buckets_used, align 8, !tbaa !121
  %dec5 = add i64 %10, -1
  store i64 %dec5, i64* %n_buckets_used, align 8, !tbaa !121
  %11 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !tbaa !6
  %n_buckets_used6 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %11, i32 0, i32 3
  %12 = load i64, i64* %n_buckets_used6, align 8, !tbaa !121
  %conv = uitofp i64 %12 to float
  %13 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !tbaa !6
  %tuning = getelementptr inbounds %struct.hash_table, %struct.hash_table* %13, i32 0, i32 5
  %14 = load %struct.hash_tuning*, %struct.hash_tuning** %tuning, align 8, !tbaa !133
  %shrink_threshold = getelementptr inbounds %struct.hash_tuning, %struct.hash_tuning* %14, i32 0, i32 0
  %15 = load float, float* %shrink_threshold, align 4, !tbaa !139
  %16 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !tbaa !6
  %n_buckets = getelementptr inbounds %struct.hash_table, %struct.hash_table* %16, i32 0, i32 2
  %17 = load i64, i64* %n_buckets, align 8, !tbaa !119
  %conv7 = uitofp i64 %17 to float
  %mul = fmul float %15, %conv7
  %cmp = fcmp olt float %conv, %mul
  br i1 %cmp, label %if.then9, label %if.end41

if.then9:                                         ; preds = %if.then4
  %18 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !tbaa !6
  %call10 = call zeroext i1 @check_tuning(%struct.hash_table* %18)
  %19 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !tbaa !6
  %n_buckets_used11 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %19, i32 0, i32 3
  %20 = load i64, i64* %n_buckets_used11, align 8, !tbaa !121
  %conv12 = uitofp i64 %20 to float
  %21 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !tbaa !6
  %tuning13 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %21, i32 0, i32 5
  %22 = load %struct.hash_tuning*, %struct.hash_tuning** %tuning13, align 8, !tbaa !133
  %shrink_threshold14 = getelementptr inbounds %struct.hash_tuning, %struct.hash_tuning* %22, i32 0, i32 0
  %23 = load float, float* %shrink_threshold14, align 4, !tbaa !139
  %24 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !tbaa !6
  %n_buckets15 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %24, i32 0, i32 2
  %25 = load i64, i64* %n_buckets15, align 8, !tbaa !119
  %conv16 = uitofp i64 %25 to float
  %mul17 = fmul float %23, %conv16
  %cmp18 = fcmp olt float %conv12, %mul17
  br i1 %cmp18, label %if.then20, label %if.end40

if.then20:                                        ; preds = %if.then9
  %26 = bitcast %struct.hash_tuning** %tuning21 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %26) #13
  %27 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !tbaa !6
  %tuning22 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %27, i32 0, i32 5
  %28 = load %struct.hash_tuning*, %struct.hash_tuning** %tuning22, align 8, !tbaa !133
  store %struct.hash_tuning* %28, %struct.hash_tuning** %tuning21, align 8, !tbaa !6
  %29 = bitcast i64* %candidate to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %29) #13
  %30 = load %struct.hash_tuning*, %struct.hash_tuning** %tuning21, align 8, !tbaa !6
  %is_n_buckets = getelementptr inbounds %struct.hash_tuning, %struct.hash_tuning* %30, i32 0, i32 4
  %31 = load i8, i8* %is_n_buckets, align 4, !tbaa !141, !range !25
  %tobool23 = trunc i8 %31 to i1
  br i1 %tobool23, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then20
  %32 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !tbaa !6
  %n_buckets25 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %32, i32 0, i32 2
  %33 = load i64, i64* %n_buckets25, align 8, !tbaa !119
  %conv26 = uitofp i64 %33 to float
  %34 = load %struct.hash_tuning*, %struct.hash_tuning** %tuning21, align 8, !tbaa !6
  %shrink_factor = getelementptr inbounds %struct.hash_tuning, %struct.hash_tuning* %34, i32 0, i32 1
  %35 = load float, float* %shrink_factor, align 4, !tbaa !140
  %mul27 = fmul float %conv26, %35
  br label %cond.end

cond.false:                                       ; preds = %if.then20
  %36 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !tbaa !6
  %n_buckets28 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %36, i32 0, i32 2
  %37 = load i64, i64* %n_buckets28, align 8, !tbaa !119
  %conv29 = uitofp i64 %37 to float
  %38 = load %struct.hash_tuning*, %struct.hash_tuning** %tuning21, align 8, !tbaa !6
  %shrink_factor30 = getelementptr inbounds %struct.hash_tuning, %struct.hash_tuning* %38, i32 0, i32 1
  %39 = load float, float* %shrink_factor30, align 4, !tbaa !140
  %mul31 = fmul float %conv29, %39
  %40 = load %struct.hash_tuning*, %struct.hash_tuning** %tuning21, align 8, !tbaa !6
  %growth_threshold = getelementptr inbounds %struct.hash_tuning, %struct.hash_tuning* %40, i32 0, i32 2
  %41 = load float, float* %growth_threshold, align 4, !tbaa !136
  %mul32 = fmul float %mul31, %41
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi float [ %mul27, %cond.true ], [ %mul32, %cond.false ]
  %conv33 = fptoui float %cond to i64
  store i64 %conv33, i64* %candidate, align 8, !tbaa !14
  %42 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !tbaa !6
  %43 = load i64, i64* %candidate, align 8, !tbaa !14
  %call34 = call zeroext i1 @hash_rehash(%struct.hash_table* %42, i64 %43)
  br i1 %call34, label %if.end39, label %if.then35

if.then35:                                        ; preds = %cond.end
  %44 = bitcast %struct.hash_entry** %cursor to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %44) #13
  %45 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !tbaa !6
  %free_entry_list = getelementptr inbounds %struct.hash_table, %struct.hash_table* %45, i32 0, i32 9
  %46 = load %struct.hash_entry*, %struct.hash_entry** %free_entry_list, align 8, !tbaa !135
  store %struct.hash_entry* %46, %struct.hash_entry** %cursor, align 8, !tbaa !6
  %47 = bitcast %struct.hash_entry** %next to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %47) #13
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then35
  %48 = load %struct.hash_entry*, %struct.hash_entry** %cursor, align 8, !tbaa !6
  %tobool36 = icmp ne %struct.hash_entry* %48, null
  br i1 %tobool36, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %49 = load %struct.hash_entry*, %struct.hash_entry** %cursor, align 8, !tbaa !6
  %next37 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %49, i32 0, i32 1
  %50 = load %struct.hash_entry*, %struct.hash_entry** %next37, align 8, !tbaa !127
  store %struct.hash_entry* %50, %struct.hash_entry** %next, align 8, !tbaa !6
  %51 = load %struct.hash_entry*, %struct.hash_entry** %cursor, align 8, !tbaa !6
  %52 = bitcast %struct.hash_entry* %51 to i8*
  call void @rpl_free(i8* %52)
  %53 = load %struct.hash_entry*, %struct.hash_entry** %next, align 8, !tbaa !6
  store %struct.hash_entry* %53, %struct.hash_entry** %cursor, align 8, !tbaa !6
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %54 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !tbaa !6
  %free_entry_list38 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %54, i32 0, i32 9
  store %struct.hash_entry* null, %struct.hash_entry** %free_entry_list38, align 8, !tbaa !135
  %55 = bitcast %struct.hash_entry** %next to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %55) #13
  %56 = bitcast %struct.hash_entry** %cursor to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %56) #13
  br label %if.end39

if.end39:                                         ; preds = %while.end, %cond.end
  %57 = bitcast i64* %candidate to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %57) #13
  %58 = bitcast %struct.hash_tuning** %tuning21 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %58) #13
  br label %if.end40

if.end40:                                         ; preds = %if.end39, %if.then9
  br label %if.end41

if.end41:                                         ; preds = %if.end40, %if.then4
  br label %if.end42

if.end42:                                         ; preds = %if.end41, %if.end
  %59 = load i8*, i8** %data, align 8, !tbaa !6
  store i8* %59, i8** %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end42, %if.then
  %60 = bitcast %struct.hash_entry** %bucket to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %60) #13
  %61 = bitcast i8** %data to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %61) #13
  %62 = load i8*, i8** %retval, align 8
  ret i8* %62
}

; Function Attrs: nounwind uwtable
define dso_local i8* @hash_delete(%struct.hash_table* %table, i8* %entry1) #7 {
entry:
  %table.addr = alloca %struct.hash_table*, align 8
  %entry.addr = alloca i8*, align 8
  store %struct.hash_table* %table, %struct.hash_table** %table.addr, align 8, !tbaa !6
  store i8* %entry1, i8** %entry.addr, align 8, !tbaa !6
  %0 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !tbaa !6
  %1 = load i8*, i8** %entry.addr, align 8, !tbaa !6
  %call = call i8* @hash_remove(%struct.hash_table* %0, i8* %1)
  ret i8* %call
}

; Function Attrs: nounwind uwtable
define dso_local noalias nonnull %struct.heap* @heap_alloc(i32 (i8*, i8*)* %compare, i64 %n_reserve) #7 {
entry:
  %compare.addr = alloca i32 (i8*, i8*)*, align 8
  %n_reserve.addr = alloca i64, align 8
  %heap = alloca %struct.heap*, align 8
  store i32 (i8*, i8*)* %compare, i32 (i8*, i8*)** %compare.addr, align 8, !tbaa !6
  store i64 %n_reserve, i64* %n_reserve.addr, align 8, !tbaa !14
  %0 = bitcast %struct.heap** %heap to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #13
  %call = call noalias nonnull i8* @xmalloc(i64 32) #25
  %1 = bitcast i8* %call to %struct.heap*
  store %struct.heap* %1, %struct.heap** %heap, align 8, !tbaa !6
  %2 = load i64, i64* %n_reserve.addr, align 8, !tbaa !14
  %cmp = icmp eq i64 %2, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i64 1, i64* %n_reserve.addr, align 8, !tbaa !14
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %3 = load i64, i64* %n_reserve.addr, align 8, !tbaa !14
  %call1 = call noalias nonnull i8* @xnmalloc(i64 %3, i64 8) #23
  %4 = bitcast i8* %call1 to i8**
  %5 = load %struct.heap*, %struct.heap** %heap, align 8, !tbaa !6
  %array = getelementptr inbounds %struct.heap, %struct.heap* %5, i32 0, i32 0
  store i8** %4, i8*** %array, align 8, !tbaa !142
  %6 = load %struct.heap*, %struct.heap** %heap, align 8, !tbaa !6
  %array2 = getelementptr inbounds %struct.heap, %struct.heap* %6, i32 0, i32 0
  %7 = load i8**, i8*** %array2, align 8, !tbaa !142
  %arrayidx = getelementptr inbounds i8*, i8** %7, i64 0
  store i8* null, i8** %arrayidx, align 8, !tbaa !6
  %8 = load i64, i64* %n_reserve.addr, align 8, !tbaa !14
  %9 = load %struct.heap*, %struct.heap** %heap, align 8, !tbaa !6
  %capacity = getelementptr inbounds %struct.heap, %struct.heap* %9, i32 0, i32 1
  store i64 %8, i64* %capacity, align 8, !tbaa !144
  %10 = load %struct.heap*, %struct.heap** %heap, align 8, !tbaa !6
  %count = getelementptr inbounds %struct.heap, %struct.heap* %10, i32 0, i32 2
  store i64 0, i64* %count, align 8, !tbaa !145
  %11 = load i32 (i8*, i8*)*, i32 (i8*, i8*)** %compare.addr, align 8, !tbaa !6
  %tobool = icmp ne i32 (i8*, i8*)* %11, null
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  %12 = load i32 (i8*, i8*)*, i32 (i8*, i8*)** %compare.addr, align 8, !tbaa !6
  br label %cond.end

cond.false:                                       ; preds = %if.end
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 (i8*, i8*)* [ %12, %cond.true ], [ @heap_default_compare, %cond.false ]
  %13 = load %struct.heap*, %struct.heap** %heap, align 8, !tbaa !6
  %compare3 = getelementptr inbounds %struct.heap, %struct.heap* %13, i32 0, i32 3
  store i32 (i8*, i8*)* %cond, i32 (i8*, i8*)** %compare3, align 8, !tbaa !146
  %14 = load %struct.heap*, %struct.heap** %heap, align 8, !tbaa !6
  %15 = bitcast %struct.heap** %heap to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %15) #13
  ret %struct.heap* %14
}

; Function Attrs: nounwind uwtable
define internal i32 @heap_default_compare(i8* %a, i8* %b) #7 {
entry:
  %a.addr = alloca i8*, align 8
  %b.addr = alloca i8*, align 8
  store i8* %a, i8** %a.addr, align 8, !tbaa !6
  store i8* %b, i8** %b.addr, align 8, !tbaa !6
  ret i32 0
}

; Function Attrs: nounwind uwtable
define dso_local void @heap_free(%struct.heap* nonnull %heap) #7 {
entry:
  %heap.addr = alloca %struct.heap*, align 8
  store %struct.heap* %heap, %struct.heap** %heap.addr, align 8, !tbaa !6
  %0 = load %struct.heap*, %struct.heap** %heap.addr, align 8, !tbaa !6
  %array = getelementptr inbounds %struct.heap, %struct.heap* %0, i32 0, i32 0
  %1 = load i8**, i8*** %array, align 8, !tbaa !142
  %2 = bitcast i8** %1 to i8*
  call void @rpl_free(i8* %2)
  %3 = load %struct.heap*, %struct.heap** %heap.addr, align 8, !tbaa !6
  %4 = bitcast %struct.heap* %3 to i8*
  call void @rpl_free(i8* %4)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @heap_insert(%struct.heap* nonnull %heap, i8* nonnull %item) #7 {
entry:
  %heap.addr = alloca %struct.heap*, align 8
  %item.addr = alloca i8*, align 8
  store %struct.heap* %heap, %struct.heap** %heap.addr, align 8, !tbaa !6
  store i8* %item, i8** %item.addr, align 8, !tbaa !6
  %0 = load %struct.heap*, %struct.heap** %heap.addr, align 8, !tbaa !6
  %capacity = getelementptr inbounds %struct.heap, %struct.heap* %0, i32 0, i32 1
  %1 = load i64, i64* %capacity, align 8, !tbaa !144
  %sub = sub i64 %1, 1
  %2 = load %struct.heap*, %struct.heap** %heap.addr, align 8, !tbaa !6
  %count = getelementptr inbounds %struct.heap, %struct.heap* %2, i32 0, i32 2
  %3 = load i64, i64* %count, align 8, !tbaa !145
  %cmp = icmp ule i64 %sub, %3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load %struct.heap*, %struct.heap** %heap.addr, align 8, !tbaa !6
  %array = getelementptr inbounds %struct.heap, %struct.heap* %4, i32 0, i32 0
  %5 = load i8**, i8*** %array, align 8, !tbaa !142
  %6 = bitcast i8** %5 to i8*
  %7 = load %struct.heap*, %struct.heap** %heap.addr, align 8, !tbaa !6
  %capacity1 = getelementptr inbounds %struct.heap, %struct.heap* %7, i32 0, i32 1
  %call = call nonnull i8* @x2nrealloc(i8* %6, i64* %capacity1, i64 8)
  %8 = bitcast i8* %call to i8**
  %9 = load %struct.heap*, %struct.heap** %heap.addr, align 8, !tbaa !6
  %array2 = getelementptr inbounds %struct.heap, %struct.heap* %9, i32 0, i32 0
  store i8** %8, i8*** %array2, align 8, !tbaa !142
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %10 = load i8*, i8** %item.addr, align 8, !tbaa !6
  %11 = load %struct.heap*, %struct.heap** %heap.addr, align 8, !tbaa !6
  %array3 = getelementptr inbounds %struct.heap, %struct.heap* %11, i32 0, i32 0
  %12 = load i8**, i8*** %array3, align 8, !tbaa !142
  %13 = load %struct.heap*, %struct.heap** %heap.addr, align 8, !tbaa !6
  %count4 = getelementptr inbounds %struct.heap, %struct.heap* %13, i32 0, i32 2
  %14 = load i64, i64* %count4, align 8, !tbaa !145
  %inc = add i64 %14, 1
  store i64 %inc, i64* %count4, align 8, !tbaa !145
  %arrayidx = getelementptr inbounds i8*, i8** %12, i64 %inc
  store i8* %10, i8** %arrayidx, align 8, !tbaa !6
  %15 = load %struct.heap*, %struct.heap** %heap.addr, align 8, !tbaa !6
  %array5 = getelementptr inbounds %struct.heap, %struct.heap* %15, i32 0, i32 0
  %16 = load i8**, i8*** %array5, align 8, !tbaa !142
  %17 = load %struct.heap*, %struct.heap** %heap.addr, align 8, !tbaa !6
  %count6 = getelementptr inbounds %struct.heap, %struct.heap* %17, i32 0, i32 2
  %18 = load i64, i64* %count6, align 8, !tbaa !145
  %19 = load %struct.heap*, %struct.heap** %heap.addr, align 8, !tbaa !6
  %compare = getelementptr inbounds %struct.heap, %struct.heap* %19, i32 0, i32 3
  %20 = load i32 (i8*, i8*)*, i32 (i8*, i8*)** %compare, align 8, !tbaa !146
  call void @heapify_up(i8** %16, i64 %18, i32 (i8*, i8*)* %20)
  ret i32 0
}

; Function Attrs: nounwind uwtable
define internal void @heapify_up(i8** %array, i64 %count, i32 (i8*, i8*)* %compare) #7 {
entry:
  %array.addr = alloca i8**, align 8
  %count.addr = alloca i64, align 8
  %compare.addr = alloca i32 (i8*, i8*)*, align 8
  %k = alloca i64, align 8
  %new_element = alloca i8*, align 8
  store i8** %array, i8*** %array.addr, align 8, !tbaa !6
  store i64 %count, i64* %count.addr, align 8, !tbaa !14
  store i32 (i8*, i8*)* %compare, i32 (i8*, i8*)** %compare.addr, align 8, !tbaa !6
  %0 = bitcast i64* %k to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #13
  %1 = load i64, i64* %count.addr, align 8, !tbaa !14
  store i64 %1, i64* %k, align 8, !tbaa !14
  %2 = bitcast i8** %new_element to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %2) #13
  %3 = load i8**, i8*** %array.addr, align 8, !tbaa !6
  %4 = load i64, i64* %k, align 8, !tbaa !14
  %arrayidx = getelementptr inbounds i8*, i8** %3, i64 %4
  %5 = load i8*, i8** %arrayidx, align 8, !tbaa !6
  store i8* %5, i8** %new_element, align 8, !tbaa !6
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %6 = load i64, i64* %k, align 8, !tbaa !14
  %cmp = icmp ne i64 %6, 1
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %7 = load i32 (i8*, i8*)*, i32 (i8*, i8*)** %compare.addr, align 8, !tbaa !6
  %8 = load i8**, i8*** %array.addr, align 8, !tbaa !6
  %9 = load i64, i64* %k, align 8, !tbaa !14
  %div = udiv i64 %9, 2
  %arrayidx1 = getelementptr inbounds i8*, i8** %8, i64 %div
  %10 = load i8*, i8** %arrayidx1, align 8, !tbaa !6
  %11 = load i8*, i8** %new_element, align 8, !tbaa !6
  %call = call i32 %7(i8* %10, i8* %11)
  %cmp2 = icmp sle i32 %call, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %12 = phi i1 [ false, %while.cond ], [ %cmp2, %land.rhs ]
  br i1 %12, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %13 = load i8**, i8*** %array.addr, align 8, !tbaa !6
  %14 = load i64, i64* %k, align 8, !tbaa !14
  %div3 = udiv i64 %14, 2
  %arrayidx4 = getelementptr inbounds i8*, i8** %13, i64 %div3
  %15 = load i8*, i8** %arrayidx4, align 8, !tbaa !6
  %16 = load i8**, i8*** %array.addr, align 8, !tbaa !6
  %17 = load i64, i64* %k, align 8, !tbaa !14
  %arrayidx5 = getelementptr inbounds i8*, i8** %16, i64 %17
  store i8* %15, i8** %arrayidx5, align 8, !tbaa !6
  %18 = load i64, i64* %k, align 8, !tbaa !14
  %div6 = udiv i64 %18, 2
  store i64 %div6, i64* %k, align 8, !tbaa !14
  br label %while.cond

while.end:                                        ; preds = %land.end
  %19 = load i8*, i8** %new_element, align 8, !tbaa !6
  %20 = load i8**, i8*** %array.addr, align 8, !tbaa !6
  %21 = load i64, i64* %k, align 8, !tbaa !14
  %arrayidx7 = getelementptr inbounds i8*, i8** %20, i64 %21
  store i8* %19, i8** %arrayidx7, align 8, !tbaa !6
  %22 = bitcast i8** %new_element to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %22) #13
  %23 = bitcast i64* %k to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %23) #13
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i8* @heap_remove_top(%struct.heap* nonnull %heap) #7 {
entry:
  %retval = alloca i8*, align 8
  %heap.addr = alloca %struct.heap*, align 8
  %top = alloca i8*, align 8
  %cleanup.dest.slot = alloca i32, align 4
  store %struct.heap* %heap, %struct.heap** %heap.addr, align 8, !tbaa !6
  %0 = bitcast i8** %top to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #13
  %1 = load %struct.heap*, %struct.heap** %heap.addr, align 8, !tbaa !6
  %count = getelementptr inbounds %struct.heap, %struct.heap* %1, i32 0, i32 2
  %2 = load i64, i64* %count, align 8, !tbaa !145
  %cmp = icmp eq i64 %2, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i8* null, i8** %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %entry
  %3 = load %struct.heap*, %struct.heap** %heap.addr, align 8, !tbaa !6
  %array = getelementptr inbounds %struct.heap, %struct.heap* %3, i32 0, i32 0
  %4 = load i8**, i8*** %array, align 8, !tbaa !142
  %arrayidx = getelementptr inbounds i8*, i8** %4, i64 1
  %5 = load i8*, i8** %arrayidx, align 8, !tbaa !6
  store i8* %5, i8** %top, align 8, !tbaa !6
  %6 = load %struct.heap*, %struct.heap** %heap.addr, align 8, !tbaa !6
  %array1 = getelementptr inbounds %struct.heap, %struct.heap* %6, i32 0, i32 0
  %7 = load i8**, i8*** %array1, align 8, !tbaa !142
  %8 = load %struct.heap*, %struct.heap** %heap.addr, align 8, !tbaa !6
  %count2 = getelementptr inbounds %struct.heap, %struct.heap* %8, i32 0, i32 2
  %9 = load i64, i64* %count2, align 8, !tbaa !145
  %dec = add i64 %9, -1
  store i64 %dec, i64* %count2, align 8, !tbaa !145
  %arrayidx3 = getelementptr inbounds i8*, i8** %7, i64 %9
  %10 = load i8*, i8** %arrayidx3, align 8, !tbaa !6
  %11 = load %struct.heap*, %struct.heap** %heap.addr, align 8, !tbaa !6
  %array4 = getelementptr inbounds %struct.heap, %struct.heap* %11, i32 0, i32 0
  %12 = load i8**, i8*** %array4, align 8, !tbaa !142
  %arrayidx5 = getelementptr inbounds i8*, i8** %12, i64 1
  store i8* %10, i8** %arrayidx5, align 8, !tbaa !6
  %13 = load %struct.heap*, %struct.heap** %heap.addr, align 8, !tbaa !6
  %array6 = getelementptr inbounds %struct.heap, %struct.heap* %13, i32 0, i32 0
  %14 = load i8**, i8*** %array6, align 8, !tbaa !142
  %15 = load %struct.heap*, %struct.heap** %heap.addr, align 8, !tbaa !6
  %count7 = getelementptr inbounds %struct.heap, %struct.heap* %15, i32 0, i32 2
  %16 = load i64, i64* %count7, align 8, !tbaa !145
  %17 = load %struct.heap*, %struct.heap** %heap.addr, align 8, !tbaa !6
  %compare = getelementptr inbounds %struct.heap, %struct.heap* %17, i32 0, i32 3
  %18 = load i32 (i8*, i8*)*, i32 (i8*, i8*)** %compare, align 8, !tbaa !146
  %call = call i64 @heapify_down(i8** %14, i64 %16, i64 1, i32 (i8*, i8*)* %18)
  %19 = load i8*, i8** %top, align 8, !tbaa !6
  store i8* %19, i8** %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end, %if.then
  %20 = bitcast i8** %top to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %20) #13
  %21 = load i8*, i8** %retval, align 8
  ret i8* %21
}

; Function Attrs: nounwind uwtable
define internal i64 @heapify_down(i8** %array, i64 %count, i64 %initial, i32 (i8*, i8*)* %compare) #7 {
entry:
  %array.addr = alloca i8**, align 8
  %count.addr = alloca i64, align 8
  %initial.addr = alloca i64, align 8
  %compare.addr = alloca i32 (i8*, i8*)*, align 8
  %element = alloca i8*, align 8
  %parent = alloca i64, align 8
  %child = alloca i64, align 8
  %cleanup.dest.slot = alloca i32, align 4
  store i8** %array, i8*** %array.addr, align 8, !tbaa !6
  store i64 %count, i64* %count.addr, align 8, !tbaa !14
  store i64 %initial, i64* %initial.addr, align 8, !tbaa !14
  store i32 (i8*, i8*)* %compare, i32 (i8*, i8*)** %compare.addr, align 8, !tbaa !6
  %0 = bitcast i8** %element to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #13
  %1 = load i8**, i8*** %array.addr, align 8, !tbaa !6
  %2 = load i64, i64* %initial.addr, align 8, !tbaa !14
  %arrayidx = getelementptr inbounds i8*, i8** %1, i64 %2
  %3 = load i8*, i8** %arrayidx, align 8, !tbaa !6
  store i8* %3, i8** %element, align 8, !tbaa !6
  %4 = bitcast i64* %parent to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %4) #13
  %5 = load i64, i64* %initial.addr, align 8, !tbaa !14
  store i64 %5, i64* %parent, align 8, !tbaa !14
  br label %while.cond

while.cond:                                       ; preds = %cleanup.cont, %entry
  %6 = load i64, i64* %parent, align 8, !tbaa !14
  %7 = load i64, i64* %count.addr, align 8, !tbaa !14
  %div = udiv i64 %7, 2
  %cmp = icmp ule i64 %6, %div
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %8 = bitcast i64* %child to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %8) #13
  %9 = load i64, i64* %parent, align 8, !tbaa !14
  %mul = mul i64 2, %9
  store i64 %mul, i64* %child, align 8, !tbaa !14
  %10 = load i64, i64* %child, align 8, !tbaa !14
  %11 = load i64, i64* %count.addr, align 8, !tbaa !14
  %cmp1 = icmp ult i64 %10, %11
  br i1 %cmp1, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %while.body
  %12 = load i32 (i8*, i8*)*, i32 (i8*, i8*)** %compare.addr, align 8, !tbaa !6
  %13 = load i8**, i8*** %array.addr, align 8, !tbaa !6
  %14 = load i64, i64* %child, align 8, !tbaa !14
  %arrayidx2 = getelementptr inbounds i8*, i8** %13, i64 %14
  %15 = load i8*, i8** %arrayidx2, align 8, !tbaa !6
  %16 = load i8**, i8*** %array.addr, align 8, !tbaa !6
  %17 = load i64, i64* %child, align 8, !tbaa !14
  %add = add i64 %17, 1
  %arrayidx3 = getelementptr inbounds i8*, i8** %16, i64 %add
  %18 = load i8*, i8** %arrayidx3, align 8, !tbaa !6
  %call = call i32 %12(i8* %15, i8* %18)
  %cmp4 = icmp slt i32 %call, 0
  br i1 %cmp4, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %19 = load i64, i64* %child, align 8, !tbaa !14
  %inc = add i64 %19, 1
  store i64 %inc, i64* %child, align 8, !tbaa !14
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %while.body
  %20 = load i32 (i8*, i8*)*, i32 (i8*, i8*)** %compare.addr, align 8, !tbaa !6
  %21 = load i8**, i8*** %array.addr, align 8, !tbaa !6
  %22 = load i64, i64* %child, align 8, !tbaa !14
  %arrayidx5 = getelementptr inbounds i8*, i8** %21, i64 %22
  %23 = load i8*, i8** %arrayidx5, align 8, !tbaa !6
  %24 = load i8*, i8** %element, align 8, !tbaa !6
  %call6 = call i32 %20(i8* %23, i8* %24)
  %cmp7 = icmp sle i32 %call6, 0
  br i1 %cmp7, label %if.then8, label %if.end9

if.then8:                                         ; preds = %if.end
  store i32 3, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end9:                                          ; preds = %if.end
  %25 = load i8**, i8*** %array.addr, align 8, !tbaa !6
  %26 = load i64, i64* %child, align 8, !tbaa !14
  %arrayidx10 = getelementptr inbounds i8*, i8** %25, i64 %26
  %27 = load i8*, i8** %arrayidx10, align 8, !tbaa !6
  %28 = load i8**, i8*** %array.addr, align 8, !tbaa !6
  %29 = load i64, i64* %parent, align 8, !tbaa !14
  %arrayidx11 = getelementptr inbounds i8*, i8** %28, i64 %29
  store i8* %27, i8** %arrayidx11, align 8, !tbaa !6
  %30 = load i64, i64* %child, align 8, !tbaa !14
  store i64 %30, i64* %parent, align 8, !tbaa !14
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end9, %if.then8
  %31 = bitcast i64* %child to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %31) #13
  %cleanup.dest = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest, label %unreachable [
    i32 0, label %cleanup.cont
    i32 3, label %while.end
  ]

cleanup.cont:                                     ; preds = %cleanup
  br label %while.cond

while.end:                                        ; preds = %cleanup, %while.cond
  %32 = load i8*, i8** %element, align 8, !tbaa !6
  %33 = load i8**, i8*** %array.addr, align 8, !tbaa !6
  %34 = load i64, i64* %parent, align 8, !tbaa !14
  %arrayidx12 = getelementptr inbounds i8*, i8** %33, i64 %34
  store i8* %32, i8** %arrayidx12, align 8, !tbaa !6
  %35 = load i64, i64* %parent, align 8, !tbaa !14
  store i32 1, i32* %cleanup.dest.slot, align 4
  %36 = bitcast i64* %parent to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %36) #13
  %37 = bitcast i8** %element to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %37) #13
  ret i64 %35

unreachable:                                      ; preds = %cleanup
  unreachable
}

; Function Attrs: nounwind uwtable
define dso_local i8* @inttostr(i32 %i, i8* %buf) #7 {
entry:
  %i.addr = alloca i32, align 4
  %buf.addr = alloca i8*, align 8
  %p = alloca i8*, align 8
  store i32 %i, i32* %i.addr, align 4, !tbaa !2
  store i8* %buf, i8** %buf.addr, align 8, !tbaa !6
  %0 = bitcast i8** %p to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #13
  %1 = load i8*, i8** %buf.addr, align 8, !tbaa !6
  %add.ptr = getelementptr inbounds i8, i8* %1, i64 11
  store i8* %add.ptr, i8** %p, align 8, !tbaa !6
  %2 = load i8*, i8** %p, align 8, !tbaa !6
  store i8 0, i8* %2, align 1, !tbaa !13
  %3 = load i32, i32* %i.addr, align 4, !tbaa !2
  %cmp = icmp slt i32 %3, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  br label %do.body

do.body:                                          ; preds = %do.cond, %if.then
  %4 = load i32, i32* %i.addr, align 4, !tbaa !2
  %rem = srem i32 %4, 10
  %sub = sub nsw i32 48, %rem
  %conv = trunc i32 %sub to i8
  %5 = load i8*, i8** %p, align 8, !tbaa !6
  %incdec.ptr = getelementptr inbounds i8, i8* %5, i32 -1
  store i8* %incdec.ptr, i8** %p, align 8, !tbaa !6
  store i8 %conv, i8* %incdec.ptr, align 1, !tbaa !13
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %6 = load i32, i32* %i.addr, align 4, !tbaa !2
  %div = sdiv i32 %6, 10
  store i32 %div, i32* %i.addr, align 4, !tbaa !2
  %cmp1 = icmp ne i32 %div, 0
  br i1 %cmp1, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %7 = load i8*, i8** %p, align 8, !tbaa !6
  %incdec.ptr3 = getelementptr inbounds i8, i8* %7, i32 -1
  store i8* %incdec.ptr3, i8** %p, align 8, !tbaa !6
  store i8 45, i8* %incdec.ptr3, align 1, !tbaa !13
  br label %if.end

if.else:                                          ; preds = %entry
  br label %do.body4

do.body4:                                         ; preds = %do.cond8, %if.else
  %8 = load i32, i32* %i.addr, align 4, !tbaa !2
  %rem5 = srem i32 %8, 10
  %add = add nsw i32 48, %rem5
  %conv6 = trunc i32 %add to i8
  %9 = load i8*, i8** %p, align 8, !tbaa !6
  %incdec.ptr7 = getelementptr inbounds i8, i8* %9, i32 -1
  store i8* %incdec.ptr7, i8** %p, align 8, !tbaa !6
  store i8 %conv6, i8* %incdec.ptr7, align 1, !tbaa !13
  br label %do.cond8

do.cond8:                                         ; preds = %do.body4
  %10 = load i32, i32* %i.addr, align 4, !tbaa !2
  %div9 = sdiv i32 %10, 10
  store i32 %div9, i32* %i.addr, align 4, !tbaa !2
  %cmp10 = icmp ne i32 %div9, 0
  br i1 %cmp10, label %do.body4, label %do.end12

do.end12:                                         ; preds = %do.cond8
  br label %if.end

if.end:                                           ; preds = %do.end12, %do.end
  %11 = load i8*, i8** %p, align 8, !tbaa !6
  %12 = bitcast i8** %p to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %12) #13
  ret i8* %11
}

; Function Attrs: nounwind uwtable
define dso_local i8* @uinttostr(i32 %i, i8* %buf) #7 {
entry:
  %i.addr = alloca i32, align 4
  %buf.addr = alloca i8*, align 8
  %p = alloca i8*, align 8
  store i32 %i, i32* %i.addr, align 4, !tbaa !2
  store i8* %buf, i8** %buf.addr, align 8, !tbaa !6
  %0 = bitcast i8** %p to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #13
  %1 = load i8*, i8** %buf.addr, align 8, !tbaa !6
  %add.ptr = getelementptr inbounds i8, i8* %1, i64 10
  store i8* %add.ptr, i8** %p, align 8, !tbaa !6
  %2 = load i8*, i8** %p, align 8, !tbaa !6
  store i8 0, i8* %2, align 1, !tbaa !13
  %3 = load i32, i32* %i.addr, align 4, !tbaa !2
  %cmp = icmp ult i32 %3, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  br label %do.body

do.body:                                          ; preds = %do.cond, %if.then
  %4 = load i32, i32* %i.addr, align 4, !tbaa !2
  %rem = urem i32 %4, 10
  %sub = sub i32 48, %rem
  %conv = trunc i32 %sub to i8
  %5 = load i8*, i8** %p, align 8, !tbaa !6
  %incdec.ptr = getelementptr inbounds i8, i8* %5, i32 -1
  store i8* %incdec.ptr, i8** %p, align 8, !tbaa !6
  store i8 %conv, i8* %incdec.ptr, align 1, !tbaa !13
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %6 = load i32, i32* %i.addr, align 4, !tbaa !2
  %div = udiv i32 %6, 10
  store i32 %div, i32* %i.addr, align 4, !tbaa !2
  %cmp1 = icmp ne i32 %div, 0
  br i1 %cmp1, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %7 = load i8*, i8** %p, align 8, !tbaa !6
  %incdec.ptr3 = getelementptr inbounds i8, i8* %7, i32 -1
  store i8* %incdec.ptr3, i8** %p, align 8, !tbaa !6
  store i8 45, i8* %incdec.ptr3, align 1, !tbaa !13
  br label %if.end

if.else:                                          ; preds = %entry
  br label %do.body4

do.body4:                                         ; preds = %do.cond8, %if.else
  %8 = load i32, i32* %i.addr, align 4, !tbaa !2
  %rem5 = urem i32 %8, 10
  %add = add i32 48, %rem5
  %conv6 = trunc i32 %add to i8
  %9 = load i8*, i8** %p, align 8, !tbaa !6
  %incdec.ptr7 = getelementptr inbounds i8, i8* %9, i32 -1
  store i8* %incdec.ptr7, i8** %p, align 8, !tbaa !6
  store i8 %conv6, i8* %incdec.ptr7, align 1, !tbaa !13
  br label %do.cond8

do.cond8:                                         ; preds = %do.body4
  %10 = load i32, i32* %i.addr, align 4, !tbaa !2
  %div9 = udiv i32 %10, 10
  store i32 %div9, i32* %i.addr, align 4, !tbaa !2
  %cmp10 = icmp ne i32 %div9, 0
  br i1 %cmp10, label %do.body4, label %do.end12

do.end12:                                         ; preds = %do.cond8
  br label %if.end

if.end:                                           ; preds = %do.end12, %do.end
  %11 = load i8*, i8** %p, align 8, !tbaa !6
  %12 = bitcast i8** %p to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %12) #13
  ret i8* %11
}

; Function Attrs: nounwind uwtable
define dso_local i8* @umaxtostr(i64 %i, i8* %buf) #7 {
entry:
  %i.addr = alloca i64, align 8
  %buf.addr = alloca i8*, align 8
  %p = alloca i8*, align 8
  store i64 %i, i64* %i.addr, align 8, !tbaa !14
  store i8* %buf, i8** %buf.addr, align 8, !tbaa !6
  %0 = bitcast i8** %p to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #13
  %1 = load i8*, i8** %buf.addr, align 8, !tbaa !6
  %add.ptr = getelementptr inbounds i8, i8* %1, i64 20
  store i8* %add.ptr, i8** %p, align 8, !tbaa !6
  %2 = load i8*, i8** %p, align 8, !tbaa !6
  store i8 0, i8* %2, align 1, !tbaa !13
  %3 = load i64, i64* %i.addr, align 8, !tbaa !14
  %cmp = icmp ult i64 %3, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  br label %do.body

do.body:                                          ; preds = %do.cond, %if.then
  %4 = load i64, i64* %i.addr, align 8, !tbaa !14
  %rem = urem i64 %4, 10
  %sub = sub i64 48, %rem
  %conv = trunc i64 %sub to i8
  %5 = load i8*, i8** %p, align 8, !tbaa !6
  %incdec.ptr = getelementptr inbounds i8, i8* %5, i32 -1
  store i8* %incdec.ptr, i8** %p, align 8, !tbaa !6
  store i8 %conv, i8* %incdec.ptr, align 1, !tbaa !13
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %6 = load i64, i64* %i.addr, align 8, !tbaa !14
  %div = udiv i64 %6, 10
  store i64 %div, i64* %i.addr, align 8, !tbaa !14
  %cmp1 = icmp ne i64 %div, 0
  br i1 %cmp1, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %7 = load i8*, i8** %p, align 8, !tbaa !6
  %incdec.ptr3 = getelementptr inbounds i8, i8* %7, i32 -1
  store i8* %incdec.ptr3, i8** %p, align 8, !tbaa !6
  store i8 45, i8* %incdec.ptr3, align 1, !tbaa !13
  br label %if.end

if.else:                                          ; preds = %entry
  br label %do.body4

do.body4:                                         ; preds = %do.cond8, %if.else
  %8 = load i64, i64* %i.addr, align 8, !tbaa !14
  %rem5 = urem i64 %8, 10
  %add = add i64 48, %rem5
  %conv6 = trunc i64 %add to i8
  %9 = load i8*, i8** %p, align 8, !tbaa !6
  %incdec.ptr7 = getelementptr inbounds i8, i8* %9, i32 -1
  store i8* %incdec.ptr7, i8** %p, align 8, !tbaa !6
  store i8 %conv6, i8* %incdec.ptr7, align 1, !tbaa !13
  br label %do.cond8

do.cond8:                                         ; preds = %do.body4
  %10 = load i64, i64* %i.addr, align 8, !tbaa !14
  %div9 = udiv i64 %10, 10
  store i64 %div9, i64* %i.addr, align 8, !tbaa !14
  %cmp10 = icmp ne i64 %div9, 0
  br i1 %cmp10, label %do.body4, label %do.end12

do.end12:                                         ; preds = %do.cond8
  br label %if.end

if.end:                                           ; preds = %do.end12, %do.end
  %11 = load i8*, i8** %p, align 8, !tbaa !6
  %12 = bitcast i8** %p to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %12) #13
  ret i8* %11
}

; Function Attrs: nounwind uwtable
define dso_local i32 @gnu_mbswidth(i8* %string, i32 %flags) #7 {
entry:
  %string.addr = alloca i8*, align 8
  %flags.addr = alloca i32, align 4
  store i8* %string, i8** %string.addr, align 8, !tbaa !6
  store i32 %flags, i32* %flags.addr, align 4, !tbaa !2
  %0 = load i8*, i8** %string.addr, align 8, !tbaa !6
  %1 = load i8*, i8** %string.addr, align 8, !tbaa !6
  %call = call i64 @strlen(i8* %1) #22
  %2 = load i32, i32* %flags.addr, align 4, !tbaa !2
  %call1 = call i32 @mbsnwidth(i8* %0, i64 %call, i32 %2)
  ret i32 %call1
}

; Function Attrs: nounwind uwtable
define dso_local i32 @mbsnwidth(i8* %string, i64 %nbytes, i32 %flags) #7 {
entry:
  %retval = alloca i32, align 4
  %string.addr = alloca i8*, align 8
  %nbytes.addr = alloca i64, align 8
  %flags.addr = alloca i32, align 4
  %p = alloca i8*, align 8
  %plimit = alloca i8*, align 8
  %width = alloca i32, align 4
  %mbstate = alloca %struct.__mbstate_t, align 4
  %wc = alloca i32, align 4
  %bytes = alloca i64, align 8
  %w = alloca i32, align 4
  %cleanup.dest.slot = alloca i32, align 4
  %c = alloca i8, align 1
  store i8* %string, i8** %string.addr, align 8, !tbaa !6
  store i64 %nbytes, i64* %nbytes.addr, align 8, !tbaa !14
  store i32 %flags, i32* %flags.addr, align 4, !tbaa !2
  %0 = bitcast i8** %p to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #13
  %1 = load i8*, i8** %string.addr, align 8, !tbaa !6
  store i8* %1, i8** %p, align 8, !tbaa !6
  %2 = bitcast i8** %plimit to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %2) #13
  %3 = load i8*, i8** %p, align 8, !tbaa !6
  %4 = load i64, i64* %nbytes.addr, align 8, !tbaa !14
  %add.ptr = getelementptr inbounds i8, i8* %3, i64 %4
  store i8* %add.ptr, i8** %plimit, align 8, !tbaa !6
  %5 = bitcast i32* %width to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %5) #13
  store i32 0, i32* %width, align 4, !tbaa !2
  %call = call i64 @__ctype_get_mb_cur_max() #13
  %cmp = icmp ugt i64 %call, 1
  br i1 %cmp, label %if.then, label %if.end54

if.then:                                          ; preds = %entry
  br label %while.cond

while.cond:                                       ; preds = %sw.epilog, %if.then
  %6 = load i8*, i8** %p, align 8, !tbaa !6
  %7 = load i8*, i8** %plimit, align 8, !tbaa !6
  %cmp1 = icmp ult i8* %6, %7
  br i1 %cmp1, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %8 = load i8*, i8** %p, align 8, !tbaa !6
  %9 = load i8, i8* %8, align 1, !tbaa !13
  %conv = sext i8 %9 to i32
  switch i32 %conv, label %sw.default [
    i32 32, label %sw.bb
    i32 33, label %sw.bb
    i32 34, label %sw.bb
    i32 35, label %sw.bb
    i32 37, label %sw.bb
    i32 38, label %sw.bb
    i32 39, label %sw.bb
    i32 40, label %sw.bb
    i32 41, label %sw.bb
    i32 42, label %sw.bb
    i32 43, label %sw.bb
    i32 44, label %sw.bb
    i32 45, label %sw.bb
    i32 46, label %sw.bb
    i32 47, label %sw.bb
    i32 48, label %sw.bb
    i32 49, label %sw.bb
    i32 50, label %sw.bb
    i32 51, label %sw.bb
    i32 52, label %sw.bb
    i32 53, label %sw.bb
    i32 54, label %sw.bb
    i32 55, label %sw.bb
    i32 56, label %sw.bb
    i32 57, label %sw.bb
    i32 58, label %sw.bb
    i32 59, label %sw.bb
    i32 60, label %sw.bb
    i32 61, label %sw.bb
    i32 62, label %sw.bb
    i32 63, label %sw.bb
    i32 65, label %sw.bb
    i32 66, label %sw.bb
    i32 67, label %sw.bb
    i32 68, label %sw.bb
    i32 69, label %sw.bb
    i32 70, label %sw.bb
    i32 71, label %sw.bb
    i32 72, label %sw.bb
    i32 73, label %sw.bb
    i32 74, label %sw.bb
    i32 75, label %sw.bb
    i32 76, label %sw.bb
    i32 77, label %sw.bb
    i32 78, label %sw.bb
    i32 79, label %sw.bb
    i32 80, label %sw.bb
    i32 81, label %sw.bb
    i32 82, label %sw.bb
    i32 83, label %sw.bb
    i32 84, label %sw.bb
    i32 85, label %sw.bb
    i32 86, label %sw.bb
    i32 87, label %sw.bb
    i32 88, label %sw.bb
    i32 89, label %sw.bb
    i32 90, label %sw.bb
    i32 91, label %sw.bb
    i32 92, label %sw.bb
    i32 93, label %sw.bb
    i32 94, label %sw.bb
    i32 95, label %sw.bb
    i32 97, label %sw.bb
    i32 98, label %sw.bb
    i32 99, label %sw.bb
    i32 100, label %sw.bb
    i32 101, label %sw.bb
    i32 102, label %sw.bb
    i32 103, label %sw.bb
    i32 104, label %sw.bb
    i32 105, label %sw.bb
    i32 106, label %sw.bb
    i32 107, label %sw.bb
    i32 108, label %sw.bb
    i32 109, label %sw.bb
    i32 110, label %sw.bb
    i32 111, label %sw.bb
    i32 112, label %sw.bb
    i32 113, label %sw.bb
    i32 114, label %sw.bb
    i32 115, label %sw.bb
    i32 116, label %sw.bb
    i32 117, label %sw.bb
    i32 118, label %sw.bb
    i32 119, label %sw.bb
    i32 120, label %sw.bb
    i32 121, label %sw.bb
    i32 122, label %sw.bb
    i32 123, label %sw.bb
    i32 124, label %sw.bb
    i32 125, label %sw.bb
    i32 126, label %sw.bb
  ]

sw.bb:                                            ; preds = %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body
  %10 = load i8*, i8** %p, align 8, !tbaa !6
  %incdec.ptr = getelementptr inbounds i8, i8* %10, i32 1
  store i8* %incdec.ptr, i8** %p, align 8, !tbaa !6
  %11 = load i32, i32* %width, align 4, !tbaa !2
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* %width, align 4, !tbaa !2
  br label %sw.epilog

sw.default:                                       ; preds = %while.body
  %12 = bitcast %struct.__mbstate_t* %mbstate to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %12) #13
  %13 = bitcast %struct.__mbstate_t* %mbstate to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %13, i8 0, i64 8, i1 false)
  br label %do.body

do.body:                                          ; preds = %do.cond, %sw.default
  %14 = bitcast i32* %wc to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %14) #13
  %15 = bitcast i64* %bytes to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %15) #13
  %16 = bitcast i32* %w to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %16) #13
  %17 = load i8*, i8** %p, align 8, !tbaa !6
  %18 = load i8*, i8** %plimit, align 8, !tbaa !6
  %19 = load i8*, i8** %p, align 8, !tbaa !6
  %sub.ptr.lhs.cast = ptrtoint i8* %18 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %19 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %call2 = call i64 @rpl_mbrtowc(i32* %wc, i8* %17, i64 %sub.ptr.sub, %struct.__mbstate_t* %mbstate)
  store i64 %call2, i64* %bytes, align 8, !tbaa !14
  %20 = load i64, i64* %bytes, align 8, !tbaa !14
  %cmp3 = icmp eq i64 %20, -1
  br i1 %cmp3, label %if.then5, label %if.end

if.then5:                                         ; preds = %do.body
  %21 = load i32, i32* %flags.addr, align 4, !tbaa !2
  %and = and i32 %21, 1
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.else, label %if.then6

if.then6:                                         ; preds = %if.then5
  %22 = load i8*, i8** %p, align 8, !tbaa !6
  %incdec.ptr7 = getelementptr inbounds i8, i8* %22, i32 1
  store i8* %incdec.ptr7, i8** %p, align 8, !tbaa !6
  %23 = load i32, i32* %width, align 4, !tbaa !2
  %inc8 = add nsw i32 %23, 1
  store i32 %inc8, i32* %width, align 4, !tbaa !2
  store i32 5, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.else:                                          ; preds = %if.then5
  store i32 -1, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %do.body
  %24 = load i64, i64* %bytes, align 8, !tbaa !14
  %cmp9 = icmp eq i64 %24, -2
  br i1 %cmp9, label %if.then11, label %if.end17

if.then11:                                        ; preds = %if.end
  %25 = load i32, i32* %flags.addr, align 4, !tbaa !2
  %and12 = and i32 %25, 1
  %tobool13 = icmp ne i32 %and12, 0
  br i1 %tobool13, label %if.else16, label %if.then14

if.then14:                                        ; preds = %if.then11
  %26 = load i8*, i8** %plimit, align 8, !tbaa !6
  store i8* %26, i8** %p, align 8, !tbaa !6
  %27 = load i32, i32* %width, align 4, !tbaa !2
  %inc15 = add nsw i32 %27, 1
  store i32 %inc15, i32* %width, align 4, !tbaa !2
  store i32 5, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.else16:                                        ; preds = %if.then11
  store i32 -1, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end17:                                         ; preds = %if.end
  %28 = load i64, i64* %bytes, align 8, !tbaa !14
  %cmp18 = icmp eq i64 %28, 0
  br i1 %cmp18, label %if.then20, label %if.end21

if.then20:                                        ; preds = %if.end17
  store i64 1, i64* %bytes, align 8, !tbaa !14
  br label %if.end21

if.end21:                                         ; preds = %if.then20, %if.end17
  %29 = load i32, i32* %wc, align 4, !tbaa !2
  %call22 = call i32 @wcwidth(i32 %29) #13
  store i32 %call22, i32* %w, align 4, !tbaa !2
  %30 = load i32, i32* %w, align 4, !tbaa !2
  %cmp23 = icmp sge i32 %30, 0
  br i1 %cmp23, label %if.then25, label %if.else30

if.then25:                                        ; preds = %if.end21
  %31 = load i32, i32* %w, align 4, !tbaa !2
  %32 = load i32, i32* %width, align 4, !tbaa !2
  %sub = sub nsw i32 2147483647, %32
  %cmp26 = icmp sgt i32 %31, %sub
  br i1 %cmp26, label %if.then28, label %if.end29

if.then28:                                        ; preds = %if.then25
  store i32 7, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end29:                                         ; preds = %if.then25
  %33 = load i32, i32* %w, align 4, !tbaa !2
  %34 = load i32, i32* %width, align 4, !tbaa !2
  %add = add nsw i32 %34, %33
  store i32 %add, i32* %width, align 4, !tbaa !2
  br label %if.end45

if.else30:                                        ; preds = %if.end21
  %35 = load i32, i32* %flags.addr, align 4, !tbaa !2
  %and31 = and i32 %35, 2
  %tobool32 = icmp ne i32 %and31, 0
  br i1 %tobool32, label %if.else43, label %if.then33

if.then33:                                        ; preds = %if.else30
  %36 = load i32, i32* %wc, align 4, !tbaa !2
  %call34 = call i32 @iswcntrl(i32 %36) #13
  %tobool35 = icmp ne i32 %call34, 0
  br i1 %tobool35, label %if.end42, label %if.then36

if.then36:                                        ; preds = %if.then33
  %37 = load i32, i32* %width, align 4, !tbaa !2
  %cmp37 = icmp eq i32 %37, 2147483647
  br i1 %cmp37, label %if.then39, label %if.end40

if.then39:                                        ; preds = %if.then36
  store i32 7, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end40:                                         ; preds = %if.then36
  %38 = load i32, i32* %width, align 4, !tbaa !2
  %inc41 = add nsw i32 %38, 1
  store i32 %inc41, i32* %width, align 4, !tbaa !2
  br label %if.end42

if.end42:                                         ; preds = %if.end40, %if.then33
  br label %if.end44

if.else43:                                        ; preds = %if.else30
  store i32 -1, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end44:                                         ; preds = %if.end42
  br label %if.end45

if.end45:                                         ; preds = %if.end44, %if.end29
  %39 = load i64, i64* %bytes, align 8, !tbaa !14
  %40 = load i8*, i8** %p, align 8, !tbaa !6
  %add.ptr46 = getelementptr inbounds i8, i8* %40, i64 %39
  store i8* %add.ptr46, i8** %p, align 8, !tbaa !6
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.then39, %if.then28, %if.end45, %if.else43, %if.else16, %if.then14, %if.else, %if.then6
  %41 = bitcast i32* %w to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %41) #13
  %42 = bitcast i64* %bytes to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %42) #13
  %43 = bitcast i32* %wc to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %43) #13
  %cleanup.dest = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest, label %cleanup51 [
    i32 0, label %cleanup.cont
    i32 5, label %do.end
  ]

cleanup.cont:                                     ; preds = %cleanup
  br label %do.cond

do.cond:                                          ; preds = %cleanup.cont
  %call49 = call i32 @mbsinit(%struct.__mbstate_t* %mbstate) #22
  %tobool50 = icmp ne i32 %call49, 0
  %lnot = xor i1 %tobool50, true
  br i1 %lnot, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond, %cleanup
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup51

cleanup51:                                        ; preds = %do.end, %cleanup
  %44 = bitcast %struct.__mbstate_t* %mbstate to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %44) #13
  %cleanup.dest52 = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest52, label %cleanup96 [
    i32 0, label %cleanup.cont53
    i32 7, label %overflow
  ]

cleanup.cont53:                                   ; preds = %cleanup51
  br label %sw.epilog

sw.epilog:                                        ; preds = %cleanup.cont53, %sw.bb
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %45 = load i32, i32* %width, align 4, !tbaa !2
  store i32 %45, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup96

if.end54:                                         ; preds = %entry
  br label %while.cond55

while.cond55:                                     ; preds = %cleanup.cont94, %if.end54
  %46 = load i8*, i8** %p, align 8, !tbaa !6
  %47 = load i8*, i8** %plimit, align 8, !tbaa !6
  %cmp56 = icmp ult i8* %46, %47
  br i1 %cmp56, label %while.body58, label %while.end95

while.body58:                                     ; preds = %while.cond55
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %c) #13
  %48 = load i8*, i8** %p, align 8, !tbaa !6
  %incdec.ptr59 = getelementptr inbounds i8, i8* %48, i32 1
  store i8* %incdec.ptr59, i8** %p, align 8, !tbaa !6
  %49 = load i8, i8* %48, align 1, !tbaa !13
  store i8 %49, i8* %c, align 1, !tbaa !13
  %call60 = call i16** @__ctype_b_loc() #26
  %50 = load i16*, i16** %call60, align 8, !tbaa !6
  %51 = load i8, i8* %c, align 1, !tbaa !13
  %conv61 = zext i8 %51 to i32
  %idxprom = sext i32 %conv61 to i64
  %arrayidx = getelementptr inbounds i16, i16* %50, i64 %idxprom
  %52 = load i16, i16* %arrayidx, align 2, !tbaa !48
  %conv62 = zext i16 %52 to i32
  %and63 = and i32 %conv62, 16384
  %tobool64 = icmp ne i32 %and63, 0
  br i1 %tobool64, label %if.then65, label %if.else71

if.then65:                                        ; preds = %while.body58
  %53 = load i32, i32* %width, align 4, !tbaa !2
  %cmp66 = icmp eq i32 %53, 2147483647
  br i1 %cmp66, label %if.then68, label %if.end69

if.then68:                                        ; preds = %if.then65
  store i32 7, i32* %cleanup.dest.slot, align 4
  br label %cleanup92

if.end69:                                         ; preds = %if.then65
  %54 = load i32, i32* %width, align 4, !tbaa !2
  %inc70 = add nsw i32 %54, 1
  store i32 %inc70, i32* %width, align 4, !tbaa !2
  br label %if.end91

if.else71:                                        ; preds = %while.body58
  %55 = load i32, i32* %flags.addr, align 4, !tbaa !2
  %and72 = and i32 %55, 2
  %tobool73 = icmp ne i32 %and72, 0
  br i1 %tobool73, label %if.else89, label %if.then74

if.then74:                                        ; preds = %if.else71
  %call75 = call i16** @__ctype_b_loc() #26
  %56 = load i16*, i16** %call75, align 8, !tbaa !6
  %57 = load i8, i8* %c, align 1, !tbaa !13
  %conv76 = zext i8 %57 to i32
  %idxprom77 = sext i32 %conv76 to i64
  %arrayidx78 = getelementptr inbounds i16, i16* %56, i64 %idxprom77
  %58 = load i16, i16* %arrayidx78, align 2, !tbaa !48
  %conv79 = zext i16 %58 to i32
  %and80 = and i32 %conv79, 2
  %tobool81 = icmp ne i32 %and80, 0
  br i1 %tobool81, label %if.end88, label %if.then82

if.then82:                                        ; preds = %if.then74
  %59 = load i32, i32* %width, align 4, !tbaa !2
  %cmp83 = icmp eq i32 %59, 2147483647
  br i1 %cmp83, label %if.then85, label %if.end86

if.then85:                                        ; preds = %if.then82
  store i32 7, i32* %cleanup.dest.slot, align 4
  br label %cleanup92

if.end86:                                         ; preds = %if.then82
  %60 = load i32, i32* %width, align 4, !tbaa !2
  %inc87 = add nsw i32 %60, 1
  store i32 %inc87, i32* %width, align 4, !tbaa !2
  br label %if.end88

if.end88:                                         ; preds = %if.end86, %if.then74
  br label %if.end90

if.else89:                                        ; preds = %if.else71
  store i32 -1, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup92

if.end90:                                         ; preds = %if.end88
  br label %if.end91

if.end91:                                         ; preds = %if.end90, %if.end69
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup92

cleanup92:                                        ; preds = %if.then85, %if.then68, %if.end91, %if.else89
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %c) #13
  %cleanup.dest93 = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest93, label %cleanup96 [
    i32 0, label %cleanup.cont94
    i32 7, label %overflow
  ]

cleanup.cont94:                                   ; preds = %cleanup92
  br label %while.cond55

while.end95:                                      ; preds = %while.cond55
  %61 = load i32, i32* %width, align 4, !tbaa !2
  store i32 %61, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup96

overflow:                                         ; preds = %cleanup92, %cleanup51
  store i32 2147483647, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup96

cleanup96:                                        ; preds = %overflow, %while.end95, %cleanup92, %while.end, %cleanup51
  %62 = bitcast i32* %width to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %62) #13
  %63 = bitcast i8** %plimit to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %63) #13
  %64 = bitcast i8** %p to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %64) #13
  %65 = load i32, i32* %retval, align 4
  ret i32 %65
}

; Function Attrs: nounwind
declare dso_local i64 @__ctype_get_mb_cur_max() #6

; Function Attrs: nounwind
declare dso_local i32 @wcwidth(i32) #6

; Function Attrs: nounwind
declare dso_local i32 @iswcntrl(i32) #6

; Function Attrs: nounwind readonly
declare dso_local i32 @mbsinit(%struct.__mbstate_t*) #5

; Function Attrs: nounwind uwtable
define dso_local i64 @num_processors(i32 %query) #7 {
entry:
  %retval = alloca i64, align 8
  %query.addr = alloca i32, align 4
  %omp_env_limit = alloca i64, align 8
  %omp_env_threads = alloca i64, align 8
  %cleanup.dest.slot = alloca i32, align 4
  %nprocs = alloca i64, align 8
  store i32 %query, i32* %query.addr, align 4, !tbaa !13
  %0 = bitcast i64* %omp_env_limit to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #13
  store i64 -1, i64* %omp_env_limit, align 8, !tbaa !14
  %1 = load i32, i32* %query.addr, align 4, !tbaa !13
  %cmp = icmp eq i32 %1, 2
  br i1 %cmp, label %if.then, label %if.end9

if.then:                                          ; preds = %entry
  %2 = bitcast i64* %omp_env_threads to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %2) #13
  %call = call i8* @getenv(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.237, i64 0, i64 0)) #13
  %call1 = call i64 @parse_omp_threads(i8* %call)
  store i64 %call1, i64* %omp_env_threads, align 8, !tbaa !14
  %call2 = call i8* @getenv(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1.238, i64 0, i64 0)) #13
  %call3 = call i64 @parse_omp_threads(i8* %call2)
  store i64 %call3, i64* %omp_env_limit, align 8, !tbaa !14
  %3 = load i64, i64* %omp_env_limit, align 8, !tbaa !14
  %tobool = icmp ne i64 %3, 0
  br i1 %tobool, label %if.end, label %if.then4

if.then4:                                         ; preds = %if.then
  store i64 -1, i64* %omp_env_limit, align 8, !tbaa !14
  br label %if.end

if.end:                                           ; preds = %if.then4, %if.then
  %4 = load i64, i64* %omp_env_threads, align 8, !tbaa !14
  %tobool5 = icmp ne i64 %4, 0
  br i1 %tobool5, label %if.then6, label %if.end8

if.then6:                                         ; preds = %if.end
  %5 = load i64, i64* %omp_env_threads, align 8, !tbaa !14
  %6 = load i64, i64* %omp_env_limit, align 8, !tbaa !14
  %cmp7 = icmp ult i64 %5, %6
  br i1 %cmp7, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then6
  %7 = load i64, i64* %omp_env_threads, align 8, !tbaa !14
  br label %cond.end

cond.false:                                       ; preds = %if.then6
  %8 = load i64, i64* %omp_env_limit, align 8, !tbaa !14
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %7, %cond.true ], [ %8, %cond.false ]
  store i64 %cond, i64* %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end8:                                          ; preds = %if.end
  store i32 1, i32* %query.addr, align 4, !tbaa !13
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end8, %cond.end
  %9 = bitcast i64* %omp_env_threads to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %9) #13
  %cleanup.dest = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest, label %cleanup17 [
    i32 0, label %cleanup.cont
  ]

cleanup.cont:                                     ; preds = %cleanup
  br label %if.end9

if.end9:                                          ; preds = %cleanup.cont, %entry
  %10 = bitcast i64* %nprocs to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %10) #13
  %11 = load i32, i32* %query.addr, align 4, !tbaa !13
  %call10 = call i64 @num_processors_ignoring_omp(i32 %11)
  store i64 %call10, i64* %nprocs, align 8, !tbaa !14
  %12 = load i64, i64* %nprocs, align 8, !tbaa !14
  %13 = load i64, i64* %omp_env_limit, align 8, !tbaa !14
  %cmp11 = icmp ult i64 %12, %13
  br i1 %cmp11, label %cond.true12, label %cond.false13

cond.true12:                                      ; preds = %if.end9
  %14 = load i64, i64* %nprocs, align 8, !tbaa !14
  br label %cond.end14

cond.false13:                                     ; preds = %if.end9
  %15 = load i64, i64* %omp_env_limit, align 8, !tbaa !14
  br label %cond.end14

cond.end14:                                       ; preds = %cond.false13, %cond.true12
  %cond15 = phi i64 [ %14, %cond.true12 ], [ %15, %cond.false13 ]
  store i64 %cond15, i64* %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  %16 = bitcast i64* %nprocs to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %16) #13
  br label %cleanup17

cleanup17:                                        ; preds = %cond.end14, %cleanup
  %17 = bitcast i64* %omp_env_limit to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %17) #13
  %18 = load i64, i64* %retval, align 8
  ret i64 %18
}

; Function Attrs: nounwind uwtable
define internal i64 @parse_omp_threads(i8* %threads) #7 {
entry:
  %retval = alloca i64, align 8
  %threads.addr = alloca i8*, align 8
  %ret = alloca i64, align 8
  %cleanup.dest.slot = alloca i32, align 4
  %endptr = alloca i8*, align 8
  %value = alloca i64, align 8
  store i8* %threads, i8** %threads.addr, align 8, !tbaa !6
  %0 = bitcast i64* %ret to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #13
  store i64 0, i64* %ret, align 8, !tbaa !14
  %1 = load i8*, i8** %threads.addr, align 8, !tbaa !6
  %cmp = icmp eq i8* %1, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load i64, i64* %ret, align 8, !tbaa !14
  store i64 %2, i64* %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup37

if.end:                                           ; preds = %entry
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end
  %3 = load i8*, i8** %threads.addr, align 8, !tbaa !6
  %4 = load i8, i8* %3, align 1, !tbaa !13
  %conv = sext i8 %4 to i32
  %cmp1 = icmp ne i32 %conv, 0
  br i1 %cmp1, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %5 = load i8*, i8** %threads.addr, align 8, !tbaa !6
  %6 = load i8, i8* %5, align 1, !tbaa !13
  %conv3 = sext i8 %6 to i32
  %call = call zeroext i1 @c_isspace(i32 %conv3)
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %7 = phi i1 [ false, %while.cond ], [ %call, %land.rhs ]
  br i1 %7, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %8 = load i8*, i8** %threads.addr, align 8, !tbaa !6
  %incdec.ptr = getelementptr inbounds i8, i8* %8, i32 1
  store i8* %incdec.ptr, i8** %threads.addr, align 8, !tbaa !6
  br label %while.cond

while.end:                                        ; preds = %land.end
  %9 = load i8*, i8** %threads.addr, align 8, !tbaa !6
  %10 = load i8, i8* %9, align 1, !tbaa !13
  %conv5 = sext i8 %10 to i32
  %call6 = call zeroext i1 @c_isdigit(i32 %conv5)
  br i1 %call6, label %if.then7, label %if.end36

if.then7:                                         ; preds = %while.end
  %11 = bitcast i8** %endptr to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %11) #13
  store i8* null, i8** %endptr, align 8, !tbaa !6
  %12 = bitcast i64* %value to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %12) #13
  %13 = load i8*, i8** %threads.addr, align 8, !tbaa !6
  %call8 = call i64 @strtoul(i8* %13, i8** %endptr, i32 10) #13
  store i64 %call8, i64* %value, align 8, !tbaa !14
  %14 = load i8*, i8** %endptr, align 8, !tbaa !6
  %cmp9 = icmp ne i8* %14, null
  br i1 %cmp9, label %if.then11, label %if.end34

if.then11:                                        ; preds = %if.then7
  br label %while.cond12

while.cond12:                                     ; preds = %while.body21, %if.then11
  %15 = load i8*, i8** %endptr, align 8, !tbaa !6
  %16 = load i8, i8* %15, align 1, !tbaa !13
  %conv13 = sext i8 %16 to i32
  %cmp14 = icmp ne i32 %conv13, 0
  br i1 %cmp14, label %land.rhs16, label %land.end20

land.rhs16:                                       ; preds = %while.cond12
  %17 = load i8*, i8** %endptr, align 8, !tbaa !6
  %18 = load i8, i8* %17, align 1, !tbaa !13
  %conv17 = sext i8 %18 to i32
  %call18 = call zeroext i1 @c_isspace(i32 %conv17)
  br label %land.end20

land.end20:                                       ; preds = %land.rhs16, %while.cond12
  %19 = phi i1 [ false, %while.cond12 ], [ %call18, %land.rhs16 ]
  br i1 %19, label %while.body21, label %while.end23

while.body21:                                     ; preds = %land.end20
  %20 = load i8*, i8** %endptr, align 8, !tbaa !6
  %incdec.ptr22 = getelementptr inbounds i8, i8* %20, i32 1
  store i8* %incdec.ptr22, i8** %endptr, align 8, !tbaa !6
  br label %while.cond12

while.end23:                                      ; preds = %land.end20
  %21 = load i8*, i8** %endptr, align 8, !tbaa !6
  %22 = load i8, i8* %21, align 1, !tbaa !13
  %conv24 = sext i8 %22 to i32
  %cmp25 = icmp eq i32 %conv24, 0
  br i1 %cmp25, label %if.then27, label %if.else

if.then27:                                        ; preds = %while.end23
  %23 = load i64, i64* %value, align 8, !tbaa !14
  store i64 %23, i64* %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.else:                                          ; preds = %while.end23
  %24 = load i8*, i8** %endptr, align 8, !tbaa !6
  %25 = load i8, i8* %24, align 1, !tbaa !13
  %conv28 = sext i8 %25 to i32
  %cmp29 = icmp eq i32 %conv28, 44
  br i1 %cmp29, label %if.then31, label %if.end32

if.then31:                                        ; preds = %if.else
  %26 = load i64, i64* %value, align 8, !tbaa !14
  store i64 %26, i64* %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end32:                                         ; preds = %if.else
  br label %if.end33

if.end33:                                         ; preds = %if.end32
  br label %if.end34

if.end34:                                         ; preds = %if.end33, %if.then7
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end34, %if.then31, %if.then27
  %27 = bitcast i64* %value to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %27) #13
  %28 = bitcast i8** %endptr to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %28) #13
  %cleanup.dest = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest, label %cleanup37 [
    i32 0, label %cleanup.cont
  ]

cleanup.cont:                                     ; preds = %cleanup
  br label %if.end36

if.end36:                                         ; preds = %cleanup.cont, %while.end
  %29 = load i64, i64* %ret, align 8, !tbaa !14
  store i64 %29, i64* %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup37

cleanup37:                                        ; preds = %if.end36, %cleanup, %if.then
  %30 = bitcast i64* %ret to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %30) #13
  %31 = load i64, i64* %retval, align 8
  ret i64 %31
}

; Function Attrs: nounwind uwtable
define internal i64 @num_processors_ignoring_omp(i32 %query) #7 {
entry:
  %retval = alloca i64, align 8
  %query.addr = alloca i32, align 4
  %nprocs = alloca i64, align 8
  %cleanup.dest.slot = alloca i32, align 4
  %nprocs3 = alloca i64, align 8
  %nprocs11 = alloca i64, align 8
  %nprocs_current = alloca i64, align 8
  store i32 %query, i32* %query.addr, align 4, !tbaa !13
  %0 = load i32, i32* %query.addr, align 4, !tbaa !13
  %cmp = icmp eq i32 %0, 1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = bitcast i64* %nprocs to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %1) #13
  %call = call i64 @num_processors_via_affinity_mask()
  store i64 %call, i64* %nprocs, align 8, !tbaa !14
  %2 = load i64, i64* %nprocs, align 8, !tbaa !14
  %cmp1 = icmp ugt i64 %2, 0
  br i1 %cmp1, label %if.then2, label %if.end

if.then2:                                         ; preds = %if.then
  %3 = load i64, i64* %nprocs, align 8, !tbaa !14
  store i64 %3, i64* %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %if.then
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end, %if.then2
  %4 = bitcast i64* %nprocs to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %4) #13
  %cleanup.dest = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest, label %unreachable [
    i32 0, label %cleanup.cont
    i32 1, label %return
  ]

cleanup.cont:                                     ; preds = %cleanup
  %5 = bitcast i64* %nprocs3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %5) #13
  %call4 = call i64 @sysconf(i32 84) #13
  store i64 %call4, i64* %nprocs3, align 8, !tbaa !14
  %6 = load i64, i64* %nprocs3, align 8, !tbaa !14
  %cmp5 = icmp sgt i64 %6, 0
  br i1 %cmp5, label %if.then6, label %if.end7

if.then6:                                         ; preds = %cleanup.cont
  %7 = load i64, i64* %nprocs3, align 8, !tbaa !14
  store i64 %7, i64* %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup8

if.end7:                                          ; preds = %cleanup.cont
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup8

cleanup8:                                         ; preds = %if.end7, %if.then6
  %8 = bitcast i64* %nprocs3 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %8) #13
  %cleanup.dest9 = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest9, label %unreachable [
    i32 0, label %cleanup.cont10
    i32 1, label %return
  ]

cleanup.cont10:                                   ; preds = %cleanup8
  br label %if.end27

if.else:                                          ; preds = %entry
  %9 = bitcast i64* %nprocs11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %9) #13
  %call12 = call i64 @sysconf(i32 83) #13
  store i64 %call12, i64* %nprocs11, align 8, !tbaa !14
  %10 = load i64, i64* %nprocs11, align 8, !tbaa !14
  %cmp13 = icmp eq i64 %10, 1
  br i1 %cmp13, label %if.then15, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.else
  %11 = load i64, i64* %nprocs11, align 8, !tbaa !14
  %cmp14 = icmp eq i64 %11, 2
  br i1 %cmp14, label %if.then15, label %if.end20

if.then15:                                        ; preds = %lor.lhs.false, %if.else
  %12 = bitcast i64* %nprocs_current to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %12) #13
  %call16 = call i64 @num_processors_via_affinity_mask()
  store i64 %call16, i64* %nprocs_current, align 8, !tbaa !14
  %13 = load i64, i64* %nprocs_current, align 8, !tbaa !14
  %14 = load i64, i64* %nprocs11, align 8, !tbaa !14
  %cmp17 = icmp ugt i64 %13, %14
  br i1 %cmp17, label %if.then18, label %if.end19

if.then18:                                        ; preds = %if.then15
  %15 = load i64, i64* %nprocs_current, align 8, !tbaa !14
  store i64 %15, i64* %nprocs11, align 8, !tbaa !14
  br label %if.end19

if.end19:                                         ; preds = %if.then18, %if.then15
  %16 = bitcast i64* %nprocs_current to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %16) #13
  br label %if.end20

if.end20:                                         ; preds = %if.end19, %lor.lhs.false
  %17 = load i64, i64* %nprocs11, align 8, !tbaa !14
  %cmp21 = icmp sgt i64 %17, 0
  br i1 %cmp21, label %if.then22, label %if.end23

if.then22:                                        ; preds = %if.end20
  %18 = load i64, i64* %nprocs11, align 8, !tbaa !14
  store i64 %18, i64* %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup24

if.end23:                                         ; preds = %if.end20
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup24

cleanup24:                                        ; preds = %if.end23, %if.then22
  %19 = bitcast i64* %nprocs11 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %19) #13
  %cleanup.dest25 = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest25, label %unreachable [
    i32 0, label %cleanup.cont26
    i32 1, label %return
  ]

cleanup.cont26:                                   ; preds = %cleanup24
  br label %if.end27

if.end27:                                         ; preds = %cleanup.cont26, %cleanup.cont10
  store i64 1, i64* %retval, align 8
  br label %return

return:                                           ; preds = %if.end27, %cleanup24, %cleanup8, %cleanup
  %20 = load i64, i64* %retval, align 8
  ret i64 %20

unreachable:                                      ; preds = %cleanup24, %cleanup8, %cleanup
  unreachable
}

; Function Attrs: nounwind uwtable
define internal i64 @num_processors_via_affinity_mask() #7 {
entry:
  %retval = alloca i64, align 8
  %set = alloca %struct.__sigset_t, align 8
  %count = alloca i64, align 8
  %cleanup.dest.slot = alloca i32, align 4
  %0 = bitcast %struct.__sigset_t* %set to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* %0) #13
  %call = call i32 @sched_getaffinity(i32 0, i64 128, %struct.__sigset_t* %set) #13
  %cmp = icmp eq i32 %call, 0
  br i1 %cmp, label %if.then, label %if.end5

if.then:                                          ; preds = %entry
  %1 = bitcast i64* %count to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %1) #13
  %call1 = call i32 @__sched_cpucount(i64 128, %struct.__sigset_t* %set) #13
  %conv = sext i32 %call1 to i64
  store i64 %conv, i64* %count, align 8, !tbaa !14
  %2 = load i64, i64* %count, align 8, !tbaa !14
  %cmp2 = icmp ugt i64 %2, 0
  br i1 %cmp2, label %if.then4, label %if.end

if.then4:                                         ; preds = %if.then
  %3 = load i64, i64* %count, align 8, !tbaa !14
  store i64 %3, i64* %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %if.then
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end, %if.then4
  %4 = bitcast i64* %count to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %4) #13
  %cleanup.dest = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest, label %cleanup6 [
    i32 0, label %cleanup.cont
  ]

cleanup.cont:                                     ; preds = %cleanup
  br label %if.end5

if.end5:                                          ; preds = %cleanup.cont, %entry
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup6

cleanup6:                                         ; preds = %if.end5, %cleanup
  %5 = bitcast %struct.__sigset_t* %set to i8*
  call void @llvm.lifetime.end.p0i8(i64 128, i8* %5) #13
  %cleanup.dest7 = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest7, label %unreachable [
    i32 0, label %cleanup.cont8
    i32 1, label %return
  ]

cleanup.cont8:                                    ; preds = %cleanup6
  store i64 0, i64* %retval, align 8
  br label %return

return:                                           ; preds = %cleanup.cont8, %cleanup6
  %6 = load i64, i64* %retval, align 8
  ret i64 %6

unreachable:                                      ; preds = %cleanup6
  unreachable
}

; Function Attrs: nounwind
declare dso_local i64 @sysconf(i32) #6

; Function Attrs: nounwind
declare dso_local i32 @sched_getaffinity(i32, i64, %struct.__sigset_t*) #6

; Function Attrs: nounwind
declare dso_local i32 @__sched_cpucount(i64, %struct.__sigset_t*) #6

; Function Attrs: nounwind
declare dso_local i64 @strtoul(i8*, i8**, i32) #6

; Function Attrs: nounwind uwtable
define dso_local double @physmem_total() #7 {
entry:
  %retval = alloca double, align 8
  %pages = alloca double, align 8
  %pagesize = alloca double, align 8
  %cleanup.dest.slot = alloca i32, align 4
  %si = alloca %struct.sysinfo, align 8
  %0 = bitcast double* %pages to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #13
  %call = call i64 @sysconf(i32 85) #13
  %conv = sitofp i64 %call to double
  store double %conv, double* %pages, align 8, !tbaa !57
  %1 = bitcast double* %pagesize to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %1) #13
  %call1 = call i64 @sysconf(i32 30) #13
  %conv2 = sitofp i64 %call1 to double
  store double %conv2, double* %pagesize, align 8, !tbaa !57
  %2 = load double, double* %pages, align 8, !tbaa !57
  %cmp = fcmp ole double 0.000000e+00, %2
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %3 = load double, double* %pagesize, align 8, !tbaa !57
  %cmp4 = fcmp ole double 0.000000e+00, %3
  br i1 %cmp4, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %4 = load double, double* %pages, align 8, !tbaa !57
  %5 = load double, double* %pagesize, align 8, !tbaa !57
  %mul = fmul double %4, %5
  store double %mul, double* %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %land.lhs.true, %entry
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end, %if.then
  %6 = bitcast double* %pagesize to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %6) #13
  %7 = bitcast double* %pages to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %7) #13
  %cleanup.dest = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest, label %unreachable [
    i32 0, label %cleanup.cont
    i32 1, label %return
  ]

cleanup.cont:                                     ; preds = %cleanup
  %8 = bitcast %struct.sysinfo* %si to i8*
  call void @llvm.lifetime.start.p0i8(i64 112, i8* %8) #13
  %call7 = call i32 @sysinfo(%struct.sysinfo* %si) #13
  %cmp8 = icmp eq i32 %call7, 0
  br i1 %cmp8, label %if.then10, label %if.end14

if.then10:                                        ; preds = %cleanup.cont
  %totalram = getelementptr inbounds %struct.sysinfo, %struct.sysinfo* %si, i32 0, i32 2
  %9 = load i64, i64* %totalram, align 8, !tbaa !147
  %conv11 = uitofp i64 %9 to double
  %mem_unit = getelementptr inbounds %struct.sysinfo, %struct.sysinfo* %si, i32 0, i32 12
  %10 = load i32, i32* %mem_unit, align 8, !tbaa !149
  %conv12 = uitofp i32 %10 to double
  %mul13 = fmul double %conv11, %conv12
  store double %mul13, double* %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup15

if.end14:                                         ; preds = %cleanup.cont
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup15

cleanup15:                                        ; preds = %if.end14, %if.then10
  %11 = bitcast %struct.sysinfo* %si to i8*
  call void @llvm.lifetime.end.p0i8(i64 112, i8* %11) #13
  %cleanup.dest16 = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest16, label %unreachable [
    i32 0, label %cleanup.cont17
    i32 1, label %return
  ]

cleanup.cont17:                                   ; preds = %cleanup15
  store double 0x4190000000000000, double* %retval, align 8
  br label %return

return:                                           ; preds = %cleanup.cont17, %cleanup15, %cleanup
  %12 = load double, double* %retval, align 8
  ret double %12

unreachable:                                      ; preds = %cleanup15, %cleanup
  unreachable
}

; Function Attrs: nounwind
declare dso_local i32 @sysinfo(%struct.sysinfo*) #6

; Function Attrs: nounwind uwtable
define dso_local double @physmem_available() #7 {
entry:
  %retval = alloca double, align 8
  %pages = alloca double, align 8
  %pagesize = alloca double, align 8
  %cleanup.dest.slot = alloca i32, align 4
  %si = alloca %struct.sysinfo, align 8
  %0 = bitcast double* %pages to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #13
  %call = call i64 @sysconf(i32 86) #13
  %conv = sitofp i64 %call to double
  store double %conv, double* %pages, align 8, !tbaa !57
  %1 = bitcast double* %pagesize to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %1) #13
  %call1 = call i64 @sysconf(i32 30) #13
  %conv2 = sitofp i64 %call1 to double
  store double %conv2, double* %pagesize, align 8, !tbaa !57
  %2 = load double, double* %pages, align 8, !tbaa !57
  %cmp = fcmp ole double 0.000000e+00, %2
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %3 = load double, double* %pagesize, align 8, !tbaa !57
  %cmp4 = fcmp ole double 0.000000e+00, %3
  br i1 %cmp4, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %4 = load double, double* %pages, align 8, !tbaa !57
  %5 = load double, double* %pagesize, align 8, !tbaa !57
  %mul = fmul double %4, %5
  store double %mul, double* %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %land.lhs.true, %entry
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end, %if.then
  %6 = bitcast double* %pagesize to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %6) #13
  %7 = bitcast double* %pages to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %7) #13
  %cleanup.dest = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest, label %unreachable [
    i32 0, label %cleanup.cont
    i32 1, label %return
  ]

cleanup.cont:                                     ; preds = %cleanup
  %8 = bitcast %struct.sysinfo* %si to i8*
  call void @llvm.lifetime.start.p0i8(i64 112, i8* %8) #13
  %call7 = call i32 @sysinfo(%struct.sysinfo* %si) #13
  %cmp8 = icmp eq i32 %call7, 0
  br i1 %cmp8, label %if.then10, label %if.end15

if.then10:                                        ; preds = %cleanup.cont
  %freeram = getelementptr inbounds %struct.sysinfo, %struct.sysinfo* %si, i32 0, i32 3
  %9 = load i64, i64* %freeram, align 8, !tbaa !150
  %conv11 = uitofp i64 %9 to double
  %bufferram = getelementptr inbounds %struct.sysinfo, %struct.sysinfo* %si, i32 0, i32 5
  %10 = load i64, i64* %bufferram, align 8, !tbaa !151
  %conv12 = uitofp i64 %10 to double
  %add = fadd double %conv11, %conv12
  %mem_unit = getelementptr inbounds %struct.sysinfo, %struct.sysinfo* %si, i32 0, i32 12
  %11 = load i32, i32* %mem_unit, align 8, !tbaa !149
  %conv13 = uitofp i32 %11 to double
  %mul14 = fmul double %add, %conv13
  store double %mul14, double* %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup16

if.end15:                                         ; preds = %cleanup.cont
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup16

cleanup16:                                        ; preds = %if.end15, %if.then10
  %12 = bitcast %struct.sysinfo* %si to i8*
  call void @llvm.lifetime.end.p0i8(i64 112, i8* %12) #13
  %cleanup.dest17 = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest17, label %unreachable [
    i32 0, label %cleanup.cont18
    i32 1, label %return
  ]

cleanup.cont18:                                   ; preds = %cleanup16
  %call19 = call double @physmem_total()
  %div = fdiv double %call19, 4.000000e+00
  store double %div, double* %retval, align 8
  br label %return

return:                                           ; preds = %cleanup.cont18, %cleanup16, %cleanup
  %13 = load double, double* %retval, align 8
  ret double %13

unreachable:                                      ; preds = %cleanup16, %cleanup
  unreachable
}

; Function Attrs: nounwind uwtable
define dso_local i32 @rpl_pipe2(i32* nonnull %fd, i32 %flags) #7 {
entry:
  %retval = alloca i32, align 4
  %fd.addr = alloca i32*, align 8
  %flags.addr = alloca i32, align 4
  %tmp = alloca [2 x i32], align 4
  %result = alloca i32, align 4
  %cleanup.dest.slot = alloca i32, align 4
  %fcntl_flags = alloca i32, align 4
  %fcntl_flags43 = alloca i32, align 4
  %saved_errno = alloca i32, align 4
  store i32* %fd, i32** %fd.addr, align 8, !tbaa !6
  store i32 %flags, i32* %flags.addr, align 4, !tbaa !2
  %0 = bitcast [2 x i32]* %tmp to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #13
  %1 = load i32*, i32** %fd.addr, align 8, !tbaa !6
  %arrayidx = getelementptr inbounds i32, i32* %1, i64 0
  %2 = load i32, i32* %arrayidx, align 4, !tbaa !2
  %arrayidx1 = getelementptr inbounds [2 x i32], [2 x i32]* %tmp, i64 0, i64 0
  store i32 %2, i32* %arrayidx1, align 4, !tbaa !2
  %3 = load i32*, i32** %fd.addr, align 8, !tbaa !6
  %arrayidx2 = getelementptr inbounds i32, i32* %3, i64 1
  %4 = load i32, i32* %arrayidx2, align 4, !tbaa !2
  %arrayidx3 = getelementptr inbounds [2 x i32], [2 x i32]* %tmp, i64 0, i64 1
  store i32 %4, i32* %arrayidx3, align 4, !tbaa !2
  %5 = load i32, i32* @rpl_pipe2.have_pipe2_really, align 4, !tbaa !2
  %cmp = icmp sge i32 %5, 0
  br i1 %cmp, label %if.then, label %if.end8

if.then:                                          ; preds = %entry
  %6 = bitcast i32* %result to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %6) #13
  %7 = load i32*, i32** %fd.addr, align 8, !tbaa !6
  %8 = load i32, i32* %flags.addr, align 4, !tbaa !2
  %call = call i32 @pipe2(i32* %7, i32 %8) #13
  store i32 %call, i32* %result, align 4, !tbaa !2
  %9 = load i32, i32* %result, align 4, !tbaa !2
  %cmp4 = icmp slt i32 %9, 0
  br i1 %cmp4, label %land.lhs.true, label %if.then7

land.lhs.true:                                    ; preds = %if.then
  %call5 = call i32* @__errno_location() #26
  %10 = load i32, i32* %call5, align 4, !tbaa !2
  %cmp6 = icmp eq i32 %10, 38
  br i1 %cmp6, label %if.end, label %if.then7

if.then7:                                         ; preds = %land.lhs.true, %if.then
  store i32 1, i32* @rpl_pipe2.have_pipe2_really, align 4, !tbaa !2
  %11 = load i32, i32* %result, align 4, !tbaa !2
  store i32 %11, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %land.lhs.true
  store i32 -1, i32* @rpl_pipe2.have_pipe2_really, align 4, !tbaa !2
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end, %if.then7
  %12 = bitcast i32* %result to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %12) #13
  %cleanup.dest = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest, label %cleanup78 [
    i32 0, label %cleanup.cont
  ]

cleanup.cont:                                     ; preds = %cleanup
  br label %if.end8

if.end8:                                          ; preds = %cleanup.cont, %entry
  %13 = load i32, i32* %flags.addr, align 4, !tbaa !2
  %and = and i32 %13, -526337
  %cmp9 = icmp ne i32 %and, 0
  br i1 %cmp9, label %if.then10, label %if.end12

if.then10:                                        ; preds = %if.end8
  %call11 = call i32* @__errno_location() #26
  store i32 22, i32* %call11, align 4, !tbaa !2
  store i32 -1, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup78

if.end12:                                         ; preds = %if.end8
  %14 = load i32*, i32** %fd.addr, align 8, !tbaa !6
  %call13 = call i32 @pipe(i32* %14) #13
  %cmp14 = icmp slt i32 %call13, 0
  br i1 %cmp14, label %if.then15, label %if.end16

if.then15:                                        ; preds = %if.end12
  store i32 -1, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup78

if.end16:                                         ; preds = %if.end12
  %15 = load i32, i32* %flags.addr, align 4, !tbaa !2
  %and17 = and i32 %15, 2048
  %tobool = icmp ne i32 %and17, 0
  br i1 %tobool, label %if.then18, label %if.end39

if.then18:                                        ; preds = %if.end16
  %16 = bitcast i32* %fcntl_flags to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %16) #13
  %17 = load i32*, i32** %fd.addr, align 8, !tbaa !6
  %arrayidx19 = getelementptr inbounds i32, i32* %17, i64 1
  %18 = load i32, i32* %arrayidx19, align 4, !tbaa !2
  %call20 = call i32 (i32, i32, ...) @rpl_fcntl(i32 %18, i32 3, i32 0)
  store i32 %call20, i32* %fcntl_flags, align 4, !tbaa !2
  %cmp21 = icmp slt i32 %call20, 0
  br i1 %cmp21, label %if.then34, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then18
  %19 = load i32*, i32** %fd.addr, align 8, !tbaa !6
  %arrayidx22 = getelementptr inbounds i32, i32* %19, i64 1
  %20 = load i32, i32* %arrayidx22, align 4, !tbaa !2
  %21 = load i32, i32* %fcntl_flags, align 4, !tbaa !2
  %or = or i32 %21, 2048
  %call23 = call i32 (i32, i32, ...) @rpl_fcntl(i32 %20, i32 4, i32 %or)
  %cmp24 = icmp eq i32 %call23, -1
  br i1 %cmp24, label %if.then34, label %lor.lhs.false25

lor.lhs.false25:                                  ; preds = %lor.lhs.false
  %22 = load i32*, i32** %fd.addr, align 8, !tbaa !6
  %arrayidx26 = getelementptr inbounds i32, i32* %22, i64 0
  %23 = load i32, i32* %arrayidx26, align 4, !tbaa !2
  %call27 = call i32 (i32, i32, ...) @rpl_fcntl(i32 %23, i32 3, i32 0)
  store i32 %call27, i32* %fcntl_flags, align 4, !tbaa !2
  %cmp28 = icmp slt i32 %call27, 0
  br i1 %cmp28, label %if.then34, label %lor.lhs.false29

lor.lhs.false29:                                  ; preds = %lor.lhs.false25
  %24 = load i32*, i32** %fd.addr, align 8, !tbaa !6
  %arrayidx30 = getelementptr inbounds i32, i32* %24, i64 0
  %25 = load i32, i32* %arrayidx30, align 4, !tbaa !2
  %26 = load i32, i32* %fcntl_flags, align 4, !tbaa !2
  %or31 = or i32 %26, 2048
  %call32 = call i32 (i32, i32, ...) @rpl_fcntl(i32 %25, i32 4, i32 %or31)
  %cmp33 = icmp eq i32 %call32, -1
  br i1 %cmp33, label %if.then34, label %if.end35

if.then34:                                        ; preds = %lor.lhs.false29, %lor.lhs.false25, %lor.lhs.false, %if.then18
  store i32 2, i32* %cleanup.dest.slot, align 4
  br label %cleanup36

if.end35:                                         ; preds = %lor.lhs.false29
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup36

cleanup36:                                        ; preds = %if.then34, %if.end35
  %27 = bitcast i32* %fcntl_flags to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %27) #13
  %cleanup.dest37 = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest37, label %cleanup78 [
    i32 0, label %cleanup.cont38
    i32 2, label %fail
  ]

cleanup.cont38:                                   ; preds = %cleanup36
  br label %if.end39

if.end39:                                         ; preds = %cleanup.cont38, %if.end16
  %28 = load i32, i32* %flags.addr, align 4, !tbaa !2
  %and40 = and i32 %28, 524288
  %tobool41 = icmp ne i32 %and40, 0
  br i1 %tobool41, label %if.then42, label %if.end66

if.then42:                                        ; preds = %if.end39
  %29 = bitcast i32* %fcntl_flags43 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %29) #13
  %30 = load i32*, i32** %fd.addr, align 8, !tbaa !6
  %arrayidx44 = getelementptr inbounds i32, i32* %30, i64 1
  %31 = load i32, i32* %arrayidx44, align 4, !tbaa !2
  %call45 = call i32 (i32, i32, ...) @rpl_fcntl(i32 %31, i32 1, i32 0)
  store i32 %call45, i32* %fcntl_flags43, align 4, !tbaa !2
  %cmp46 = icmp slt i32 %call45, 0
  br i1 %cmp46, label %if.then61, label %lor.lhs.false47

lor.lhs.false47:                                  ; preds = %if.then42
  %32 = load i32*, i32** %fd.addr, align 8, !tbaa !6
  %arrayidx48 = getelementptr inbounds i32, i32* %32, i64 1
  %33 = load i32, i32* %arrayidx48, align 4, !tbaa !2
  %34 = load i32, i32* %fcntl_flags43, align 4, !tbaa !2
  %or49 = or i32 %34, 1
  %call50 = call i32 (i32, i32, ...) @rpl_fcntl(i32 %33, i32 2, i32 %or49)
  %cmp51 = icmp eq i32 %call50, -1
  br i1 %cmp51, label %if.then61, label %lor.lhs.false52

lor.lhs.false52:                                  ; preds = %lor.lhs.false47
  %35 = load i32*, i32** %fd.addr, align 8, !tbaa !6
  %arrayidx53 = getelementptr inbounds i32, i32* %35, i64 0
  %36 = load i32, i32* %arrayidx53, align 4, !tbaa !2
  %call54 = call i32 (i32, i32, ...) @rpl_fcntl(i32 %36, i32 1, i32 0)
  store i32 %call54, i32* %fcntl_flags43, align 4, !tbaa !2
  %cmp55 = icmp slt i32 %call54, 0
  br i1 %cmp55, label %if.then61, label %lor.lhs.false56

lor.lhs.false56:                                  ; preds = %lor.lhs.false52
  %37 = load i32*, i32** %fd.addr, align 8, !tbaa !6
  %arrayidx57 = getelementptr inbounds i32, i32* %37, i64 0
  %38 = load i32, i32* %arrayidx57, align 4, !tbaa !2
  %39 = load i32, i32* %fcntl_flags43, align 4, !tbaa !2
  %or58 = or i32 %39, 1
  %call59 = call i32 (i32, i32, ...) @rpl_fcntl(i32 %38, i32 2, i32 %or58)
  %cmp60 = icmp eq i32 %call59, -1
  br i1 %cmp60, label %if.then61, label %if.end62

if.then61:                                        ; preds = %lor.lhs.false56, %lor.lhs.false52, %lor.lhs.false47, %if.then42
  store i32 2, i32* %cleanup.dest.slot, align 4
  br label %cleanup63

if.end62:                                         ; preds = %lor.lhs.false56
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup63

cleanup63:                                        ; preds = %if.then61, %if.end62
  %40 = bitcast i32* %fcntl_flags43 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %40) #13
  %cleanup.dest64 = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest64, label %cleanup78 [
    i32 0, label %cleanup.cont65
    i32 2, label %fail
  ]

cleanup.cont65:                                   ; preds = %cleanup63
  br label %if.end66

if.end66:                                         ; preds = %cleanup.cont65, %if.end39
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup78

fail:                                             ; preds = %cleanup63, %cleanup36
  %41 = bitcast i32* %saved_errno to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %41) #13
  %call67 = call i32* @__errno_location() #26
  %42 = load i32, i32* %call67, align 4, !tbaa !2
  store i32 %42, i32* %saved_errno, align 4, !tbaa !2
  %43 = load i32*, i32** %fd.addr, align 8, !tbaa !6
  %arrayidx68 = getelementptr inbounds i32, i32* %43, i64 0
  %44 = load i32, i32* %arrayidx68, align 4, !tbaa !2
  %call69 = call i32 @close(i32 %44)
  %45 = load i32*, i32** %fd.addr, align 8, !tbaa !6
  %arrayidx70 = getelementptr inbounds i32, i32* %45, i64 1
  %46 = load i32, i32* %arrayidx70, align 4, !tbaa !2
  %call71 = call i32 @close(i32 %46)
  %arrayidx72 = getelementptr inbounds [2 x i32], [2 x i32]* %tmp, i64 0, i64 0
  %47 = load i32, i32* %arrayidx72, align 4, !tbaa !2
  %48 = load i32*, i32** %fd.addr, align 8, !tbaa !6
  %arrayidx73 = getelementptr inbounds i32, i32* %48, i64 0
  store i32 %47, i32* %arrayidx73, align 4, !tbaa !2
  %arrayidx74 = getelementptr inbounds [2 x i32], [2 x i32]* %tmp, i64 0, i64 1
  %49 = load i32, i32* %arrayidx74, align 4, !tbaa !2
  %50 = load i32*, i32** %fd.addr, align 8, !tbaa !6
  %arrayidx75 = getelementptr inbounds i32, i32* %50, i64 1
  store i32 %49, i32* %arrayidx75, align 4, !tbaa !2
  %51 = load i32, i32* %saved_errno, align 4, !tbaa !2
  %call76 = call i32* @__errno_location() #26
  store i32 %51, i32* %call76, align 4, !tbaa !2
  store i32 -1, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  %52 = bitcast i32* %saved_errno to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %52) #13
  br label %cleanup78

cleanup78:                                        ; preds = %fail, %if.end66, %cleanup63, %cleanup36, %if.then15, %if.then10, %cleanup
  %53 = bitcast [2 x i32]* %tmp to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %53) #13
  %54 = load i32, i32* %retval, align 4
  ret i32 %54
}

; Function Attrs: nounwind
declare dso_local i32 @pipe2(i32*, i32) #6

; Function Attrs: nounwind
declare dso_local i32 @pipe(i32*) #6

; Function Attrs: nounwind uwtable
define dso_local i32 @posix2_version() #7 {
entry:
  %v = alloca i64, align 8
  %s = alloca i8*, align 8
  %e = alloca i8*, align 8
  %i = alloca i64, align 8
  %0 = bitcast i64* %v to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #13
  store i64 200809, i64* %v, align 8, !tbaa !14
  %1 = bitcast i8** %s to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %1) #13
  %call = call i8* @getenv(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.249, i64 0, i64 0)) #13
  store i8* %call, i8** %s, align 8, !tbaa !6
  %2 = load i8*, i8** %s, align 8, !tbaa !6
  %tobool = icmp ne i8* %2, null
  br i1 %tobool, label %land.lhs.true, label %if.end5

land.lhs.true:                                    ; preds = %entry
  %3 = load i8*, i8** %s, align 8, !tbaa !6
  %4 = load i8, i8* %3, align 1, !tbaa !13
  %conv = sext i8 %4 to i32
  %tobool1 = icmp ne i32 %conv, 0
  br i1 %tobool1, label %if.then, label %if.end5

if.then:                                          ; preds = %land.lhs.true
  %5 = bitcast i8** %e to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %5) #13
  %6 = bitcast i64* %i to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %6) #13
  %7 = load i8*, i8** %s, align 8, !tbaa !6
  %call2 = call i64 @strtol(i8* %7, i8** %e, i32 10) #13
  store i64 %call2, i64* %i, align 8, !tbaa !14
  %8 = load i8*, i8** %e, align 8, !tbaa !6
  %9 = load i8, i8* %8, align 1, !tbaa !13
  %tobool3 = icmp ne i8 %9, 0
  br i1 %tobool3, label %if.end, label %if.then4

if.then4:                                         ; preds = %if.then
  %10 = load i64, i64* %i, align 8, !tbaa !14
  store i64 %10, i64* %v, align 8, !tbaa !14
  br label %if.end

if.end:                                           ; preds = %if.then4, %if.then
  %11 = bitcast i64* %i to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %11) #13
  %12 = bitcast i8** %e to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %12) #13
  br label %if.end5

if.end5:                                          ; preds = %if.end, %land.lhs.true, %entry
  %13 = load i64, i64* %v, align 8, !tbaa !14
  %cmp = icmp slt i64 %13, -2147483648
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end5
  br label %cond.end11

cond.false:                                       ; preds = %if.end5
  %14 = load i64, i64* %v, align 8, !tbaa !14
  %cmp7 = icmp slt i64 %14, 2147483647
  br i1 %cmp7, label %cond.true9, label %cond.false10

cond.true9:                                       ; preds = %cond.false
  %15 = load i64, i64* %v, align 8, !tbaa !14
  br label %cond.end

cond.false10:                                     ; preds = %cond.false
  br label %cond.end

cond.end:                                         ; preds = %cond.false10, %cond.true9
  %cond = phi i64 [ %15, %cond.true9 ], [ 2147483647, %cond.false10 ]
  br label %cond.end11

cond.end11:                                       ; preds = %cond.end, %cond.true
  %cond12 = phi i64 [ -2147483648, %cond.true ], [ %cond, %cond.end ]
  %conv13 = trunc i64 %cond12 to i32
  %16 = bitcast i8** %s to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %16) #13
  %17 = bitcast i64* %v to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %17) #13
  ret i32 %conv13
}

; Function Attrs: nounwind
declare dso_local i64 @strtol(i8*, i8**, i32) #6

; Function Attrs: nounwind uwtable
define dso_local void @set_program_name(i8* %argv0) #7 {
entry:
  %argv0.addr = alloca i8*, align 8
  %slash = alloca i8*, align 8
  %base = alloca i8*, align 8
  store i8* %argv0, i8** %argv0.addr, align 8, !tbaa !6
  %0 = bitcast i8** %slash to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #13
  %1 = bitcast i8** %base to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %1) #13
  %2 = load i8*, i8** %argv0.addr, align 8, !tbaa !6
  %cmp = icmp eq i8* %2, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !6
  %call = call i32 @fputs(i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.254, i64 0, i64 0), %struct._IO_FILE* %3)
  call void @abort() #21
  unreachable

if.end:                                           ; preds = %entry
  %4 = load i8*, i8** %argv0.addr, align 8, !tbaa !6
  %call1 = call i8* @strrchr(i8* %4, i32 47) #22
  store i8* %call1, i8** %slash, align 8, !tbaa !6
  %5 = load i8*, i8** %slash, align 8, !tbaa !6
  %cmp2 = icmp ne i8* %5, null
  br i1 %cmp2, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  %6 = load i8*, i8** %slash, align 8, !tbaa !6
  %add.ptr = getelementptr inbounds i8, i8* %6, i64 1
  br label %cond.end

cond.false:                                       ; preds = %if.end
  %7 = load i8*, i8** %argv0.addr, align 8, !tbaa !6
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %add.ptr, %cond.true ], [ %7, %cond.false ]
  store i8* %cond, i8** %base, align 8, !tbaa !6
  %8 = load i8*, i8** %base, align 8, !tbaa !6
  %9 = load i8*, i8** %argv0.addr, align 8, !tbaa !6
  %sub.ptr.lhs.cast = ptrtoint i8* %8 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %9 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %cmp3 = icmp sge i64 %sub.ptr.sub, 7
  br i1 %cmp3, label %land.lhs.true, label %if.end13

land.lhs.true:                                    ; preds = %cond.end
  %10 = load i8*, i8** %base, align 8, !tbaa !6
  %add.ptr4 = getelementptr inbounds i8, i8* %10, i64 -7
  %call5 = call i32 @strncmp(i8* %add.ptr4, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1.255, i64 0, i64 0), i64 7) #22
  %cmp6 = icmp eq i32 %call5, 0
  br i1 %cmp6, label %if.then7, label %if.end13

if.then7:                                         ; preds = %land.lhs.true
  %11 = load i8*, i8** %base, align 8, !tbaa !6
  store i8* %11, i8** %argv0.addr, align 8, !tbaa !6
  %12 = load i8*, i8** %base, align 8, !tbaa !6
  %call8 = call i32 @strncmp(i8* %12, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2.256, i64 0, i64 0), i64 3) #22
  %cmp9 = icmp eq i32 %call8, 0
  br i1 %cmp9, label %if.then10, label %if.end12

if.then10:                                        ; preds = %if.then7
  %13 = load i8*, i8** %base, align 8, !tbaa !6
  %add.ptr11 = getelementptr inbounds i8, i8* %13, i64 3
  store i8* %add.ptr11, i8** %argv0.addr, align 8, !tbaa !6
  %14 = load i8*, i8** %argv0.addr, align 8, !tbaa !6
  store i8* %14, i8** @program_invocation_short_name, align 8, !tbaa !6
  br label %if.end12

if.end12:                                         ; preds = %if.then10, %if.then7
  br label %if.end13

if.end13:                                         ; preds = %if.end12, %land.lhs.true, %cond.end
  %15 = load i8*, i8** %argv0.addr, align 8, !tbaa !6
  store i8* %15, i8** @program_name, align 8, !tbaa !6
  %16 = load i8*, i8** %argv0.addr, align 8, !tbaa !6
  store i8* %16, i8** @program_invocation_name, align 8, !tbaa !6
  %17 = bitcast i8** %base to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %17) #13
  %18 = bitcast i8** %slash to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %18) #13
  ret void
}

declare dso_local i32 @fputs(i8*, %struct._IO_FILE*) #1

; Function Attrs: nounwind readonly
declare dso_local i8* @strrchr(i8*, i32) #5

; Function Attrs: nounwind uwtable
define dso_local noalias nonnull %struct.quoting_options* @clone_quoting_options(%struct.quoting_options* %o) #7 {
entry:
  %o.addr = alloca %struct.quoting_options*, align 8
  %e = alloca i32, align 4
  %p = alloca %struct.quoting_options*, align 8
  store %struct.quoting_options* %o, %struct.quoting_options** %o.addr, align 8, !tbaa !6
  %0 = bitcast i32* %e to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #13
  %call = call i32* @__errno_location() #26
  %1 = load i32, i32* %call, align 4, !tbaa !2
  store i32 %1, i32* %e, align 4, !tbaa !2
  %2 = bitcast %struct.quoting_options** %p to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %2) #13
  %3 = load %struct.quoting_options*, %struct.quoting_options** %o.addr, align 8, !tbaa !6
  %tobool = icmp ne %struct.quoting_options* %3, null
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %4 = load %struct.quoting_options*, %struct.quoting_options** %o.addr, align 8, !tbaa !6
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.quoting_options* [ %4, %cond.true ], [ @default_quoting_options, %cond.false ]
  %5 = bitcast %struct.quoting_options* %cond to i8*
  %call1 = call noalias nonnull i8* @xmemdup(i8* %5, i64 56) #27
  %6 = bitcast i8* %call1 to %struct.quoting_options*
  store %struct.quoting_options* %6, %struct.quoting_options** %p, align 8, !tbaa !6
  %7 = load i32, i32* %e, align 4, !tbaa !2
  %call2 = call i32* @__errno_location() #26
  store i32 %7, i32* %call2, align 4, !tbaa !2
  %8 = load %struct.quoting_options*, %struct.quoting_options** %p, align 8, !tbaa !6
  %9 = bitcast %struct.quoting_options** %p to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %9) #13
  %10 = bitcast i32* %e to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %10) #13
  ret %struct.quoting_options* %8
}

; Function Attrs: nounwind uwtable
define dso_local i32 @get_quoting_style(%struct.quoting_options* %o) #7 {
entry:
  %o.addr = alloca %struct.quoting_options*, align 8
  store %struct.quoting_options* %o, %struct.quoting_options** %o.addr, align 8, !tbaa !6
  %0 = load %struct.quoting_options*, %struct.quoting_options** %o.addr, align 8, !tbaa !6
  %tobool = icmp ne %struct.quoting_options* %0, null
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %1 = load %struct.quoting_options*, %struct.quoting_options** %o.addr, align 8, !tbaa !6
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.quoting_options* [ %1, %cond.true ], [ @default_quoting_options, %cond.false ]
  %style = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %cond, i32 0, i32 0
  %2 = load i32, i32* %style, align 8, !tbaa !152
  ret i32 %2
}

; Function Attrs: nounwind uwtable
define dso_local void @set_quoting_style(%struct.quoting_options* %o, i32 %s) #7 {
entry:
  %o.addr = alloca %struct.quoting_options*, align 8
  %s.addr = alloca i32, align 4
  store %struct.quoting_options* %o, %struct.quoting_options** %o.addr, align 8, !tbaa !6
  store i32 %s, i32* %s.addr, align 4, !tbaa !13
  %0 = load i32, i32* %s.addr, align 4, !tbaa !13
  %1 = load %struct.quoting_options*, %struct.quoting_options** %o.addr, align 8, !tbaa !6
  %tobool = icmp ne %struct.quoting_options* %1, null
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %2 = load %struct.quoting_options*, %struct.quoting_options** %o.addr, align 8, !tbaa !6
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.quoting_options* [ %2, %cond.true ], [ @default_quoting_options, %cond.false ]
  %style = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %cond, i32 0, i32 0
  store i32 %0, i32* %style, align 8, !tbaa !152
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @set_char_quoting(%struct.quoting_options* %o, i8 signext %c, i32 %i) #7 {
entry:
  %o.addr = alloca %struct.quoting_options*, align 8
  %c.addr = alloca i8, align 1
  %i.addr = alloca i32, align 4
  %uc = alloca i8, align 1
  %p = alloca i32*, align 8
  %shift = alloca i32, align 4
  %r = alloca i32, align 4
  store %struct.quoting_options* %o, %struct.quoting_options** %o.addr, align 8, !tbaa !6
  store i8 %c, i8* %c.addr, align 1, !tbaa !13
  store i32 %i, i32* %i.addr, align 4, !tbaa !2
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %uc) #13
  %0 = load i8, i8* %c.addr, align 1, !tbaa !13
  store i8 %0, i8* %uc, align 1, !tbaa !13
  %1 = bitcast i32** %p to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %1) #13
  %2 = load %struct.quoting_options*, %struct.quoting_options** %o.addr, align 8, !tbaa !6
  %tobool = icmp ne %struct.quoting_options* %2, null
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %3 = load %struct.quoting_options*, %struct.quoting_options** %o.addr, align 8, !tbaa !6
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.quoting_options* [ %3, %cond.true ], [ @default_quoting_options, %cond.false ]
  %quote_these_too = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %cond, i32 0, i32 2
  %arraydecay = getelementptr inbounds [8 x i32], [8 x i32]* %quote_these_too, i64 0, i64 0
  %4 = load i8, i8* %uc, align 1, !tbaa !13
  %conv = zext i8 %4 to i64
  %div = udiv i64 %conv, 32
  %add.ptr = getelementptr inbounds i32, i32* %arraydecay, i64 %div
  store i32* %add.ptr, i32** %p, align 8, !tbaa !6
  %5 = bitcast i32* %shift to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %5) #13
  %6 = load i8, i8* %uc, align 1, !tbaa !13
  %conv1 = zext i8 %6 to i64
  %rem = urem i64 %conv1, 32
  %conv2 = trunc i64 %rem to i32
  store i32 %conv2, i32* %shift, align 4, !tbaa !2
  %7 = bitcast i32* %r to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %7) #13
  %8 = load i32*, i32** %p, align 8, !tbaa !6
  %9 = load i32, i32* %8, align 4, !tbaa !2
  %10 = load i32, i32* %shift, align 4, !tbaa !2
  %shr = lshr i32 %9, %10
  %and = and i32 %shr, 1
  store i32 %and, i32* %r, align 4, !tbaa !2
  %11 = load i32, i32* %i.addr, align 4, !tbaa !2
  %and3 = and i32 %11, 1
  %12 = load i32, i32* %r, align 4, !tbaa !2
  %xor = xor i32 %and3, %12
  %13 = load i32, i32* %shift, align 4, !tbaa !2
  %shl = shl i32 %xor, %13
  %14 = load i32*, i32** %p, align 8, !tbaa !6
  %15 = load i32, i32* %14, align 4, !tbaa !2
  %xor4 = xor i32 %15, %shl
  store i32 %xor4, i32* %14, align 4, !tbaa !2
  %16 = load i32, i32* %r, align 4, !tbaa !2
  %17 = bitcast i32* %r to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %17) #13
  %18 = bitcast i32* %shift to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %18) #13
  %19 = bitcast i32** %p to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %19) #13
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %uc) #13
  ret i32 %16
}

; Function Attrs: nounwind uwtable
define dso_local i32 @set_quoting_flags(%struct.quoting_options* %o, i32 %i) #7 {
entry:
  %o.addr = alloca %struct.quoting_options*, align 8
  %i.addr = alloca i32, align 4
  %r = alloca i32, align 4
  store %struct.quoting_options* %o, %struct.quoting_options** %o.addr, align 8, !tbaa !6
  store i32 %i, i32* %i.addr, align 4, !tbaa !2
  %0 = bitcast i32* %r to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #13
  %1 = load %struct.quoting_options*, %struct.quoting_options** %o.addr, align 8, !tbaa !6
  %tobool = icmp ne %struct.quoting_options* %1, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct.quoting_options* @default_quoting_options, %struct.quoting_options** %o.addr, align 8, !tbaa !6
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %2 = load %struct.quoting_options*, %struct.quoting_options** %o.addr, align 8, !tbaa !6
  %flags = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %2, i32 0, i32 1
  %3 = load i32, i32* %flags, align 4, !tbaa !154
  store i32 %3, i32* %r, align 4, !tbaa !2
  %4 = load i32, i32* %i.addr, align 4, !tbaa !2
  %5 = load %struct.quoting_options*, %struct.quoting_options** %o.addr, align 8, !tbaa !6
  %flags1 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %5, i32 0, i32 1
  store i32 %4, i32* %flags1, align 4, !tbaa !154
  %6 = load i32, i32* %r, align 4, !tbaa !2
  %7 = bitcast i32* %r to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %7) #13
  ret i32 %6
}

; Function Attrs: nounwind uwtable
define dso_local void @set_custom_quoting(%struct.quoting_options* %o, i8* %left_quote, i8* %right_quote) #7 {
entry:
  %o.addr = alloca %struct.quoting_options*, align 8
  %left_quote.addr = alloca i8*, align 8
  %right_quote.addr = alloca i8*, align 8
  store %struct.quoting_options* %o, %struct.quoting_options** %o.addr, align 8, !tbaa !6
  store i8* %left_quote, i8** %left_quote.addr, align 8, !tbaa !6
  store i8* %right_quote, i8** %right_quote.addr, align 8, !tbaa !6
  %0 = load %struct.quoting_options*, %struct.quoting_options** %o.addr, align 8, !tbaa !6
  %tobool = icmp ne %struct.quoting_options* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct.quoting_options* @default_quoting_options, %struct.quoting_options** %o.addr, align 8, !tbaa !6
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %1 = load %struct.quoting_options*, %struct.quoting_options** %o.addr, align 8, !tbaa !6
  %style = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %1, i32 0, i32 0
  store i32 10, i32* %style, align 8, !tbaa !152
  %2 = load i8*, i8** %left_quote.addr, align 8, !tbaa !6
  %tobool1 = icmp ne i8* %2, null
  br i1 %tobool1, label %lor.lhs.false, label %if.then3

lor.lhs.false:                                    ; preds = %if.end
  %3 = load i8*, i8** %right_quote.addr, align 8, !tbaa !6
  %tobool2 = icmp ne i8* %3, null
  br i1 %tobool2, label %if.end4, label %if.then3

if.then3:                                         ; preds = %lor.lhs.false, %if.end
  call void @abort() #21
  unreachable

if.end4:                                          ; preds = %lor.lhs.false
  %4 = load i8*, i8** %left_quote.addr, align 8, !tbaa !6
  %5 = load %struct.quoting_options*, %struct.quoting_options** %o.addr, align 8, !tbaa !6
  %left_quote5 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %5, i32 0, i32 3
  store i8* %4, i8** %left_quote5, align 8, !tbaa !155
  %6 = load i8*, i8** %right_quote.addr, align 8, !tbaa !6
  %7 = load %struct.quoting_options*, %struct.quoting_options** %o.addr, align 8, !tbaa !6
  %right_quote6 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %7, i32 0, i32 4
  store i8* %6, i8** %right_quote6, align 8, !tbaa !156
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i64 @quotearg_buffer(i8* %buffer, i64 %buffersize, i8* %arg, i64 %argsize, %struct.quoting_options* %o) #7 {
entry:
  %buffer.addr = alloca i8*, align 8
  %buffersize.addr = alloca i64, align 8
  %arg.addr = alloca i8*, align 8
  %argsize.addr = alloca i64, align 8
  %o.addr = alloca %struct.quoting_options*, align 8
  %p = alloca %struct.quoting_options*, align 8
  %e = alloca i32, align 4
  %r = alloca i64, align 8
  store i8* %buffer, i8** %buffer.addr, align 8, !tbaa !6
  store i64 %buffersize, i64* %buffersize.addr, align 8, !tbaa !14
  store i8* %arg, i8** %arg.addr, align 8, !tbaa !6
  store i64 %argsize, i64* %argsize.addr, align 8, !tbaa !14
  store %struct.quoting_options* %o, %struct.quoting_options** %o.addr, align 8, !tbaa !6
  %0 = bitcast %struct.quoting_options** %p to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #13
  %1 = load %struct.quoting_options*, %struct.quoting_options** %o.addr, align 8, !tbaa !6
  %tobool = icmp ne %struct.quoting_options* %1, null
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %2 = load %struct.quoting_options*, %struct.quoting_options** %o.addr, align 8, !tbaa !6
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.quoting_options* [ %2, %cond.true ], [ @default_quoting_options, %cond.false ]
  store %struct.quoting_options* %cond, %struct.quoting_options** %p, align 8, !tbaa !6
  %3 = bitcast i32* %e to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %3) #13
  %call = call i32* @__errno_location() #26
  %4 = load i32, i32* %call, align 4, !tbaa !2
  store i32 %4, i32* %e, align 4, !tbaa !2
  %5 = bitcast i64* %r to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %5) #13
  %6 = load i8*, i8** %buffer.addr, align 8, !tbaa !6
  %7 = load i64, i64* %buffersize.addr, align 8, !tbaa !14
  %8 = load i8*, i8** %arg.addr, align 8, !tbaa !6
  %9 = load i64, i64* %argsize.addr, align 8, !tbaa !14
  %10 = load %struct.quoting_options*, %struct.quoting_options** %p, align 8, !tbaa !6
  %style = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %10, i32 0, i32 0
  %11 = load i32, i32* %style, align 8, !tbaa !152
  %12 = load %struct.quoting_options*, %struct.quoting_options** %p, align 8, !tbaa !6
  %flags = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %12, i32 0, i32 1
  %13 = load i32, i32* %flags, align 4, !tbaa !154
  %14 = load %struct.quoting_options*, %struct.quoting_options** %p, align 8, !tbaa !6
  %quote_these_too = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %14, i32 0, i32 2
  %arraydecay = getelementptr inbounds [8 x i32], [8 x i32]* %quote_these_too, i64 0, i64 0
  %15 = load %struct.quoting_options*, %struct.quoting_options** %p, align 8, !tbaa !6
  %left_quote = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %15, i32 0, i32 3
  %16 = load i8*, i8** %left_quote, align 8, !tbaa !155
  %17 = load %struct.quoting_options*, %struct.quoting_options** %p, align 8, !tbaa !6
  %right_quote = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %17, i32 0, i32 4
  %18 = load i8*, i8** %right_quote, align 8, !tbaa !156
  %call1 = call i64 @quotearg_buffer_restyled(i8* %6, i64 %7, i8* %8, i64 %9, i32 %11, i32 %13, i32* %arraydecay, i8* %16, i8* %18)
  store i64 %call1, i64* %r, align 8, !tbaa !14
  %19 = load i32, i32* %e, align 4, !tbaa !2
  %call2 = call i32* @__errno_location() #26
  store i32 %19, i32* %call2, align 4, !tbaa !2
  %20 = load i64, i64* %r, align 8, !tbaa !14
  %21 = bitcast i64* %r to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %21) #13
  %22 = bitcast i32* %e to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %22) #13
  %23 = bitcast %struct.quoting_options** %p to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %23) #13
  ret i64 %20
}

; Function Attrs: nounwind uwtable
define internal i64 @quotearg_buffer_restyled(i8* %buffer, i64 %buffersize, i8* %arg, i64 %argsize, i32 %quoting_style, i32 %flags, i32* %quote_these_too, i8* %left_quote, i8* %right_quote) #7 {
entry:
  %retval = alloca i64, align 8
  %buffer.addr = alloca i8*, align 8
  %buffersize.addr = alloca i64, align 8
  %arg.addr = alloca i8*, align 8
  %argsize.addr = alloca i64, align 8
  %quoting_style.addr = alloca i32, align 4
  %flags.addr = alloca i32, align 4
  %quote_these_too.addr = alloca i32*, align 8
  %left_quote.addr = alloca i8*, align 8
  %right_quote.addr = alloca i8*, align 8
  %i = alloca i64, align 8
  %len = alloca i64, align 8
  %orig_buffersize = alloca i64, align 8
  %quote_string = alloca i8*, align 8
  %quote_string_len = alloca i64, align 8
  %backslash_escapes = alloca i8, align 1
  %unibyte_locale = alloca i8, align 1
  %elide_outer_quotes = alloca i8, align 1
  %pending_shell_escape_end = alloca i8, align 1
  %encountered_single_quote = alloca i8, align 1
  %all_c_and_shell_quote_compat = alloca i8, align 1
  %c = alloca i8, align 1
  %esc = alloca i8, align 1
  %is_right_quote = alloca i8, align 1
  %escaping = alloca i8, align 1
  %c_and_shell_quote_compat = alloca i8, align 1
  %cleanup.dest.slot = alloca i32, align 4
  %m = alloca i64, align 8
  %printable = alloca i8, align 1
  %mbstate = alloca %struct.__mbstate_t, align 4
  %w = alloca i32, align 4
  %bytes = alloca i64, align 8
  %j = alloca i64, align 8
  %ilim = alloca i64, align 8
  store i8* %buffer, i8** %buffer.addr, align 8, !tbaa !6
  store i64 %buffersize, i64* %buffersize.addr, align 8, !tbaa !14
  store i8* %arg, i8** %arg.addr, align 8, !tbaa !6
  store i64 %argsize, i64* %argsize.addr, align 8, !tbaa !14
  store i32 %quoting_style, i32* %quoting_style.addr, align 4, !tbaa !13
  store i32 %flags, i32* %flags.addr, align 4, !tbaa !2
  store i32* %quote_these_too, i32** %quote_these_too.addr, align 8, !tbaa !6
  store i8* %left_quote, i8** %left_quote.addr, align 8, !tbaa !6
  store i8* %right_quote, i8** %right_quote.addr, align 8, !tbaa !6
  %0 = bitcast i64* %i to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #13
  %1 = bitcast i64* %len to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %1) #13
  store i64 0, i64* %len, align 8, !tbaa !14
  %2 = bitcast i64* %orig_buffersize to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %2) #13
  store i64 0, i64* %orig_buffersize, align 8, !tbaa !14
  %3 = bitcast i8** %quote_string to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %3) #13
  store i8* null, i8** %quote_string, align 8, !tbaa !6
  %4 = bitcast i64* %quote_string_len to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %4) #13
  store i64 0, i64* %quote_string_len, align 8, !tbaa !14
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %backslash_escapes) #13
  store i8 0, i8* %backslash_escapes, align 1, !tbaa !11
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %unibyte_locale) #13
  %call = call i64 @__ctype_get_mb_cur_max() #13
  %cmp = icmp eq i64 %call, 1
  %frombool = zext i1 %cmp to i8
  store i8 %frombool, i8* %unibyte_locale, align 1, !tbaa !11
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %elide_outer_quotes) #13
  %5 = load i32, i32* %flags.addr, align 4, !tbaa !2
  %and = and i32 %5, 2
  %cmp1 = icmp ne i32 %and, 0
  %frombool2 = zext i1 %cmp1 to i8
  store i8 %frombool2, i8* %elide_outer_quotes, align 1, !tbaa !11
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %pending_shell_escape_end) #13
  store i8 0, i8* %pending_shell_escape_end, align 1, !tbaa !11
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %encountered_single_quote) #13
  store i8 0, i8* %encountered_single_quote, align 1, !tbaa !11
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %all_c_and_shell_quote_compat) #13
  store i8 1, i8* %all_c_and_shell_quote_compat, align 1, !tbaa !11
  br label %process_input

process_input:                                    ; preds = %if.then737, %entry
  %6 = load i32, i32* %quoting_style.addr, align 4, !tbaa !13
  switch i32 %6, label %sw.default [
    i32 6, label %sw.bb
    i32 5, label %sw.bb3
    i32 7, label %sw.bb7
    i32 8, label %sw.bb8
    i32 9, label %sw.bb8
    i32 10, label %sw.bb8
    i32 3, label %sw.bb27
    i32 1, label %sw.bb28
    i32 4, label %sw.bb29
    i32 2, label %sw.bb33
    i32 0, label %sw.bb45
  ]

sw.bb:                                            ; preds = %process_input
  store i32 5, i32* %quoting_style.addr, align 4, !tbaa !13
  store i8 1, i8* %elide_outer_quotes, align 1, !tbaa !11
  br label %sw.bb3

sw.bb3:                                           ; preds = %process_input, %sw.bb
  %7 = load i8, i8* %elide_outer_quotes, align 1, !tbaa !11, !range !25
  %tobool = trunc i8 %7 to i1
  br i1 %tobool, label %if.end6, label %if.then

if.then:                                          ; preds = %sw.bb3
  br label %do.body

do.body:                                          ; preds = %if.then
  %8 = load i64, i64* %len, align 8, !tbaa !14
  %9 = load i64, i64* %buffersize.addr, align 8, !tbaa !14
  %cmp4 = icmp ult i64 %8, %9
  br i1 %cmp4, label %if.then5, label %if.end

if.then5:                                         ; preds = %do.body
  %10 = load i8*, i8** %buffer.addr, align 8, !tbaa !6
  %11 = load i64, i64* %len, align 8, !tbaa !14
  %arrayidx = getelementptr inbounds i8, i8* %10, i64 %11
  store i8 34, i8* %arrayidx, align 1, !tbaa !13
  br label %if.end

if.end:                                           ; preds = %if.then5, %do.body
  %12 = load i64, i64* %len, align 8, !tbaa !14
  %inc = add i64 %12, 1
  store i64 %inc, i64* %len, align 8, !tbaa !14
  br label %do.cond

do.cond:                                          ; preds = %if.end
  br label %do.end

do.end:                                           ; preds = %do.cond
  br label %if.end6

if.end6:                                          ; preds = %do.end, %sw.bb3
  store i8 1, i8* %backslash_escapes, align 1, !tbaa !11
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10.267, i64 0, i64 0), i8** %quote_string, align 8, !tbaa !6
  store i64 1, i64* %quote_string_len, align 8, !tbaa !14
  br label %sw.epilog

sw.bb7:                                           ; preds = %process_input
  store i8 1, i8* %backslash_escapes, align 1, !tbaa !11
  store i8 0, i8* %elide_outer_quotes, align 1, !tbaa !11
  br label %sw.epilog

sw.bb8:                                           ; preds = %process_input, %process_input, %process_input
  %13 = load i32, i32* %quoting_style.addr, align 4, !tbaa !13
  %cmp9 = icmp ne i32 %13, 10
  br i1 %cmp9, label %if.then10, label %if.end13

if.then10:                                        ; preds = %sw.bb8
  %14 = load i32, i32* %quoting_style.addr, align 4, !tbaa !13
  %call11 = call i8* @gettext_quote(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.11.268, i64 0, i64 0), i32 %14)
  store i8* %call11, i8** %left_quote.addr, align 8, !tbaa !6
  %15 = load i32, i32* %quoting_style.addr, align 4, !tbaa !13
  %call12 = call i8* @gettext_quote(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12.269, i64 0, i64 0), i32 %15)
  store i8* %call12, i8** %right_quote.addr, align 8, !tbaa !6
  br label %if.end13

if.end13:                                         ; preds = %if.then10, %sw.bb8
  %16 = load i8, i8* %elide_outer_quotes, align 1, !tbaa !11, !range !25
  %tobool14 = trunc i8 %16 to i1
  br i1 %tobool14, label %if.end25, label %if.then15

if.then15:                                        ; preds = %if.end13
  %17 = load i8*, i8** %left_quote.addr, align 8, !tbaa !6
  store i8* %17, i8** %quote_string, align 8, !tbaa !6
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then15
  %18 = load i8*, i8** %quote_string, align 8, !tbaa !6
  %19 = load i8, i8* %18, align 1, !tbaa !13
  %tobool16 = icmp ne i8 %19, 0
  br i1 %tobool16, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  br label %do.body17

do.body17:                                        ; preds = %for.body
  %20 = load i64, i64* %len, align 8, !tbaa !14
  %21 = load i64, i64* %buffersize.addr, align 8, !tbaa !14
  %cmp18 = icmp ult i64 %20, %21
  br i1 %cmp18, label %if.then19, label %if.end21

if.then19:                                        ; preds = %do.body17
  %22 = load i8*, i8** %quote_string, align 8, !tbaa !6
  %23 = load i8, i8* %22, align 1, !tbaa !13
  %24 = load i8*, i8** %buffer.addr, align 8, !tbaa !6
  %25 = load i64, i64* %len, align 8, !tbaa !14
  %arrayidx20 = getelementptr inbounds i8, i8* %24, i64 %25
  store i8 %23, i8* %arrayidx20, align 1, !tbaa !13
  br label %if.end21

if.end21:                                         ; preds = %if.then19, %do.body17
  %26 = load i64, i64* %len, align 8, !tbaa !14
  %inc22 = add i64 %26, 1
  store i64 %inc22, i64* %len, align 8, !tbaa !14
  br label %do.cond23

do.cond23:                                        ; preds = %if.end21
  br label %do.end24

do.end24:                                         ; preds = %do.cond23
  br label %for.inc

for.inc:                                          ; preds = %do.end24
  %27 = load i8*, i8** %quote_string, align 8, !tbaa !6
  %incdec.ptr = getelementptr inbounds i8, i8* %27, i32 1
  store i8* %incdec.ptr, i8** %quote_string, align 8, !tbaa !6
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end25

if.end25:                                         ; preds = %for.end, %if.end13
  store i8 1, i8* %backslash_escapes, align 1, !tbaa !11
  %28 = load i8*, i8** %right_quote.addr, align 8, !tbaa !6
  store i8* %28, i8** %quote_string, align 8, !tbaa !6
  %29 = load i8*, i8** %quote_string, align 8, !tbaa !6
  %call26 = call i64 @strlen(i8* %29) #22
  store i64 %call26, i64* %quote_string_len, align 8, !tbaa !14
  br label %sw.epilog

sw.bb27:                                          ; preds = %process_input
  store i8 1, i8* %backslash_escapes, align 1, !tbaa !11
  br label %sw.bb28

sw.bb28:                                          ; preds = %process_input, %sw.bb27
  store i8 1, i8* %elide_outer_quotes, align 1, !tbaa !11
  br label %sw.bb29

sw.bb29:                                          ; preds = %process_input, %sw.bb28
  %30 = load i8, i8* %elide_outer_quotes, align 1, !tbaa !11, !range !25
  %tobool30 = trunc i8 %30 to i1
  br i1 %tobool30, label %if.end32, label %if.then31

if.then31:                                        ; preds = %sw.bb29
  store i8 1, i8* %backslash_escapes, align 1, !tbaa !11
  br label %if.end32

if.end32:                                         ; preds = %if.then31, %sw.bb29
  br label %sw.bb33

sw.bb33:                                          ; preds = %process_input, %if.end32
  store i32 2, i32* %quoting_style.addr, align 4, !tbaa !13
  %31 = load i8, i8* %elide_outer_quotes, align 1, !tbaa !11, !range !25
  %tobool34 = trunc i8 %31 to i1
  br i1 %tobool34, label %if.end44, label %if.then35

if.then35:                                        ; preds = %sw.bb33
  br label %do.body36

do.body36:                                        ; preds = %if.then35
  %32 = load i64, i64* %len, align 8, !tbaa !14
  %33 = load i64, i64* %buffersize.addr, align 8, !tbaa !14
  %cmp37 = icmp ult i64 %32, %33
  br i1 %cmp37, label %if.then38, label %if.end40

if.then38:                                        ; preds = %do.body36
  %34 = load i8*, i8** %buffer.addr, align 8, !tbaa !6
  %35 = load i64, i64* %len, align 8, !tbaa !14
  %arrayidx39 = getelementptr inbounds i8, i8* %34, i64 %35
  store i8 39, i8* %arrayidx39, align 1, !tbaa !13
  br label %if.end40

if.end40:                                         ; preds = %if.then38, %do.body36
  %36 = load i64, i64* %len, align 8, !tbaa !14
  %inc41 = add i64 %36, 1
  store i64 %inc41, i64* %len, align 8, !tbaa !14
  br label %do.cond42

do.cond42:                                        ; preds = %if.end40
  br label %do.end43

do.end43:                                         ; preds = %do.cond42
  br label %if.end44

if.end44:                                         ; preds = %do.end43, %sw.bb33
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12.269, i64 0, i64 0), i8** %quote_string, align 8, !tbaa !6
  store i64 1, i64* %quote_string_len, align 8, !tbaa !14
  br label %sw.epilog

sw.bb45:                                          ; preds = %process_input
  store i8 0, i8* %elide_outer_quotes, align 1, !tbaa !11
  br label %sw.epilog

sw.default:                                       ; preds = %process_input
  call void @abort() #21
  unreachable

sw.epilog:                                        ; preds = %sw.bb45, %if.end44, %if.end25, %sw.bb7, %if.end6
  store i64 0, i64* %i, align 8, !tbaa !14
  br label %for.cond46

for.cond46:                                       ; preds = %for.inc709, %sw.epilog
  %37 = load i64, i64* %argsize.addr, align 8, !tbaa !14
  %cmp47 = icmp eq i64 %37, -1
  br i1 %cmp47, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.cond46
  %38 = load i8*, i8** %arg.addr, align 8, !tbaa !6
  %39 = load i64, i64* %i, align 8, !tbaa !14
  %arrayidx48 = getelementptr inbounds i8, i8* %38, i64 %39
  %40 = load i8, i8* %arrayidx48, align 1, !tbaa !13
  %conv = sext i8 %40 to i32
  %cmp49 = icmp eq i32 %conv, 0
  %conv50 = zext i1 %cmp49 to i32
  br label %cond.end

cond.false:                                       ; preds = %for.cond46
  %41 = load i64, i64* %i, align 8, !tbaa !14
  %42 = load i64, i64* %argsize.addr, align 8, !tbaa !14
  %cmp51 = icmp eq i64 %41, %42
  %conv52 = zext i1 %cmp51 to i32
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv50, %cond.true ], [ %conv52, %cond.false ]
  %tobool53 = icmp ne i32 %cond, 0
  %lnot = xor i1 %tobool53, true
  br i1 %lnot, label %for.body54, label %for.end711

for.body54:                                       ; preds = %cond.end
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %c) #13
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %esc) #13
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %is_right_quote) #13
  store i8 0, i8* %is_right_quote, align 1, !tbaa !11
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %escaping) #13
  store i8 0, i8* %escaping, align 1, !tbaa !11
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %c_and_shell_quote_compat) #13
  store i8 0, i8* %c_and_shell_quote_compat, align 1, !tbaa !11
  %43 = load i8, i8* %backslash_escapes, align 1, !tbaa !11, !range !25
  %tobool55 = trunc i8 %43 to i1
  br i1 %tobool55, label %land.lhs.true, label %if.end82

land.lhs.true:                                    ; preds = %for.body54
  %44 = load i32, i32* %quoting_style.addr, align 4, !tbaa !13
  %cmp57 = icmp ne i32 %44, 2
  br i1 %cmp57, label %land.lhs.true59, label %if.end82

land.lhs.true59:                                  ; preds = %land.lhs.true
  %45 = load i64, i64* %quote_string_len, align 8, !tbaa !14
  %tobool60 = icmp ne i64 %45, 0
  br i1 %tobool60, label %land.lhs.true61, label %if.end82

land.lhs.true61:                                  ; preds = %land.lhs.true59
  %46 = load i64, i64* %i, align 8, !tbaa !14
  %47 = load i64, i64* %quote_string_len, align 8, !tbaa !14
  %add = add i64 %46, %47
  %48 = load i64, i64* %argsize.addr, align 8, !tbaa !14
  %cmp62 = icmp eq i64 %48, -1
  br i1 %cmp62, label %land.lhs.true64, label %cond.false69

land.lhs.true64:                                  ; preds = %land.lhs.true61
  %49 = load i64, i64* %quote_string_len, align 8, !tbaa !14
  %cmp65 = icmp ult i64 1, %49
  br i1 %cmp65, label %cond.true67, label %cond.false69

cond.true67:                                      ; preds = %land.lhs.true64
  %50 = load i8*, i8** %arg.addr, align 8, !tbaa !6
  %call68 = call i64 @strlen(i8* %50) #22
  store i64 %call68, i64* %argsize.addr, align 8, !tbaa !14
  br label %cond.end70

cond.false69:                                     ; preds = %land.lhs.true64, %land.lhs.true61
  %51 = load i64, i64* %argsize.addr, align 8, !tbaa !14
  br label %cond.end70

cond.end70:                                       ; preds = %cond.false69, %cond.true67
  %cond71 = phi i64 [ %call68, %cond.true67 ], [ %51, %cond.false69 ]
  %cmp72 = icmp ule i64 %add, %cond71
  br i1 %cmp72, label %land.lhs.true74, label %if.end82

land.lhs.true74:                                  ; preds = %cond.end70
  %52 = load i8*, i8** %arg.addr, align 8, !tbaa !6
  %53 = load i64, i64* %i, align 8, !tbaa !14
  %add.ptr = getelementptr inbounds i8, i8* %52, i64 %53
  %54 = load i8*, i8** %quote_string, align 8, !tbaa !6
  %55 = load i64, i64* %quote_string_len, align 8, !tbaa !14
  %call75 = call i32 @memcmp(i8* %add.ptr, i8* %54, i64 %55) #22
  %cmp76 = icmp eq i32 %call75, 0
  br i1 %cmp76, label %if.then78, label %if.end82

if.then78:                                        ; preds = %land.lhs.true74
  %56 = load i8, i8* %elide_outer_quotes, align 1, !tbaa !11, !range !25
  %tobool79 = trunc i8 %56 to i1
  br i1 %tobool79, label %if.then80, label %if.end81

if.then80:                                        ; preds = %if.then78
  store i32 16, i32* %cleanup.dest.slot, align 4
  br label %cleanup702

if.end81:                                         ; preds = %if.then78
  store i8 1, i8* %is_right_quote, align 1, !tbaa !11
  br label %if.end82

if.end82:                                         ; preds = %if.end81, %land.lhs.true74, %cond.end70, %land.lhs.true59, %land.lhs.true, %for.body54
  %57 = load i8*, i8** %arg.addr, align 8, !tbaa !6
  %58 = load i64, i64* %i, align 8, !tbaa !14
  %arrayidx83 = getelementptr inbounds i8, i8* %57, i64 %58
  %59 = load i8, i8* %arrayidx83, align 1, !tbaa !13
  store i8 %59, i8* %c, align 1, !tbaa !13
  %60 = load i8, i8* %c, align 1, !tbaa !13
  %conv84 = zext i8 %60 to i32
  switch i32 %conv84, label %sw.default351 [
    i32 0, label %sw.bb85
    i32 63, label %sw.bb179
    i32 7, label %sw.bb249
    i32 8, label %sw.bb250
    i32 12, label %sw.bb251
    i32 10, label %sw.bb252
    i32 13, label %sw.bb253
    i32 9, label %sw.bb254
    i32 11, label %sw.bb255
    i32 92, label %sw.bb256
    i32 123, label %sw.bb283
    i32 125, label %sw.bb283
    i32 35, label %sw.bb296
    i32 126, label %sw.bb296
    i32 32, label %sw.bb301
    i32 33, label %sw.bb302
    i32 34, label %sw.bb302
    i32 36, label %sw.bb302
    i32 38, label %sw.bb302
    i32 40, label %sw.bb302
    i32 41, label %sw.bb302
    i32 42, label %sw.bb302
    i32 59, label %sw.bb302
    i32 60, label %sw.bb302
    i32 61, label %sw.bb302
    i32 62, label %sw.bb302
    i32 91, label %sw.bb302
    i32 94, label %sw.bb302
    i32 96, label %sw.bb302
    i32 124, label %sw.bb302
    i32 39, label %sw.bb310
    i32 37, label %sw.bb350
    i32 43, label %sw.bb350
    i32 44, label %sw.bb350
    i32 45, label %sw.bb350
    i32 46, label %sw.bb350
    i32 47, label %sw.bb350
    i32 48, label %sw.bb350
    i32 49, label %sw.bb350
    i32 50, label %sw.bb350
    i32 51, label %sw.bb350
    i32 52, label %sw.bb350
    i32 53, label %sw.bb350
    i32 54, label %sw.bb350
    i32 55, label %sw.bb350
    i32 56, label %sw.bb350
    i32 57, label %sw.bb350
    i32 58, label %sw.bb350
    i32 65, label %sw.bb350
    i32 66, label %sw.bb350
    i32 67, label %sw.bb350
    i32 68, label %sw.bb350
    i32 69, label %sw.bb350
    i32 70, label %sw.bb350
    i32 71, label %sw.bb350
    i32 72, label %sw.bb350
    i32 73, label %sw.bb350
    i32 74, label %sw.bb350
    i32 75, label %sw.bb350
    i32 76, label %sw.bb350
    i32 77, label %sw.bb350
    i32 78, label %sw.bb350
    i32 79, label %sw.bb350
    i32 80, label %sw.bb350
    i32 81, label %sw.bb350
    i32 82, label %sw.bb350
    i32 83, label %sw.bb350
    i32 84, label %sw.bb350
    i32 85, label %sw.bb350
    i32 86, label %sw.bb350
    i32 87, label %sw.bb350
    i32 88, label %sw.bb350
    i32 89, label %sw.bb350
    i32 90, label %sw.bb350
    i32 93, label %sw.bb350
    i32 95, label %sw.bb350
    i32 97, label %sw.bb350
    i32 98, label %sw.bb350
    i32 99, label %sw.bb350
    i32 100, label %sw.bb350
    i32 101, label %sw.bb350
    i32 102, label %sw.bb350
    i32 103, label %sw.bb350
    i32 104, label %sw.bb350
    i32 105, label %sw.bb350
    i32 106, label %sw.bb350
    i32 107, label %sw.bb350
    i32 108, label %sw.bb350
    i32 109, label %sw.bb350
    i32 110, label %sw.bb350
    i32 111, label %sw.bb350
    i32 112, label %sw.bb350
    i32 113, label %sw.bb350
    i32 114, label %sw.bb350
    i32 115, label %sw.bb350
    i32 116, label %sw.bb350
    i32 117, label %sw.bb350
    i32 118, label %sw.bb350
    i32 119, label %sw.bb350
    i32 120, label %sw.bb350
    i32 121, label %sw.bb350
    i32 122, label %sw.bb350
  ]

sw.bb85:                                          ; preds = %if.end82
  %61 = load i8, i8* %backslash_escapes, align 1, !tbaa !11, !range !25
  %tobool86 = trunc i8 %61 to i1
  br i1 %tobool86, label %if.then87, label %if.else

if.then87:                                        ; preds = %sw.bb85
  br label %do.body88

do.body88:                                        ; preds = %if.then87
  %62 = load i8, i8* %elide_outer_quotes, align 1, !tbaa !11, !range !25
  %tobool89 = trunc i8 %62 to i1
  br i1 %tobool89, label %if.then90, label %if.end91

if.then90:                                        ; preds = %do.body88
  store i32 16, i32* %cleanup.dest.slot, align 4
  br label %cleanup702

if.end91:                                         ; preds = %do.body88
  store i8 1, i8* %escaping, align 1, !tbaa !11
  %63 = load i32, i32* %quoting_style.addr, align 4, !tbaa !13
  %cmp92 = icmp eq i32 %63, 2
  br i1 %cmp92, label %land.lhs.true94, label %if.end124

land.lhs.true94:                                  ; preds = %if.end91
  %64 = load i8, i8* %pending_shell_escape_end, align 1, !tbaa !11, !range !25
  %tobool95 = trunc i8 %64 to i1
  br i1 %tobool95, label %if.end124, label %if.then96

if.then96:                                        ; preds = %land.lhs.true94
  br label %do.body97

do.body97:                                        ; preds = %if.then96
  %65 = load i64, i64* %len, align 8, !tbaa !14
  %66 = load i64, i64* %buffersize.addr, align 8, !tbaa !14
  %cmp98 = icmp ult i64 %65, %66
  br i1 %cmp98, label %if.then100, label %if.end102

if.then100:                                       ; preds = %do.body97
  %67 = load i8*, i8** %buffer.addr, align 8, !tbaa !6
  %68 = load i64, i64* %len, align 8, !tbaa !14
  %arrayidx101 = getelementptr inbounds i8, i8* %67, i64 %68
  store i8 39, i8* %arrayidx101, align 1, !tbaa !13
  br label %if.end102

if.end102:                                        ; preds = %if.then100, %do.body97
  %69 = load i64, i64* %len, align 8, !tbaa !14
  %inc103 = add i64 %69, 1
  store i64 %inc103, i64* %len, align 8, !tbaa !14
  br label %do.cond104

do.cond104:                                       ; preds = %if.end102
  br label %do.end105

do.end105:                                        ; preds = %do.cond104
  br label %do.body106

do.body106:                                       ; preds = %do.end105
  %70 = load i64, i64* %len, align 8, !tbaa !14
  %71 = load i64, i64* %buffersize.addr, align 8, !tbaa !14
  %cmp107 = icmp ult i64 %70, %71
  br i1 %cmp107, label %if.then109, label %if.end111

if.then109:                                       ; preds = %do.body106
  %72 = load i8*, i8** %buffer.addr, align 8, !tbaa !6
  %73 = load i64, i64* %len, align 8, !tbaa !14
  %arrayidx110 = getelementptr inbounds i8, i8* %72, i64 %73
  store i8 36, i8* %arrayidx110, align 1, !tbaa !13
  br label %if.end111

if.end111:                                        ; preds = %if.then109, %do.body106
  %74 = load i64, i64* %len, align 8, !tbaa !14
  %inc112 = add i64 %74, 1
  store i64 %inc112, i64* %len, align 8, !tbaa !14
  br label %do.cond113

do.cond113:                                       ; preds = %if.end111
  br label %do.end114

do.end114:                                        ; preds = %do.cond113
  br label %do.body115

do.body115:                                       ; preds = %do.end114
  %75 = load i64, i64* %len, align 8, !tbaa !14
  %76 = load i64, i64* %buffersize.addr, align 8, !tbaa !14
  %cmp116 = icmp ult i64 %75, %76
  br i1 %cmp116, label %if.then118, label %if.end120

if.then118:                                       ; preds = %do.body115
  %77 = load i8*, i8** %buffer.addr, align 8, !tbaa !6
  %78 = load i64, i64* %len, align 8, !tbaa !14
  %arrayidx119 = getelementptr inbounds i8, i8* %77, i64 %78
  store i8 39, i8* %arrayidx119, align 1, !tbaa !13
  br label %if.end120

if.end120:                                        ; preds = %if.then118, %do.body115
  %79 = load i64, i64* %len, align 8, !tbaa !14
  %inc121 = add i64 %79, 1
  store i64 %inc121, i64* %len, align 8, !tbaa !14
  br label %do.cond122

do.cond122:                                       ; preds = %if.end120
  br label %do.end123

do.end123:                                        ; preds = %do.cond122
  store i8 1, i8* %pending_shell_escape_end, align 1, !tbaa !11
  br label %if.end124

if.end124:                                        ; preds = %do.end123, %land.lhs.true94, %if.end91
  br label %do.body125

do.body125:                                       ; preds = %if.end124
  %80 = load i64, i64* %len, align 8, !tbaa !14
  %81 = load i64, i64* %buffersize.addr, align 8, !tbaa !14
  %cmp126 = icmp ult i64 %80, %81
  br i1 %cmp126, label %if.then128, label %if.end130

if.then128:                                       ; preds = %do.body125
  %82 = load i8*, i8** %buffer.addr, align 8, !tbaa !6
  %83 = load i64, i64* %len, align 8, !tbaa !14
  %arrayidx129 = getelementptr inbounds i8, i8* %82, i64 %83
  store i8 92, i8* %arrayidx129, align 1, !tbaa !13
  br label %if.end130

if.end130:                                        ; preds = %if.then128, %do.body125
  %84 = load i64, i64* %len, align 8, !tbaa !14
  %inc131 = add i64 %84, 1
  store i64 %inc131, i64* %len, align 8, !tbaa !14
  br label %do.cond132

do.cond132:                                       ; preds = %if.end130
  br label %do.end133

do.end133:                                        ; preds = %do.cond132
  br label %do.cond134

do.cond134:                                       ; preds = %do.end133
  br label %do.end135

do.end135:                                        ; preds = %do.cond134
  %85 = load i32, i32* %quoting_style.addr, align 4, !tbaa !13
  %cmp136 = icmp ne i32 %85, 2
  br i1 %cmp136, label %land.lhs.true138, label %if.end173

land.lhs.true138:                                 ; preds = %do.end135
  %86 = load i64, i64* %i, align 8, !tbaa !14
  %add139 = add i64 %86, 1
  %87 = load i64, i64* %argsize.addr, align 8, !tbaa !14
  %cmp140 = icmp ult i64 %add139, %87
  br i1 %cmp140, label %land.lhs.true142, label %if.end173

land.lhs.true142:                                 ; preds = %land.lhs.true138
  %88 = load i8*, i8** %arg.addr, align 8, !tbaa !6
  %89 = load i64, i64* %i, align 8, !tbaa !14
  %add143 = add i64 %89, 1
  %arrayidx144 = getelementptr inbounds i8, i8* %88, i64 %add143
  %90 = load i8, i8* %arrayidx144, align 1, !tbaa !13
  %conv145 = sext i8 %90 to i32
  %cmp146 = icmp sle i32 48, %conv145
  br i1 %cmp146, label %land.lhs.true148, label %if.end173

land.lhs.true148:                                 ; preds = %land.lhs.true142
  %91 = load i8*, i8** %arg.addr, align 8, !tbaa !6
  %92 = load i64, i64* %i, align 8, !tbaa !14
  %add149 = add i64 %92, 1
  %arrayidx150 = getelementptr inbounds i8, i8* %91, i64 %add149
  %93 = load i8, i8* %arrayidx150, align 1, !tbaa !13
  %conv151 = sext i8 %93 to i32
  %cmp152 = icmp sle i32 %conv151, 57
  br i1 %cmp152, label %if.then154, label %if.end173

if.then154:                                       ; preds = %land.lhs.true148
  br label %do.body155

do.body155:                                       ; preds = %if.then154
  %94 = load i64, i64* %len, align 8, !tbaa !14
  %95 = load i64, i64* %buffersize.addr, align 8, !tbaa !14
  %cmp156 = icmp ult i64 %94, %95
  br i1 %cmp156, label %if.then158, label %if.end160

if.then158:                                       ; preds = %do.body155
  %96 = load i8*, i8** %buffer.addr, align 8, !tbaa !6
  %97 = load i64, i64* %len, align 8, !tbaa !14
  %arrayidx159 = getelementptr inbounds i8, i8* %96, i64 %97
  store i8 48, i8* %arrayidx159, align 1, !tbaa !13
  br label %if.end160

if.end160:                                        ; preds = %if.then158, %do.body155
  %98 = load i64, i64* %len, align 8, !tbaa !14
  %inc161 = add i64 %98, 1
  store i64 %inc161, i64* %len, align 8, !tbaa !14
  br label %do.cond162

do.cond162:                                       ; preds = %if.end160
  br label %do.end163

do.end163:                                        ; preds = %do.cond162
  br label %do.body164

do.body164:                                       ; preds = %do.end163
  %99 = load i64, i64* %len, align 8, !tbaa !14
  %100 = load i64, i64* %buffersize.addr, align 8, !tbaa !14
  %cmp165 = icmp ult i64 %99, %100
  br i1 %cmp165, label %if.then167, label %if.end169

if.then167:                                       ; preds = %do.body164
  %101 = load i8*, i8** %buffer.addr, align 8, !tbaa !6
  %102 = load i64, i64* %len, align 8, !tbaa !14
  %arrayidx168 = getelementptr inbounds i8, i8* %101, i64 %102
  store i8 48, i8* %arrayidx168, align 1, !tbaa !13
  br label %if.end169

if.end169:                                        ; preds = %if.then167, %do.body164
  %103 = load i64, i64* %len, align 8, !tbaa !14
  %inc170 = add i64 %103, 1
  store i64 %inc170, i64* %len, align 8, !tbaa !14
  br label %do.cond171

do.cond171:                                       ; preds = %if.end169
  br label %do.end172

do.end172:                                        ; preds = %do.cond171
  br label %if.end173

if.end173:                                        ; preds = %do.end172, %land.lhs.true148, %land.lhs.true142, %land.lhs.true138, %do.end135
  store i8 48, i8* %c, align 1, !tbaa !13
  br label %if.end178

if.else:                                          ; preds = %sw.bb85
  %104 = load i32, i32* %flags.addr, align 4, !tbaa !2
  %and174 = and i32 %104, 1
  %tobool175 = icmp ne i32 %and174, 0
  br i1 %tobool175, label %if.then176, label %if.end177

if.then176:                                       ; preds = %if.else
  store i32 15, i32* %cleanup.dest.slot, align 4
  br label %cleanup702

if.end177:                                        ; preds = %if.else
  br label %if.end178

if.end178:                                        ; preds = %if.end177, %if.end173
  br label %sw.epilog593

sw.bb179:                                         ; preds = %if.end82
  %105 = load i32, i32* %quoting_style.addr, align 4, !tbaa !13
  switch i32 %105, label %sw.default247 [
    i32 2, label %sw.bb180
    i32 5, label %sw.bb184
  ]

sw.bb180:                                         ; preds = %sw.bb179
  %106 = load i8, i8* %elide_outer_quotes, align 1, !tbaa !11, !range !25
  %tobool181 = trunc i8 %106 to i1
  br i1 %tobool181, label %if.then182, label %if.end183

if.then182:                                       ; preds = %sw.bb180
  store i32 16, i32* %cleanup.dest.slot, align 4
  br label %cleanup702

if.end183:                                        ; preds = %sw.bb180
  br label %sw.epilog248

sw.bb184:                                         ; preds = %sw.bb179
  %107 = load i32, i32* %flags.addr, align 4, !tbaa !2
  %and185 = and i32 %107, 4
  %tobool186 = icmp ne i32 %and185, 0
  br i1 %tobool186, label %land.lhs.true187, label %if.end246

land.lhs.true187:                                 ; preds = %sw.bb184
  %108 = load i64, i64* %i, align 8, !tbaa !14
  %add188 = add i64 %108, 2
  %109 = load i64, i64* %argsize.addr, align 8, !tbaa !14
  %cmp189 = icmp ult i64 %add188, %109
  br i1 %cmp189, label %land.lhs.true191, label %if.end246

land.lhs.true191:                                 ; preds = %land.lhs.true187
  %110 = load i8*, i8** %arg.addr, align 8, !tbaa !6
  %111 = load i64, i64* %i, align 8, !tbaa !14
  %add192 = add i64 %111, 1
  %arrayidx193 = getelementptr inbounds i8, i8* %110, i64 %add192
  %112 = load i8, i8* %arrayidx193, align 1, !tbaa !13
  %conv194 = sext i8 %112 to i32
  %cmp195 = icmp eq i32 %conv194, 63
  br i1 %cmp195, label %if.then197, label %if.end246

if.then197:                                       ; preds = %land.lhs.true191
  %113 = load i8*, i8** %arg.addr, align 8, !tbaa !6
  %114 = load i64, i64* %i, align 8, !tbaa !14
  %add198 = add i64 %114, 2
  %arrayidx199 = getelementptr inbounds i8, i8* %113, i64 %add198
  %115 = load i8, i8* %arrayidx199, align 1, !tbaa !13
  %conv200 = sext i8 %115 to i32
  switch i32 %conv200, label %sw.default244 [
    i32 33, label %sw.bb201
    i32 39, label %sw.bb201
    i32 40, label %sw.bb201
    i32 41, label %sw.bb201
    i32 45, label %sw.bb201
    i32 47, label %sw.bb201
    i32 60, label %sw.bb201
    i32 61, label %sw.bb201
    i32 62, label %sw.bb201
  ]

sw.bb201:                                         ; preds = %if.then197, %if.then197, %if.then197, %if.then197, %if.then197, %if.then197, %if.then197, %if.then197, %if.then197
  %116 = load i8, i8* %elide_outer_quotes, align 1, !tbaa !11, !range !25
  %tobool202 = trunc i8 %116 to i1
  br i1 %tobool202, label %if.then203, label %if.end204

if.then203:                                       ; preds = %sw.bb201
  store i32 16, i32* %cleanup.dest.slot, align 4
  br label %cleanup702

if.end204:                                        ; preds = %sw.bb201
  %117 = load i8*, i8** %arg.addr, align 8, !tbaa !6
  %118 = load i64, i64* %i, align 8, !tbaa !14
  %add205 = add i64 %118, 2
  %arrayidx206 = getelementptr inbounds i8, i8* %117, i64 %add205
  %119 = load i8, i8* %arrayidx206, align 1, !tbaa !13
  store i8 %119, i8* %c, align 1, !tbaa !13
  %120 = load i64, i64* %i, align 8, !tbaa !14
  %add207 = add i64 %120, 2
  store i64 %add207, i64* %i, align 8, !tbaa !14
  br label %do.body208

do.body208:                                       ; preds = %if.end204
  %121 = load i64, i64* %len, align 8, !tbaa !14
  %122 = load i64, i64* %buffersize.addr, align 8, !tbaa !14
  %cmp209 = icmp ult i64 %121, %122
  br i1 %cmp209, label %if.then211, label %if.end213

if.then211:                                       ; preds = %do.body208
  %123 = load i8*, i8** %buffer.addr, align 8, !tbaa !6
  %124 = load i64, i64* %len, align 8, !tbaa !14
  %arrayidx212 = getelementptr inbounds i8, i8* %123, i64 %124
  store i8 63, i8* %arrayidx212, align 1, !tbaa !13
  br label %if.end213

if.end213:                                        ; preds = %if.then211, %do.body208
  %125 = load i64, i64* %len, align 8, !tbaa !14
  %inc214 = add i64 %125, 1
  store i64 %inc214, i64* %len, align 8, !tbaa !14
  br label %do.cond215

do.cond215:                                       ; preds = %if.end213
  br label %do.end216

do.end216:                                        ; preds = %do.cond215
  br label %do.body217

do.body217:                                       ; preds = %do.end216
  %126 = load i64, i64* %len, align 8, !tbaa !14
  %127 = load i64, i64* %buffersize.addr, align 8, !tbaa !14
  %cmp218 = icmp ult i64 %126, %127
  br i1 %cmp218, label %if.then220, label %if.end222

if.then220:                                       ; preds = %do.body217
  %128 = load i8*, i8** %buffer.addr, align 8, !tbaa !6
  %129 = load i64, i64* %len, align 8, !tbaa !14
  %arrayidx221 = getelementptr inbounds i8, i8* %128, i64 %129
  store i8 34, i8* %arrayidx221, align 1, !tbaa !13
  br label %if.end222

if.end222:                                        ; preds = %if.then220, %do.body217
  %130 = load i64, i64* %len, align 8, !tbaa !14
  %inc223 = add i64 %130, 1
  store i64 %inc223, i64* %len, align 8, !tbaa !14
  br label %do.cond224

do.cond224:                                       ; preds = %if.end222
  br label %do.end225

do.end225:                                        ; preds = %do.cond224
  br label %do.body226

do.body226:                                       ; preds = %do.end225
  %131 = load i64, i64* %len, align 8, !tbaa !14
  %132 = load i64, i64* %buffersize.addr, align 8, !tbaa !14
  %cmp227 = icmp ult i64 %131, %132
  br i1 %cmp227, label %if.then229, label %if.end231

if.then229:                                       ; preds = %do.body226
  %133 = load i8*, i8** %buffer.addr, align 8, !tbaa !6
  %134 = load i64, i64* %len, align 8, !tbaa !14
  %arrayidx230 = getelementptr inbounds i8, i8* %133, i64 %134
  store i8 34, i8* %arrayidx230, align 1, !tbaa !13
  br label %if.end231

if.end231:                                        ; preds = %if.then229, %do.body226
  %135 = load i64, i64* %len, align 8, !tbaa !14
  %inc232 = add i64 %135, 1
  store i64 %inc232, i64* %len, align 8, !tbaa !14
  br label %do.cond233

do.cond233:                                       ; preds = %if.end231
  br label %do.end234

do.end234:                                        ; preds = %do.cond233
  br label %do.body235

do.body235:                                       ; preds = %do.end234
  %136 = load i64, i64* %len, align 8, !tbaa !14
  %137 = load i64, i64* %buffersize.addr, align 8, !tbaa !14
  %cmp236 = icmp ult i64 %136, %137
  br i1 %cmp236, label %if.then238, label %if.end240

if.then238:                                       ; preds = %do.body235
  %138 = load i8*, i8** %buffer.addr, align 8, !tbaa !6
  %139 = load i64, i64* %len, align 8, !tbaa !14
  %arrayidx239 = getelementptr inbounds i8, i8* %138, i64 %139
  store i8 63, i8* %arrayidx239, align 1, !tbaa !13
  br label %if.end240

if.end240:                                        ; preds = %if.then238, %do.body235
  %140 = load i64, i64* %len, align 8, !tbaa !14
  %inc241 = add i64 %140, 1
  store i64 %inc241, i64* %len, align 8, !tbaa !14
  br label %do.cond242

do.cond242:                                       ; preds = %if.end240
  br label %do.end243

do.end243:                                        ; preds = %do.cond242
  br label %sw.epilog245

sw.default244:                                    ; preds = %if.then197
  br label %sw.epilog245

sw.epilog245:                                     ; preds = %sw.default244, %do.end243
  br label %if.end246

if.end246:                                        ; preds = %sw.epilog245, %land.lhs.true191, %land.lhs.true187, %sw.bb184
  br label %sw.epilog248

sw.default247:                                    ; preds = %sw.bb179
  br label %sw.epilog248

sw.epilog248:                                     ; preds = %sw.default247, %if.end246, %if.end183
  br label %sw.epilog593

sw.bb249:                                         ; preds = %if.end82
  store i8 97, i8* %esc, align 1, !tbaa !13
  br label %c_escape

sw.bb250:                                         ; preds = %if.end82
  store i8 98, i8* %esc, align 1, !tbaa !13
  br label %c_escape

sw.bb251:                                         ; preds = %if.end82
  store i8 102, i8* %esc, align 1, !tbaa !13
  br label %c_escape

sw.bb252:                                         ; preds = %if.end82
  store i8 110, i8* %esc, align 1, !tbaa !13
  br label %c_and_shell_escape

sw.bb253:                                         ; preds = %if.end82
  store i8 114, i8* %esc, align 1, !tbaa !13
  br label %c_and_shell_escape

sw.bb254:                                         ; preds = %if.end82
  store i8 116, i8* %esc, align 1, !tbaa !13
  br label %c_and_shell_escape

sw.bb255:                                         ; preds = %if.end82
  store i8 118, i8* %esc, align 1, !tbaa !13
  br label %c_escape

sw.bb256:                                         ; preds = %if.end82
  %141 = load i8, i8* %c, align 1, !tbaa !13
  store i8 %141, i8* %esc, align 1, !tbaa !13
  %142 = load i32, i32* %quoting_style.addr, align 4, !tbaa !13
  %cmp257 = icmp eq i32 %142, 2
  br i1 %cmp257, label %if.then259, label %if.end263

if.then259:                                       ; preds = %sw.bb256
  %143 = load i8, i8* %elide_outer_quotes, align 1, !tbaa !11, !range !25
  %tobool260 = trunc i8 %143 to i1
  br i1 %tobool260, label %if.then261, label %if.end262

if.then261:                                       ; preds = %if.then259
  store i32 16, i32* %cleanup.dest.slot, align 4
  br label %cleanup702

if.end262:                                        ; preds = %if.then259
  br label %store_c

if.end263:                                        ; preds = %sw.bb256
  %144 = load i8, i8* %backslash_escapes, align 1, !tbaa !11, !range !25
  %tobool264 = trunc i8 %144 to i1
  br i1 %tobool264, label %land.lhs.true266, label %if.end272

land.lhs.true266:                                 ; preds = %if.end263
  %145 = load i8, i8* %elide_outer_quotes, align 1, !tbaa !11, !range !25
  %tobool267 = trunc i8 %145 to i1
  br i1 %tobool267, label %land.lhs.true269, label %if.end272

land.lhs.true269:                                 ; preds = %land.lhs.true266
  %146 = load i64, i64* %quote_string_len, align 8, !tbaa !14
  %tobool270 = icmp ne i64 %146, 0
  br i1 %tobool270, label %if.then271, label %if.end272

if.then271:                                       ; preds = %land.lhs.true269
  br label %store_c

if.end272:                                        ; preds = %land.lhs.true269, %land.lhs.true266, %if.end263
  br label %c_and_shell_escape

c_and_shell_escape:                               ; preds = %if.end272, %sw.bb254, %sw.bb253, %sw.bb252
  %147 = load i32, i32* %quoting_style.addr, align 4, !tbaa !13
  %cmp273 = icmp eq i32 %147, 2
  br i1 %cmp273, label %land.lhs.true275, label %if.end279

land.lhs.true275:                                 ; preds = %c_and_shell_escape
  %148 = load i8, i8* %elide_outer_quotes, align 1, !tbaa !11, !range !25
  %tobool276 = trunc i8 %148 to i1
  br i1 %tobool276, label %if.then278, label %if.end279

if.then278:                                       ; preds = %land.lhs.true275
  store i32 16, i32* %cleanup.dest.slot, align 4
  br label %cleanup702

if.end279:                                        ; preds = %land.lhs.true275, %c_and_shell_escape
  br label %c_escape

c_escape:                                         ; preds = %if.end279, %sw.bb255, %sw.bb251, %sw.bb250, %sw.bb249
  %149 = load i8, i8* %backslash_escapes, align 1, !tbaa !11, !range !25
  %tobool280 = trunc i8 %149 to i1
  br i1 %tobool280, label %if.then281, label %if.end282

if.then281:                                       ; preds = %c_escape
  %150 = load i8, i8* %esc, align 1, !tbaa !13
  store i8 %150, i8* %c, align 1, !tbaa !13
  br label %store_escape

if.end282:                                        ; preds = %c_escape
  br label %sw.epilog593

sw.bb283:                                         ; preds = %if.end82, %if.end82
  %151 = load i64, i64* %argsize.addr, align 8, !tbaa !14
  %cmp284 = icmp eq i64 %151, -1
  br i1 %cmp284, label %cond.true286, label %cond.false291

cond.true286:                                     ; preds = %sw.bb283
  %152 = load i8*, i8** %arg.addr, align 8, !tbaa !6
  %arrayidx287 = getelementptr inbounds i8, i8* %152, i64 1
  %153 = load i8, i8* %arrayidx287, align 1, !tbaa !13
  %conv288 = sext i8 %153 to i32
  %cmp289 = icmp eq i32 %conv288, 0
  br i1 %cmp289, label %if.end295, label %if.then294

cond.false291:                                    ; preds = %sw.bb283
  %154 = load i64, i64* %argsize.addr, align 8, !tbaa !14
  %cmp292 = icmp eq i64 %154, 1
  br i1 %cmp292, label %if.end295, label %if.then294

if.then294:                                       ; preds = %cond.false291, %cond.true286
  br label %sw.epilog593

if.end295:                                        ; preds = %cond.false291, %cond.true286
  br label %sw.bb296

sw.bb296:                                         ; preds = %if.end82, %if.end82, %if.end295
  %155 = load i64, i64* %i, align 8, !tbaa !14
  %cmp297 = icmp ne i64 %155, 0
  br i1 %cmp297, label %if.then299, label %if.end300

if.then299:                                       ; preds = %sw.bb296
  br label %sw.epilog593

if.end300:                                        ; preds = %sw.bb296
  br label %sw.bb301

sw.bb301:                                         ; preds = %if.end82, %if.end300
  store i8 1, i8* %c_and_shell_quote_compat, align 1, !tbaa !11
  br label %sw.bb302

sw.bb302:                                         ; preds = %if.end82, %if.end82, %if.end82, %if.end82, %if.end82, %if.end82, %if.end82, %if.end82, %if.end82, %if.end82, %if.end82, %if.end82, %if.end82, %if.end82, %if.end82, %sw.bb301
  %156 = load i32, i32* %quoting_style.addr, align 4, !tbaa !13
  %cmp303 = icmp eq i32 %156, 2
  br i1 %cmp303, label %land.lhs.true305, label %if.end309

land.lhs.true305:                                 ; preds = %sw.bb302
  %157 = load i8, i8* %elide_outer_quotes, align 1, !tbaa !11, !range !25
  %tobool306 = trunc i8 %157 to i1
  br i1 %tobool306, label %if.then308, label %if.end309

if.then308:                                       ; preds = %land.lhs.true305
  store i32 16, i32* %cleanup.dest.slot, align 4
  br label %cleanup702

if.end309:                                        ; preds = %land.lhs.true305, %sw.bb302
  br label %sw.epilog593

sw.bb310:                                         ; preds = %if.end82
  store i8 1, i8* %encountered_single_quote, align 1, !tbaa !11
  store i8 1, i8* %c_and_shell_quote_compat, align 1, !tbaa !11
  %158 = load i32, i32* %quoting_style.addr, align 4, !tbaa !13
  %cmp311 = icmp eq i32 %158, 2
  br i1 %cmp311, label %if.then313, label %if.end349

if.then313:                                       ; preds = %sw.bb310
  %159 = load i8, i8* %elide_outer_quotes, align 1, !tbaa !11, !range !25
  %tobool314 = trunc i8 %159 to i1
  br i1 %tobool314, label %if.then315, label %if.end316

if.then315:                                       ; preds = %if.then313
  store i32 16, i32* %cleanup.dest.slot, align 4
  br label %cleanup702

if.end316:                                        ; preds = %if.then313
  %160 = load i64, i64* %buffersize.addr, align 8, !tbaa !14
  %tobool317 = icmp ne i64 %160, 0
  br i1 %tobool317, label %land.lhs.true318, label %if.end321

land.lhs.true318:                                 ; preds = %if.end316
  %161 = load i64, i64* %orig_buffersize, align 8, !tbaa !14
  %tobool319 = icmp ne i64 %161, 0
  br i1 %tobool319, label %if.end321, label %if.then320

if.then320:                                       ; preds = %land.lhs.true318
  %162 = load i64, i64* %buffersize.addr, align 8, !tbaa !14
  store i64 %162, i64* %orig_buffersize, align 8, !tbaa !14
  store i64 0, i64* %buffersize.addr, align 8, !tbaa !14
  br label %if.end321

if.end321:                                        ; preds = %if.then320, %land.lhs.true318, %if.end316
  br label %do.body322

do.body322:                                       ; preds = %if.end321
  %163 = load i64, i64* %len, align 8, !tbaa !14
  %164 = load i64, i64* %buffersize.addr, align 8, !tbaa !14
  %cmp323 = icmp ult i64 %163, %164
  br i1 %cmp323, label %if.then325, label %if.end327

if.then325:                                       ; preds = %do.body322
  %165 = load i8*, i8** %buffer.addr, align 8, !tbaa !6
  %166 = load i64, i64* %len, align 8, !tbaa !14
  %arrayidx326 = getelementptr inbounds i8, i8* %165, i64 %166
  store i8 39, i8* %arrayidx326, align 1, !tbaa !13
  br label %if.end327

if.end327:                                        ; preds = %if.then325, %do.body322
  %167 = load i64, i64* %len, align 8, !tbaa !14
  %inc328 = add i64 %167, 1
  store i64 %inc328, i64* %len, align 8, !tbaa !14
  br label %do.cond329

do.cond329:                                       ; preds = %if.end327
  br label %do.end330

do.end330:                                        ; preds = %do.cond329
  br label %do.body331

do.body331:                                       ; preds = %do.end330
  %168 = load i64, i64* %len, align 8, !tbaa !14
  %169 = load i64, i64* %buffersize.addr, align 8, !tbaa !14
  %cmp332 = icmp ult i64 %168, %169
  br i1 %cmp332, label %if.then334, label %if.end336

if.then334:                                       ; preds = %do.body331
  %170 = load i8*, i8** %buffer.addr, align 8, !tbaa !6
  %171 = load i64, i64* %len, align 8, !tbaa !14
  %arrayidx335 = getelementptr inbounds i8, i8* %170, i64 %171
  store i8 92, i8* %arrayidx335, align 1, !tbaa !13
  br label %if.end336

if.end336:                                        ; preds = %if.then334, %do.body331
  %172 = load i64, i64* %len, align 8, !tbaa !14
  %inc337 = add i64 %172, 1
  store i64 %inc337, i64* %len, align 8, !tbaa !14
  br label %do.cond338

do.cond338:                                       ; preds = %if.end336
  br label %do.end339

do.end339:                                        ; preds = %do.cond338
  br label %do.body340

do.body340:                                       ; preds = %do.end339
  %173 = load i64, i64* %len, align 8, !tbaa !14
  %174 = load i64, i64* %buffersize.addr, align 8, !tbaa !14
  %cmp341 = icmp ult i64 %173, %174
  br i1 %cmp341, label %if.then343, label %if.end345

if.then343:                                       ; preds = %do.body340
  %175 = load i8*, i8** %buffer.addr, align 8, !tbaa !6
  %176 = load i64, i64* %len, align 8, !tbaa !14
  %arrayidx344 = getelementptr inbounds i8, i8* %175, i64 %176
  store i8 39, i8* %arrayidx344, align 1, !tbaa !13
  br label %if.end345

if.end345:                                        ; preds = %if.then343, %do.body340
  %177 = load i64, i64* %len, align 8, !tbaa !14
  %inc346 = add i64 %177, 1
  store i64 %inc346, i64* %len, align 8, !tbaa !14
  br label %do.cond347

do.cond347:                                       ; preds = %if.end345
  br label %do.end348

do.end348:                                        ; preds = %do.cond347
  store i8 0, i8* %pending_shell_escape_end, align 1, !tbaa !11
  br label %if.end349

if.end349:                                        ; preds = %do.end348, %sw.bb310
  br label %sw.epilog593

sw.bb350:                                         ; preds = %if.end82, %if.end82, %if.end82, %if.end82, %if.end82, %if.end82, %if.end82, %if.end82, %if.end82, %if.end82, %if.end82, %if.end82, %if.end82, %if.end82, %if.end82, %if.end82, %if.end82, %if.end82, %if.end82, %if.end82, %if.end82, %if.end82, %if.end82, %if.end82, %if.end82, %if.end82, %if.end82, %if.end82, %if.end82, %if.end82, %if.end82, %if.end82, %if.end82, %if.end82, %if.end82, %if.end82, %if.end82, %if.end82, %if.end82, %if.end82, %if.end82, %if.end82, %if.end82, %if.end82, %if.end82, %if.end82, %if.end82, %if.end82, %if.end82, %if.end82, %if.end82, %if.end82, %if.end82, %if.end82, %if.end82, %if.end82, %if.end82, %if.end82, %if.end82, %if.end82, %if.end82, %if.end82, %if.end82, %if.end82, %if.end82, %if.end82, %if.end82, %if.end82, %if.end82, %if.end82, %if.end82
  store i8 1, i8* %c_and_shell_quote_compat, align 1, !tbaa !11
  br label %sw.epilog593

sw.default351:                                    ; preds = %if.end82
  %178 = bitcast i64* %m to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %178) #13
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %printable) #13
  %179 = load i8, i8* %unibyte_locale, align 1, !tbaa !11, !range !25
  %tobool352 = trunc i8 %179 to i1
  br i1 %tobool352, label %if.then353, label %if.else362

if.then353:                                       ; preds = %sw.default351
  store i64 1, i64* %m, align 8, !tbaa !14
  %call354 = call i16** @__ctype_b_loc() #26
  %180 = load i16*, i16** %call354, align 8, !tbaa !6
  %181 = load i8, i8* %c, align 1, !tbaa !13
  %conv355 = zext i8 %181 to i32
  %idxprom = sext i32 %conv355 to i64
  %arrayidx356 = getelementptr inbounds i16, i16* %180, i64 %idxprom
  %182 = load i16, i16* %arrayidx356, align 2, !tbaa !48
  %conv357 = zext i16 %182 to i32
  %and358 = and i32 %conv357, 16384
  %cmp359 = icmp ne i32 %and358, 0
  %frombool361 = zext i1 %cmp359 to i8
  store i8 %frombool361, i8* %printable, align 1, !tbaa !11
  br label %if.end434

if.else362:                                       ; preds = %sw.default351
  %183 = bitcast %struct.__mbstate_t* %mbstate to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %183) #13
  %184 = bitcast %struct.__mbstate_t* %mbstate to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %184, i8 0, i64 8, i1 false)
  store i64 0, i64* %m, align 8, !tbaa !14
  store i8 1, i8* %printable, align 1, !tbaa !11
  %185 = load i64, i64* %argsize.addr, align 8, !tbaa !14
  %cmp363 = icmp eq i64 %185, -1
  br i1 %cmp363, label %if.then365, label %if.end367

if.then365:                                       ; preds = %if.else362
  %186 = load i8*, i8** %arg.addr, align 8, !tbaa !6
  %call366 = call i64 @strlen(i8* %186) #22
  store i64 %call366, i64* %argsize.addr, align 8, !tbaa !14
  br label %if.end367

if.end367:                                        ; preds = %if.then365, %if.else362
  br label %do.body368

do.body368:                                       ; preds = %do.cond426, %if.end367
  %187 = bitcast i32* %w to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %187) #13
  %188 = bitcast i64* %bytes to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %188) #13
  %189 = load i8*, i8** %arg.addr, align 8, !tbaa !6
  %190 = load i64, i64* %i, align 8, !tbaa !14
  %191 = load i64, i64* %m, align 8, !tbaa !14
  %add369 = add i64 %190, %191
  %arrayidx370 = getelementptr inbounds i8, i8* %189, i64 %add369
  %192 = load i64, i64* %argsize.addr, align 8, !tbaa !14
  %193 = load i64, i64* %i, align 8, !tbaa !14
  %194 = load i64, i64* %m, align 8, !tbaa !14
  %add371 = add i64 %193, %194
  %sub = sub i64 %192, %add371
  %call372 = call i64 @rpl_mbrtowc(i32* %w, i8* %arrayidx370, i64 %sub, %struct.__mbstate_t* %mbstate)
  store i64 %call372, i64* %bytes, align 8, !tbaa !14
  %195 = load i64, i64* %bytes, align 8, !tbaa !14
  %cmp373 = icmp eq i64 %195, 0
  br i1 %cmp373, label %if.then375, label %if.else376

if.then375:                                       ; preds = %do.body368
  store i32 52, i32* %cleanup.dest.slot, align 4
  br label %cleanup422

if.else376:                                       ; preds = %do.body368
  %196 = load i64, i64* %bytes, align 8, !tbaa !14
  %cmp377 = icmp eq i64 %196, -1
  br i1 %cmp377, label %if.then379, label %if.else380

if.then379:                                       ; preds = %if.else376
  store i8 0, i8* %printable, align 1, !tbaa !11
  store i32 52, i32* %cleanup.dest.slot, align 4
  br label %cleanup422

if.else380:                                       ; preds = %if.else376
  %197 = load i64, i64* %bytes, align 8, !tbaa !14
  %cmp381 = icmp eq i64 %197, -2
  br i1 %cmp381, label %if.then383, label %if.else392

if.then383:                                       ; preds = %if.else380
  store i8 0, i8* %printable, align 1, !tbaa !11
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then383
  %198 = load i64, i64* %i, align 8, !tbaa !14
  %199 = load i64, i64* %m, align 8, !tbaa !14
  %add384 = add i64 %198, %199
  %200 = load i64, i64* %argsize.addr, align 8, !tbaa !14
  %cmp385 = icmp ult i64 %add384, %200
  br i1 %cmp385, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %201 = load i8*, i8** %arg.addr, align 8, !tbaa !6
  %202 = load i64, i64* %i, align 8, !tbaa !14
  %203 = load i64, i64* %m, align 8, !tbaa !14
  %add387 = add i64 %202, %203
  %arrayidx388 = getelementptr inbounds i8, i8* %201, i64 %add387
  %204 = load i8, i8* %arrayidx388, align 1, !tbaa !13
  %conv389 = sext i8 %204 to i32
  %tobool390 = icmp ne i32 %conv389, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %205 = phi i1 [ false, %while.cond ], [ %tobool390, %land.rhs ]
  br i1 %205, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %206 = load i64, i64* %m, align 8, !tbaa !14
  %inc391 = add i64 %206, 1
  store i64 %inc391, i64* %m, align 8, !tbaa !14
  br label %while.cond

while.end:                                        ; preds = %land.end
  store i32 52, i32* %cleanup.dest.slot, align 4
  br label %cleanup422

if.else392:                                       ; preds = %if.else380
  %207 = load i8, i8* %elide_outer_quotes, align 1, !tbaa !11, !range !25
  %tobool393 = trunc i8 %207 to i1
  br i1 %tobool393, label %land.lhs.true395, label %if.end413

land.lhs.true395:                                 ; preds = %if.else392
  %208 = load i32, i32* %quoting_style.addr, align 4, !tbaa !13
  %cmp396 = icmp eq i32 %208, 2
  br i1 %cmp396, label %if.then398, label %if.end413

if.then398:                                       ; preds = %land.lhs.true395
  %209 = bitcast i64* %j to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %209) #13
  store i64 1, i64* %j, align 8, !tbaa !14
  br label %for.cond399

for.cond399:                                      ; preds = %for.inc410, %if.then398
  %210 = load i64, i64* %j, align 8, !tbaa !14
  %211 = load i64, i64* %bytes, align 8, !tbaa !14
  %cmp400 = icmp ult i64 %210, %211
  br i1 %cmp400, label %for.body402, label %for.end412

for.body402:                                      ; preds = %for.cond399
  %212 = load i8*, i8** %arg.addr, align 8, !tbaa !6
  %213 = load i64, i64* %i, align 8, !tbaa !14
  %214 = load i64, i64* %m, align 8, !tbaa !14
  %add403 = add i64 %213, %214
  %215 = load i64, i64* %j, align 8, !tbaa !14
  %add404 = add i64 %add403, %215
  %arrayidx405 = getelementptr inbounds i8, i8* %212, i64 %add404
  %216 = load i8, i8* %arrayidx405, align 1, !tbaa !13
  %conv406 = sext i8 %216 to i32
  switch i32 %conv406, label %sw.default408 [
    i32 91, label %sw.bb407
    i32 92, label %sw.bb407
    i32 94, label %sw.bb407
    i32 96, label %sw.bb407
    i32 124, label %sw.bb407
  ]

sw.bb407:                                         ; preds = %for.body402, %for.body402, %for.body402, %for.body402, %for.body402
  store i32 16, i32* %cleanup.dest.slot, align 4
  br label %cleanup

sw.default408:                                    ; preds = %for.body402
  br label %sw.epilog409

sw.epilog409:                                     ; preds = %sw.default408
  br label %for.inc410

for.inc410:                                       ; preds = %sw.epilog409
  %217 = load i64, i64* %j, align 8, !tbaa !14
  %inc411 = add i64 %217, 1
  store i64 %inc411, i64* %j, align 8, !tbaa !14
  br label %for.cond399

for.end412:                                       ; preds = %for.cond399
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %sw.bb407, %for.end412
  %218 = bitcast i64* %j to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %218) #13
  %cleanup.dest = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest, label %cleanup422 [
    i32 0, label %cleanup.cont
  ]

cleanup.cont:                                     ; preds = %cleanup
  br label %if.end413

if.end413:                                        ; preds = %cleanup.cont, %land.lhs.true395, %if.else392
  %219 = load i32, i32* %w, align 4, !tbaa !2
  %call414 = call i32 @iswprint(i32 %219) #13
  %tobool415 = icmp ne i32 %call414, 0
  br i1 %tobool415, label %if.end417, label %if.then416

if.then416:                                       ; preds = %if.end413
  store i8 0, i8* %printable, align 1, !tbaa !11
  br label %if.end417

if.end417:                                        ; preds = %if.then416, %if.end413
  %220 = load i64, i64* %bytes, align 8, !tbaa !14
  %221 = load i64, i64* %m, align 8, !tbaa !14
  %add418 = add i64 %221, %220
  store i64 %add418, i64* %m, align 8, !tbaa !14
  br label %if.end419

if.end419:                                        ; preds = %if.end417
  br label %if.end420

if.end420:                                        ; preds = %if.end419
  br label %if.end421

if.end421:                                        ; preds = %if.end420
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup422

cleanup422:                                       ; preds = %if.end421, %cleanup, %while.end, %if.then379, %if.then375
  %222 = bitcast i64* %bytes to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %222) #13
  %223 = bitcast i32* %w to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %223) #13
  %cleanup.dest424 = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest424, label %cleanup431 [
    i32 0, label %cleanup.cont425
    i32 52, label %do.end430
  ]

cleanup.cont425:                                  ; preds = %cleanup422
  br label %do.cond426

do.cond426:                                       ; preds = %cleanup.cont425
  %call427 = call i32 @mbsinit(%struct.__mbstate_t* %mbstate) #22
  %tobool428 = icmp ne i32 %call427, 0
  %lnot429 = xor i1 %tobool428, true
  br i1 %lnot429, label %do.body368, label %do.end430

do.end430:                                        ; preds = %do.cond426, %cleanup422
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup431

cleanup431:                                       ; preds = %do.end430, %cleanup422
  %224 = bitcast %struct.__mbstate_t* %mbstate to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %224) #13
  %cleanup.dest432 = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest432, label %cleanup589 [
    i32 0, label %cleanup.cont433
  ]

cleanup.cont433:                                  ; preds = %cleanup431
  br label %if.end434

if.end434:                                        ; preds = %cleanup.cont433, %if.then353
  %225 = load i8, i8* %printable, align 1, !tbaa !11, !range !25
  %tobool435 = trunc i8 %225 to i1
  %frombool436 = zext i1 %tobool435 to i8
  store i8 %frombool436, i8* %c_and_shell_quote_compat, align 1, !tbaa !11
  %226 = load i64, i64* %m, align 8, !tbaa !14
  %cmp437 = icmp ult i64 1, %226
  br i1 %cmp437, label %if.then443, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end434
  %227 = load i8, i8* %backslash_escapes, align 1, !tbaa !11, !range !25
  %tobool439 = trunc i8 %227 to i1
  br i1 %tobool439, label %land.lhs.true441, label %if.end588

land.lhs.true441:                                 ; preds = %lor.lhs.false
  %228 = load i8, i8* %printable, align 1, !tbaa !11, !range !25
  %tobool442 = trunc i8 %228 to i1
  br i1 %tobool442, label %if.end588, label %if.then443

if.then443:                                       ; preds = %land.lhs.true441, %if.end434
  %229 = bitcast i64* %ilim to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %229) #13
  %230 = load i64, i64* %i, align 8, !tbaa !14
  %231 = load i64, i64* %m, align 8, !tbaa !14
  %add444 = add i64 %230, %231
  store i64 %add444, i64* %ilim, align 8, !tbaa !14
  br label %for.cond445

for.cond445:                                      ; preds = %do.end583, %if.then443
  %232 = load i8, i8* %backslash_escapes, align 1, !tbaa !11, !range !25
  %tobool446 = trunc i8 %232 to i1
  br i1 %tobool446, label %land.lhs.true448, label %if.else529

land.lhs.true448:                                 ; preds = %for.cond445
  %233 = load i8, i8* %printable, align 1, !tbaa !11, !range !25
  %tobool449 = trunc i8 %233 to i1
  br i1 %tobool449, label %if.else529, label %if.then450

if.then450:                                       ; preds = %land.lhs.true448
  br label %do.body451

do.body451:                                       ; preds = %if.then450
  %234 = load i8, i8* %elide_outer_quotes, align 1, !tbaa !11, !range !25
  %tobool452 = trunc i8 %234 to i1
  br i1 %tobool452, label %if.then453, label %if.end454

if.then453:                                       ; preds = %do.body451
  store i32 16, i32* %cleanup.dest.slot, align 4
  br label %cleanup587

if.end454:                                        ; preds = %do.body451
  store i8 1, i8* %escaping, align 1, !tbaa !11
  %235 = load i32, i32* %quoting_style.addr, align 4, !tbaa !13
  %cmp455 = icmp eq i32 %235, 2
  br i1 %cmp455, label %land.lhs.true457, label %if.end487

land.lhs.true457:                                 ; preds = %if.end454
  %236 = load i8, i8* %pending_shell_escape_end, align 1, !tbaa !11, !range !25
  %tobool458 = trunc i8 %236 to i1
  br i1 %tobool458, label %if.end487, label %if.then459

if.then459:                                       ; preds = %land.lhs.true457
  br label %do.body460

do.body460:                                       ; preds = %if.then459
  %237 = load i64, i64* %len, align 8, !tbaa !14
  %238 = load i64, i64* %buffersize.addr, align 8, !tbaa !14
  %cmp461 = icmp ult i64 %237, %238
  br i1 %cmp461, label %if.then463, label %if.end465

if.then463:                                       ; preds = %do.body460
  %239 = load i8*, i8** %buffer.addr, align 8, !tbaa !6
  %240 = load i64, i64* %len, align 8, !tbaa !14
  %arrayidx464 = getelementptr inbounds i8, i8* %239, i64 %240
  store i8 39, i8* %arrayidx464, align 1, !tbaa !13
  br label %if.end465

if.end465:                                        ; preds = %if.then463, %do.body460
  %241 = load i64, i64* %len, align 8, !tbaa !14
  %inc466 = add i64 %241, 1
  store i64 %inc466, i64* %len, align 8, !tbaa !14
  br label %do.cond467

do.cond467:                                       ; preds = %if.end465
  br label %do.end468

do.end468:                                        ; preds = %do.cond467
  br label %do.body469

do.body469:                                       ; preds = %do.end468
  %242 = load i64, i64* %len, align 8, !tbaa !14
  %243 = load i64, i64* %buffersize.addr, align 8, !tbaa !14
  %cmp470 = icmp ult i64 %242, %243
  br i1 %cmp470, label %if.then472, label %if.end474

if.then472:                                       ; preds = %do.body469
  %244 = load i8*, i8** %buffer.addr, align 8, !tbaa !6
  %245 = load i64, i64* %len, align 8, !tbaa !14
  %arrayidx473 = getelementptr inbounds i8, i8* %244, i64 %245
  store i8 36, i8* %arrayidx473, align 1, !tbaa !13
  br label %if.end474

if.end474:                                        ; preds = %if.then472, %do.body469
  %246 = load i64, i64* %len, align 8, !tbaa !14
  %inc475 = add i64 %246, 1
  store i64 %inc475, i64* %len, align 8, !tbaa !14
  br label %do.cond476

do.cond476:                                       ; preds = %if.end474
  br label %do.end477

do.end477:                                        ; preds = %do.cond476
  br label %do.body478

do.body478:                                       ; preds = %do.end477
  %247 = load i64, i64* %len, align 8, !tbaa !14
  %248 = load i64, i64* %buffersize.addr, align 8, !tbaa !14
  %cmp479 = icmp ult i64 %247, %248
  br i1 %cmp479, label %if.then481, label %if.end483

if.then481:                                       ; preds = %do.body478
  %249 = load i8*, i8** %buffer.addr, align 8, !tbaa !6
  %250 = load i64, i64* %len, align 8, !tbaa !14
  %arrayidx482 = getelementptr inbounds i8, i8* %249, i64 %250
  store i8 39, i8* %arrayidx482, align 1, !tbaa !13
  br label %if.end483

if.end483:                                        ; preds = %if.then481, %do.body478
  %251 = load i64, i64* %len, align 8, !tbaa !14
  %inc484 = add i64 %251, 1
  store i64 %inc484, i64* %len, align 8, !tbaa !14
  br label %do.cond485

do.cond485:                                       ; preds = %if.end483
  br label %do.end486

do.end486:                                        ; preds = %do.cond485
  store i8 1, i8* %pending_shell_escape_end, align 1, !tbaa !11
  br label %if.end487

if.end487:                                        ; preds = %do.end486, %land.lhs.true457, %if.end454
  br label %do.body488

do.body488:                                       ; preds = %if.end487
  %252 = load i64, i64* %len, align 8, !tbaa !14
  %253 = load i64, i64* %buffersize.addr, align 8, !tbaa !14
  %cmp489 = icmp ult i64 %252, %253
  br i1 %cmp489, label %if.then491, label %if.end493

if.then491:                                       ; preds = %do.body488
  %254 = load i8*, i8** %buffer.addr, align 8, !tbaa !6
  %255 = load i64, i64* %len, align 8, !tbaa !14
  %arrayidx492 = getelementptr inbounds i8, i8* %254, i64 %255
  store i8 92, i8* %arrayidx492, align 1, !tbaa !13
  br label %if.end493

if.end493:                                        ; preds = %if.then491, %do.body488
  %256 = load i64, i64* %len, align 8, !tbaa !14
  %inc494 = add i64 %256, 1
  store i64 %inc494, i64* %len, align 8, !tbaa !14
  br label %do.cond495

do.cond495:                                       ; preds = %if.end493
  br label %do.end496

do.end496:                                        ; preds = %do.cond495
  br label %do.cond497

do.cond497:                                       ; preds = %do.end496
  br label %do.end498

do.end498:                                        ; preds = %do.cond497
  br label %do.body499

do.body499:                                       ; preds = %do.end498
  %257 = load i64, i64* %len, align 8, !tbaa !14
  %258 = load i64, i64* %buffersize.addr, align 8, !tbaa !14
  %cmp500 = icmp ult i64 %257, %258
  br i1 %cmp500, label %if.then502, label %if.end507

if.then502:                                       ; preds = %do.body499
  %259 = load i8, i8* %c, align 1, !tbaa !13
  %conv503 = zext i8 %259 to i32
  %shr = ashr i32 %conv503, 6
  %add504 = add nsw i32 48, %shr
  %conv505 = trunc i32 %add504 to i8
  %260 = load i8*, i8** %buffer.addr, align 8, !tbaa !6
  %261 = load i64, i64* %len, align 8, !tbaa !14
  %arrayidx506 = getelementptr inbounds i8, i8* %260, i64 %261
  store i8 %conv505, i8* %arrayidx506, align 1, !tbaa !13
  br label %if.end507

if.end507:                                        ; preds = %if.then502, %do.body499
  %262 = load i64, i64* %len, align 8, !tbaa !14
  %inc508 = add i64 %262, 1
  store i64 %inc508, i64* %len, align 8, !tbaa !14
  br label %do.cond509

do.cond509:                                       ; preds = %if.end507
  br label %do.end510

do.end510:                                        ; preds = %do.cond509
  br label %do.body511

do.body511:                                       ; preds = %do.end510
  %263 = load i64, i64* %len, align 8, !tbaa !14
  %264 = load i64, i64* %buffersize.addr, align 8, !tbaa !14
  %cmp512 = icmp ult i64 %263, %264
  br i1 %cmp512, label %if.then514, label %if.end521

if.then514:                                       ; preds = %do.body511
  %265 = load i8, i8* %c, align 1, !tbaa !13
  %conv515 = zext i8 %265 to i32
  %shr516 = ashr i32 %conv515, 3
  %and517 = and i32 %shr516, 7
  %add518 = add nsw i32 48, %and517
  %conv519 = trunc i32 %add518 to i8
  %266 = load i8*, i8** %buffer.addr, align 8, !tbaa !6
  %267 = load i64, i64* %len, align 8, !tbaa !14
  %arrayidx520 = getelementptr inbounds i8, i8* %266, i64 %267
  store i8 %conv519, i8* %arrayidx520, align 1, !tbaa !13
  br label %if.end521

if.end521:                                        ; preds = %if.then514, %do.body511
  %268 = load i64, i64* %len, align 8, !tbaa !14
  %inc522 = add i64 %268, 1
  store i64 %inc522, i64* %len, align 8, !tbaa !14
  br label %do.cond523

do.cond523:                                       ; preds = %if.end521
  br label %do.end524

do.end524:                                        ; preds = %do.cond523
  %269 = load i8, i8* %c, align 1, !tbaa !13
  %conv525 = zext i8 %269 to i32
  %and526 = and i32 %conv525, 7
  %add527 = add nsw i32 48, %and526
  %conv528 = trunc i32 %add527 to i8
  store i8 %conv528, i8* %c, align 1, !tbaa !13
  br label %if.end542

if.else529:                                       ; preds = %land.lhs.true448, %for.cond445
  %270 = load i8, i8* %is_right_quote, align 1, !tbaa !11, !range !25
  %tobool530 = trunc i8 %270 to i1
  br i1 %tobool530, label %if.then531, label %if.end541

if.then531:                                       ; preds = %if.else529
  br label %do.body532

do.body532:                                       ; preds = %if.then531
  %271 = load i64, i64* %len, align 8, !tbaa !14
  %272 = load i64, i64* %buffersize.addr, align 8, !tbaa !14
  %cmp533 = icmp ult i64 %271, %272
  br i1 %cmp533, label %if.then535, label %if.end537

if.then535:                                       ; preds = %do.body532
  %273 = load i8*, i8** %buffer.addr, align 8, !tbaa !6
  %274 = load i64, i64* %len, align 8, !tbaa !14
  %arrayidx536 = getelementptr inbounds i8, i8* %273, i64 %274
  store i8 92, i8* %arrayidx536, align 1, !tbaa !13
  br label %if.end537

if.end537:                                        ; preds = %if.then535, %do.body532
  %275 = load i64, i64* %len, align 8, !tbaa !14
  %inc538 = add i64 %275, 1
  store i64 %inc538, i64* %len, align 8, !tbaa !14
  br label %do.cond539

do.cond539:                                       ; preds = %if.end537
  br label %do.end540

do.end540:                                        ; preds = %do.cond539
  store i8 0, i8* %is_right_quote, align 1, !tbaa !11
  br label %if.end541

if.end541:                                        ; preds = %do.end540, %if.else529
  br label %if.end542

if.end542:                                        ; preds = %if.end541, %do.end524
  %276 = load i64, i64* %ilim, align 8, !tbaa !14
  %277 = load i64, i64* %i, align 8, !tbaa !14
  %add543 = add i64 %277, 1
  %cmp544 = icmp ule i64 %276, %add543
  br i1 %cmp544, label %if.then546, label %if.end547

if.then546:                                       ; preds = %if.end542
  br label %for.end586

if.end547:                                        ; preds = %if.end542
  br label %do.body548

do.body548:                                       ; preds = %if.end547
  %278 = load i8, i8* %pending_shell_escape_end, align 1, !tbaa !11, !range !25
  %tobool549 = trunc i8 %278 to i1
  br i1 %tobool549, label %land.lhs.true551, label %if.end572

land.lhs.true551:                                 ; preds = %do.body548
  %279 = load i8, i8* %escaping, align 1, !tbaa !11, !range !25
  %tobool552 = trunc i8 %279 to i1
  br i1 %tobool552, label %if.end572, label %if.then553

if.then553:                                       ; preds = %land.lhs.true551
  br label %do.body554

do.body554:                                       ; preds = %if.then553
  %280 = load i64, i64* %len, align 8, !tbaa !14
  %281 = load i64, i64* %buffersize.addr, align 8, !tbaa !14
  %cmp555 = icmp ult i64 %280, %281
  br i1 %cmp555, label %if.then557, label %if.end559

if.then557:                                       ; preds = %do.body554
  %282 = load i8*, i8** %buffer.addr, align 8, !tbaa !6
  %283 = load i64, i64* %len, align 8, !tbaa !14
  %arrayidx558 = getelementptr inbounds i8, i8* %282, i64 %283
  store i8 39, i8* %arrayidx558, align 1, !tbaa !13
  br label %if.end559

if.end559:                                        ; preds = %if.then557, %do.body554
  %284 = load i64, i64* %len, align 8, !tbaa !14
  %inc560 = add i64 %284, 1
  store i64 %inc560, i64* %len, align 8, !tbaa !14
  br label %do.cond561

do.cond561:                                       ; preds = %if.end559
  br label %do.end562

do.end562:                                        ; preds = %do.cond561
  br label %do.body563

do.body563:                                       ; preds = %do.end562
  %285 = load i64, i64* %len, align 8, !tbaa !14
  %286 = load i64, i64* %buffersize.addr, align 8, !tbaa !14
  %cmp564 = icmp ult i64 %285, %286
  br i1 %cmp564, label %if.then566, label %if.end568

if.then566:                                       ; preds = %do.body563
  %287 = load i8*, i8** %buffer.addr, align 8, !tbaa !6
  %288 = load i64, i64* %len, align 8, !tbaa !14
  %arrayidx567 = getelementptr inbounds i8, i8* %287, i64 %288
  store i8 39, i8* %arrayidx567, align 1, !tbaa !13
  br label %if.end568

if.end568:                                        ; preds = %if.then566, %do.body563
  %289 = load i64, i64* %len, align 8, !tbaa !14
  %inc569 = add i64 %289, 1
  store i64 %inc569, i64* %len, align 8, !tbaa !14
  br label %do.cond570

do.cond570:                                       ; preds = %if.end568
  br label %do.end571

do.end571:                                        ; preds = %do.cond570
  store i8 0, i8* %pending_shell_escape_end, align 1, !tbaa !11
  br label %if.end572

if.end572:                                        ; preds = %do.end571, %land.lhs.true551, %do.body548
  br label %do.cond573

do.cond573:                                       ; preds = %if.end572
  br label %do.end574

do.end574:                                        ; preds = %do.cond573
  br label %do.body575

do.body575:                                       ; preds = %do.end574
  %290 = load i64, i64* %len, align 8, !tbaa !14
  %291 = load i64, i64* %buffersize.addr, align 8, !tbaa !14
  %cmp576 = icmp ult i64 %290, %291
  br i1 %cmp576, label %if.then578, label %if.end580

if.then578:                                       ; preds = %do.body575
  %292 = load i8, i8* %c, align 1, !tbaa !13
  %293 = load i8*, i8** %buffer.addr, align 8, !tbaa !6
  %294 = load i64, i64* %len, align 8, !tbaa !14
  %arrayidx579 = getelementptr inbounds i8, i8* %293, i64 %294
  store i8 %292, i8* %arrayidx579, align 1, !tbaa !13
  br label %if.end580

if.end580:                                        ; preds = %if.then578, %do.body575
  %295 = load i64, i64* %len, align 8, !tbaa !14
  %inc581 = add i64 %295, 1
  store i64 %inc581, i64* %len, align 8, !tbaa !14
  br label %do.cond582

do.cond582:                                       ; preds = %if.end580
  br label %do.end583

do.end583:                                        ; preds = %do.cond582
  %296 = load i8*, i8** %arg.addr, align 8, !tbaa !6
  %297 = load i64, i64* %i, align 8, !tbaa !14
  %inc584 = add i64 %297, 1
  store i64 %inc584, i64* %i, align 8, !tbaa !14
  %arrayidx585 = getelementptr inbounds i8, i8* %296, i64 %inc584
  %298 = load i8, i8* %arrayidx585, align 1, !tbaa !13
  store i8 %298, i8* %c, align 1, !tbaa !13
  br label %for.cond445

for.end586:                                       ; preds = %if.then546
  store i32 44, i32* %cleanup.dest.slot, align 4
  br label %cleanup587

cleanup587:                                       ; preds = %for.end586, %if.then453
  %299 = bitcast i64* %ilim to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %299) #13
  br label %cleanup589

if.end588:                                        ; preds = %land.lhs.true441, %lor.lhs.false
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup589

cleanup589:                                       ; preds = %if.end588, %cleanup587, %cleanup431
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %printable) #13
  %300 = bitcast i64* %m to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %300) #13
  %cleanup.dest591 = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest591, label %cleanup702 [
    i32 0, label %cleanup.cont592
    i32 44, label %store_c
  ]

cleanup.cont592:                                  ; preds = %cleanup589
  br label %sw.epilog593

sw.epilog593:                                     ; preds = %cleanup.cont592, %sw.bb350, %if.end349, %if.end309, %if.then299, %if.then294, %if.end282, %sw.epilog248, %if.end178
  %301 = load i8, i8* %backslash_escapes, align 1, !tbaa !11, !range !25
  %tobool594 = trunc i8 %301 to i1
  br i1 %tobool594, label %land.lhs.true596, label %lor.lhs.false599

land.lhs.true596:                                 ; preds = %sw.epilog593
  %302 = load i32, i32* %quoting_style.addr, align 4, !tbaa !13
  %cmp597 = icmp ne i32 %302, 2
  br i1 %cmp597, label %land.lhs.true602, label %lor.lhs.false599

lor.lhs.false599:                                 ; preds = %land.lhs.true596, %sw.epilog593
  %303 = load i8, i8* %elide_outer_quotes, align 1, !tbaa !11, !range !25
  %tobool600 = trunc i8 %303 to i1
  br i1 %tobool600, label %land.lhs.true602, label %land.lhs.true611

land.lhs.true602:                                 ; preds = %lor.lhs.false599, %land.lhs.true596
  %304 = load i32*, i32** %quote_these_too.addr, align 8, !tbaa !6
  %tobool603 = icmp ne i32* %304, null
  br i1 %tobool603, label %land.lhs.true604, label %land.lhs.true611

land.lhs.true604:                                 ; preds = %land.lhs.true602
  %305 = load i32*, i32** %quote_these_too.addr, align 8, !tbaa !6
  %306 = load i8, i8* %c, align 1, !tbaa !13
  %conv605 = zext i8 %306 to i64
  %div = udiv i64 %conv605, 32
  %arrayidx606 = getelementptr inbounds i32, i32* %305, i64 %div
  %307 = load i32, i32* %arrayidx606, align 4, !tbaa !2
  %308 = load i8, i8* %c, align 1, !tbaa !13
  %conv607 = zext i8 %308 to i64
  %rem = urem i64 %conv607, 32
  %sh_prom = trunc i64 %rem to i32
  %shr608 = lshr i32 %307, %sh_prom
  %and609 = and i32 %shr608, 1
  %tobool610 = icmp ne i32 %and609, 0
  br i1 %tobool610, label %if.end614, label %land.lhs.true611

land.lhs.true611:                                 ; preds = %land.lhs.true604, %land.lhs.true602, %lor.lhs.false599
  %309 = load i8, i8* %is_right_quote, align 1, !tbaa !11, !range !25
  %tobool612 = trunc i8 %309 to i1
  br i1 %tobool612, label %if.end614, label %if.then613

if.then613:                                       ; preds = %land.lhs.true611
  br label %store_c

if.end614:                                        ; preds = %land.lhs.true611, %land.lhs.true604
  br label %store_escape

store_escape:                                     ; preds = %if.end614, %if.then281
  br label %do.body615

do.body615:                                       ; preds = %store_escape
  %310 = load i8, i8* %elide_outer_quotes, align 1, !tbaa !11, !range !25
  %tobool616 = trunc i8 %310 to i1
  br i1 %tobool616, label %if.then617, label %if.end618

if.then617:                                       ; preds = %do.body615
  store i32 16, i32* %cleanup.dest.slot, align 4
  br label %cleanup702

if.end618:                                        ; preds = %do.body615
  store i8 1, i8* %escaping, align 1, !tbaa !11
  %311 = load i32, i32* %quoting_style.addr, align 4, !tbaa !13
  %cmp619 = icmp eq i32 %311, 2
  br i1 %cmp619, label %land.lhs.true621, label %if.end651

land.lhs.true621:                                 ; preds = %if.end618
  %312 = load i8, i8* %pending_shell_escape_end, align 1, !tbaa !11, !range !25
  %tobool622 = trunc i8 %312 to i1
  br i1 %tobool622, label %if.end651, label %if.then623

if.then623:                                       ; preds = %land.lhs.true621
  br label %do.body624

do.body624:                                       ; preds = %if.then623
  %313 = load i64, i64* %len, align 8, !tbaa !14
  %314 = load i64, i64* %buffersize.addr, align 8, !tbaa !14
  %cmp625 = icmp ult i64 %313, %314
  br i1 %cmp625, label %if.then627, label %if.end629

if.then627:                                       ; preds = %do.body624
  %315 = load i8*, i8** %buffer.addr, align 8, !tbaa !6
  %316 = load i64, i64* %len, align 8, !tbaa !14
  %arrayidx628 = getelementptr inbounds i8, i8* %315, i64 %316
  store i8 39, i8* %arrayidx628, align 1, !tbaa !13
  br label %if.end629

if.end629:                                        ; preds = %if.then627, %do.body624
  %317 = load i64, i64* %len, align 8, !tbaa !14
  %inc630 = add i64 %317, 1
  store i64 %inc630, i64* %len, align 8, !tbaa !14
  br label %do.cond631

do.cond631:                                       ; preds = %if.end629
  br label %do.end632

do.end632:                                        ; preds = %do.cond631
  br label %do.body633

do.body633:                                       ; preds = %do.end632
  %318 = load i64, i64* %len, align 8, !tbaa !14
  %319 = load i64, i64* %buffersize.addr, align 8, !tbaa !14
  %cmp634 = icmp ult i64 %318, %319
  br i1 %cmp634, label %if.then636, label %if.end638

if.then636:                                       ; preds = %do.body633
  %320 = load i8*, i8** %buffer.addr, align 8, !tbaa !6
  %321 = load i64, i64* %len, align 8, !tbaa !14
  %arrayidx637 = getelementptr inbounds i8, i8* %320, i64 %321
  store i8 36, i8* %arrayidx637, align 1, !tbaa !13
  br label %if.end638

if.end638:                                        ; preds = %if.then636, %do.body633
  %322 = load i64, i64* %len, align 8, !tbaa !14
  %inc639 = add i64 %322, 1
  store i64 %inc639, i64* %len, align 8, !tbaa !14
  br label %do.cond640

do.cond640:                                       ; preds = %if.end638
  br label %do.end641

do.end641:                                        ; preds = %do.cond640
  br label %do.body642

do.body642:                                       ; preds = %do.end641
  %323 = load i64, i64* %len, align 8, !tbaa !14
  %324 = load i64, i64* %buffersize.addr, align 8, !tbaa !14
  %cmp643 = icmp ult i64 %323, %324
  br i1 %cmp643, label %if.then645, label %if.end647

if.then645:                                       ; preds = %do.body642
  %325 = load i8*, i8** %buffer.addr, align 8, !tbaa !6
  %326 = load i64, i64* %len, align 8, !tbaa !14
  %arrayidx646 = getelementptr inbounds i8, i8* %325, i64 %326
  store i8 39, i8* %arrayidx646, align 1, !tbaa !13
  br label %if.end647

if.end647:                                        ; preds = %if.then645, %do.body642
  %327 = load i64, i64* %len, align 8, !tbaa !14
  %inc648 = add i64 %327, 1
  store i64 %inc648, i64* %len, align 8, !tbaa !14
  br label %do.cond649

do.cond649:                                       ; preds = %if.end647
  br label %do.end650

do.end650:                                        ; preds = %do.cond649
  store i8 1, i8* %pending_shell_escape_end, align 1, !tbaa !11
  br label %if.end651

if.end651:                                        ; preds = %do.end650, %land.lhs.true621, %if.end618
  br label %do.body652

do.body652:                                       ; preds = %if.end651
  %328 = load i64, i64* %len, align 8, !tbaa !14
  %329 = load i64, i64* %buffersize.addr, align 8, !tbaa !14
  %cmp653 = icmp ult i64 %328, %329
  br i1 %cmp653, label %if.then655, label %if.end657

if.then655:                                       ; preds = %do.body652
  %330 = load i8*, i8** %buffer.addr, align 8, !tbaa !6
  %331 = load i64, i64* %len, align 8, !tbaa !14
  %arrayidx656 = getelementptr inbounds i8, i8* %330, i64 %331
  store i8 92, i8* %arrayidx656, align 1, !tbaa !13
  br label %if.end657

if.end657:                                        ; preds = %if.then655, %do.body652
  %332 = load i64, i64* %len, align 8, !tbaa !14
  %inc658 = add i64 %332, 1
  store i64 %inc658, i64* %len, align 8, !tbaa !14
  br label %do.cond659

do.cond659:                                       ; preds = %if.end657
  br label %do.end660

do.end660:                                        ; preds = %do.cond659
  br label %do.cond661

do.cond661:                                       ; preds = %do.end660
  br label %do.end662

do.end662:                                        ; preds = %do.cond661
  br label %store_c

store_c:                                          ; preds = %do.end662, %cleanup589, %if.then613, %if.then271, %if.end262
  br label %do.body663

do.body663:                                       ; preds = %store_c
  %333 = load i8, i8* %pending_shell_escape_end, align 1, !tbaa !11, !range !25
  %tobool664 = trunc i8 %333 to i1
  br i1 %tobool664, label %land.lhs.true666, label %if.end687

land.lhs.true666:                                 ; preds = %do.body663
  %334 = load i8, i8* %escaping, align 1, !tbaa !11, !range !25
  %tobool667 = trunc i8 %334 to i1
  br i1 %tobool667, label %if.end687, label %if.then668

if.then668:                                       ; preds = %land.lhs.true666
  br label %do.body669

do.body669:                                       ; preds = %if.then668
  %335 = load i64, i64* %len, align 8, !tbaa !14
  %336 = load i64, i64* %buffersize.addr, align 8, !tbaa !14
  %cmp670 = icmp ult i64 %335, %336
  br i1 %cmp670, label %if.then672, label %if.end674

if.then672:                                       ; preds = %do.body669
  %337 = load i8*, i8** %buffer.addr, align 8, !tbaa !6
  %338 = load i64, i64* %len, align 8, !tbaa !14
  %arrayidx673 = getelementptr inbounds i8, i8* %337, i64 %338
  store i8 39, i8* %arrayidx673, align 1, !tbaa !13
  br label %if.end674

if.end674:                                        ; preds = %if.then672, %do.body669
  %339 = load i64, i64* %len, align 8, !tbaa !14
  %inc675 = add i64 %339, 1
  store i64 %inc675, i64* %len, align 8, !tbaa !14
  br label %do.cond676

do.cond676:                                       ; preds = %if.end674
  br label %do.end677

do.end677:                                        ; preds = %do.cond676
  br label %do.body678

do.body678:                                       ; preds = %do.end677
  %340 = load i64, i64* %len, align 8, !tbaa !14
  %341 = load i64, i64* %buffersize.addr, align 8, !tbaa !14
  %cmp679 = icmp ult i64 %340, %341
  br i1 %cmp679, label %if.then681, label %if.end683

if.then681:                                       ; preds = %do.body678
  %342 = load i8*, i8** %buffer.addr, align 8, !tbaa !6
  %343 = load i64, i64* %len, align 8, !tbaa !14
  %arrayidx682 = getelementptr inbounds i8, i8* %342, i64 %343
  store i8 39, i8* %arrayidx682, align 1, !tbaa !13
  br label %if.end683

if.end683:                                        ; preds = %if.then681, %do.body678
  %344 = load i64, i64* %len, align 8, !tbaa !14
  %inc684 = add i64 %344, 1
  store i64 %inc684, i64* %len, align 8, !tbaa !14
  br label %do.cond685

do.cond685:                                       ; preds = %if.end683
  br label %do.end686

do.end686:                                        ; preds = %do.cond685
  store i8 0, i8* %pending_shell_escape_end, align 1, !tbaa !11
  br label %if.end687

if.end687:                                        ; preds = %do.end686, %land.lhs.true666, %do.body663
  br label %do.cond688

do.cond688:                                       ; preds = %if.end687
  br label %do.end689

do.end689:                                        ; preds = %do.cond688
  br label %do.body690

do.body690:                                       ; preds = %do.end689
  %345 = load i64, i64* %len, align 8, !tbaa !14
  %346 = load i64, i64* %buffersize.addr, align 8, !tbaa !14
  %cmp691 = icmp ult i64 %345, %346
  br i1 %cmp691, label %if.then693, label %if.end695

if.then693:                                       ; preds = %do.body690
  %347 = load i8, i8* %c, align 1, !tbaa !13
  %348 = load i8*, i8** %buffer.addr, align 8, !tbaa !6
  %349 = load i64, i64* %len, align 8, !tbaa !14
  %arrayidx694 = getelementptr inbounds i8, i8* %348, i64 %349
  store i8 %347, i8* %arrayidx694, align 1, !tbaa !13
  br label %if.end695

if.end695:                                        ; preds = %if.then693, %do.body690
  %350 = load i64, i64* %len, align 8, !tbaa !14
  %inc696 = add i64 %350, 1
  store i64 %inc696, i64* %len, align 8, !tbaa !14
  br label %do.cond697

do.cond697:                                       ; preds = %if.end695
  br label %do.end698

do.end698:                                        ; preds = %do.cond697
  %351 = load i8, i8* %c_and_shell_quote_compat, align 1, !tbaa !11, !range !25
  %tobool699 = trunc i8 %351 to i1
  br i1 %tobool699, label %if.end701, label %if.then700

if.then700:                                       ; preds = %do.end698
  store i8 0, i8* %all_c_and_shell_quote_compat, align 1, !tbaa !11
  br label %if.end701

if.end701:                                        ; preds = %if.then700, %do.end698
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup702

cleanup702:                                       ; preds = %if.then617, %if.then315, %if.then308, %if.then278, %if.then261, %if.then203, %if.then182, %if.then90, %if.then80, %if.end701, %cleanup589, %if.then176
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %c_and_shell_quote_compat) #13
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %escaping) #13
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %is_right_quote) #13
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %esc) #13
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %c) #13
  %cleanup.dest707 = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest707, label %cleanup775 [
    i32 0, label %cleanup.cont708
    i32 15, label %for.inc709
    i32 16, label %force_outer_quoting_style
  ]

cleanup.cont708:                                  ; preds = %cleanup702
  br label %for.inc709

for.inc709:                                       ; preds = %cleanup.cont708, %cleanup702
  %352 = load i64, i64* %i, align 8, !tbaa !14
  %inc710 = add i64 %352, 1
  store i64 %inc710, i64* %i, align 8, !tbaa !14
  br label %for.cond46

for.end711:                                       ; preds = %cond.end
  %353 = load i64, i64* %len, align 8, !tbaa !14
  %cmp712 = icmp eq i64 %353, 0
  br i1 %cmp712, label %land.lhs.true714, label %if.end721

land.lhs.true714:                                 ; preds = %for.end711
  %354 = load i32, i32* %quoting_style.addr, align 4, !tbaa !13
  %cmp715 = icmp eq i32 %354, 2
  br i1 %cmp715, label %land.lhs.true717, label %if.end721

land.lhs.true717:                                 ; preds = %land.lhs.true714
  %355 = load i8, i8* %elide_outer_quotes, align 1, !tbaa !11, !range !25
  %tobool718 = trunc i8 %355 to i1
  br i1 %tobool718, label %if.then720, label %if.end721

if.then720:                                       ; preds = %land.lhs.true717
  br label %force_outer_quoting_style

if.end721:                                        ; preds = %land.lhs.true717, %land.lhs.true714, %for.end711
  %356 = load i32, i32* %quoting_style.addr, align 4, !tbaa !13
  %cmp722 = icmp eq i32 %356, 2
  br i1 %cmp722, label %land.lhs.true724, label %if.end740

land.lhs.true724:                                 ; preds = %if.end721
  %357 = load i8, i8* %elide_outer_quotes, align 1, !tbaa !11, !range !25
  %tobool725 = trunc i8 %357 to i1
  br i1 %tobool725, label %if.end740, label %land.lhs.true726

land.lhs.true726:                                 ; preds = %land.lhs.true724
  %358 = load i8, i8* %encountered_single_quote, align 1, !tbaa !11, !range !25
  %tobool727 = trunc i8 %358 to i1
  br i1 %tobool727, label %if.then729, label %if.end740

if.then729:                                       ; preds = %land.lhs.true726
  %359 = load i8, i8* %all_c_and_shell_quote_compat, align 1, !tbaa !11, !range !25
  %tobool730 = trunc i8 %359 to i1
  br i1 %tobool730, label %if.then731, label %if.else733

if.then731:                                       ; preds = %if.then729
  %360 = load i8*, i8** %buffer.addr, align 8, !tbaa !6
  %361 = load i64, i64* %orig_buffersize, align 8, !tbaa !14
  %362 = load i8*, i8** %arg.addr, align 8, !tbaa !6
  %363 = load i64, i64* %argsize.addr, align 8, !tbaa !14
  %364 = load i32, i32* %flags.addr, align 4, !tbaa !2
  %365 = load i32*, i32** %quote_these_too.addr, align 8, !tbaa !6
  %366 = load i8*, i8** %left_quote.addr, align 8, !tbaa !6
  %367 = load i8*, i8** %right_quote.addr, align 8, !tbaa !6
  %call732 = call i64 @quotearg_buffer_restyled(i8* %360, i64 %361, i8* %362, i64 %363, i32 5, i32 %364, i32* %365, i8* %366, i8* %367)
  store i64 %call732, i64* %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup775

if.else733:                                       ; preds = %if.then729
  %368 = load i64, i64* %buffersize.addr, align 8, !tbaa !14
  %tobool734 = icmp ne i64 %368, 0
  br i1 %tobool734, label %if.end738, label %land.lhs.true735

land.lhs.true735:                                 ; preds = %if.else733
  %369 = load i64, i64* %orig_buffersize, align 8, !tbaa !14
  %tobool736 = icmp ne i64 %369, 0
  br i1 %tobool736, label %if.then737, label %if.end738

if.then737:                                       ; preds = %land.lhs.true735
  %370 = load i64, i64* %orig_buffersize, align 8, !tbaa !14
  store i64 %370, i64* %buffersize.addr, align 8, !tbaa !14
  store i64 0, i64* %len, align 8, !tbaa !14
  br label %process_input

if.end738:                                        ; preds = %land.lhs.true735, %if.else733
  br label %if.end739

if.end739:                                        ; preds = %if.end738
  br label %if.end740

if.end740:                                        ; preds = %if.end739, %land.lhs.true726, %land.lhs.true724, %if.end721
  %371 = load i8*, i8** %quote_string, align 8, !tbaa !6
  %tobool741 = icmp ne i8* %371, null
  br i1 %tobool741, label %land.lhs.true742, label %if.end760

land.lhs.true742:                                 ; preds = %if.end740
  %372 = load i8, i8* %elide_outer_quotes, align 1, !tbaa !11, !range !25
  %tobool743 = trunc i8 %372 to i1
  br i1 %tobool743, label %if.end760, label %if.then744

if.then744:                                       ; preds = %land.lhs.true742
  br label %for.cond745

for.cond745:                                      ; preds = %for.inc757, %if.then744
  %373 = load i8*, i8** %quote_string, align 8, !tbaa !6
  %374 = load i8, i8* %373, align 1, !tbaa !13
  %tobool746 = icmp ne i8 %374, 0
  br i1 %tobool746, label %for.body747, label %for.end759

for.body747:                                      ; preds = %for.cond745
  br label %do.body748

do.body748:                                       ; preds = %for.body747
  %375 = load i64, i64* %len, align 8, !tbaa !14
  %376 = load i64, i64* %buffersize.addr, align 8, !tbaa !14
  %cmp749 = icmp ult i64 %375, %376
  br i1 %cmp749, label %if.then751, label %if.end753

if.then751:                                       ; preds = %do.body748
  %377 = load i8*, i8** %quote_string, align 8, !tbaa !6
  %378 = load i8, i8* %377, align 1, !tbaa !13
  %379 = load i8*, i8** %buffer.addr, align 8, !tbaa !6
  %380 = load i64, i64* %len, align 8, !tbaa !14
  %arrayidx752 = getelementptr inbounds i8, i8* %379, i64 %380
  store i8 %378, i8* %arrayidx752, align 1, !tbaa !13
  br label %if.end753

if.end753:                                        ; preds = %if.then751, %do.body748
  %381 = load i64, i64* %len, align 8, !tbaa !14
  %inc754 = add i64 %381, 1
  store i64 %inc754, i64* %len, align 8, !tbaa !14
  br label %do.cond755

do.cond755:                                       ; preds = %if.end753
  br label %do.end756

do.end756:                                        ; preds = %do.cond755
  br label %for.inc757

for.inc757:                                       ; preds = %do.end756
  %382 = load i8*, i8** %quote_string, align 8, !tbaa !6
  %incdec.ptr758 = getelementptr inbounds i8, i8* %382, i32 1
  store i8* %incdec.ptr758, i8** %quote_string, align 8, !tbaa !6
  br label %for.cond745

for.end759:                                       ; preds = %for.cond745
  br label %if.end760

if.end760:                                        ; preds = %for.end759, %land.lhs.true742, %if.end740
  %383 = load i64, i64* %len, align 8, !tbaa !14
  %384 = load i64, i64* %buffersize.addr, align 8, !tbaa !14
  %cmp761 = icmp ult i64 %383, %384
  br i1 %cmp761, label %if.then763, label %if.end765

if.then763:                                       ; preds = %if.end760
  %385 = load i8*, i8** %buffer.addr, align 8, !tbaa !6
  %386 = load i64, i64* %len, align 8, !tbaa !14
  %arrayidx764 = getelementptr inbounds i8, i8* %385, i64 %386
  store i8 0, i8* %arrayidx764, align 1, !tbaa !13
  br label %if.end765

if.end765:                                        ; preds = %if.then763, %if.end760
  %387 = load i64, i64* %len, align 8, !tbaa !14
  store i64 %387, i64* %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup775

force_outer_quoting_style:                        ; preds = %cleanup702, %if.then720
  %388 = load i32, i32* %quoting_style.addr, align 4, !tbaa !13
  %cmp766 = icmp eq i32 %388, 2
  br i1 %cmp766, label %land.lhs.true768, label %if.end772

land.lhs.true768:                                 ; preds = %force_outer_quoting_style
  %389 = load i8, i8* %backslash_escapes, align 1, !tbaa !11, !range !25
  %tobool769 = trunc i8 %389 to i1
  br i1 %tobool769, label %if.then771, label %if.end772

if.then771:                                       ; preds = %land.lhs.true768
  store i32 4, i32* %quoting_style.addr, align 4, !tbaa !13
  br label %if.end772

if.end772:                                        ; preds = %if.then771, %land.lhs.true768, %force_outer_quoting_style
  %390 = load i8*, i8** %buffer.addr, align 8, !tbaa !6
  %391 = load i64, i64* %buffersize.addr, align 8, !tbaa !14
  %392 = load i8*, i8** %arg.addr, align 8, !tbaa !6
  %393 = load i64, i64* %argsize.addr, align 8, !tbaa !14
  %394 = load i32, i32* %quoting_style.addr, align 4, !tbaa !13
  %395 = load i32, i32* %flags.addr, align 4, !tbaa !2
  %and773 = and i32 %395, -3
  %396 = load i8*, i8** %left_quote.addr, align 8, !tbaa !6
  %397 = load i8*, i8** %right_quote.addr, align 8, !tbaa !6
  %call774 = call i64 @quotearg_buffer_restyled(i8* %390, i64 %391, i8* %392, i64 %393, i32 %394, i32 %and773, i32* null, i8* %396, i8* %397)
  store i64 %call774, i64* %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup775

cleanup775:                                       ; preds = %if.end772, %if.end765, %if.then731, %cleanup702
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %all_c_and_shell_quote_compat) #13
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %encountered_single_quote) #13
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %pending_shell_escape_end) #13
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %elide_outer_quotes) #13
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %unibyte_locale) #13
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %backslash_escapes) #13
  %398 = bitcast i64* %quote_string_len to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %398) #13
  %399 = bitcast i8** %quote_string to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %399) #13
  %400 = bitcast i64* %orig_buffersize to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %400) #13
  %401 = bitcast i64* %len to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %401) #13
  %402 = bitcast i64* %i to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %402) #13
  %403 = load i64, i64* %retval, align 8
  ret i64 %403
}

; Function Attrs: nounwind uwtable
define internal i8* @gettext_quote(i8* %msgid, i32 %s) #7 {
entry:
  %retval = alloca i8*, align 8
  %msgid.addr = alloca i8*, align 8
  %s.addr = alloca i32, align 4
  %translation = alloca i8*, align 8
  %locale_code = alloca i8*, align 8
  %cleanup.dest.slot = alloca i32, align 4
  store i8* %msgid, i8** %msgid.addr, align 8, !tbaa !6
  store i32 %s, i32* %s.addr, align 4, !tbaa !13
  %0 = bitcast i8** %translation to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #13
  %1 = load i8*, i8** %msgid.addr, align 8, !tbaa !6
  store i8* %1, i8** %translation, align 8, !tbaa !6
  %2 = bitcast i8** %locale_code to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %2) #13
  %3 = load i8*, i8** %translation, align 8, !tbaa !6
  %4 = load i8*, i8** %msgid.addr, align 8, !tbaa !6
  %cmp = icmp ne i8* %3, %4
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %5 = load i8*, i8** %translation, align 8, !tbaa !6
  store i8* %5, i8** %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %entry
  %call = call i8* @locale_charset()
  store i8* %call, i8** %locale_code, align 8, !tbaa !6
  %6 = load i8*, i8** %locale_code, align 8, !tbaa !6
  %call1 = call i32 @c_strcasecmp(i8* %6, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.13.270, i64 0, i64 0)) #22
  %cmp2 = icmp eq i32 %call1, 0
  br i1 %cmp2, label %if.then3, label %if.end6

if.then3:                                         ; preds = %if.end
  %7 = load i8*, i8** %msgid.addr, align 8, !tbaa !6
  %arrayidx = getelementptr inbounds i8, i8* %7, i64 0
  %8 = load i8, i8* %arrayidx, align 1, !tbaa !13
  %conv = sext i8 %8 to i32
  %cmp4 = icmp eq i32 %conv, 96
  %9 = zext i1 %cmp4 to i64
  %cond = select i1 %cmp4, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.14.271, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.15.272, i64 0, i64 0)
  store i8* %cond, i8** %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end6:                                          ; preds = %if.end
  %10 = load i8*, i8** %locale_code, align 8, !tbaa !6
  %call7 = call i32 @c_strcasecmp(i8* %10, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16.273, i64 0, i64 0)) #22
  %cmp8 = icmp eq i32 %call7, 0
  br i1 %cmp8, label %if.then10, label %if.end16

if.then10:                                        ; preds = %if.end6
  %11 = load i8*, i8** %msgid.addr, align 8, !tbaa !6
  %arrayidx11 = getelementptr inbounds i8, i8* %11, i64 0
  %12 = load i8, i8* %arrayidx11, align 1, !tbaa !13
  %conv12 = sext i8 %12 to i32
  %cmp13 = icmp eq i32 %conv12, 96
  %13 = zext i1 %cmp13 to i64
  %cond15 = select i1 %cmp13, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.17.274, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.18.275, i64 0, i64 0)
  store i8* %cond15, i8** %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end16:                                         ; preds = %if.end6
  %14 = load i32, i32* %s.addr, align 4, !tbaa !13
  %cmp17 = icmp eq i32 %14, 9
  %15 = zext i1 %cmp17 to i64
  %cond19 = select i1 %cmp17, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10.267, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12.269, i64 0, i64 0)
  store i8* %cond19, i8** %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end16, %if.then10, %if.then3, %if.then
  %16 = bitcast i8** %locale_code to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %16) #13
  %17 = bitcast i8** %translation to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %17) #13
  %18 = load i8*, i8** %retval, align 8
  ret i8* %18
}

; Function Attrs: nounwind
declare dso_local i32 @iswprint(i32) #6

; Function Attrs: nounwind uwtable
define dso_local noalias nonnull i8* @quotearg_alloc(i8* %arg, i64 %argsize, %struct.quoting_options* %o) #7 {
entry:
  %arg.addr = alloca i8*, align 8
  %argsize.addr = alloca i64, align 8
  %o.addr = alloca %struct.quoting_options*, align 8
  store i8* %arg, i8** %arg.addr, align 8, !tbaa !6
  store i64 %argsize, i64* %argsize.addr, align 8, !tbaa !14
  store %struct.quoting_options* %o, %struct.quoting_options** %o.addr, align 8, !tbaa !6
  %0 = load i8*, i8** %arg.addr, align 8, !tbaa !6
  %1 = load i64, i64* %argsize.addr, align 8, !tbaa !14
  %2 = load %struct.quoting_options*, %struct.quoting_options** %o.addr, align 8, !tbaa !6
  %call = call noalias nonnull i8* @quotearg_alloc_mem(i8* %0, i64 %1, i64* null, %struct.quoting_options* %2)
  ret i8* %call
}

; Function Attrs: nounwind uwtable
define dso_local noalias nonnull i8* @quotearg_alloc_mem(i8* %arg, i64 %argsize, i64* %size, %struct.quoting_options* %o) #7 {
entry:
  %arg.addr = alloca i8*, align 8
  %argsize.addr = alloca i64, align 8
  %size.addr = alloca i64*, align 8
  %o.addr = alloca %struct.quoting_options*, align 8
  %p = alloca %struct.quoting_options*, align 8
  %e = alloca i32, align 4
  %flags = alloca i32, align 4
  %bufsize = alloca i64, align 8
  %buf = alloca i8*, align 8
  store i8* %arg, i8** %arg.addr, align 8, !tbaa !6
  store i64 %argsize, i64* %argsize.addr, align 8, !tbaa !14
  store i64* %size, i64** %size.addr, align 8, !tbaa !6
  store %struct.quoting_options* %o, %struct.quoting_options** %o.addr, align 8, !tbaa !6
  %0 = bitcast %struct.quoting_options** %p to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #13
  %1 = load %struct.quoting_options*, %struct.quoting_options** %o.addr, align 8, !tbaa !6
  %tobool = icmp ne %struct.quoting_options* %1, null
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %2 = load %struct.quoting_options*, %struct.quoting_options** %o.addr, align 8, !tbaa !6
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.quoting_options* [ %2, %cond.true ], [ @default_quoting_options, %cond.false ]
  store %struct.quoting_options* %cond, %struct.quoting_options** %p, align 8, !tbaa !6
  %3 = bitcast i32* %e to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %3) #13
  %call = call i32* @__errno_location() #26
  %4 = load i32, i32* %call, align 4, !tbaa !2
  store i32 %4, i32* %e, align 4, !tbaa !2
  %5 = bitcast i32* %flags to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %5) #13
  %6 = load %struct.quoting_options*, %struct.quoting_options** %p, align 8, !tbaa !6
  %flags1 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %6, i32 0, i32 1
  %7 = load i32, i32* %flags1, align 4, !tbaa !154
  %8 = load i64*, i64** %size.addr, align 8, !tbaa !6
  %tobool2 = icmp ne i64* %8, null
  %9 = zext i1 %tobool2 to i64
  %cond3 = select i1 %tobool2, i32 0, i32 1
  %or = or i32 %7, %cond3
  store i32 %or, i32* %flags, align 4, !tbaa !2
  %10 = bitcast i64* %bufsize to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %10) #13
  %11 = load i8*, i8** %arg.addr, align 8, !tbaa !6
  %12 = load i64, i64* %argsize.addr, align 8, !tbaa !14
  %13 = load %struct.quoting_options*, %struct.quoting_options** %p, align 8, !tbaa !6
  %style = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %13, i32 0, i32 0
  %14 = load i32, i32* %style, align 8, !tbaa !152
  %15 = load i32, i32* %flags, align 4, !tbaa !2
  %16 = load %struct.quoting_options*, %struct.quoting_options** %p, align 8, !tbaa !6
  %quote_these_too = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %16, i32 0, i32 2
  %arraydecay = getelementptr inbounds [8 x i32], [8 x i32]* %quote_these_too, i64 0, i64 0
  %17 = load %struct.quoting_options*, %struct.quoting_options** %p, align 8, !tbaa !6
  %left_quote = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %17, i32 0, i32 3
  %18 = load i8*, i8** %left_quote, align 8, !tbaa !155
  %19 = load %struct.quoting_options*, %struct.quoting_options** %p, align 8, !tbaa !6
  %right_quote = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %19, i32 0, i32 4
  %20 = load i8*, i8** %right_quote, align 8, !tbaa !156
  %call4 = call i64 @quotearg_buffer_restyled(i8* null, i64 0, i8* %11, i64 %12, i32 %14, i32 %15, i32* %arraydecay, i8* %18, i8* %20)
  %add = add i64 %call4, 1
  store i64 %add, i64* %bufsize, align 8, !tbaa !14
  %21 = bitcast i8** %buf to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %21) #13
  %22 = load i64, i64* %bufsize, align 8, !tbaa !14
  %call5 = call noalias nonnull i8* @xcharalloc(i64 %22) #25
  store i8* %call5, i8** %buf, align 8, !tbaa !6
  %23 = load i8*, i8** %buf, align 8, !tbaa !6
  %24 = load i64, i64* %bufsize, align 8, !tbaa !14
  %25 = load i8*, i8** %arg.addr, align 8, !tbaa !6
  %26 = load i64, i64* %argsize.addr, align 8, !tbaa !14
  %27 = load %struct.quoting_options*, %struct.quoting_options** %p, align 8, !tbaa !6
  %style6 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %27, i32 0, i32 0
  %28 = load i32, i32* %style6, align 8, !tbaa !152
  %29 = load i32, i32* %flags, align 4, !tbaa !2
  %30 = load %struct.quoting_options*, %struct.quoting_options** %p, align 8, !tbaa !6
  %quote_these_too7 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %30, i32 0, i32 2
  %arraydecay8 = getelementptr inbounds [8 x i32], [8 x i32]* %quote_these_too7, i64 0, i64 0
  %31 = load %struct.quoting_options*, %struct.quoting_options** %p, align 8, !tbaa !6
  %left_quote9 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %31, i32 0, i32 3
  %32 = load i8*, i8** %left_quote9, align 8, !tbaa !155
  %33 = load %struct.quoting_options*, %struct.quoting_options** %p, align 8, !tbaa !6
  %right_quote10 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %33, i32 0, i32 4
  %34 = load i8*, i8** %right_quote10, align 8, !tbaa !156
  %call11 = call i64 @quotearg_buffer_restyled(i8* %23, i64 %24, i8* %25, i64 %26, i32 %28, i32 %29, i32* %arraydecay8, i8* %32, i8* %34)
  %35 = load i32, i32* %e, align 4, !tbaa !2
  %call12 = call i32* @__errno_location() #26
  store i32 %35, i32* %call12, align 4, !tbaa !2
  %36 = load i64*, i64** %size.addr, align 8, !tbaa !6
  %tobool13 = icmp ne i64* %36, null
  br i1 %tobool13, label %if.then, label %if.end

if.then:                                          ; preds = %cond.end
  %37 = load i64, i64* %bufsize, align 8, !tbaa !14
  %sub = sub i64 %37, 1
  %38 = load i64*, i64** %size.addr, align 8, !tbaa !6
  store i64 %sub, i64* %38, align 8, !tbaa !14
  br label %if.end

if.end:                                           ; preds = %if.then, %cond.end
  %39 = load i8*, i8** %buf, align 8, !tbaa !6
  %40 = bitcast i8** %buf to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %40) #13
  %41 = bitcast i64* %bufsize to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %41) #13
  %42 = bitcast i32* %flags to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %42) #13
  %43 = bitcast i32* %e to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %43) #13
  %44 = bitcast %struct.quoting_options** %p to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %44) #13
  ret i8* %39
}

; Function Attrs: nounwind uwtable
define dso_local void @quotearg_free() #7 {
entry:
  %sv = alloca %struct.slotvec*, align 8
  %i = alloca i32, align 4
  %0 = bitcast %struct.slotvec** %sv to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #13
  %1 = load %struct.slotvec*, %struct.slotvec** @slotvec, align 8, !tbaa !6
  store %struct.slotvec* %1, %struct.slotvec** %sv, align 8, !tbaa !6
  %2 = bitcast i32* %i to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %2) #13
  store i32 1, i32* %i, align 4, !tbaa !2
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i32, i32* %i, align 4, !tbaa !2
  %4 = load i32, i32* @nslots, align 4, !tbaa !2
  %cmp = icmp slt i32 %3, %4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load %struct.slotvec*, %struct.slotvec** %sv, align 8, !tbaa !6
  %6 = load i32, i32* %i, align 4, !tbaa !2
  %idxprom = sext i32 %6 to i64
  %arrayidx = getelementptr inbounds %struct.slotvec, %struct.slotvec* %5, i64 %idxprom
  %val = getelementptr inbounds %struct.slotvec, %struct.slotvec* %arrayidx, i32 0, i32 1
  %7 = load i8*, i8** %val, align 8, !tbaa !157
  call void @rpl_free(i8* %7)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %8 = load i32, i32* %i, align 4, !tbaa !2
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %i, align 4, !tbaa !2
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %9 = load %struct.slotvec*, %struct.slotvec** %sv, align 8, !tbaa !6
  %arrayidx1 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %9, i64 0
  %val2 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %arrayidx1, i32 0, i32 1
  %10 = load i8*, i8** %val2, align 8, !tbaa !157
  %cmp3 = icmp ne i8* %10, getelementptr inbounds ([256 x i8], [256 x i8]* @slot0, i64 0, i64 0)
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %for.end
  %11 = load %struct.slotvec*, %struct.slotvec** %sv, align 8, !tbaa !6
  %arrayidx4 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %11, i64 0
  %val5 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %arrayidx4, i32 0, i32 1
  %12 = load i8*, i8** %val5, align 8, !tbaa !157
  call void @rpl_free(i8* %12)
  store i64 256, i64* getelementptr inbounds (%struct.slotvec, %struct.slotvec* @slotvec0, i32 0, i32 0), align 8, !tbaa !159
  store i8* getelementptr inbounds ([256 x i8], [256 x i8]* @slot0, i64 0, i64 0), i8** getelementptr inbounds (%struct.slotvec, %struct.slotvec* @slotvec0, i32 0, i32 1), align 8, !tbaa !157
  br label %if.end

if.end:                                           ; preds = %if.then, %for.end
  %13 = load %struct.slotvec*, %struct.slotvec** %sv, align 8, !tbaa !6
  %cmp6 = icmp ne %struct.slotvec* %13, @slotvec0
  br i1 %cmp6, label %if.then7, label %if.end8

if.then7:                                         ; preds = %if.end
  %14 = load %struct.slotvec*, %struct.slotvec** %sv, align 8, !tbaa !6
  %15 = bitcast %struct.slotvec* %14 to i8*
  call void @rpl_free(i8* %15)
  store %struct.slotvec* @slotvec0, %struct.slotvec** @slotvec, align 8, !tbaa !6
  br label %if.end8

if.end8:                                          ; preds = %if.then7, %if.end
  store i32 1, i32* @nslots, align 4, !tbaa !2
  %16 = bitcast i32* %i to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %16) #13
  %17 = bitcast %struct.slotvec** %sv to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %17) #13
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i8* @quotearg_n(i32 %n, i8* %arg) #7 {
entry:
  %n.addr = alloca i32, align 4
  %arg.addr = alloca i8*, align 8
  store i32 %n, i32* %n.addr, align 4, !tbaa !2
  store i8* %arg, i8** %arg.addr, align 8, !tbaa !6
  %0 = load i32, i32* %n.addr, align 4, !tbaa !2
  %1 = load i8*, i8** %arg.addr, align 8, !tbaa !6
  %call = call i8* @quotearg_n_options(i32 %0, i8* %1, i64 -1, %struct.quoting_options* @default_quoting_options)
  ret i8* %call
}

; Function Attrs: nounwind uwtable
define internal i8* @quotearg_n_options(i32 %n, i8* %arg, i64 %argsize, %struct.quoting_options* %options) #7 {
entry:
  %n.addr = alloca i32, align 4
  %arg.addr = alloca i8*, align 8
  %argsize.addr = alloca i64, align 8
  %options.addr = alloca %struct.quoting_options*, align 8
  %e = alloca i32, align 4
  %sv = alloca %struct.slotvec*, align 8
  %nslots_max = alloca i32, align 4
  %preallocated = alloca i8, align 1
  %new_nslots = alloca i64, align 8
  %size = alloca i64, align 8
  %val = alloca i8*, align 8
  %flags = alloca i32, align 4
  %qsize = alloca i64, align 8
  store i32 %n, i32* %n.addr, align 4, !tbaa !2
  store i8* %arg, i8** %arg.addr, align 8, !tbaa !6
  store i64 %argsize, i64* %argsize.addr, align 8, !tbaa !14
  store %struct.quoting_options* %options, %struct.quoting_options** %options.addr, align 8, !tbaa !6
  %0 = bitcast i32* %e to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #13
  %call = call i32* @__errno_location() #26
  %1 = load i32, i32* %call, align 4, !tbaa !2
  store i32 %1, i32* %e, align 4, !tbaa !2
  %2 = bitcast %struct.slotvec** %sv to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %2) #13
  %3 = load %struct.slotvec*, %struct.slotvec** @slotvec, align 8, !tbaa !6
  store %struct.slotvec* %3, %struct.slotvec** %sv, align 8, !tbaa !6
  %4 = bitcast i32* %nslots_max to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %4) #13
  store i32 2147483647, i32* %nslots_max, align 4, !tbaa !2
  %5 = load i32, i32* %n.addr, align 4, !tbaa !2
  %cmp = icmp sle i32 0, %5
  br i1 %cmp, label %land.lhs.true, label %if.then

land.lhs.true:                                    ; preds = %entry
  %6 = load i32, i32* %n.addr, align 4, !tbaa !2
  %7 = load i32, i32* %nslots_max, align 4, !tbaa !2
  %cmp1 = icmp slt i32 %6, %7
  br i1 %cmp1, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true, %entry
  call void @abort() #21
  unreachable

if.end:                                           ; preds = %land.lhs.true
  %8 = load i32, i32* @nslots, align 4, !tbaa !2
  %9 = load i32, i32* %n.addr, align 4, !tbaa !2
  %cmp2 = icmp sle i32 %8, %9
  br i1 %cmp2, label %if.then3, label %if.end15

if.then3:                                         ; preds = %if.end
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %preallocated) #13
  %10 = load %struct.slotvec*, %struct.slotvec** %sv, align 8, !tbaa !6
  %cmp4 = icmp eq %struct.slotvec* %10, @slotvec0
  %frombool = zext i1 %cmp4 to i8
  store i8 %frombool, i8* %preallocated, align 1, !tbaa !11
  %11 = bitcast i64* %new_nslots to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %11) #13
  %12 = load i32, i32* @nslots, align 4, !tbaa !2
  %conv = sext i32 %12 to i64
  store i64 %conv, i64* %new_nslots, align 8, !tbaa !14
  %13 = load i8, i8* %preallocated, align 1, !tbaa !11, !range !25
  %tobool = trunc i8 %13 to i1
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then3
  br label %cond.end

cond.false:                                       ; preds = %if.then3
  %14 = load %struct.slotvec*, %struct.slotvec** %sv, align 8, !tbaa !6
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.slotvec* [ null, %cond.true ], [ %14, %cond.false ]
  %15 = bitcast %struct.slotvec* %cond to i8*
  %16 = load i32, i32* %n.addr, align 4, !tbaa !2
  %17 = load i32, i32* @nslots, align 4, !tbaa !2
  %sub = sub nsw i32 %16, %17
  %add = add nsw i32 %sub, 1
  %conv6 = sext i32 %add to i64
  %18 = load i32, i32* %nslots_max, align 4, !tbaa !2
  %conv7 = sext i32 %18 to i64
  %call8 = call nonnull i8* @xpalloc(i8* %15, i64* %new_nslots, i64 %conv6, i64 %conv7, i64 16)
  %19 = bitcast i8* %call8 to %struct.slotvec*
  store %struct.slotvec* %19, %struct.slotvec** %sv, align 8, !tbaa !6
  store %struct.slotvec* %19, %struct.slotvec** @slotvec, align 8, !tbaa !6
  %20 = load i8, i8* %preallocated, align 1, !tbaa !11, !range !25
  %tobool9 = trunc i8 %20 to i1
  br i1 %tobool9, label %if.then10, label %if.end11

if.then10:                                        ; preds = %cond.end
  %21 = load %struct.slotvec*, %struct.slotvec** %sv, align 8, !tbaa !6
  %22 = bitcast %struct.slotvec* %21 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %22, i8* align 8 bitcast (%struct.slotvec* @slotvec0 to i8*), i64 16, i1 false), !tbaa.struct !160
  br label %if.end11

if.end11:                                         ; preds = %if.then10, %cond.end
  %23 = load %struct.slotvec*, %struct.slotvec** %sv, align 8, !tbaa !6
  %24 = load i32, i32* @nslots, align 4, !tbaa !2
  %idx.ext = sext i32 %24 to i64
  %add.ptr = getelementptr inbounds %struct.slotvec, %struct.slotvec* %23, i64 %idx.ext
  %25 = bitcast %struct.slotvec* %add.ptr to i8*
  %26 = load i64, i64* %new_nslots, align 8, !tbaa !14
  %27 = load i32, i32* @nslots, align 4, !tbaa !2
  %conv12 = sext i32 %27 to i64
  %sub13 = sub nsw i64 %26, %conv12
  %mul = mul i64 %sub13, 16
  call void @llvm.memset.p0i8.i64(i8* align 8 %25, i8 0, i64 %mul, i1 false)
  %28 = load i64, i64* %new_nslots, align 8, !tbaa !14
  %conv14 = trunc i64 %28 to i32
  store i32 %conv14, i32* @nslots, align 4, !tbaa !2
  %29 = bitcast i64* %new_nslots to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %29) #13
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %preallocated) #13
  br label %if.end15

if.end15:                                         ; preds = %if.end11, %if.end
  %30 = bitcast i64* %size to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %30) #13
  %31 = load %struct.slotvec*, %struct.slotvec** %sv, align 8, !tbaa !6
  %32 = load i32, i32* %n.addr, align 4, !tbaa !2
  %idxprom = sext i32 %32 to i64
  %arrayidx = getelementptr inbounds %struct.slotvec, %struct.slotvec* %31, i64 %idxprom
  %size16 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %arrayidx, i32 0, i32 0
  %33 = load i64, i64* %size16, align 8, !tbaa !159
  store i64 %33, i64* %size, align 8, !tbaa !14
  %34 = bitcast i8** %val to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %34) #13
  %35 = load %struct.slotvec*, %struct.slotvec** %sv, align 8, !tbaa !6
  %36 = load i32, i32* %n.addr, align 4, !tbaa !2
  %idxprom17 = sext i32 %36 to i64
  %arrayidx18 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %35, i64 %idxprom17
  %val19 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %arrayidx18, i32 0, i32 1
  %37 = load i8*, i8** %val19, align 8, !tbaa !157
  store i8* %37, i8** %val, align 8, !tbaa !6
  %38 = bitcast i32* %flags to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %38) #13
  %39 = load %struct.quoting_options*, %struct.quoting_options** %options.addr, align 8, !tbaa !6
  %flags20 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %39, i32 0, i32 1
  %40 = load i32, i32* %flags20, align 4, !tbaa !154
  %or = or i32 %40, 1
  store i32 %or, i32* %flags, align 4, !tbaa !2
  %41 = bitcast i64* %qsize to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %41) #13
  %42 = load i8*, i8** %val, align 8, !tbaa !6
  %43 = load i64, i64* %size, align 8, !tbaa !14
  %44 = load i8*, i8** %arg.addr, align 8, !tbaa !6
  %45 = load i64, i64* %argsize.addr, align 8, !tbaa !14
  %46 = load %struct.quoting_options*, %struct.quoting_options** %options.addr, align 8, !tbaa !6
  %style = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %46, i32 0, i32 0
  %47 = load i32, i32* %style, align 8, !tbaa !152
  %48 = load i32, i32* %flags, align 4, !tbaa !2
  %49 = load %struct.quoting_options*, %struct.quoting_options** %options.addr, align 8, !tbaa !6
  %quote_these_too = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %49, i32 0, i32 2
  %arraydecay = getelementptr inbounds [8 x i32], [8 x i32]* %quote_these_too, i64 0, i64 0
  %50 = load %struct.quoting_options*, %struct.quoting_options** %options.addr, align 8, !tbaa !6
  %left_quote = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %50, i32 0, i32 3
  %51 = load i8*, i8** %left_quote, align 8, !tbaa !155
  %52 = load %struct.quoting_options*, %struct.quoting_options** %options.addr, align 8, !tbaa !6
  %right_quote = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %52, i32 0, i32 4
  %53 = load i8*, i8** %right_quote, align 8, !tbaa !156
  %call21 = call i64 @quotearg_buffer_restyled(i8* %42, i64 %43, i8* %44, i64 %45, i32 %47, i32 %48, i32* %arraydecay, i8* %51, i8* %53)
  store i64 %call21, i64* %qsize, align 8, !tbaa !14
  %54 = load i64, i64* %size, align 8, !tbaa !14
  %55 = load i64, i64* %qsize, align 8, !tbaa !14
  %cmp22 = icmp ule i64 %54, %55
  br i1 %cmp22, label %if.then24, label %if.end43

if.then24:                                        ; preds = %if.end15
  %56 = load i64, i64* %qsize, align 8, !tbaa !14
  %add25 = add i64 %56, 1
  store i64 %add25, i64* %size, align 8, !tbaa !14
  %57 = load %struct.slotvec*, %struct.slotvec** %sv, align 8, !tbaa !6
  %58 = load i32, i32* %n.addr, align 4, !tbaa !2
  %idxprom26 = sext i32 %58 to i64
  %arrayidx27 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %57, i64 %idxprom26
  %size28 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %arrayidx27, i32 0, i32 0
  store i64 %add25, i64* %size28, align 8, !tbaa !159
  %59 = load i8*, i8** %val, align 8, !tbaa !6
  %cmp29 = icmp ne i8* %59, getelementptr inbounds ([256 x i8], [256 x i8]* @slot0, i64 0, i64 0)
  br i1 %cmp29, label %if.then31, label %if.end32

if.then31:                                        ; preds = %if.then24
  %60 = load i8*, i8** %val, align 8, !tbaa !6
  call void @rpl_free(i8* %60)
  br label %if.end32

if.end32:                                         ; preds = %if.then31, %if.then24
  %61 = load i64, i64* %size, align 8, !tbaa !14
  %call33 = call noalias nonnull i8* @xcharalloc(i64 %61) #25
  store i8* %call33, i8** %val, align 8, !tbaa !6
  %62 = load %struct.slotvec*, %struct.slotvec** %sv, align 8, !tbaa !6
  %63 = load i32, i32* %n.addr, align 4, !tbaa !2
  %idxprom34 = sext i32 %63 to i64
  %arrayidx35 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %62, i64 %idxprom34
  %val36 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %arrayidx35, i32 0, i32 1
  store i8* %call33, i8** %val36, align 8, !tbaa !157
  %64 = load i8*, i8** %val, align 8, !tbaa !6
  %65 = load i64, i64* %size, align 8, !tbaa !14
  %66 = load i8*, i8** %arg.addr, align 8, !tbaa !6
  %67 = load i64, i64* %argsize.addr, align 8, !tbaa !14
  %68 = load %struct.quoting_options*, %struct.quoting_options** %options.addr, align 8, !tbaa !6
  %style37 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %68, i32 0, i32 0
  %69 = load i32, i32* %style37, align 8, !tbaa !152
  %70 = load i32, i32* %flags, align 4, !tbaa !2
  %71 = load %struct.quoting_options*, %struct.quoting_options** %options.addr, align 8, !tbaa !6
  %quote_these_too38 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %71, i32 0, i32 2
  %arraydecay39 = getelementptr inbounds [8 x i32], [8 x i32]* %quote_these_too38, i64 0, i64 0
  %72 = load %struct.quoting_options*, %struct.quoting_options** %options.addr, align 8, !tbaa !6
  %left_quote40 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %72, i32 0, i32 3
  %73 = load i8*, i8** %left_quote40, align 8, !tbaa !155
  %74 = load %struct.quoting_options*, %struct.quoting_options** %options.addr, align 8, !tbaa !6
  %right_quote41 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %74, i32 0, i32 4
  %75 = load i8*, i8** %right_quote41, align 8, !tbaa !156
  %call42 = call i64 @quotearg_buffer_restyled(i8* %64, i64 %65, i8* %66, i64 %67, i32 %69, i32 %70, i32* %arraydecay39, i8* %73, i8* %75)
  br label %if.end43

if.end43:                                         ; preds = %if.end32, %if.end15
  %76 = load i32, i32* %e, align 4, !tbaa !2
  %call44 = call i32* @__errno_location() #26
  store i32 %76, i32* %call44, align 4, !tbaa !2
  %77 = load i8*, i8** %val, align 8, !tbaa !6
  %78 = bitcast i64* %qsize to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %78) #13
  %79 = bitcast i32* %flags to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %79) #13
  %80 = bitcast i8** %val to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %80) #13
  %81 = bitcast i64* %size to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %81) #13
  %82 = bitcast i32* %nslots_max to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %82) #13
  %83 = bitcast %struct.slotvec** %sv to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %83) #13
  %84 = bitcast i32* %e to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %84) #13
  ret i8* %77
}

; Function Attrs: nounwind uwtable
define dso_local i8* @quotearg_n_mem(i32 %n, i8* %arg, i64 %argsize) #7 {
entry:
  %n.addr = alloca i32, align 4
  %arg.addr = alloca i8*, align 8
  %argsize.addr = alloca i64, align 8
  store i32 %n, i32* %n.addr, align 4, !tbaa !2
  store i8* %arg, i8** %arg.addr, align 8, !tbaa !6
  store i64 %argsize, i64* %argsize.addr, align 8, !tbaa !14
  %0 = load i32, i32* %n.addr, align 4, !tbaa !2
  %1 = load i8*, i8** %arg.addr, align 8, !tbaa !6
  %2 = load i64, i64* %argsize.addr, align 8, !tbaa !14
  %call = call i8* @quotearg_n_options(i32 %0, i8* %1, i64 %2, %struct.quoting_options* @default_quoting_options)
  ret i8* %call
}

; Function Attrs: nounwind uwtable
define dso_local i8* @quotearg(i8* %arg) #7 {
entry:
  %arg.addr = alloca i8*, align 8
  store i8* %arg, i8** %arg.addr, align 8, !tbaa !6
  %0 = load i8*, i8** %arg.addr, align 8, !tbaa !6
  %call = call i8* @quotearg_n(i32 0, i8* %0)
  ret i8* %call
}

; Function Attrs: nounwind uwtable
define dso_local i8* @quotearg_mem(i8* %arg, i64 %argsize) #7 {
entry:
  %arg.addr = alloca i8*, align 8
  %argsize.addr = alloca i64, align 8
  store i8* %arg, i8** %arg.addr, align 8, !tbaa !6
  store i64 %argsize, i64* %argsize.addr, align 8, !tbaa !14
  %0 = load i8*, i8** %arg.addr, align 8, !tbaa !6
  %1 = load i64, i64* %argsize.addr, align 8, !tbaa !14
  %call = call i8* @quotearg_n_mem(i32 0, i8* %0, i64 %1)
  ret i8* %call
}

; Function Attrs: nounwind uwtable
define dso_local i8* @quotearg_n_style(i32 %n, i32 %s, i8* %arg) #7 {
entry:
  %n.addr = alloca i32, align 4
  %s.addr = alloca i32, align 4
  %arg.addr = alloca i8*, align 8
  %o = alloca %struct.quoting_options, align 8
  store i32 %n, i32* %n.addr, align 4, !tbaa !2
  store i32 %s, i32* %s.addr, align 4, !tbaa !13
  store i8* %arg, i8** %arg.addr, align 8, !tbaa !6
  %0 = bitcast %struct.quoting_options* %o to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* %0) #13
  %1 = load i32, i32* %s.addr, align 4, !tbaa !13
  call void @quoting_options_from_style(%struct.quoting_options* sret %o, i32 %1)
  %2 = load i32, i32* %n.addr, align 4, !tbaa !2
  %3 = load i8*, i8** %arg.addr, align 8, !tbaa !6
  %call = call i8* @quotearg_n_options(i32 %2, i8* %3, i64 -1, %struct.quoting_options* %o)
  %4 = bitcast %struct.quoting_options* %o to i8*
  call void @llvm.lifetime.end.p0i8(i64 56, i8* %4) #13
  ret i8* %call
}

; Function Attrs: nounwind uwtable
define internal void @quoting_options_from_style(%struct.quoting_options* noalias sret %agg.result, i32 %style) #7 {
entry:
  %style.addr = alloca i32, align 4
  store i32 %style, i32* %style.addr, align 4, !tbaa !13
  %0 = bitcast %struct.quoting_options* %agg.result to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %0, i8 0, i64 56, i1 false)
  %1 = load i32, i32* %style.addr, align 4, !tbaa !13
  %cmp = icmp eq i32 %1, 10
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void @abort() #21
  unreachable

if.end:                                           ; preds = %entry
  %2 = load i32, i32* %style.addr, align 4, !tbaa !13
  %style1 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %agg.result, i32 0, i32 0
  store i32 %2, i32* %style1, align 8, !tbaa !152
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i8* @quotearg_n_style_mem(i32 %n, i32 %s, i8* %arg, i64 %argsize) #7 {
entry:
  %n.addr = alloca i32, align 4
  %s.addr = alloca i32, align 4
  %arg.addr = alloca i8*, align 8
  %argsize.addr = alloca i64, align 8
  %o = alloca %struct.quoting_options, align 8
  store i32 %n, i32* %n.addr, align 4, !tbaa !2
  store i32 %s, i32* %s.addr, align 4, !tbaa !13
  store i8* %arg, i8** %arg.addr, align 8, !tbaa !6
  store i64 %argsize, i64* %argsize.addr, align 8, !tbaa !14
  %0 = bitcast %struct.quoting_options* %o to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* %0) #13
  %1 = load i32, i32* %s.addr, align 4, !tbaa !13
  call void @quoting_options_from_style(%struct.quoting_options* sret %o, i32 %1)
  %2 = load i32, i32* %n.addr, align 4, !tbaa !2
  %3 = load i8*, i8** %arg.addr, align 8, !tbaa !6
  %4 = load i64, i64* %argsize.addr, align 8, !tbaa !14
  %call = call i8* @quotearg_n_options(i32 %2, i8* %3, i64 %4, %struct.quoting_options* %o)
  %5 = bitcast %struct.quoting_options* %o to i8*
  call void @llvm.lifetime.end.p0i8(i64 56, i8* %5) #13
  ret i8* %call
}

; Function Attrs: nounwind uwtable
define dso_local i8* @quotearg_style(i32 %s, i8* %arg) #7 {
entry:
  %s.addr = alloca i32, align 4
  %arg.addr = alloca i8*, align 8
  store i32 %s, i32* %s.addr, align 4, !tbaa !13
  store i8* %arg, i8** %arg.addr, align 8, !tbaa !6
  %0 = load i32, i32* %s.addr, align 4, !tbaa !13
  %1 = load i8*, i8** %arg.addr, align 8, !tbaa !6
  %call = call i8* @quotearg_n_style(i32 0, i32 %0, i8* %1)
  ret i8* %call
}

; Function Attrs: nounwind uwtable
define dso_local i8* @quotearg_style_mem(i32 %s, i8* %arg, i64 %argsize) #7 {
entry:
  %s.addr = alloca i32, align 4
  %arg.addr = alloca i8*, align 8
  %argsize.addr = alloca i64, align 8
  store i32 %s, i32* %s.addr, align 4, !tbaa !13
  store i8* %arg, i8** %arg.addr, align 8, !tbaa !6
  store i64 %argsize, i64* %argsize.addr, align 8, !tbaa !14
  %0 = load i32, i32* %s.addr, align 4, !tbaa !13
  %1 = load i8*, i8** %arg.addr, align 8, !tbaa !6
  %2 = load i64, i64* %argsize.addr, align 8, !tbaa !14
  %call = call i8* @quotearg_n_style_mem(i32 0, i32 %0, i8* %1, i64 %2)
  ret i8* %call
}

; Function Attrs: nounwind uwtable
define dso_local i8* @quotearg_char_mem(i8* %arg, i64 %argsize, i8 signext %ch) #7 {
entry:
  %arg.addr = alloca i8*, align 8
  %argsize.addr = alloca i64, align 8
  %ch.addr = alloca i8, align 1
  %options = alloca %struct.quoting_options, align 8
  store i8* %arg, i8** %arg.addr, align 8, !tbaa !6
  store i64 %argsize, i64* %argsize.addr, align 8, !tbaa !14
  store i8 %ch, i8* %ch.addr, align 1, !tbaa !13
  %0 = bitcast %struct.quoting_options* %options to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* %0) #13
  %1 = bitcast %struct.quoting_options* %options to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1, i8* align 8 bitcast (%struct.quoting_options* @default_quoting_options to i8*), i64 56, i1 false), !tbaa.struct !161
  %2 = load i8, i8* %ch.addr, align 1, !tbaa !13
  %call = call i32 @set_char_quoting(%struct.quoting_options* %options, i8 signext %2, i32 1)
  %3 = load i8*, i8** %arg.addr, align 8, !tbaa !6
  %4 = load i64, i64* %argsize.addr, align 8, !tbaa !14
  %call1 = call i8* @quotearg_n_options(i32 0, i8* %3, i64 %4, %struct.quoting_options* %options)
  %5 = bitcast %struct.quoting_options* %options to i8*
  call void @llvm.lifetime.end.p0i8(i64 56, i8* %5) #13
  ret i8* %call1
}

; Function Attrs: nounwind uwtable
define dso_local i8* @quotearg_char(i8* %arg, i8 signext %ch) #7 {
entry:
  %arg.addr = alloca i8*, align 8
  %ch.addr = alloca i8, align 1
  store i8* %arg, i8** %arg.addr, align 8, !tbaa !6
  store i8 %ch, i8* %ch.addr, align 1, !tbaa !13
  %0 = load i8*, i8** %arg.addr, align 8, !tbaa !6
  %1 = load i8, i8* %ch.addr, align 1, !tbaa !13
  %call = call i8* @quotearg_char_mem(i8* %0, i64 -1, i8 signext %1)
  ret i8* %call
}

; Function Attrs: nounwind uwtable
define dso_local i8* @quotearg_colon(i8* %arg) #7 {
entry:
  %arg.addr = alloca i8*, align 8
  store i8* %arg, i8** %arg.addr, align 8, !tbaa !6
  %0 = load i8*, i8** %arg.addr, align 8, !tbaa !6
  %call = call i8* @quotearg_char(i8* %0, i8 signext 58)
  ret i8* %call
}

; Function Attrs: nounwind uwtable
define dso_local i8* @quotearg_colon_mem(i8* %arg, i64 %argsize) #7 {
entry:
  %arg.addr = alloca i8*, align 8
  %argsize.addr = alloca i64, align 8
  store i8* %arg, i8** %arg.addr, align 8, !tbaa !6
  store i64 %argsize, i64* %argsize.addr, align 8, !tbaa !14
  %0 = load i8*, i8** %arg.addr, align 8, !tbaa !6
  %1 = load i64, i64* %argsize.addr, align 8, !tbaa !14
  %call = call i8* @quotearg_char_mem(i8* %0, i64 %1, i8 signext 58)
  ret i8* %call
}

; Function Attrs: nounwind uwtable
define dso_local i8* @quotearg_n_style_colon(i32 %n, i32 %s, i8* %arg) #7 {
entry:
  %n.addr = alloca i32, align 4
  %s.addr = alloca i32, align 4
  %arg.addr = alloca i8*, align 8
  %options = alloca %struct.quoting_options, align 8
  %tmp = alloca %struct.quoting_options, align 8
  store i32 %n, i32* %n.addr, align 4, !tbaa !2
  store i32 %s, i32* %s.addr, align 4, !tbaa !13
  store i8* %arg, i8** %arg.addr, align 8, !tbaa !6
  %0 = bitcast %struct.quoting_options* %options to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* %0) #13
  %1 = bitcast %struct.quoting_options* %tmp to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* %1) #13
  %2 = load i32, i32* %s.addr, align 4, !tbaa !13
  call void @quoting_options_from_style(%struct.quoting_options* sret %tmp, i32 %2)
  %3 = bitcast %struct.quoting_options* %options to i8*
  %4 = bitcast %struct.quoting_options* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %3, i8* align 8 %4, i64 56, i1 false), !tbaa.struct !161
  %5 = bitcast %struct.quoting_options* %tmp to i8*
  call void @llvm.lifetime.end.p0i8(i64 56, i8* %5) #13
  %call = call i32 @set_char_quoting(%struct.quoting_options* %options, i8 signext 58, i32 1)
  %6 = load i32, i32* %n.addr, align 4, !tbaa !2
  %7 = load i8*, i8** %arg.addr, align 8, !tbaa !6
  %call1 = call i8* @quotearg_n_options(i32 %6, i8* %7, i64 -1, %struct.quoting_options* %options)
  %8 = bitcast %struct.quoting_options* %options to i8*
  call void @llvm.lifetime.end.p0i8(i64 56, i8* %8) #13
  ret i8* %call1
}

; Function Attrs: nounwind uwtable
define dso_local i8* @quotearg_n_custom(i32 %n, i8* %left_quote, i8* %right_quote, i8* %arg) #7 {
entry:
  %n.addr = alloca i32, align 4
  %left_quote.addr = alloca i8*, align 8
  %right_quote.addr = alloca i8*, align 8
  %arg.addr = alloca i8*, align 8
  store i32 %n, i32* %n.addr, align 4, !tbaa !2
  store i8* %left_quote, i8** %left_quote.addr, align 8, !tbaa !6
  store i8* %right_quote, i8** %right_quote.addr, align 8, !tbaa !6
  store i8* %arg, i8** %arg.addr, align 8, !tbaa !6
  %0 = load i32, i32* %n.addr, align 4, !tbaa !2
  %1 = load i8*, i8** %left_quote.addr, align 8, !tbaa !6
  %2 = load i8*, i8** %right_quote.addr, align 8, !tbaa !6
  %3 = load i8*, i8** %arg.addr, align 8, !tbaa !6
  %call = call i8* @quotearg_n_custom_mem(i32 %0, i8* %1, i8* %2, i8* %3, i64 -1)
  ret i8* %call
}

; Function Attrs: nounwind uwtable
define dso_local i8* @quotearg_n_custom_mem(i32 %n, i8* %left_quote, i8* %right_quote, i8* %arg, i64 %argsize) #7 {
entry:
  %n.addr = alloca i32, align 4
  %left_quote.addr = alloca i8*, align 8
  %right_quote.addr = alloca i8*, align 8
  %arg.addr = alloca i8*, align 8
  %argsize.addr = alloca i64, align 8
  %o = alloca %struct.quoting_options, align 8
  store i32 %n, i32* %n.addr, align 4, !tbaa !2
  store i8* %left_quote, i8** %left_quote.addr, align 8, !tbaa !6
  store i8* %right_quote, i8** %right_quote.addr, align 8, !tbaa !6
  store i8* %arg, i8** %arg.addr, align 8, !tbaa !6
  store i64 %argsize, i64* %argsize.addr, align 8, !tbaa !14
  %0 = bitcast %struct.quoting_options* %o to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* %0) #13
  %1 = bitcast %struct.quoting_options* %o to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1, i8* align 8 bitcast (%struct.quoting_options* @default_quoting_options to i8*), i64 56, i1 false), !tbaa.struct !161
  %2 = load i8*, i8** %left_quote.addr, align 8, !tbaa !6
  %3 = load i8*, i8** %right_quote.addr, align 8, !tbaa !6
  call void @set_custom_quoting(%struct.quoting_options* %o, i8* %2, i8* %3)
  %4 = load i32, i32* %n.addr, align 4, !tbaa !2
  %5 = load i8*, i8** %arg.addr, align 8, !tbaa !6
  %6 = load i64, i64* %argsize.addr, align 8, !tbaa !14
  %call = call i8* @quotearg_n_options(i32 %4, i8* %5, i64 %6, %struct.quoting_options* %o)
  %7 = bitcast %struct.quoting_options* %o to i8*
  call void @llvm.lifetime.end.p0i8(i64 56, i8* %7) #13
  ret i8* %call
}

; Function Attrs: nounwind uwtable
define dso_local i8* @quotearg_custom(i8* %left_quote, i8* %right_quote, i8* %arg) #7 {
entry:
  %left_quote.addr = alloca i8*, align 8
  %right_quote.addr = alloca i8*, align 8
  %arg.addr = alloca i8*, align 8
  store i8* %left_quote, i8** %left_quote.addr, align 8, !tbaa !6
  store i8* %right_quote, i8** %right_quote.addr, align 8, !tbaa !6
  store i8* %arg, i8** %arg.addr, align 8, !tbaa !6
  %0 = load i8*, i8** %left_quote.addr, align 8, !tbaa !6
  %1 = load i8*, i8** %right_quote.addr, align 8, !tbaa !6
  %2 = load i8*, i8** %arg.addr, align 8, !tbaa !6
  %call = call i8* @quotearg_n_custom(i32 0, i8* %0, i8* %1, i8* %2)
  ret i8* %call
}

; Function Attrs: nounwind uwtable
define dso_local i8* @quotearg_custom_mem(i8* %left_quote, i8* %right_quote, i8* %arg, i64 %argsize) #7 {
entry:
  %left_quote.addr = alloca i8*, align 8
  %right_quote.addr = alloca i8*, align 8
  %arg.addr = alloca i8*, align 8
  %argsize.addr = alloca i64, align 8
  store i8* %left_quote, i8** %left_quote.addr, align 8, !tbaa !6
  store i8* %right_quote, i8** %right_quote.addr, align 8, !tbaa !6
  store i8* %arg, i8** %arg.addr, align 8, !tbaa !6
  store i64 %argsize, i64* %argsize.addr, align 8, !tbaa !14
  %0 = load i8*, i8** %left_quote.addr, align 8, !tbaa !6
  %1 = load i8*, i8** %right_quote.addr, align 8, !tbaa !6
  %2 = load i8*, i8** %arg.addr, align 8, !tbaa !6
  %3 = load i64, i64* %argsize.addr, align 8, !tbaa !14
  %call = call i8* @quotearg_n_custom_mem(i32 0, i8* %0, i8* %1, i8* %2, i64 %3)
  ret i8* %call
}

; Function Attrs: nounwind uwtable
define dso_local i8* @quote_n_mem(i32 %n, i8* %arg, i64 %argsize) #7 {
entry:
  %n.addr = alloca i32, align 4
  %arg.addr = alloca i8*, align 8
  %argsize.addr = alloca i64, align 8
  store i32 %n, i32* %n.addr, align 4, !tbaa !2
  store i8* %arg, i8** %arg.addr, align 8, !tbaa !6
  store i64 %argsize, i64* %argsize.addr, align 8, !tbaa !14
  %0 = load i32, i32* %n.addr, align 4, !tbaa !2
  %1 = load i8*, i8** %arg.addr, align 8, !tbaa !6
  %2 = load i64, i64* %argsize.addr, align 8, !tbaa !14
  %call = call i8* @quotearg_n_options(i32 %0, i8* %1, i64 %2, %struct.quoting_options* @quote_quoting_options)
  ret i8* %call
}

; Function Attrs: nounwind uwtable
define dso_local i8* @quote_mem(i8* %arg, i64 %argsize) #7 {
entry:
  %arg.addr = alloca i8*, align 8
  %argsize.addr = alloca i64, align 8
  store i8* %arg, i8** %arg.addr, align 8, !tbaa !6
  store i64 %argsize, i64* %argsize.addr, align 8, !tbaa !14
  %0 = load i8*, i8** %arg.addr, align 8, !tbaa !6
  %1 = load i64, i64* %argsize.addr, align 8, !tbaa !14
  %call = call i8* @quote_n_mem(i32 0, i8* %0, i64 %1)
  ret i8* %call
}

; Function Attrs: nounwind uwtable
define dso_local i8* @quote_n(i32 %n, i8* %arg) #7 {
entry:
  %n.addr = alloca i32, align 4
  %arg.addr = alloca i8*, align 8
  store i32 %n, i32* %n.addr, align 4, !tbaa !2
  store i8* %arg, i8** %arg.addr, align 8, !tbaa !6
  %0 = load i32, i32* %n.addr, align 4, !tbaa !2
  %1 = load i8*, i8** %arg.addr, align 8, !tbaa !6
  %call = call i8* @quote_n_mem(i32 %0, i8* %1, i64 -1)
  ret i8* %call
}

; Function Attrs: nounwind uwtable
define dso_local i8* @quote(i8* %arg) #7 {
entry:
  %arg.addr = alloca i8*, align 8
  store i8* %arg, i8** %arg.addr, align 8, !tbaa !6
  %0 = load i8*, i8** %arg.addr, align 8, !tbaa !6
  %call = call i8* @quote_n(i32 0, i8* %0)
  ret i8* %call
}

; Function Attrs: nounwind uwtable
define dso_local noalias %struct.randread_source* @randread_new(i8* %name, i64 %bytes_bound) #7 {
entry:
  %retval = alloca %struct.randread_source*, align 8
  %name.addr = alloca i8*, align 8
  %bytes_bound.addr = alloca i64, align 8
  %source = alloca %struct._IO_FILE*, align 8
  %s = alloca %struct.randread_source*, align 8
  %cleanup.dest.slot = alloca i32, align 4
  %e = alloca i32, align 4
  store i8* %name, i8** %name.addr, align 8, !tbaa !6
  store i64 %bytes_bound, i64* %bytes_bound.addr, align 8, !tbaa !14
  %0 = load i64, i64* %bytes_bound.addr, align 8, !tbaa !14
  %cmp = icmp eq i64 %0, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call = call %struct.randread_source* @simple_new(%struct._IO_FILE* null, i8* null)
  store %struct.randread_source* %call, %struct.randread_source** %retval, align 8
  br label %return

if.else:                                          ; preds = %entry
  %1 = bitcast %struct._IO_FILE** %source to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %1) #13
  store %struct._IO_FILE* null, %struct._IO_FILE** %source, align 8, !tbaa !6
  %2 = bitcast %struct.randread_source** %s to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %2) #13
  %3 = load i8*, i8** %name.addr, align 8, !tbaa !6
  %tobool = icmp ne i8* %3, null
  br i1 %tobool, label %if.then1, label %if.end5

if.then1:                                         ; preds = %if.else
  %4 = load i8*, i8** %name.addr, align 8, !tbaa !6
  %call2 = call %struct._IO_FILE* @fopen_safer(i8* %4, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.290, i64 0, i64 0))
  store %struct._IO_FILE* %call2, %struct._IO_FILE** %source, align 8, !tbaa !6
  %tobool3 = icmp ne %struct._IO_FILE* %call2, null
  br i1 %tobool3, label %if.end, label %if.then4

if.then4:                                         ; preds = %if.then1
  store %struct.randread_source* null, %struct.randread_source** %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %if.then1
  br label %if.end5

if.end5:                                          ; preds = %if.end, %if.else
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** %source, align 8, !tbaa !6
  %6 = load i8*, i8** %name.addr, align 8, !tbaa !6
  %call6 = call %struct.randread_source* @simple_new(%struct._IO_FILE* %5, i8* %6)
  store %struct.randread_source* %call6, %struct.randread_source** %s, align 8, !tbaa !6
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** %source, align 8, !tbaa !6
  %tobool7 = icmp ne %struct._IO_FILE* %7, null
  br i1 %tobool7, label %if.then8, label %if.else11

if.then8:                                         ; preds = %if.end5
  %8 = load %struct._IO_FILE*, %struct._IO_FILE** %source, align 8, !tbaa !6
  %9 = load %struct.randread_source*, %struct.randread_source** %s, align 8, !tbaa !6
  %buf = getelementptr inbounds %struct.randread_source, %struct.randread_source* %9, i32 0, i32 3
  %c = bitcast %union.anon.20* %buf to [4096 x i8]*
  %arraydecay = getelementptr inbounds [4096 x i8], [4096 x i8]* %c, i64 0, i64 0
  %10 = load i64, i64* %bytes_bound.addr, align 8, !tbaa !14
  %cmp9 = icmp ult i64 4096, %10
  br i1 %cmp9, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then8
  br label %cond.end

cond.false:                                       ; preds = %if.then8
  %11 = load i64, i64* %bytes_bound.addr, align 8, !tbaa !14
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ 4096, %cond.true ], [ %11, %cond.false ]
  %call10 = call i32 @setvbuf(%struct._IO_FILE* %8, i8* %arraydecay, i32 0, i64 %cond) #13
  br label %if.end30

if.else11:                                        ; preds = %if.end5
  %12 = load %struct.randread_source*, %struct.randread_source** %s, align 8, !tbaa !6
  %buf12 = getelementptr inbounds %struct.randread_source, %struct.randread_source* %12, i32 0, i32 3
  %isaac = bitcast %union.anon.20* %buf12 to %struct.isaac*
  %buffered = getelementptr inbounds %struct.isaac, %struct.isaac* %isaac, i32 0, i32 0
  store i64 0, i64* %buffered, align 8, !tbaa !13
  %13 = load %struct.randread_source*, %struct.randread_source** %s, align 8, !tbaa !6
  %buf13 = getelementptr inbounds %struct.randread_source, %struct.randread_source* %13, i32 0, i32 3
  %isaac14 = bitcast %union.anon.20* %buf13 to %struct.isaac*
  %state = getelementptr inbounds %struct.isaac, %struct.isaac* %isaac14, i32 0, i32 1
  %m = getelementptr inbounds %struct.isaac_state, %struct.isaac_state* %state, i32 0, i32 0
  %arraydecay15 = getelementptr inbounds [256 x i64], [256 x i64]* %m, i64 0, i64 0
  %14 = bitcast i64* %arraydecay15 to i8*
  %15 = load i64, i64* %bytes_bound.addr, align 8, !tbaa !14
  %cmp16 = icmp ult i64 2048, %15
  br i1 %cmp16, label %cond.true17, label %cond.false18

cond.true17:                                      ; preds = %if.else11
  br label %cond.end19

cond.false18:                                     ; preds = %if.else11
  %16 = load i64, i64* %bytes_bound.addr, align 8, !tbaa !14
  br label %cond.end19

cond.end19:                                       ; preds = %cond.false18, %cond.true17
  %cond20 = phi i64 [ 2048, %cond.true17 ], [ %16, %cond.false18 ]
  %call21 = call zeroext i1 @get_nonce(i8* %14, i64 %cond20)
  br i1 %call21, label %if.end26, label %if.then22

if.then22:                                        ; preds = %cond.end19
  %17 = bitcast i32* %e to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %17) #13
  %call23 = call i32* @__errno_location() #26
  %18 = load i32, i32* %call23, align 4, !tbaa !2
  store i32 %18, i32* %e, align 4, !tbaa !2
  %19 = load %struct.randread_source*, %struct.randread_source** %s, align 8, !tbaa !6
  %call24 = call i32 @randread_free_body(%struct.randread_source* %19)
  %20 = load i32, i32* %e, align 4, !tbaa !2
  %call25 = call i32* @__errno_location() #26
  store i32 %20, i32* %call25, align 4, !tbaa !2
  store %struct.randread_source* null, %struct.randread_source** %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  %21 = bitcast i32* %e to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %21) #13
  br label %cleanup

if.end26:                                         ; preds = %cond.end19
  %22 = load %struct.randread_source*, %struct.randread_source** %s, align 8, !tbaa !6
  %buf27 = getelementptr inbounds %struct.randread_source, %struct.randread_source* %22, i32 0, i32 3
  %isaac28 = bitcast %union.anon.20* %buf27 to %struct.isaac*
  %state29 = getelementptr inbounds %struct.isaac, %struct.isaac* %isaac28, i32 0, i32 1
  call void @isaac_seed(%struct.isaac_state* %state29)
  br label %if.end30

if.end30:                                         ; preds = %if.end26, %cond.end
  %23 = load %struct.randread_source*, %struct.randread_source** %s, align 8, !tbaa !6
  store %struct.randread_source* %23, %struct.randread_source** %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end30, %if.then22, %if.then4
  %24 = bitcast %struct.randread_source** %s to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %24) #13
  %25 = bitcast %struct._IO_FILE** %source to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %25) #13
  br label %return

return:                                           ; preds = %cleanup, %if.then
  %26 = load %struct.randread_source*, %struct.randread_source** %retval, align 8
  ret %struct.randread_source* %26
}

; Function Attrs: nounwind uwtable
define internal %struct.randread_source* @simple_new(%struct._IO_FILE* %source, i8* %handler_arg) #7 {
entry:
  %source.addr = alloca %struct._IO_FILE*, align 8
  %handler_arg.addr = alloca i8*, align 8
  %s = alloca %struct.randread_source*, align 8
  store %struct._IO_FILE* %source, %struct._IO_FILE** %source.addr, align 8, !tbaa !6
  store i8* %handler_arg, i8** %handler_arg.addr, align 8, !tbaa !6
  %0 = bitcast %struct.randread_source** %s to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #13
  %call = call noalias nonnull i8* @xmalloc(i64 4152) #25
  %1 = bitcast i8* %call to %struct.randread_source*
  store %struct.randread_source* %1, %struct.randread_source** %s, align 8, !tbaa !6
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** %source.addr, align 8, !tbaa !6
  %3 = load %struct.randread_source*, %struct.randread_source** %s, align 8, !tbaa !6
  %source1 = getelementptr inbounds %struct.randread_source, %struct.randread_source* %3, i32 0, i32 0
  store %struct._IO_FILE* %2, %struct._IO_FILE** %source1, align 8, !tbaa !162
  %4 = load %struct.randread_source*, %struct.randread_source** %s, align 8, !tbaa !6
  %handler = getelementptr inbounds %struct.randread_source, %struct.randread_source* %4, i32 0, i32 1
  store void (i8*)* @randread_error, void (i8*)** %handler, align 8, !tbaa !164
  %5 = load i8*, i8** %handler_arg.addr, align 8, !tbaa !6
  %6 = load %struct.randread_source*, %struct.randread_source** %s, align 8, !tbaa !6
  %handler_arg2 = getelementptr inbounds %struct.randread_source, %struct.randread_source* %6, i32 0, i32 2
  store i8* %5, i8** %handler_arg2, align 8, !tbaa !165
  %7 = load %struct.randread_source*, %struct.randread_source** %s, align 8, !tbaa !6
  %8 = bitcast %struct.randread_source** %s to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %8) #13
  ret %struct.randread_source* %7
}

; Function Attrs: nounwind
declare dso_local i32 @setvbuf(%struct._IO_FILE*, i8*, i32, i64) #6

; Function Attrs: nounwind uwtable
define internal zeroext i1 @get_nonce(i8* %buffer, i64 %bufsize) #7 {
entry:
  %retval = alloca i1, align 1
  %buffer.addr = alloca i8*, align 8
  %bufsize.addr = alloca i64, align 8
  %buf = alloca i8*, align 8
  %buflim = alloca i8*, align 8
  %nbytes = alloca i64, align 8
  %cleanup.dest.slot = alloca i32, align 4
  store i8* %buffer, i8** %buffer.addr, align 8, !tbaa !6
  store i64 %bufsize, i64* %bufsize.addr, align 8, !tbaa !14
  %0 = bitcast i8** %buf to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #13
  %1 = load i8*, i8** %buffer.addr, align 8, !tbaa !6
  store i8* %1, i8** %buf, align 8, !tbaa !6
  %2 = bitcast i8** %buflim to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %2) #13
  %3 = load i8*, i8** %buf, align 8, !tbaa !6
  %4 = load i64, i64* %bufsize.addr, align 8, !tbaa !14
  %add.ptr = getelementptr inbounds i8, i8* %3, i64 %4
  store i8* %add.ptr, i8** %buflim, align 8, !tbaa !6
  br label %while.cond

while.cond:                                       ; preds = %cleanup.cont, %entry
  %5 = load i8*, i8** %buf, align 8, !tbaa !6
  %6 = load i8*, i8** %buflim, align 8, !tbaa !6
  %cmp = icmp ult i8* %5, %6
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %7 = bitcast i64* %nbytes to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %7) #13
  %8 = load i8*, i8** %buf, align 8, !tbaa !6
  %9 = load i8*, i8** %buflim, align 8, !tbaa !6
  %10 = load i8*, i8** %buf, align 8, !tbaa !6
  %sub.ptr.lhs.cast = ptrtoint i8* %9 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %10 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %call = call i64 @getrandom(i8* %8, i64 %sub.ptr.sub, i32 0)
  store i64 %call, i64* %nbytes, align 8, !tbaa !14
  %11 = load i64, i64* %nbytes, align 8, !tbaa !14
  %cmp1 = icmp sle i64 0, %11
  br i1 %cmp1, label %if.then, label %if.else

if.then:                                          ; preds = %while.body
  %12 = load i64, i64* %nbytes, align 8, !tbaa !14
  %13 = load i8*, i8** %buf, align 8, !tbaa !6
  %add.ptr2 = getelementptr inbounds i8, i8* %13, i64 %12
  store i8* %add.ptr2, i8** %buf, align 8, !tbaa !6
  br label %if.end6

if.else:                                          ; preds = %while.body
  %call3 = call i32* @__errno_location() #26
  %14 = load i32, i32* %call3, align 4, !tbaa !2
  %cmp4 = icmp ne i32 %14, 4
  br i1 %cmp4, label %if.then5, label %if.end

if.then5:                                         ; preds = %if.else
  store i1 false, i1* %retval, align 1
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %if.else
  br label %if.end6

if.end6:                                          ; preds = %if.end, %if.then
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end6, %if.then5
  %15 = bitcast i64* %nbytes to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %15) #13
  %cleanup.dest = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest, label %cleanup7 [
    i32 0, label %cleanup.cont
  ]

cleanup.cont:                                     ; preds = %cleanup
  br label %while.cond

while.end:                                        ; preds = %while.cond
  store i1 true, i1* %retval, align 1
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup7

cleanup7:                                         ; preds = %while.end, %cleanup
  %16 = bitcast i8** %buflim to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %16) #13
  %17 = bitcast i8** %buf to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %17) #13
  %18 = load i1, i1* %retval, align 1
  ret i1 %18
}

; Function Attrs: nounwind uwtable
define internal i32 @randread_free_body(%struct.randread_source* %s) #7 {
entry:
  %s.addr = alloca %struct.randread_source*, align 8
  %source = alloca %struct._IO_FILE*, align 8
  store %struct.randread_source* %s, %struct.randread_source** %s.addr, align 8, !tbaa !6
  %0 = bitcast %struct._IO_FILE** %source to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #13
  %1 = load %struct.randread_source*, %struct.randread_source** %s.addr, align 8, !tbaa !6
  %source1 = getelementptr inbounds %struct.randread_source, %struct.randread_source* %1, i32 0, i32 0
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** %source1, align 8, !tbaa !162
  store %struct._IO_FILE* %2, %struct._IO_FILE** %source, align 8, !tbaa !6
  %3 = load %struct.randread_source*, %struct.randread_source** %s.addr, align 8, !tbaa !6
  %4 = bitcast %struct.randread_source* %3 to i8*
  call void @explicit_bzero(i8* %4, i64 4152) #13
  %5 = load %struct.randread_source*, %struct.randread_source** %s.addr, align 8, !tbaa !6
  %6 = bitcast %struct.randread_source* %5 to i8*
  call void @rpl_free(i8* %6)
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** %source, align 8, !tbaa !6
  %tobool = icmp ne %struct._IO_FILE* %7, null
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %8 = load %struct._IO_FILE*, %struct._IO_FILE** %source, align 8, !tbaa !6
  %call = call i32 @rpl_fclose(%struct._IO_FILE* %8)
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call, %cond.true ], [ 0, %cond.false ]
  %9 = bitcast %struct._IO_FILE** %source to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %9) #13
  ret i32 %cond
}

; Function Attrs: nounwind
declare dso_local void @explicit_bzero(i8*, i64) #6

declare dso_local i64 @getrandom(i8*, i64, i32) #1

; Function Attrs: nounwind uwtable
define internal void @randread_error(i8* %file_name) #7 {
entry:
  %file_name.addr = alloca i8*, align 8
  store i8* %file_name, i8** %file_name.addr, align 8, !tbaa !6
  %0 = load i8*, i8** %file_name.addr, align 8, !tbaa !6
  %tobool = icmp ne i8* %0, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load volatile i32, i32* @exit_failure, align 4, !tbaa !2
  %call = call i32* @__errno_location() #26
  %2 = load i32, i32* %call, align 4, !tbaa !2
  %call1 = call i32* @__errno_location() #26
  %3 = load i32, i32* %call1, align 4, !tbaa !2
  %cmp = icmp eq i32 %3, 0
  %4 = zext i1 %cmp to i64
  %cond = select i1 %cmp, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.1.291, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2.292, i64 0, i64 0)
  %5 = load i8*, i8** %file_name.addr, align 8, !tbaa !6
  %call2 = call i8* @quote(i8* %5)
  call void (i32, i32, i8*, ...) @error(i32 %1, i32 %2, i8* %cond, i8* %call2)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  call void @abort() #21
  unreachable
}

; Function Attrs: nounwind uwtable
define dso_local void @randread_set_handler(%struct.randread_source* nonnull %s, void (i8*)* nonnull %handler) #7 {
entry:
  %s.addr = alloca %struct.randread_source*, align 8
  %handler.addr = alloca void (i8*)*, align 8
  store %struct.randread_source* %s, %struct.randread_source** %s.addr, align 8, !tbaa !6
  store void (i8*)* %handler, void (i8*)** %handler.addr, align 8, !tbaa !6
  %0 = load void (i8*)*, void (i8*)** %handler.addr, align 8, !tbaa !6
  %1 = load %struct.randread_source*, %struct.randread_source** %s.addr, align 8, !tbaa !6
  %handler1 = getelementptr inbounds %struct.randread_source, %struct.randread_source* %1, i32 0, i32 1
  store void (i8*)* %0, void (i8*)** %handler1, align 8, !tbaa !164
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local void @randread_set_handler_arg(%struct.randread_source* nonnull %s, i8* %handler_arg) #7 {
entry:
  %s.addr = alloca %struct.randread_source*, align 8
  %handler_arg.addr = alloca i8*, align 8
  store %struct.randread_source* %s, %struct.randread_source** %s.addr, align 8, !tbaa !6
  store i8* %handler_arg, i8** %handler_arg.addr, align 8, !tbaa !6
  %0 = load i8*, i8** %handler_arg.addr, align 8, !tbaa !6
  %1 = load %struct.randread_source*, %struct.randread_source** %s.addr, align 8, !tbaa !6
  %handler_arg1 = getelementptr inbounds %struct.randread_source, %struct.randread_source* %1, i32 0, i32 2
  store i8* %0, i8** %handler_arg1, align 8, !tbaa !165
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local void @randread(%struct.randread_source* nonnull %s, i8* nonnull %buf, i64 %size) #7 {
entry:
  %s.addr = alloca %struct.randread_source*, align 8
  %buf.addr = alloca i8*, align 8
  %size.addr = alloca i64, align 8
  store %struct.randread_source* %s, %struct.randread_source** %s.addr, align 8, !tbaa !6
  store i8* %buf, i8** %buf.addr, align 8, !tbaa !6
  store i64 %size, i64* %size.addr, align 8, !tbaa !14
  %0 = load %struct.randread_source*, %struct.randread_source** %s.addr, align 8, !tbaa !6
  %source = getelementptr inbounds %struct.randread_source, %struct.randread_source* %0, i32 0, i32 0
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** %source, align 8, !tbaa !162
  %tobool = icmp ne %struct._IO_FILE* %1, null
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %2 = load %struct.randread_source*, %struct.randread_source** %s.addr, align 8, !tbaa !6
  %3 = load i8*, i8** %buf.addr, align 8, !tbaa !6
  %4 = load i64, i64* %size.addr, align 8, !tbaa !14
  call void @readsource(%struct.randread_source* %2, i8* %3, i64 %4)
  br label %if.end

if.else:                                          ; preds = %entry
  %5 = load %struct.randread_source*, %struct.randread_source** %s.addr, align 8, !tbaa !6
  %buf1 = getelementptr inbounds %struct.randread_source, %struct.randread_source* %5, i32 0, i32 3
  %isaac = bitcast %union.anon.20* %buf1 to %struct.isaac*
  %6 = load i8*, i8** %buf.addr, align 8, !tbaa !6
  %7 = load i64, i64* %size.addr, align 8, !tbaa !14
  call void @readisaac(%struct.isaac* %isaac, i8* %6, i64 %7)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @readsource(%struct.randread_source* %s, i8* %p, i64 %size) #7 {
entry:
  %s.addr = alloca %struct.randread_source*, align 8
  %p.addr = alloca i8*, align 8
  %size.addr = alloca i64, align 8
  %inbytes = alloca i64, align 8
  %fread_errno = alloca i32, align 4
  %cleanup.dest.slot = alloca i32, align 4
  store %struct.randread_source* %s, %struct.randread_source** %s.addr, align 8, !tbaa !6
  store i8* %p, i8** %p.addr, align 8, !tbaa !6
  store i64 %size, i64* %size.addr, align 8, !tbaa !14
  br label %while.body

while.body:                                       ; preds = %entry, %cleanup.cont
  %0 = bitcast i64* %inbytes to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #13
  %1 = load i8*, i8** %p.addr, align 8, !tbaa !6
  %2 = load i64, i64* %size.addr, align 8, !tbaa !14
  %3 = load %struct.randread_source*, %struct.randread_source** %s.addr, align 8, !tbaa !6
  %source = getelementptr inbounds %struct.randread_source, %struct.randread_source* %3, i32 0, i32 0
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** %source, align 8, !tbaa !162
  %call = call i64 @fread_unlocked(i8* %1, i64 1, i64 %2, %struct._IO_FILE* %4)
  store i64 %call, i64* %inbytes, align 8, !tbaa !14
  %5 = bitcast i32* %fread_errno to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %5) #13
  %call1 = call i32* @__errno_location() #26
  %6 = load i32, i32* %call1, align 4, !tbaa !2
  store i32 %6, i32* %fread_errno, align 4, !tbaa !2
  %7 = load i64, i64* %inbytes, align 8, !tbaa !14
  %8 = load i8*, i8** %p.addr, align 8, !tbaa !6
  %add.ptr = getelementptr inbounds i8, i8* %8, i64 %7
  store i8* %add.ptr, i8** %p.addr, align 8, !tbaa !6
  %9 = load i64, i64* %inbytes, align 8, !tbaa !14
  %10 = load i64, i64* %size.addr, align 8, !tbaa !14
  %sub = sub i64 %10, %9
  store i64 %sub, i64* %size.addr, align 8, !tbaa !14
  %11 = load i64, i64* %size.addr, align 8, !tbaa !14
  %cmp = icmp eq i64 %11, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  store i32 3, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %while.body
  %12 = load %struct.randread_source*, %struct.randread_source** %s.addr, align 8, !tbaa !6
  %source2 = getelementptr inbounds %struct.randread_source, %struct.randread_source* %12, i32 0, i32 0
  %13 = load %struct._IO_FILE*, %struct._IO_FILE** %source2, align 8, !tbaa !162
  %call3 = call i32 @ferror_unlocked(%struct._IO_FILE* %13) #13
  %tobool = icmp ne i32 %call3, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  %14 = load i32, i32* %fread_errno, align 4, !tbaa !2
  br label %cond.end

cond.false:                                       ; preds = %if.end
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %14, %cond.true ], [ 0, %cond.false ]
  %call4 = call i32* @__errno_location() #26
  store i32 %cond, i32* %call4, align 4, !tbaa !2
  %15 = load %struct.randread_source*, %struct.randread_source** %s.addr, align 8, !tbaa !6
  %handler = getelementptr inbounds %struct.randread_source, %struct.randread_source* %15, i32 0, i32 1
  %16 = load void (i8*)*, void (i8*)** %handler, align 8, !tbaa !164
  %17 = load %struct.randread_source*, %struct.randread_source** %s.addr, align 8, !tbaa !6
  %handler_arg = getelementptr inbounds %struct.randread_source, %struct.randread_source* %17, i32 0, i32 2
  %18 = load i8*, i8** %handler_arg, align 8, !tbaa !165
  call void %16(i8* %18)
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %cond.end, %if.then
  %19 = bitcast i32* %fread_errno to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %19) #13
  %20 = bitcast i64* %inbytes to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %20) #13
  %cleanup.dest = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest, label %unreachable [
    i32 0, label %cleanup.cont
    i32 3, label %while.end
  ]

cleanup.cont:                                     ; preds = %cleanup
  br label %while.body

while.end:                                        ; preds = %cleanup
  ret void

unreachable:                                      ; preds = %cleanup
  unreachable
}

; Function Attrs: nounwind uwtable
define internal void @readisaac(%struct.isaac* %isaac, i8* %p, i64 %size) #7 {
entry:
  %isaac.addr = alloca %struct.isaac*, align 8
  %p.addr = alloca i8*, align 8
  %size.addr = alloca i64, align 8
  %inbytes = alloca i64, align 8
  %char_p = alloca i8*, align 8
  %cleanup.dest.slot = alloca i32, align 4
  %wp = alloca i64*, align 8
  store %struct.isaac* %isaac, %struct.isaac** %isaac.addr, align 8, !tbaa !6
  store i8* %p, i8** %p.addr, align 8, !tbaa !6
  store i64 %size, i64* %size.addr, align 8, !tbaa !14
  %0 = bitcast i64* %inbytes to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #13
  %1 = load %struct.isaac*, %struct.isaac** %isaac.addr, align 8, !tbaa !6
  %buffered = getelementptr inbounds %struct.isaac, %struct.isaac* %1, i32 0, i32 0
  %2 = load i64, i64* %buffered, align 8, !tbaa !166
  store i64 %2, i64* %inbytes, align 8, !tbaa !14
  br label %while.cond

while.cond:                                       ; preds = %cleanup.cont28, %entry
  br label %while.body

while.body:                                       ; preds = %while.cond
  %3 = bitcast i8** %char_p to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %3) #13
  %4 = load i8*, i8** %p.addr, align 8, !tbaa !6
  store i8* %4, i8** %char_p, align 8, !tbaa !6
  %5 = load i64, i64* %size.addr, align 8, !tbaa !14
  %6 = load i64, i64* %inbytes, align 8, !tbaa !14
  %cmp = icmp ule i64 %5, %6
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  %7 = load i8*, i8** %p.addr, align 8, !tbaa !6
  %8 = load %struct.isaac*, %struct.isaac** %isaac.addr, align 8, !tbaa !6
  %data = getelementptr inbounds %struct.isaac, %struct.isaac* %8, i32 0, i32 2
  %b = bitcast %union.anon.0.19* %data to [2048 x i8]*
  %arraydecay = getelementptr inbounds [2048 x i8], [2048 x i8]* %b, i64 0, i64 0
  %add.ptr = getelementptr inbounds i8, i8* %arraydecay, i64 2048
  %9 = load i64, i64* %inbytes, align 8, !tbaa !14
  %idx.neg = sub i64 0, %9
  %add.ptr1 = getelementptr inbounds i8, i8* %add.ptr, i64 %idx.neg
  %10 = load i64, i64* %size.addr, align 8, !tbaa !14
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %7, i8* align 1 %add.ptr1, i64 %10, i1 false)
  %11 = load i64, i64* %inbytes, align 8, !tbaa !14
  %12 = load i64, i64* %size.addr, align 8, !tbaa !14
  %sub = sub i64 %11, %12
  %13 = load %struct.isaac*, %struct.isaac** %isaac.addr, align 8, !tbaa !6
  %buffered2 = getelementptr inbounds %struct.isaac, %struct.isaac* %13, i32 0, i32 0
  store i64 %sub, i64* %buffered2, align 8, !tbaa !166
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup26

if.end:                                           ; preds = %while.body
  %14 = load i8*, i8** %p.addr, align 8, !tbaa !6
  %15 = load %struct.isaac*, %struct.isaac** %isaac.addr, align 8, !tbaa !6
  %data3 = getelementptr inbounds %struct.isaac, %struct.isaac* %15, i32 0, i32 2
  %b4 = bitcast %union.anon.0.19* %data3 to [2048 x i8]*
  %arraydecay5 = getelementptr inbounds [2048 x i8], [2048 x i8]* %b4, i64 0, i64 0
  %add.ptr6 = getelementptr inbounds i8, i8* %arraydecay5, i64 2048
  %16 = load i64, i64* %inbytes, align 8, !tbaa !14
  %idx.neg7 = sub i64 0, %16
  %add.ptr8 = getelementptr inbounds i8, i8* %add.ptr6, i64 %idx.neg7
  %17 = load i64, i64* %inbytes, align 8, !tbaa !14
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %14, i8* align 1 %add.ptr8, i64 %17, i1 false)
  %18 = load i8*, i8** %char_p, align 8, !tbaa !6
  %19 = load i64, i64* %inbytes, align 8, !tbaa !14
  %add.ptr9 = getelementptr inbounds i8, i8* %18, i64 %19
  store i8* %add.ptr9, i8** %p.addr, align 8, !tbaa !6
  %20 = load i64, i64* %inbytes, align 8, !tbaa !14
  %21 = load i64, i64* %size.addr, align 8, !tbaa !14
  %sub10 = sub i64 %21, %20
  store i64 %sub10, i64* %size.addr, align 8, !tbaa !14
  %22 = load i8*, i8** %p.addr, align 8, !tbaa !6
  %23 = ptrtoint i8* %22 to i64
  %rem = urem i64 %23, 8
  %cmp11 = icmp eq i64 %rem, 0
  br i1 %cmp11, label %if.then12, label %if.end22

if.then12:                                        ; preds = %if.end
  %24 = bitcast i64** %wp to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %24) #13
  %25 = load i8*, i8** %p.addr, align 8, !tbaa !6
  %26 = bitcast i8* %25 to i64*
  store i64* %26, i64** %wp, align 8, !tbaa !6
  br label %while.cond13

while.cond13:                                     ; preds = %if.end21, %if.then12
  %27 = load i64, i64* %size.addr, align 8, !tbaa !14
  %cmp14 = icmp ule i64 2048, %27
  br i1 %cmp14, label %while.body15, label %while.end

while.body15:                                     ; preds = %while.cond13
  %28 = load %struct.isaac*, %struct.isaac** %isaac.addr, align 8, !tbaa !6
  %state = getelementptr inbounds %struct.isaac, %struct.isaac* %28, i32 0, i32 1
  %29 = load i64*, i64** %wp, align 8, !tbaa !6
  call void @isaac_refill(%struct.isaac_state* %state, i64* %29)
  %30 = load i64*, i64** %wp, align 8, !tbaa !6
  %add.ptr16 = getelementptr inbounds i64, i64* %30, i64 256
  store i64* %add.ptr16, i64** %wp, align 8, !tbaa !6
  %31 = load i64, i64* %size.addr, align 8, !tbaa !14
  %sub17 = sub i64 %31, 2048
  store i64 %sub17, i64* %size.addr, align 8, !tbaa !14
  %32 = load i64, i64* %size.addr, align 8, !tbaa !14
  %cmp18 = icmp eq i64 %32, 0
  br i1 %cmp18, label %if.then19, label %if.end21

if.then19:                                        ; preds = %while.body15
  %33 = load %struct.isaac*, %struct.isaac** %isaac.addr, align 8, !tbaa !6
  %buffered20 = getelementptr inbounds %struct.isaac, %struct.isaac* %33, i32 0, i32 0
  store i64 0, i64* %buffered20, align 8, !tbaa !166
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end21:                                         ; preds = %while.body15
  br label %while.cond13

while.end:                                        ; preds = %while.cond13
  %34 = load i64*, i64** %wp, align 8, !tbaa !6
  %35 = bitcast i64* %34 to i8*
  store i8* %35, i8** %p.addr, align 8, !tbaa !6
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %while.end, %if.then19
  %36 = bitcast i64** %wp to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %36) #13
  %cleanup.dest = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest, label %cleanup26 [
    i32 0, label %cleanup.cont
  ]

cleanup.cont:                                     ; preds = %cleanup
  br label %if.end22

if.end22:                                         ; preds = %cleanup.cont, %if.end
  %37 = load %struct.isaac*, %struct.isaac** %isaac.addr, align 8, !tbaa !6
  %state23 = getelementptr inbounds %struct.isaac, %struct.isaac* %37, i32 0, i32 1
  %38 = load %struct.isaac*, %struct.isaac** %isaac.addr, align 8, !tbaa !6
  %data24 = getelementptr inbounds %struct.isaac, %struct.isaac* %38, i32 0, i32 2
  %w = bitcast %union.anon.0.19* %data24 to [256 x i64]*
  %arraydecay25 = getelementptr inbounds [256 x i64], [256 x i64]* %w, i64 0, i64 0
  call void @isaac_refill(%struct.isaac_state* %state23, i64* %arraydecay25)
  store i64 2048, i64* %inbytes, align 8, !tbaa !14
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup26

cleanup26:                                        ; preds = %if.end22, %cleanup, %if.then
  %39 = bitcast i8** %char_p to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %39) #13
  %cleanup.dest27 = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest27, label %cleanup29 [
    i32 0, label %cleanup.cont28
  ]

cleanup.cont28:                                   ; preds = %cleanup26
  br label %while.cond

cleanup29:                                        ; preds = %cleanup26
  %40 = bitcast i64* %inbytes to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %40) #13
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @randread_free(%struct.randread_source* nonnull %s) #7 {
entry:
  %s.addr = alloca %struct.randread_source*, align 8
  store %struct.randread_source* %s, %struct.randread_source** %s.addr, align 8, !tbaa !6
  %0 = load %struct.randread_source*, %struct.randread_source** %s.addr, align 8, !tbaa !6
  %call = call i32 @randread_free_body(%struct.randread_source* %0)
  ret i32 %call
}

; Function Attrs: nounwind uwtable
define dso_local void @isaac_refill(%struct.isaac_state* nonnull %s, i64* nonnull %result) #7 {
entry:
  %s.addr = alloca %struct.isaac_state*, align 8
  %result.addr = alloca i64*, align 8
  %a = alloca i64, align 8
  %b = alloca i64, align 8
  %m = alloca i64*, align 8
  %r = alloca i64*, align 8
  %x = alloca i64, align 8
  %y = alloca i64, align 8
  %x18 = alloca i64, align 8
  %y19 = alloca i64, align 8
  %x40 = alloca i64, align 8
  %y41 = alloca i64, align 8
  %x61 = alloca i64, align 8
  %y62 = alloca i64, align 8
  %x88 = alloca i64, align 8
  %y89 = alloca i64, align 8
  %x110 = alloca i64, align 8
  %y111 = alloca i64, align 8
  %x132 = alloca i64, align 8
  %y133 = alloca i64, align 8
  %x153 = alloca i64, align 8
  %y154 = alloca i64, align 8
  store %struct.isaac_state* %s, %struct.isaac_state** %s.addr, align 8, !tbaa !6
  store i64* %result, i64** %result.addr, align 8, !tbaa !6
  %0 = bitcast i64* %a to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #13
  %1 = load %struct.isaac_state*, %struct.isaac_state** %s.addr, align 8, !tbaa !6
  %a1 = getelementptr inbounds %struct.isaac_state, %struct.isaac_state* %1, i32 0, i32 1
  %2 = load i64, i64* %a1, align 8, !tbaa !169
  store i64 %2, i64* %a, align 8, !tbaa !14
  %3 = bitcast i64* %b to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %3) #13
  %4 = load %struct.isaac_state*, %struct.isaac_state** %s.addr, align 8, !tbaa !6
  %b2 = getelementptr inbounds %struct.isaac_state, %struct.isaac_state* %4, i32 0, i32 2
  %5 = load i64, i64* %b2, align 8, !tbaa !170
  %6 = load %struct.isaac_state*, %struct.isaac_state** %s.addr, align 8, !tbaa !6
  %c = getelementptr inbounds %struct.isaac_state, %struct.isaac_state* %6, i32 0, i32 3
  %7 = load i64, i64* %c, align 8, !tbaa !171
  %inc = add i64 %7, 1
  store i64 %inc, i64* %c, align 8, !tbaa !171
  %add = add i64 %5, %inc
  store i64 %add, i64* %b, align 8, !tbaa !14
  %8 = bitcast i64** %m to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %8) #13
  %9 = load %struct.isaac_state*, %struct.isaac_state** %s.addr, align 8, !tbaa !6
  %m3 = getelementptr inbounds %struct.isaac_state, %struct.isaac_state* %9, i32 0, i32 0
  %arraydecay = getelementptr inbounds [256 x i64], [256 x i64]* %m3, i64 0, i64 0
  store i64* %arraydecay, i64** %m, align 8, !tbaa !6
  %10 = bitcast i64** %r to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %10) #13
  %11 = load i64*, i64** %result.addr, align 8, !tbaa !6
  store i64* %11, i64** %r, align 8, !tbaa !6
  br label %do.body

do.body:                                          ; preds = %do.cond, %entry
  %12 = bitcast i64* %x to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %12) #13
  %13 = bitcast i64* %y to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %13) #13
  %14 = load i64, i64* %a, align 8, !tbaa !14
  %15 = load i64, i64* %a, align 8, !tbaa !14
  %shl = shl i64 %15, 21
  %xor = xor i64 %14, %shl
  %neg = xor i64 %xor, -1
  %xor4 = xor i64 0, %neg
  %16 = load i64*, i64** %m, align 8, !tbaa !6
  %arrayidx = getelementptr inbounds i64, i64* %16, i64 128
  %17 = load i64, i64* %arrayidx, align 8, !tbaa !14
  %add5 = add i64 %xor4, %17
  store i64 %add5, i64* %a, align 8, !tbaa !14
  %18 = load i64*, i64** %m, align 8, !tbaa !6
  %arrayidx6 = getelementptr inbounds i64, i64* %18, i64 0
  %19 = load i64, i64* %arrayidx6, align 8, !tbaa !14
  store i64 %19, i64* %x, align 8, !tbaa !14
  %20 = load %struct.isaac_state*, %struct.isaac_state** %s.addr, align 8, !tbaa !6
  %m7 = getelementptr inbounds %struct.isaac_state, %struct.isaac_state* %20, i32 0, i32 0
  %arraydecay8 = getelementptr inbounds [256 x i64], [256 x i64]* %m7, i64 0, i64 0
  %21 = load i64, i64* %x, align 8, !tbaa !14
  %call = call i64 @ind(i64* %arraydecay8, i64 %21)
  %22 = load i64, i64* %a, align 8, !tbaa !14
  %add9 = add i64 %call, %22
  %23 = load i64, i64* %b, align 8, !tbaa !14
  %add10 = add i64 %add9, %23
  store i64 %add10, i64* %y, align 8, !tbaa !14
  %24 = load i64*, i64** %m, align 8, !tbaa !6
  %arrayidx11 = getelementptr inbounds i64, i64* %24, i64 0
  store i64 %add10, i64* %arrayidx11, align 8, !tbaa !14
  %25 = load %struct.isaac_state*, %struct.isaac_state** %s.addr, align 8, !tbaa !6
  %m12 = getelementptr inbounds %struct.isaac_state, %struct.isaac_state* %25, i32 0, i32 0
  %arraydecay13 = getelementptr inbounds [256 x i64], [256 x i64]* %m12, i64 0, i64 0
  %26 = load i64, i64* %y, align 8, !tbaa !14
  %shr = lshr i64 %26, 8
  %call14 = call i64 @ind(i64* %arraydecay13, i64 %shr)
  %27 = load i64, i64* %x, align 8, !tbaa !14
  %add15 = add i64 %call14, %27
  %call16 = call i64 @just(i64 %add15)
  store i64 %call16, i64* %b, align 8, !tbaa !14
  %28 = load i64*, i64** %r, align 8, !tbaa !6
  %arrayidx17 = getelementptr inbounds i64, i64* %28, i64 0
  store i64 %call16, i64* %arrayidx17, align 8, !tbaa !14
  %29 = bitcast i64* %y to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %29) #13
  %30 = bitcast i64* %x to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %30) #13
  %31 = bitcast i64* %x18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %31) #13
  %32 = bitcast i64* %y19 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %32) #13
  %33 = load i64, i64* %a, align 8, !tbaa !14
  %34 = load i64, i64* %a, align 8, !tbaa !14
  %call20 = call i64 @just(i64 %34)
  %shr21 = lshr i64 %call20, 5
  %xor22 = xor i64 %33, %shr21
  %xor23 = xor i64 0, %xor22
  %35 = load i64*, i64** %m, align 8, !tbaa !6
  %arrayidx24 = getelementptr inbounds i64, i64* %35, i64 129
  %36 = load i64, i64* %arrayidx24, align 8, !tbaa !14
  %add25 = add i64 %xor23, %36
  store i64 %add25, i64* %a, align 8, !tbaa !14
  %37 = load i64*, i64** %m, align 8, !tbaa !6
  %arrayidx26 = getelementptr inbounds i64, i64* %37, i64 1
  %38 = load i64, i64* %arrayidx26, align 8, !tbaa !14
  store i64 %38, i64* %x18, align 8, !tbaa !14
  %39 = load %struct.isaac_state*, %struct.isaac_state** %s.addr, align 8, !tbaa !6
  %m27 = getelementptr inbounds %struct.isaac_state, %struct.isaac_state* %39, i32 0, i32 0
  %arraydecay28 = getelementptr inbounds [256 x i64], [256 x i64]* %m27, i64 0, i64 0
  %40 = load i64, i64* %x18, align 8, !tbaa !14
  %call29 = call i64 @ind(i64* %arraydecay28, i64 %40)
  %41 = load i64, i64* %a, align 8, !tbaa !14
  %add30 = add i64 %call29, %41
  %42 = load i64, i64* %b, align 8, !tbaa !14
  %add31 = add i64 %add30, %42
  store i64 %add31, i64* %y19, align 8, !tbaa !14
  %43 = load i64*, i64** %m, align 8, !tbaa !6
  %arrayidx32 = getelementptr inbounds i64, i64* %43, i64 1
  store i64 %add31, i64* %arrayidx32, align 8, !tbaa !14
  %44 = load %struct.isaac_state*, %struct.isaac_state** %s.addr, align 8, !tbaa !6
  %m33 = getelementptr inbounds %struct.isaac_state, %struct.isaac_state* %44, i32 0, i32 0
  %arraydecay34 = getelementptr inbounds [256 x i64], [256 x i64]* %m33, i64 0, i64 0
  %45 = load i64, i64* %y19, align 8, !tbaa !14
  %shr35 = lshr i64 %45, 8
  %call36 = call i64 @ind(i64* %arraydecay34, i64 %shr35)
  %46 = load i64, i64* %x18, align 8, !tbaa !14
  %add37 = add i64 %call36, %46
  %call38 = call i64 @just(i64 %add37)
  store i64 %call38, i64* %b, align 8, !tbaa !14
  %47 = load i64*, i64** %r, align 8, !tbaa !6
  %arrayidx39 = getelementptr inbounds i64, i64* %47, i64 1
  store i64 %call38, i64* %arrayidx39, align 8, !tbaa !14
  %48 = bitcast i64* %y19 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %48) #13
  %49 = bitcast i64* %x18 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %49) #13
  %50 = bitcast i64* %x40 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %50) #13
  %51 = bitcast i64* %y41 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %51) #13
  %52 = load i64, i64* %a, align 8, !tbaa !14
  %53 = load i64, i64* %a, align 8, !tbaa !14
  %shl42 = shl i64 %53, 12
  %xor43 = xor i64 %52, %shl42
  %xor44 = xor i64 0, %xor43
  %54 = load i64*, i64** %m, align 8, !tbaa !6
  %arrayidx45 = getelementptr inbounds i64, i64* %54, i64 130
  %55 = load i64, i64* %arrayidx45, align 8, !tbaa !14
  %add46 = add i64 %xor44, %55
  store i64 %add46, i64* %a, align 8, !tbaa !14
  %56 = load i64*, i64** %m, align 8, !tbaa !6
  %arrayidx47 = getelementptr inbounds i64, i64* %56, i64 2
  %57 = load i64, i64* %arrayidx47, align 8, !tbaa !14
  store i64 %57, i64* %x40, align 8, !tbaa !14
  %58 = load %struct.isaac_state*, %struct.isaac_state** %s.addr, align 8, !tbaa !6
  %m48 = getelementptr inbounds %struct.isaac_state, %struct.isaac_state* %58, i32 0, i32 0
  %arraydecay49 = getelementptr inbounds [256 x i64], [256 x i64]* %m48, i64 0, i64 0
  %59 = load i64, i64* %x40, align 8, !tbaa !14
  %call50 = call i64 @ind(i64* %arraydecay49, i64 %59)
  %60 = load i64, i64* %a, align 8, !tbaa !14
  %add51 = add i64 %call50, %60
  %61 = load i64, i64* %b, align 8, !tbaa !14
  %add52 = add i64 %add51, %61
  store i64 %add52, i64* %y41, align 8, !tbaa !14
  %62 = load i64*, i64** %m, align 8, !tbaa !6
  %arrayidx53 = getelementptr inbounds i64, i64* %62, i64 2
  store i64 %add52, i64* %arrayidx53, align 8, !tbaa !14
  %63 = load %struct.isaac_state*, %struct.isaac_state** %s.addr, align 8, !tbaa !6
  %m54 = getelementptr inbounds %struct.isaac_state, %struct.isaac_state* %63, i32 0, i32 0
  %arraydecay55 = getelementptr inbounds [256 x i64], [256 x i64]* %m54, i64 0, i64 0
  %64 = load i64, i64* %y41, align 8, !tbaa !14
  %shr56 = lshr i64 %64, 8
  %call57 = call i64 @ind(i64* %arraydecay55, i64 %shr56)
  %65 = load i64, i64* %x40, align 8, !tbaa !14
  %add58 = add i64 %call57, %65
  %call59 = call i64 @just(i64 %add58)
  store i64 %call59, i64* %b, align 8, !tbaa !14
  %66 = load i64*, i64** %r, align 8, !tbaa !6
  %arrayidx60 = getelementptr inbounds i64, i64* %66, i64 2
  store i64 %call59, i64* %arrayidx60, align 8, !tbaa !14
  %67 = bitcast i64* %y41 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %67) #13
  %68 = bitcast i64* %x40 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %68) #13
  %69 = bitcast i64* %x61 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %69) #13
  %70 = bitcast i64* %y62 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %70) #13
  %71 = load i64, i64* %a, align 8, !tbaa !14
  %72 = load i64, i64* %a, align 8, !tbaa !14
  %call63 = call i64 @just(i64 %72)
  %shr64 = lshr i64 %call63, 33
  %xor65 = xor i64 %71, %shr64
  %xor66 = xor i64 0, %xor65
  %73 = load i64*, i64** %m, align 8, !tbaa !6
  %arrayidx67 = getelementptr inbounds i64, i64* %73, i64 131
  %74 = load i64, i64* %arrayidx67, align 8, !tbaa !14
  %add68 = add i64 %xor66, %74
  store i64 %add68, i64* %a, align 8, !tbaa !14
  %75 = load i64*, i64** %m, align 8, !tbaa !6
  %arrayidx69 = getelementptr inbounds i64, i64* %75, i64 3
  %76 = load i64, i64* %arrayidx69, align 8, !tbaa !14
  store i64 %76, i64* %x61, align 8, !tbaa !14
  %77 = load %struct.isaac_state*, %struct.isaac_state** %s.addr, align 8, !tbaa !6
  %m70 = getelementptr inbounds %struct.isaac_state, %struct.isaac_state* %77, i32 0, i32 0
  %arraydecay71 = getelementptr inbounds [256 x i64], [256 x i64]* %m70, i64 0, i64 0
  %78 = load i64, i64* %x61, align 8, !tbaa !14
  %call72 = call i64 @ind(i64* %arraydecay71, i64 %78)
  %79 = load i64, i64* %a, align 8, !tbaa !14
  %add73 = add i64 %call72, %79
  %80 = load i64, i64* %b, align 8, !tbaa !14
  %add74 = add i64 %add73, %80
  store i64 %add74, i64* %y62, align 8, !tbaa !14
  %81 = load i64*, i64** %m, align 8, !tbaa !6
  %arrayidx75 = getelementptr inbounds i64, i64* %81, i64 3
  store i64 %add74, i64* %arrayidx75, align 8, !tbaa !14
  %82 = load %struct.isaac_state*, %struct.isaac_state** %s.addr, align 8, !tbaa !6
  %m76 = getelementptr inbounds %struct.isaac_state, %struct.isaac_state* %82, i32 0, i32 0
  %arraydecay77 = getelementptr inbounds [256 x i64], [256 x i64]* %m76, i64 0, i64 0
  %83 = load i64, i64* %y62, align 8, !tbaa !14
  %shr78 = lshr i64 %83, 8
  %call79 = call i64 @ind(i64* %arraydecay77, i64 %shr78)
  %84 = load i64, i64* %x61, align 8, !tbaa !14
  %add80 = add i64 %call79, %84
  %call81 = call i64 @just(i64 %add80)
  store i64 %call81, i64* %b, align 8, !tbaa !14
  %85 = load i64*, i64** %r, align 8, !tbaa !6
  %arrayidx82 = getelementptr inbounds i64, i64* %85, i64 3
  store i64 %call81, i64* %arrayidx82, align 8, !tbaa !14
  %86 = bitcast i64* %y62 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %86) #13
  %87 = bitcast i64* %x61 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %87) #13
  %88 = load i64*, i64** %r, align 8, !tbaa !6
  %add.ptr = getelementptr inbounds i64, i64* %88, i64 4
  store i64* %add.ptr, i64** %r, align 8, !tbaa !6
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %89 = load i64*, i64** %m, align 8, !tbaa !6
  %add.ptr83 = getelementptr inbounds i64, i64* %89, i64 4
  store i64* %add.ptr83, i64** %m, align 8, !tbaa !6
  %90 = load %struct.isaac_state*, %struct.isaac_state** %s.addr, align 8, !tbaa !6
  %m84 = getelementptr inbounds %struct.isaac_state, %struct.isaac_state* %90, i32 0, i32 0
  %arraydecay85 = getelementptr inbounds [256 x i64], [256 x i64]* %m84, i64 0, i64 0
  %add.ptr86 = getelementptr inbounds i64, i64* %arraydecay85, i64 128
  %cmp = icmp ult i64* %add.ptr83, %add.ptr86
  br i1 %cmp, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  br label %do.body87

do.body87:                                        ; preds = %do.cond176, %do.end
  %91 = bitcast i64* %x88 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %91) #13
  %92 = bitcast i64* %y89 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %92) #13
  %93 = load i64, i64* %a, align 8, !tbaa !14
  %94 = load i64, i64* %a, align 8, !tbaa !14
  %shl90 = shl i64 %94, 21
  %xor91 = xor i64 %93, %shl90
  %neg92 = xor i64 %xor91, -1
  %xor93 = xor i64 0, %neg92
  %95 = load i64*, i64** %m, align 8, !tbaa !6
  %arrayidx94 = getelementptr inbounds i64, i64* %95, i64 -128
  %96 = load i64, i64* %arrayidx94, align 8, !tbaa !14
  %add95 = add i64 %xor93, %96
  store i64 %add95, i64* %a, align 8, !tbaa !14
  %97 = load i64*, i64** %m, align 8, !tbaa !6
  %arrayidx96 = getelementptr inbounds i64, i64* %97, i64 0
  %98 = load i64, i64* %arrayidx96, align 8, !tbaa !14
  store i64 %98, i64* %x88, align 8, !tbaa !14
  %99 = load %struct.isaac_state*, %struct.isaac_state** %s.addr, align 8, !tbaa !6
  %m97 = getelementptr inbounds %struct.isaac_state, %struct.isaac_state* %99, i32 0, i32 0
  %arraydecay98 = getelementptr inbounds [256 x i64], [256 x i64]* %m97, i64 0, i64 0
  %100 = load i64, i64* %x88, align 8, !tbaa !14
  %call99 = call i64 @ind(i64* %arraydecay98, i64 %100)
  %101 = load i64, i64* %a, align 8, !tbaa !14
  %add100 = add i64 %call99, %101
  %102 = load i64, i64* %b, align 8, !tbaa !14
  %add101 = add i64 %add100, %102
  store i64 %add101, i64* %y89, align 8, !tbaa !14
  %103 = load i64*, i64** %m, align 8, !tbaa !6
  %arrayidx102 = getelementptr inbounds i64, i64* %103, i64 0
  store i64 %add101, i64* %arrayidx102, align 8, !tbaa !14
  %104 = load %struct.isaac_state*, %struct.isaac_state** %s.addr, align 8, !tbaa !6
  %m103 = getelementptr inbounds %struct.isaac_state, %struct.isaac_state* %104, i32 0, i32 0
  %arraydecay104 = getelementptr inbounds [256 x i64], [256 x i64]* %m103, i64 0, i64 0
  %105 = load i64, i64* %y89, align 8, !tbaa !14
  %shr105 = lshr i64 %105, 8
  %call106 = call i64 @ind(i64* %arraydecay104, i64 %shr105)
  %106 = load i64, i64* %x88, align 8, !tbaa !14
  %add107 = add i64 %call106, %106
  %call108 = call i64 @just(i64 %add107)
  store i64 %call108, i64* %b, align 8, !tbaa !14
  %107 = load i64*, i64** %r, align 8, !tbaa !6
  %arrayidx109 = getelementptr inbounds i64, i64* %107, i64 0
  store i64 %call108, i64* %arrayidx109, align 8, !tbaa !14
  %108 = bitcast i64* %y89 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %108) #13
  %109 = bitcast i64* %x88 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %109) #13
  %110 = bitcast i64* %x110 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %110) #13
  %111 = bitcast i64* %y111 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %111) #13
  %112 = load i64, i64* %a, align 8, !tbaa !14
  %113 = load i64, i64* %a, align 8, !tbaa !14
  %call112 = call i64 @just(i64 %113)
  %shr113 = lshr i64 %call112, 5
  %xor114 = xor i64 %112, %shr113
  %xor115 = xor i64 0, %xor114
  %114 = load i64*, i64** %m, align 8, !tbaa !6
  %arrayidx116 = getelementptr inbounds i64, i64* %114, i64 -127
  %115 = load i64, i64* %arrayidx116, align 8, !tbaa !14
  %add117 = add i64 %xor115, %115
  store i64 %add117, i64* %a, align 8, !tbaa !14
  %116 = load i64*, i64** %m, align 8, !tbaa !6
  %arrayidx118 = getelementptr inbounds i64, i64* %116, i64 1
  %117 = load i64, i64* %arrayidx118, align 8, !tbaa !14
  store i64 %117, i64* %x110, align 8, !tbaa !14
  %118 = load %struct.isaac_state*, %struct.isaac_state** %s.addr, align 8, !tbaa !6
  %m119 = getelementptr inbounds %struct.isaac_state, %struct.isaac_state* %118, i32 0, i32 0
  %arraydecay120 = getelementptr inbounds [256 x i64], [256 x i64]* %m119, i64 0, i64 0
  %119 = load i64, i64* %x110, align 8, !tbaa !14
  %call121 = call i64 @ind(i64* %arraydecay120, i64 %119)
  %120 = load i64, i64* %a, align 8, !tbaa !14
  %add122 = add i64 %call121, %120
  %121 = load i64, i64* %b, align 8, !tbaa !14
  %add123 = add i64 %add122, %121
  store i64 %add123, i64* %y111, align 8, !tbaa !14
  %122 = load i64*, i64** %m, align 8, !tbaa !6
  %arrayidx124 = getelementptr inbounds i64, i64* %122, i64 1
  store i64 %add123, i64* %arrayidx124, align 8, !tbaa !14
  %123 = load %struct.isaac_state*, %struct.isaac_state** %s.addr, align 8, !tbaa !6
  %m125 = getelementptr inbounds %struct.isaac_state, %struct.isaac_state* %123, i32 0, i32 0
  %arraydecay126 = getelementptr inbounds [256 x i64], [256 x i64]* %m125, i64 0, i64 0
  %124 = load i64, i64* %y111, align 8, !tbaa !14
  %shr127 = lshr i64 %124, 8
  %call128 = call i64 @ind(i64* %arraydecay126, i64 %shr127)
  %125 = load i64, i64* %x110, align 8, !tbaa !14
  %add129 = add i64 %call128, %125
  %call130 = call i64 @just(i64 %add129)
  store i64 %call130, i64* %b, align 8, !tbaa !14
  %126 = load i64*, i64** %r, align 8, !tbaa !6
  %arrayidx131 = getelementptr inbounds i64, i64* %126, i64 1
  store i64 %call130, i64* %arrayidx131, align 8, !tbaa !14
  %127 = bitcast i64* %y111 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %127) #13
  %128 = bitcast i64* %x110 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %128) #13
  %129 = bitcast i64* %x132 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %129) #13
  %130 = bitcast i64* %y133 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %130) #13
  %131 = load i64, i64* %a, align 8, !tbaa !14
  %132 = load i64, i64* %a, align 8, !tbaa !14
  %shl134 = shl i64 %132, 12
  %xor135 = xor i64 %131, %shl134
  %xor136 = xor i64 0, %xor135
  %133 = load i64*, i64** %m, align 8, !tbaa !6
  %arrayidx137 = getelementptr inbounds i64, i64* %133, i64 -126
  %134 = load i64, i64* %arrayidx137, align 8, !tbaa !14
  %add138 = add i64 %xor136, %134
  store i64 %add138, i64* %a, align 8, !tbaa !14
  %135 = load i64*, i64** %m, align 8, !tbaa !6
  %arrayidx139 = getelementptr inbounds i64, i64* %135, i64 2
  %136 = load i64, i64* %arrayidx139, align 8, !tbaa !14
  store i64 %136, i64* %x132, align 8, !tbaa !14
  %137 = load %struct.isaac_state*, %struct.isaac_state** %s.addr, align 8, !tbaa !6
  %m140 = getelementptr inbounds %struct.isaac_state, %struct.isaac_state* %137, i32 0, i32 0
  %arraydecay141 = getelementptr inbounds [256 x i64], [256 x i64]* %m140, i64 0, i64 0
  %138 = load i64, i64* %x132, align 8, !tbaa !14
  %call142 = call i64 @ind(i64* %arraydecay141, i64 %138)
  %139 = load i64, i64* %a, align 8, !tbaa !14
  %add143 = add i64 %call142, %139
  %140 = load i64, i64* %b, align 8, !tbaa !14
  %add144 = add i64 %add143, %140
  store i64 %add144, i64* %y133, align 8, !tbaa !14
  %141 = load i64*, i64** %m, align 8, !tbaa !6
  %arrayidx145 = getelementptr inbounds i64, i64* %141, i64 2
  store i64 %add144, i64* %arrayidx145, align 8, !tbaa !14
  %142 = load %struct.isaac_state*, %struct.isaac_state** %s.addr, align 8, !tbaa !6
  %m146 = getelementptr inbounds %struct.isaac_state, %struct.isaac_state* %142, i32 0, i32 0
  %arraydecay147 = getelementptr inbounds [256 x i64], [256 x i64]* %m146, i64 0, i64 0
  %143 = load i64, i64* %y133, align 8, !tbaa !14
  %shr148 = lshr i64 %143, 8
  %call149 = call i64 @ind(i64* %arraydecay147, i64 %shr148)
  %144 = load i64, i64* %x132, align 8, !tbaa !14
  %add150 = add i64 %call149, %144
  %call151 = call i64 @just(i64 %add150)
  store i64 %call151, i64* %b, align 8, !tbaa !14
  %145 = load i64*, i64** %r, align 8, !tbaa !6
  %arrayidx152 = getelementptr inbounds i64, i64* %145, i64 2
  store i64 %call151, i64* %arrayidx152, align 8, !tbaa !14
  %146 = bitcast i64* %y133 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %146) #13
  %147 = bitcast i64* %x132 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %147) #13
  %148 = bitcast i64* %x153 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %148) #13
  %149 = bitcast i64* %y154 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %149) #13
  %150 = load i64, i64* %a, align 8, !tbaa !14
  %151 = load i64, i64* %a, align 8, !tbaa !14
  %call155 = call i64 @just(i64 %151)
  %shr156 = lshr i64 %call155, 33
  %xor157 = xor i64 %150, %shr156
  %xor158 = xor i64 0, %xor157
  %152 = load i64*, i64** %m, align 8, !tbaa !6
  %arrayidx159 = getelementptr inbounds i64, i64* %152, i64 -125
  %153 = load i64, i64* %arrayidx159, align 8, !tbaa !14
  %add160 = add i64 %xor158, %153
  store i64 %add160, i64* %a, align 8, !tbaa !14
  %154 = load i64*, i64** %m, align 8, !tbaa !6
  %arrayidx161 = getelementptr inbounds i64, i64* %154, i64 3
  %155 = load i64, i64* %arrayidx161, align 8, !tbaa !14
  store i64 %155, i64* %x153, align 8, !tbaa !14
  %156 = load %struct.isaac_state*, %struct.isaac_state** %s.addr, align 8, !tbaa !6
  %m162 = getelementptr inbounds %struct.isaac_state, %struct.isaac_state* %156, i32 0, i32 0
  %arraydecay163 = getelementptr inbounds [256 x i64], [256 x i64]* %m162, i64 0, i64 0
  %157 = load i64, i64* %x153, align 8, !tbaa !14
  %call164 = call i64 @ind(i64* %arraydecay163, i64 %157)
  %158 = load i64, i64* %a, align 8, !tbaa !14
  %add165 = add i64 %call164, %158
  %159 = load i64, i64* %b, align 8, !tbaa !14
  %add166 = add i64 %add165, %159
  store i64 %add166, i64* %y154, align 8, !tbaa !14
  %160 = load i64*, i64** %m, align 8, !tbaa !6
  %arrayidx167 = getelementptr inbounds i64, i64* %160, i64 3
  store i64 %add166, i64* %arrayidx167, align 8, !tbaa !14
  %161 = load %struct.isaac_state*, %struct.isaac_state** %s.addr, align 8, !tbaa !6
  %m168 = getelementptr inbounds %struct.isaac_state, %struct.isaac_state* %161, i32 0, i32 0
  %arraydecay169 = getelementptr inbounds [256 x i64], [256 x i64]* %m168, i64 0, i64 0
  %162 = load i64, i64* %y154, align 8, !tbaa !14
  %shr170 = lshr i64 %162, 8
  %call171 = call i64 @ind(i64* %arraydecay169, i64 %shr170)
  %163 = load i64, i64* %x153, align 8, !tbaa !14
  %add172 = add i64 %call171, %163
  %call173 = call i64 @just(i64 %add172)
  store i64 %call173, i64* %b, align 8, !tbaa !14
  %164 = load i64*, i64** %r, align 8, !tbaa !6
  %arrayidx174 = getelementptr inbounds i64, i64* %164, i64 3
  store i64 %call173, i64* %arrayidx174, align 8, !tbaa !14
  %165 = bitcast i64* %y154 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %165) #13
  %166 = bitcast i64* %x153 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %166) #13
  %167 = load i64*, i64** %r, align 8, !tbaa !6
  %add.ptr175 = getelementptr inbounds i64, i64* %167, i64 4
  store i64* %add.ptr175, i64** %r, align 8, !tbaa !6
  br label %do.cond176

do.cond176:                                       ; preds = %do.body87
  %168 = load i64*, i64** %m, align 8, !tbaa !6
  %add.ptr177 = getelementptr inbounds i64, i64* %168, i64 4
  store i64* %add.ptr177, i64** %m, align 8, !tbaa !6
  %169 = load %struct.isaac_state*, %struct.isaac_state** %s.addr, align 8, !tbaa !6
  %m178 = getelementptr inbounds %struct.isaac_state, %struct.isaac_state* %169, i32 0, i32 0
  %arraydecay179 = getelementptr inbounds [256 x i64], [256 x i64]* %m178, i64 0, i64 0
  %add.ptr180 = getelementptr inbounds i64, i64* %arraydecay179, i64 256
  %cmp181 = icmp ult i64* %add.ptr177, %add.ptr180
  br i1 %cmp181, label %do.body87, label %do.end182

do.end182:                                        ; preds = %do.cond176
  %170 = load i64, i64* %a, align 8, !tbaa !14
  %171 = load %struct.isaac_state*, %struct.isaac_state** %s.addr, align 8, !tbaa !6
  %a183 = getelementptr inbounds %struct.isaac_state, %struct.isaac_state* %171, i32 0, i32 1
  store i64 %170, i64* %a183, align 8, !tbaa !169
  %172 = load i64, i64* %b, align 8, !tbaa !14
  %173 = load %struct.isaac_state*, %struct.isaac_state** %s.addr, align 8, !tbaa !6
  %b184 = getelementptr inbounds %struct.isaac_state, %struct.isaac_state* %173, i32 0, i32 2
  store i64 %172, i64* %b184, align 8, !tbaa !170
  %174 = bitcast i64** %r to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %174) #13
  %175 = bitcast i64** %m to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %175) #13
  %176 = bitcast i64* %b to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %176) #13
  %177 = bitcast i64* %a to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %177) #13
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal i64 @ind(i64* %m, i64 %x) #2 {
entry:
  %m.addr = alloca i64*, align 8
  %x.addr = alloca i64, align 8
  %void_m = alloca i8*, align 8
  %base_p = alloca i8*, align 8
  %word_p = alloca i8*, align 8
  %p = alloca i64*, align 8
  store i64* %m, i64** %m.addr, align 8, !tbaa !6
  store i64 %x, i64* %x.addr, align 8, !tbaa !14
  %0 = bitcast i8** %void_m to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #13
  %1 = load i64*, i64** %m.addr, align 8, !tbaa !6
  %2 = bitcast i64* %1 to i8*
  store i8* %2, i8** %void_m, align 8, !tbaa !6
  %3 = bitcast i8** %base_p to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %3) #13
  %4 = load i8*, i8** %void_m, align 8, !tbaa !6
  store i8* %4, i8** %base_p, align 8, !tbaa !6
  %5 = bitcast i8** %word_p to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %5) #13
  %6 = load i8*, i8** %base_p, align 8, !tbaa !6
  %7 = load i64, i64* %x.addr, align 8, !tbaa !14
  %and = and i64 %7, 2040
  %add.ptr = getelementptr inbounds i8, i8* %6, i64 %and
  store i8* %add.ptr, i8** %word_p, align 8, !tbaa !6
  %8 = bitcast i64** %p to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %8) #13
  %9 = load i8*, i8** %word_p, align 8, !tbaa !6
  %10 = bitcast i8* %9 to i64*
  store i64* %10, i64** %p, align 8, !tbaa !6
  %11 = load i64*, i64** %p, align 8, !tbaa !6
  %12 = load i64, i64* %11, align 8, !tbaa !14
  %13 = bitcast i64** %p to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %13) #13
  %14 = bitcast i8** %word_p to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %14) #13
  %15 = bitcast i8** %base_p to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %15) #13
  %16 = bitcast i8** %void_m to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %16) #13
  ret i64 %12
}

; Function Attrs: inlinehint nounwind uwtable
define internal i64 @just(i64 %a) #2 {
entry:
  %a.addr = alloca i64, align 8
  %desired_bits = alloca i64, align 8
  store i64 %a, i64* %a.addr, align 8, !tbaa !14
  %0 = bitcast i64* %desired_bits to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #13
  store i64 -1, i64* %desired_bits, align 8, !tbaa !14
  %1 = load i64, i64* %a.addr, align 8, !tbaa !14
  %2 = load i64, i64* %desired_bits, align 8, !tbaa !14
  %and = and i64 %1, %2
  %3 = bitcast i64* %desired_bits to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %3) #13
  ret i64 %and
}

; Function Attrs: nounwind uwtable
define dso_local void @isaac_seed(%struct.isaac_state* nonnull %s) #7 {
entry:
  %s.addr = alloca %struct.isaac_state*, align 8
  %a = alloca i64, align 8
  %b = alloca i64, align 8
  %c = alloca i64, align 8
  %d = alloca i64, align 8
  %e = alloca i64, align 8
  %f = alloca i64, align 8
  %g = alloca i64, align 8
  %h = alloca i64, align 8
  %i = alloca i32, align 4
  %i99 = alloca i32, align 4
  store %struct.isaac_state* %s, %struct.isaac_state** %s.addr, align 8, !tbaa !6
  %0 = bitcast i64* %a to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #13
  store i64 7240739780546808700, i64* %a, align 8, !tbaa !14
  %1 = bitcast i64* %b to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %1) #13
  store i64 -5046086420515862430, i64* %b, align 8, !tbaa !14
  %2 = bitcast i64* %c to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %2) #13
  store i64 -8354558816804203872, i64* %c, align 8, !tbaa !14
  %3 = bitcast i64* %d to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %3) #13
  store i64 -5576812576440232668, i64* %d, align 8, !tbaa !14
  %4 = bitcast i64* %e to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %4) #13
  store i64 -9011610652101975858, i64* %e, align 8, !tbaa !14
  %5 = bitcast i64* %f to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %5) #13
  store i64 5259722845879046933, i64* %f, align 8, !tbaa !14
  %6 = bitcast i64* %g to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %6) #13
  store i64 -5865837416287532563, i64* %g, align 8, !tbaa !14
  %7 = bitcast i64* %h to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %7) #13
  store i64 -7424904924229222229, i64* %h, align 8, !tbaa !14
  %8 = bitcast i32* %i to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %8) #13
  store i32 0, i32* %i, align 4, !tbaa !2
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %9 = load i32, i32* %i, align 4, !tbaa !2
  %cmp = icmp slt i32 %9, 256
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %10 = load %struct.isaac_state*, %struct.isaac_state** %s.addr, align 8, !tbaa !6
  %m = getelementptr inbounds %struct.isaac_state, %struct.isaac_state* %10, i32 0, i32 0
  %11 = load i32, i32* %i, align 4, !tbaa !2
  %idxprom = sext i32 %11 to i64
  %arrayidx = getelementptr inbounds [256 x i64], [256 x i64]* %m, i64 0, i64 %idxprom
  %12 = load i64, i64* %arrayidx, align 8, !tbaa !14
  %13 = load i64, i64* %a, align 8, !tbaa !14
  %add = add i64 %13, %12
  store i64 %add, i64* %a, align 8, !tbaa !14
  %14 = load %struct.isaac_state*, %struct.isaac_state** %s.addr, align 8, !tbaa !6
  %m1 = getelementptr inbounds %struct.isaac_state, %struct.isaac_state* %14, i32 0, i32 0
  %15 = load i32, i32* %i, align 4, !tbaa !2
  %add2 = add nsw i32 %15, 1
  %idxprom3 = sext i32 %add2 to i64
  %arrayidx4 = getelementptr inbounds [256 x i64], [256 x i64]* %m1, i64 0, i64 %idxprom3
  %16 = load i64, i64* %arrayidx4, align 8, !tbaa !14
  %17 = load i64, i64* %b, align 8, !tbaa !14
  %add5 = add i64 %17, %16
  store i64 %add5, i64* %b, align 8, !tbaa !14
  %18 = load %struct.isaac_state*, %struct.isaac_state** %s.addr, align 8, !tbaa !6
  %m6 = getelementptr inbounds %struct.isaac_state, %struct.isaac_state* %18, i32 0, i32 0
  %19 = load i32, i32* %i, align 4, !tbaa !2
  %add7 = add nsw i32 %19, 2
  %idxprom8 = sext i32 %add7 to i64
  %arrayidx9 = getelementptr inbounds [256 x i64], [256 x i64]* %m6, i64 0, i64 %idxprom8
  %20 = load i64, i64* %arrayidx9, align 8, !tbaa !14
  %21 = load i64, i64* %c, align 8, !tbaa !14
  %add10 = add i64 %21, %20
  store i64 %add10, i64* %c, align 8, !tbaa !14
  %22 = load %struct.isaac_state*, %struct.isaac_state** %s.addr, align 8, !tbaa !6
  %m11 = getelementptr inbounds %struct.isaac_state, %struct.isaac_state* %22, i32 0, i32 0
  %23 = load i32, i32* %i, align 4, !tbaa !2
  %add12 = add nsw i32 %23, 3
  %idxprom13 = sext i32 %add12 to i64
  %arrayidx14 = getelementptr inbounds [256 x i64], [256 x i64]* %m11, i64 0, i64 %idxprom13
  %24 = load i64, i64* %arrayidx14, align 8, !tbaa !14
  %25 = load i64, i64* %d, align 8, !tbaa !14
  %add15 = add i64 %25, %24
  store i64 %add15, i64* %d, align 8, !tbaa !14
  %26 = load %struct.isaac_state*, %struct.isaac_state** %s.addr, align 8, !tbaa !6
  %m16 = getelementptr inbounds %struct.isaac_state, %struct.isaac_state* %26, i32 0, i32 0
  %27 = load i32, i32* %i, align 4, !tbaa !2
  %add17 = add nsw i32 %27, 4
  %idxprom18 = sext i32 %add17 to i64
  %arrayidx19 = getelementptr inbounds [256 x i64], [256 x i64]* %m16, i64 0, i64 %idxprom18
  %28 = load i64, i64* %arrayidx19, align 8, !tbaa !14
  %29 = load i64, i64* %e, align 8, !tbaa !14
  %add20 = add i64 %29, %28
  store i64 %add20, i64* %e, align 8, !tbaa !14
  %30 = load %struct.isaac_state*, %struct.isaac_state** %s.addr, align 8, !tbaa !6
  %m21 = getelementptr inbounds %struct.isaac_state, %struct.isaac_state* %30, i32 0, i32 0
  %31 = load i32, i32* %i, align 4, !tbaa !2
  %add22 = add nsw i32 %31, 5
  %idxprom23 = sext i32 %add22 to i64
  %arrayidx24 = getelementptr inbounds [256 x i64], [256 x i64]* %m21, i64 0, i64 %idxprom23
  %32 = load i64, i64* %arrayidx24, align 8, !tbaa !14
  %33 = load i64, i64* %f, align 8, !tbaa !14
  %add25 = add i64 %33, %32
  store i64 %add25, i64* %f, align 8, !tbaa !14
  %34 = load %struct.isaac_state*, %struct.isaac_state** %s.addr, align 8, !tbaa !6
  %m26 = getelementptr inbounds %struct.isaac_state, %struct.isaac_state* %34, i32 0, i32 0
  %35 = load i32, i32* %i, align 4, !tbaa !2
  %add27 = add nsw i32 %35, 6
  %idxprom28 = sext i32 %add27 to i64
  %arrayidx29 = getelementptr inbounds [256 x i64], [256 x i64]* %m26, i64 0, i64 %idxprom28
  %36 = load i64, i64* %arrayidx29, align 8, !tbaa !14
  %37 = load i64, i64* %g, align 8, !tbaa !14
  %add30 = add i64 %37, %36
  store i64 %add30, i64* %g, align 8, !tbaa !14
  %38 = load %struct.isaac_state*, %struct.isaac_state** %s.addr, align 8, !tbaa !6
  %m31 = getelementptr inbounds %struct.isaac_state, %struct.isaac_state* %38, i32 0, i32 0
  %39 = load i32, i32* %i, align 4, !tbaa !2
  %add32 = add nsw i32 %39, 7
  %idxprom33 = sext i32 %add32 to i64
  %arrayidx34 = getelementptr inbounds [256 x i64], [256 x i64]* %m31, i64 0, i64 %idxprom33
  %40 = load i64, i64* %arrayidx34, align 8, !tbaa !14
  %41 = load i64, i64* %h, align 8, !tbaa !14
  %add35 = add i64 %41, %40
  store i64 %add35, i64* %h, align 8, !tbaa !14
  %42 = load i64, i64* %e, align 8, !tbaa !14
  %43 = load i64, i64* %a, align 8, !tbaa !14
  %sub = sub i64 %43, %42
  store i64 %sub, i64* %a, align 8, !tbaa !14
  %44 = load i64, i64* %h, align 8, !tbaa !14
  %call = call i64 @just(i64 %44)
  %shr = lshr i64 %call, 9
  %45 = load i64, i64* %f, align 8, !tbaa !14
  %xor = xor i64 %45, %shr
  store i64 %xor, i64* %f, align 8, !tbaa !14
  %46 = load i64, i64* %a, align 8, !tbaa !14
  %47 = load i64, i64* %h, align 8, !tbaa !14
  %add36 = add i64 %47, %46
  store i64 %add36, i64* %h, align 8, !tbaa !14
  %48 = load i64, i64* %f, align 8, !tbaa !14
  %49 = load i64, i64* %b, align 8, !tbaa !14
  %sub37 = sub i64 %49, %48
  store i64 %sub37, i64* %b, align 8, !tbaa !14
  %50 = load i64, i64* %a, align 8, !tbaa !14
  %shl = shl i64 %50, 9
  %51 = load i64, i64* %g, align 8, !tbaa !14
  %xor38 = xor i64 %51, %shl
  store i64 %xor38, i64* %g, align 8, !tbaa !14
  %52 = load i64, i64* %b, align 8, !tbaa !14
  %53 = load i64, i64* %a, align 8, !tbaa !14
  %add39 = add i64 %53, %52
  store i64 %add39, i64* %a, align 8, !tbaa !14
  %54 = load i64, i64* %g, align 8, !tbaa !14
  %55 = load i64, i64* %c, align 8, !tbaa !14
  %sub40 = sub i64 %55, %54
  store i64 %sub40, i64* %c, align 8, !tbaa !14
  %56 = load i64, i64* %b, align 8, !tbaa !14
  %call41 = call i64 @just(i64 %56)
  %shr42 = lshr i64 %call41, 23
  %57 = load i64, i64* %h, align 8, !tbaa !14
  %xor43 = xor i64 %57, %shr42
  store i64 %xor43, i64* %h, align 8, !tbaa !14
  %58 = load i64, i64* %c, align 8, !tbaa !14
  %59 = load i64, i64* %b, align 8, !tbaa !14
  %add44 = add i64 %59, %58
  store i64 %add44, i64* %b, align 8, !tbaa !14
  %60 = load i64, i64* %h, align 8, !tbaa !14
  %61 = load i64, i64* %d, align 8, !tbaa !14
  %sub45 = sub i64 %61, %60
  store i64 %sub45, i64* %d, align 8, !tbaa !14
  %62 = load i64, i64* %c, align 8, !tbaa !14
  %shl46 = shl i64 %62, 15
  %63 = load i64, i64* %a, align 8, !tbaa !14
  %xor47 = xor i64 %63, %shl46
  store i64 %xor47, i64* %a, align 8, !tbaa !14
  %64 = load i64, i64* %d, align 8, !tbaa !14
  %65 = load i64, i64* %c, align 8, !tbaa !14
  %add48 = add i64 %65, %64
  store i64 %add48, i64* %c, align 8, !tbaa !14
  %66 = load i64, i64* %a, align 8, !tbaa !14
  %67 = load i64, i64* %e, align 8, !tbaa !14
  %sub49 = sub i64 %67, %66
  store i64 %sub49, i64* %e, align 8, !tbaa !14
  %68 = load i64, i64* %d, align 8, !tbaa !14
  %call50 = call i64 @just(i64 %68)
  %shr51 = lshr i64 %call50, 14
  %69 = load i64, i64* %b, align 8, !tbaa !14
  %xor52 = xor i64 %69, %shr51
  store i64 %xor52, i64* %b, align 8, !tbaa !14
  %70 = load i64, i64* %e, align 8, !tbaa !14
  %71 = load i64, i64* %d, align 8, !tbaa !14
  %add53 = add i64 %71, %70
  store i64 %add53, i64* %d, align 8, !tbaa !14
  %72 = load i64, i64* %b, align 8, !tbaa !14
  %73 = load i64, i64* %f, align 8, !tbaa !14
  %sub54 = sub i64 %73, %72
  store i64 %sub54, i64* %f, align 8, !tbaa !14
  %74 = load i64, i64* %e, align 8, !tbaa !14
  %shl55 = shl i64 %74, 20
  %75 = load i64, i64* %c, align 8, !tbaa !14
  %xor56 = xor i64 %75, %shl55
  store i64 %xor56, i64* %c, align 8, !tbaa !14
  %76 = load i64, i64* %f, align 8, !tbaa !14
  %77 = load i64, i64* %e, align 8, !tbaa !14
  %add57 = add i64 %77, %76
  store i64 %add57, i64* %e, align 8, !tbaa !14
  %78 = load i64, i64* %c, align 8, !tbaa !14
  %79 = load i64, i64* %g, align 8, !tbaa !14
  %sub58 = sub i64 %79, %78
  store i64 %sub58, i64* %g, align 8, !tbaa !14
  %80 = load i64, i64* %f, align 8, !tbaa !14
  %call59 = call i64 @just(i64 %80)
  %shr60 = lshr i64 %call59, 17
  %81 = load i64, i64* %d, align 8, !tbaa !14
  %xor61 = xor i64 %81, %shr60
  store i64 %xor61, i64* %d, align 8, !tbaa !14
  %82 = load i64, i64* %g, align 8, !tbaa !14
  %83 = load i64, i64* %f, align 8, !tbaa !14
  %add62 = add i64 %83, %82
  store i64 %add62, i64* %f, align 8, !tbaa !14
  %84 = load i64, i64* %d, align 8, !tbaa !14
  %85 = load i64, i64* %h, align 8, !tbaa !14
  %sub63 = sub i64 %85, %84
  store i64 %sub63, i64* %h, align 8, !tbaa !14
  %86 = load i64, i64* %g, align 8, !tbaa !14
  %shl64 = shl i64 %86, 14
  %87 = load i64, i64* %e, align 8, !tbaa !14
  %xor65 = xor i64 %87, %shl64
  store i64 %xor65, i64* %e, align 8, !tbaa !14
  %88 = load i64, i64* %h, align 8, !tbaa !14
  %89 = load i64, i64* %g, align 8, !tbaa !14
  %add66 = add i64 %89, %88
  store i64 %add66, i64* %g, align 8, !tbaa !14
  %90 = load i64, i64* %a, align 8, !tbaa !14
  %91 = load %struct.isaac_state*, %struct.isaac_state** %s.addr, align 8, !tbaa !6
  %m67 = getelementptr inbounds %struct.isaac_state, %struct.isaac_state* %91, i32 0, i32 0
  %92 = load i32, i32* %i, align 4, !tbaa !2
  %idxprom68 = sext i32 %92 to i64
  %arrayidx69 = getelementptr inbounds [256 x i64], [256 x i64]* %m67, i64 0, i64 %idxprom68
  store i64 %90, i64* %arrayidx69, align 8, !tbaa !14
  %93 = load i64, i64* %b, align 8, !tbaa !14
  %94 = load %struct.isaac_state*, %struct.isaac_state** %s.addr, align 8, !tbaa !6
  %m70 = getelementptr inbounds %struct.isaac_state, %struct.isaac_state* %94, i32 0, i32 0
  %95 = load i32, i32* %i, align 4, !tbaa !2
  %add71 = add nsw i32 %95, 1
  %idxprom72 = sext i32 %add71 to i64
  %arrayidx73 = getelementptr inbounds [256 x i64], [256 x i64]* %m70, i64 0, i64 %idxprom72
  store i64 %93, i64* %arrayidx73, align 8, !tbaa !14
  %96 = load i64, i64* %c, align 8, !tbaa !14
  %97 = load %struct.isaac_state*, %struct.isaac_state** %s.addr, align 8, !tbaa !6
  %m74 = getelementptr inbounds %struct.isaac_state, %struct.isaac_state* %97, i32 0, i32 0
  %98 = load i32, i32* %i, align 4, !tbaa !2
  %add75 = add nsw i32 %98, 2
  %idxprom76 = sext i32 %add75 to i64
  %arrayidx77 = getelementptr inbounds [256 x i64], [256 x i64]* %m74, i64 0, i64 %idxprom76
  store i64 %96, i64* %arrayidx77, align 8, !tbaa !14
  %99 = load i64, i64* %d, align 8, !tbaa !14
  %100 = load %struct.isaac_state*, %struct.isaac_state** %s.addr, align 8, !tbaa !6
  %m78 = getelementptr inbounds %struct.isaac_state, %struct.isaac_state* %100, i32 0, i32 0
  %101 = load i32, i32* %i, align 4, !tbaa !2
  %add79 = add nsw i32 %101, 3
  %idxprom80 = sext i32 %add79 to i64
  %arrayidx81 = getelementptr inbounds [256 x i64], [256 x i64]* %m78, i64 0, i64 %idxprom80
  store i64 %99, i64* %arrayidx81, align 8, !tbaa !14
  %102 = load i64, i64* %e, align 8, !tbaa !14
  %103 = load %struct.isaac_state*, %struct.isaac_state** %s.addr, align 8, !tbaa !6
  %m82 = getelementptr inbounds %struct.isaac_state, %struct.isaac_state* %103, i32 0, i32 0
  %104 = load i32, i32* %i, align 4, !tbaa !2
  %add83 = add nsw i32 %104, 4
  %idxprom84 = sext i32 %add83 to i64
  %arrayidx85 = getelementptr inbounds [256 x i64], [256 x i64]* %m82, i64 0, i64 %idxprom84
  store i64 %102, i64* %arrayidx85, align 8, !tbaa !14
  %105 = load i64, i64* %f, align 8, !tbaa !14
  %106 = load %struct.isaac_state*, %struct.isaac_state** %s.addr, align 8, !tbaa !6
  %m86 = getelementptr inbounds %struct.isaac_state, %struct.isaac_state* %106, i32 0, i32 0
  %107 = load i32, i32* %i, align 4, !tbaa !2
  %add87 = add nsw i32 %107, 5
  %idxprom88 = sext i32 %add87 to i64
  %arrayidx89 = getelementptr inbounds [256 x i64], [256 x i64]* %m86, i64 0, i64 %idxprom88
  store i64 %105, i64* %arrayidx89, align 8, !tbaa !14
  %108 = load i64, i64* %g, align 8, !tbaa !14
  %109 = load %struct.isaac_state*, %struct.isaac_state** %s.addr, align 8, !tbaa !6
  %m90 = getelementptr inbounds %struct.isaac_state, %struct.isaac_state* %109, i32 0, i32 0
  %110 = load i32, i32* %i, align 4, !tbaa !2
  %add91 = add nsw i32 %110, 6
  %idxprom92 = sext i32 %add91 to i64
  %arrayidx93 = getelementptr inbounds [256 x i64], [256 x i64]* %m90, i64 0, i64 %idxprom92
  store i64 %108, i64* %arrayidx93, align 8, !tbaa !14
  %111 = load i64, i64* %h, align 8, !tbaa !14
  %112 = load %struct.isaac_state*, %struct.isaac_state** %s.addr, align 8, !tbaa !6
  %m94 = getelementptr inbounds %struct.isaac_state, %struct.isaac_state* %112, i32 0, i32 0
  %113 = load i32, i32* %i, align 4, !tbaa !2
  %add95 = add nsw i32 %113, 7
  %idxprom96 = sext i32 %add95 to i64
  %arrayidx97 = getelementptr inbounds [256 x i64], [256 x i64]* %m94, i64 0, i64 %idxprom96
  store i64 %111, i64* %arrayidx97, align 8, !tbaa !14
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %114 = load i32, i32* %i, align 4, !tbaa !2
  %add98 = add nsw i32 %114, 8
  store i32 %add98, i32* %i, align 4, !tbaa !2
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %115 = bitcast i32* %i to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %115) #13
  %116 = bitcast i32* %i99 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %116) #13
  store i32 0, i32* %i99, align 4, !tbaa !2
  br label %for.cond100

for.cond100:                                      ; preds = %for.inc209, %for.end
  %117 = load i32, i32* %i99, align 4, !tbaa !2
  %cmp101 = icmp slt i32 %117, 256
  br i1 %cmp101, label %for.body102, label %for.end211

for.body102:                                      ; preds = %for.cond100
  %118 = load %struct.isaac_state*, %struct.isaac_state** %s.addr, align 8, !tbaa !6
  %m103 = getelementptr inbounds %struct.isaac_state, %struct.isaac_state* %118, i32 0, i32 0
  %119 = load i32, i32* %i99, align 4, !tbaa !2
  %idxprom104 = sext i32 %119 to i64
  %arrayidx105 = getelementptr inbounds [256 x i64], [256 x i64]* %m103, i64 0, i64 %idxprom104
  %120 = load i64, i64* %arrayidx105, align 8, !tbaa !14
  %121 = load i64, i64* %a, align 8, !tbaa !14
  %add106 = add i64 %121, %120
  store i64 %add106, i64* %a, align 8, !tbaa !14
  %122 = load %struct.isaac_state*, %struct.isaac_state** %s.addr, align 8, !tbaa !6
  %m107 = getelementptr inbounds %struct.isaac_state, %struct.isaac_state* %122, i32 0, i32 0
  %123 = load i32, i32* %i99, align 4, !tbaa !2
  %add108 = add nsw i32 %123, 1
  %idxprom109 = sext i32 %add108 to i64
  %arrayidx110 = getelementptr inbounds [256 x i64], [256 x i64]* %m107, i64 0, i64 %idxprom109
  %124 = load i64, i64* %arrayidx110, align 8, !tbaa !14
  %125 = load i64, i64* %b, align 8, !tbaa !14
  %add111 = add i64 %125, %124
  store i64 %add111, i64* %b, align 8, !tbaa !14
  %126 = load %struct.isaac_state*, %struct.isaac_state** %s.addr, align 8, !tbaa !6
  %m112 = getelementptr inbounds %struct.isaac_state, %struct.isaac_state* %126, i32 0, i32 0
  %127 = load i32, i32* %i99, align 4, !tbaa !2
  %add113 = add nsw i32 %127, 2
  %idxprom114 = sext i32 %add113 to i64
  %arrayidx115 = getelementptr inbounds [256 x i64], [256 x i64]* %m112, i64 0, i64 %idxprom114
  %128 = load i64, i64* %arrayidx115, align 8, !tbaa !14
  %129 = load i64, i64* %c, align 8, !tbaa !14
  %add116 = add i64 %129, %128
  store i64 %add116, i64* %c, align 8, !tbaa !14
  %130 = load %struct.isaac_state*, %struct.isaac_state** %s.addr, align 8, !tbaa !6
  %m117 = getelementptr inbounds %struct.isaac_state, %struct.isaac_state* %130, i32 0, i32 0
  %131 = load i32, i32* %i99, align 4, !tbaa !2
  %add118 = add nsw i32 %131, 3
  %idxprom119 = sext i32 %add118 to i64
  %arrayidx120 = getelementptr inbounds [256 x i64], [256 x i64]* %m117, i64 0, i64 %idxprom119
  %132 = load i64, i64* %arrayidx120, align 8, !tbaa !14
  %133 = load i64, i64* %d, align 8, !tbaa !14
  %add121 = add i64 %133, %132
  store i64 %add121, i64* %d, align 8, !tbaa !14
  %134 = load %struct.isaac_state*, %struct.isaac_state** %s.addr, align 8, !tbaa !6
  %m122 = getelementptr inbounds %struct.isaac_state, %struct.isaac_state* %134, i32 0, i32 0
  %135 = load i32, i32* %i99, align 4, !tbaa !2
  %add123 = add nsw i32 %135, 4
  %idxprom124 = sext i32 %add123 to i64
  %arrayidx125 = getelementptr inbounds [256 x i64], [256 x i64]* %m122, i64 0, i64 %idxprom124
  %136 = load i64, i64* %arrayidx125, align 8, !tbaa !14
  %137 = load i64, i64* %e, align 8, !tbaa !14
  %add126 = add i64 %137, %136
  store i64 %add126, i64* %e, align 8, !tbaa !14
  %138 = load %struct.isaac_state*, %struct.isaac_state** %s.addr, align 8, !tbaa !6
  %m127 = getelementptr inbounds %struct.isaac_state, %struct.isaac_state* %138, i32 0, i32 0
  %139 = load i32, i32* %i99, align 4, !tbaa !2
  %add128 = add nsw i32 %139, 5
  %idxprom129 = sext i32 %add128 to i64
  %arrayidx130 = getelementptr inbounds [256 x i64], [256 x i64]* %m127, i64 0, i64 %idxprom129
  %140 = load i64, i64* %arrayidx130, align 8, !tbaa !14
  %141 = load i64, i64* %f, align 8, !tbaa !14
  %add131 = add i64 %141, %140
  store i64 %add131, i64* %f, align 8, !tbaa !14
  %142 = load %struct.isaac_state*, %struct.isaac_state** %s.addr, align 8, !tbaa !6
  %m132 = getelementptr inbounds %struct.isaac_state, %struct.isaac_state* %142, i32 0, i32 0
  %143 = load i32, i32* %i99, align 4, !tbaa !2
  %add133 = add nsw i32 %143, 6
  %idxprom134 = sext i32 %add133 to i64
  %arrayidx135 = getelementptr inbounds [256 x i64], [256 x i64]* %m132, i64 0, i64 %idxprom134
  %144 = load i64, i64* %arrayidx135, align 8, !tbaa !14
  %145 = load i64, i64* %g, align 8, !tbaa !14
  %add136 = add i64 %145, %144
  store i64 %add136, i64* %g, align 8, !tbaa !14
  %146 = load %struct.isaac_state*, %struct.isaac_state** %s.addr, align 8, !tbaa !6
  %m137 = getelementptr inbounds %struct.isaac_state, %struct.isaac_state* %146, i32 0, i32 0
  %147 = load i32, i32* %i99, align 4, !tbaa !2
  %add138 = add nsw i32 %147, 7
  %idxprom139 = sext i32 %add138 to i64
  %arrayidx140 = getelementptr inbounds [256 x i64], [256 x i64]* %m137, i64 0, i64 %idxprom139
  %148 = load i64, i64* %arrayidx140, align 8, !tbaa !14
  %149 = load i64, i64* %h, align 8, !tbaa !14
  %add141 = add i64 %149, %148
  store i64 %add141, i64* %h, align 8, !tbaa !14
  %150 = load i64, i64* %e, align 8, !tbaa !14
  %151 = load i64, i64* %a, align 8, !tbaa !14
  %sub142 = sub i64 %151, %150
  store i64 %sub142, i64* %a, align 8, !tbaa !14
  %152 = load i64, i64* %h, align 8, !tbaa !14
  %call143 = call i64 @just(i64 %152)
  %shr144 = lshr i64 %call143, 9
  %153 = load i64, i64* %f, align 8, !tbaa !14
  %xor145 = xor i64 %153, %shr144
  store i64 %xor145, i64* %f, align 8, !tbaa !14
  %154 = load i64, i64* %a, align 8, !tbaa !14
  %155 = load i64, i64* %h, align 8, !tbaa !14
  %add146 = add i64 %155, %154
  store i64 %add146, i64* %h, align 8, !tbaa !14
  %156 = load i64, i64* %f, align 8, !tbaa !14
  %157 = load i64, i64* %b, align 8, !tbaa !14
  %sub147 = sub i64 %157, %156
  store i64 %sub147, i64* %b, align 8, !tbaa !14
  %158 = load i64, i64* %a, align 8, !tbaa !14
  %shl148 = shl i64 %158, 9
  %159 = load i64, i64* %g, align 8, !tbaa !14
  %xor149 = xor i64 %159, %shl148
  store i64 %xor149, i64* %g, align 8, !tbaa !14
  %160 = load i64, i64* %b, align 8, !tbaa !14
  %161 = load i64, i64* %a, align 8, !tbaa !14
  %add150 = add i64 %161, %160
  store i64 %add150, i64* %a, align 8, !tbaa !14
  %162 = load i64, i64* %g, align 8, !tbaa !14
  %163 = load i64, i64* %c, align 8, !tbaa !14
  %sub151 = sub i64 %163, %162
  store i64 %sub151, i64* %c, align 8, !tbaa !14
  %164 = load i64, i64* %b, align 8, !tbaa !14
  %call152 = call i64 @just(i64 %164)
  %shr153 = lshr i64 %call152, 23
  %165 = load i64, i64* %h, align 8, !tbaa !14
  %xor154 = xor i64 %165, %shr153
  store i64 %xor154, i64* %h, align 8, !tbaa !14
  %166 = load i64, i64* %c, align 8, !tbaa !14
  %167 = load i64, i64* %b, align 8, !tbaa !14
  %add155 = add i64 %167, %166
  store i64 %add155, i64* %b, align 8, !tbaa !14
  %168 = load i64, i64* %h, align 8, !tbaa !14
  %169 = load i64, i64* %d, align 8, !tbaa !14
  %sub156 = sub i64 %169, %168
  store i64 %sub156, i64* %d, align 8, !tbaa !14
  %170 = load i64, i64* %c, align 8, !tbaa !14
  %shl157 = shl i64 %170, 15
  %171 = load i64, i64* %a, align 8, !tbaa !14
  %xor158 = xor i64 %171, %shl157
  store i64 %xor158, i64* %a, align 8, !tbaa !14
  %172 = load i64, i64* %d, align 8, !tbaa !14
  %173 = load i64, i64* %c, align 8, !tbaa !14
  %add159 = add i64 %173, %172
  store i64 %add159, i64* %c, align 8, !tbaa !14
  %174 = load i64, i64* %a, align 8, !tbaa !14
  %175 = load i64, i64* %e, align 8, !tbaa !14
  %sub160 = sub i64 %175, %174
  store i64 %sub160, i64* %e, align 8, !tbaa !14
  %176 = load i64, i64* %d, align 8, !tbaa !14
  %call161 = call i64 @just(i64 %176)
  %shr162 = lshr i64 %call161, 14
  %177 = load i64, i64* %b, align 8, !tbaa !14
  %xor163 = xor i64 %177, %shr162
  store i64 %xor163, i64* %b, align 8, !tbaa !14
  %178 = load i64, i64* %e, align 8, !tbaa !14
  %179 = load i64, i64* %d, align 8, !tbaa !14
  %add164 = add i64 %179, %178
  store i64 %add164, i64* %d, align 8, !tbaa !14
  %180 = load i64, i64* %b, align 8, !tbaa !14
  %181 = load i64, i64* %f, align 8, !tbaa !14
  %sub165 = sub i64 %181, %180
  store i64 %sub165, i64* %f, align 8, !tbaa !14
  %182 = load i64, i64* %e, align 8, !tbaa !14
  %shl166 = shl i64 %182, 20
  %183 = load i64, i64* %c, align 8, !tbaa !14
  %xor167 = xor i64 %183, %shl166
  store i64 %xor167, i64* %c, align 8, !tbaa !14
  %184 = load i64, i64* %f, align 8, !tbaa !14
  %185 = load i64, i64* %e, align 8, !tbaa !14
  %add168 = add i64 %185, %184
  store i64 %add168, i64* %e, align 8, !tbaa !14
  %186 = load i64, i64* %c, align 8, !tbaa !14
  %187 = load i64, i64* %g, align 8, !tbaa !14
  %sub169 = sub i64 %187, %186
  store i64 %sub169, i64* %g, align 8, !tbaa !14
  %188 = load i64, i64* %f, align 8, !tbaa !14
  %call170 = call i64 @just(i64 %188)
  %shr171 = lshr i64 %call170, 17
  %189 = load i64, i64* %d, align 8, !tbaa !14
  %xor172 = xor i64 %189, %shr171
  store i64 %xor172, i64* %d, align 8, !tbaa !14
  %190 = load i64, i64* %g, align 8, !tbaa !14
  %191 = load i64, i64* %f, align 8, !tbaa !14
  %add173 = add i64 %191, %190
  store i64 %add173, i64* %f, align 8, !tbaa !14
  %192 = load i64, i64* %d, align 8, !tbaa !14
  %193 = load i64, i64* %h, align 8, !tbaa !14
  %sub174 = sub i64 %193, %192
  store i64 %sub174, i64* %h, align 8, !tbaa !14
  %194 = load i64, i64* %g, align 8, !tbaa !14
  %shl175 = shl i64 %194, 14
  %195 = load i64, i64* %e, align 8, !tbaa !14
  %xor176 = xor i64 %195, %shl175
  store i64 %xor176, i64* %e, align 8, !tbaa !14
  %196 = load i64, i64* %h, align 8, !tbaa !14
  %197 = load i64, i64* %g, align 8, !tbaa !14
  %add177 = add i64 %197, %196
  store i64 %add177, i64* %g, align 8, !tbaa !14
  %198 = load i64, i64* %a, align 8, !tbaa !14
  %199 = load %struct.isaac_state*, %struct.isaac_state** %s.addr, align 8, !tbaa !6
  %m178 = getelementptr inbounds %struct.isaac_state, %struct.isaac_state* %199, i32 0, i32 0
  %200 = load i32, i32* %i99, align 4, !tbaa !2
  %idxprom179 = sext i32 %200 to i64
  %arrayidx180 = getelementptr inbounds [256 x i64], [256 x i64]* %m178, i64 0, i64 %idxprom179
  store i64 %198, i64* %arrayidx180, align 8, !tbaa !14
  %201 = load i64, i64* %b, align 8, !tbaa !14
  %202 = load %struct.isaac_state*, %struct.isaac_state** %s.addr, align 8, !tbaa !6
  %m181 = getelementptr inbounds %struct.isaac_state, %struct.isaac_state* %202, i32 0, i32 0
  %203 = load i32, i32* %i99, align 4, !tbaa !2
  %add182 = add nsw i32 %203, 1
  %idxprom183 = sext i32 %add182 to i64
  %arrayidx184 = getelementptr inbounds [256 x i64], [256 x i64]* %m181, i64 0, i64 %idxprom183
  store i64 %201, i64* %arrayidx184, align 8, !tbaa !14
  %204 = load i64, i64* %c, align 8, !tbaa !14
  %205 = load %struct.isaac_state*, %struct.isaac_state** %s.addr, align 8, !tbaa !6
  %m185 = getelementptr inbounds %struct.isaac_state, %struct.isaac_state* %205, i32 0, i32 0
  %206 = load i32, i32* %i99, align 4, !tbaa !2
  %add186 = add nsw i32 %206, 2
  %idxprom187 = sext i32 %add186 to i64
  %arrayidx188 = getelementptr inbounds [256 x i64], [256 x i64]* %m185, i64 0, i64 %idxprom187
  store i64 %204, i64* %arrayidx188, align 8, !tbaa !14
  %207 = load i64, i64* %d, align 8, !tbaa !14
  %208 = load %struct.isaac_state*, %struct.isaac_state** %s.addr, align 8, !tbaa !6
  %m189 = getelementptr inbounds %struct.isaac_state, %struct.isaac_state* %208, i32 0, i32 0
  %209 = load i32, i32* %i99, align 4, !tbaa !2
  %add190 = add nsw i32 %209, 3
  %idxprom191 = sext i32 %add190 to i64
  %arrayidx192 = getelementptr inbounds [256 x i64], [256 x i64]* %m189, i64 0, i64 %idxprom191
  store i64 %207, i64* %arrayidx192, align 8, !tbaa !14
  %210 = load i64, i64* %e, align 8, !tbaa !14
  %211 = load %struct.isaac_state*, %struct.isaac_state** %s.addr, align 8, !tbaa !6
  %m193 = getelementptr inbounds %struct.isaac_state, %struct.isaac_state* %211, i32 0, i32 0
  %212 = load i32, i32* %i99, align 4, !tbaa !2
  %add194 = add nsw i32 %212, 4
  %idxprom195 = sext i32 %add194 to i64
  %arrayidx196 = getelementptr inbounds [256 x i64], [256 x i64]* %m193, i64 0, i64 %idxprom195
  store i64 %210, i64* %arrayidx196, align 8, !tbaa !14
  %213 = load i64, i64* %f, align 8, !tbaa !14
  %214 = load %struct.isaac_state*, %struct.isaac_state** %s.addr, align 8, !tbaa !6
  %m197 = getelementptr inbounds %struct.isaac_state, %struct.isaac_state* %214, i32 0, i32 0
  %215 = load i32, i32* %i99, align 4, !tbaa !2
  %add198 = add nsw i32 %215, 5
  %idxprom199 = sext i32 %add198 to i64
  %arrayidx200 = getelementptr inbounds [256 x i64], [256 x i64]* %m197, i64 0, i64 %idxprom199
  store i64 %213, i64* %arrayidx200, align 8, !tbaa !14
  %216 = load i64, i64* %g, align 8, !tbaa !14
  %217 = load %struct.isaac_state*, %struct.isaac_state** %s.addr, align 8, !tbaa !6
  %m201 = getelementptr inbounds %struct.isaac_state, %struct.isaac_state* %217, i32 0, i32 0
  %218 = load i32, i32* %i99, align 4, !tbaa !2
  %add202 = add nsw i32 %218, 6
  %idxprom203 = sext i32 %add202 to i64
  %arrayidx204 = getelementptr inbounds [256 x i64], [256 x i64]* %m201, i64 0, i64 %idxprom203
  store i64 %216, i64* %arrayidx204, align 8, !tbaa !14
  %219 = load i64, i64* %h, align 8, !tbaa !14
  %220 = load %struct.isaac_state*, %struct.isaac_state** %s.addr, align 8, !tbaa !6
  %m205 = getelementptr inbounds %struct.isaac_state, %struct.isaac_state* %220, i32 0, i32 0
  %221 = load i32, i32* %i99, align 4, !tbaa !2
  %add206 = add nsw i32 %221, 7
  %idxprom207 = sext i32 %add206 to i64
  %arrayidx208 = getelementptr inbounds [256 x i64], [256 x i64]* %m205, i64 0, i64 %idxprom207
  store i64 %219, i64* %arrayidx208, align 8, !tbaa !14
  br label %for.inc209

for.inc209:                                       ; preds = %for.body102
  %222 = load i32, i32* %i99, align 4, !tbaa !2
  %add210 = add nsw i32 %222, 8
  store i32 %add210, i32* %i99, align 4, !tbaa !2
  br label %for.cond100

for.end211:                                       ; preds = %for.cond100
  %223 = bitcast i32* %i99 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %223) #13
  %224 = load %struct.isaac_state*, %struct.isaac_state** %s.addr, align 8, !tbaa !6
  %c212 = getelementptr inbounds %struct.isaac_state, %struct.isaac_state* %224, i32 0, i32 3
  store i64 0, i64* %c212, align 8, !tbaa !171
  %225 = load %struct.isaac_state*, %struct.isaac_state** %s.addr, align 8, !tbaa !6
  %b213 = getelementptr inbounds %struct.isaac_state, %struct.isaac_state* %225, i32 0, i32 2
  store i64 0, i64* %b213, align 8, !tbaa !170
  %226 = load %struct.isaac_state*, %struct.isaac_state** %s.addr, align 8, !tbaa !6
  %a214 = getelementptr inbounds %struct.isaac_state, %struct.isaac_state* %226, i32 0, i32 1
  store i64 0, i64* %a214, align 8, !tbaa !169
  %227 = bitcast i64* %h to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %227) #13
  %228 = bitcast i64* %g to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %228) #13
  %229 = bitcast i64* %f to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %229) #13
  %230 = bitcast i64* %e to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %230) #13
  %231 = bitcast i64* %d to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %231) #13
  %232 = bitcast i64* %c to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %232) #13
  %233 = bitcast i64* %b to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %233) #13
  %234 = bitcast i64* %a to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %234) #13
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local void @readtokens0_init(%struct.Tokens* %t) #7 {
entry:
  %t.addr = alloca %struct.Tokens*, align 8
  store %struct.Tokens* %t, %struct.Tokens** %t.addr, align 8, !tbaa !6
  %0 = load %struct.Tokens*, %struct.Tokens** %t.addr, align 8, !tbaa !6
  %n_tok = getelementptr inbounds %struct.Tokens, %struct.Tokens* %0, i32 0, i32 0
  store i64 0, i64* %n_tok, align 8, !tbaa !30
  %1 = load %struct.Tokens*, %struct.Tokens** %t.addr, align 8, !tbaa !6
  %tok = getelementptr inbounds %struct.Tokens, %struct.Tokens* %1, i32 0, i32 1
  store i8** null, i8*** %tok, align 8, !tbaa !33
  %2 = load %struct.Tokens*, %struct.Tokens** %t.addr, align 8, !tbaa !6
  %tok_len = getelementptr inbounds %struct.Tokens, %struct.Tokens* %2, i32 0, i32 2
  store i64* null, i64** %tok_len, align 8, !tbaa !172
  %3 = load %struct.Tokens*, %struct.Tokens** %t.addr, align 8, !tbaa !6
  %o_data = getelementptr inbounds %struct.Tokens, %struct.Tokens* %3, i32 0, i32 3
  %call = call i32 @_obstack_begin(%struct.obstack* %o_data, i64 0, i64 0, i8* (i64)* @malloc, void (i8*)* @rpl_free)
  %4 = load %struct.Tokens*, %struct.Tokens** %t.addr, align 8, !tbaa !6
  %o_tok = getelementptr inbounds %struct.Tokens, %struct.Tokens* %4, i32 0, i32 4
  %call1 = call i32 @_obstack_begin(%struct.obstack* %o_tok, i64 0, i64 0, i8* (i64)* @malloc, void (i8*)* @rpl_free)
  %5 = load %struct.Tokens*, %struct.Tokens** %t.addr, align 8, !tbaa !6
  %o_tok_len = getelementptr inbounds %struct.Tokens, %struct.Tokens* %5, i32 0, i32 5
  %call2 = call i32 @_obstack_begin(%struct.obstack* %o_tok_len, i64 0, i64 0, i8* (i64)* @malloc, void (i8*)* @rpl_free)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local void @readtokens0_free(%struct.Tokens* %t) #7 {
entry:
  %t.addr = alloca %struct.Tokens*, align 8
  %__o = alloca %struct.obstack*, align 8
  %__obj = alloca i8*, align 8
  %__o2 = alloca %struct.obstack*, align 8
  %__obj3 = alloca i8*, align 8
  %__o14 = alloca %struct.obstack*, align 8
  %__obj15 = alloca i8*, align 8
  store %struct.Tokens* %t, %struct.Tokens** %t.addr, align 8, !tbaa !6
  %0 = bitcast %struct.obstack** %__o to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #13
  %1 = load %struct.Tokens*, %struct.Tokens** %t.addr, align 8, !tbaa !6
  %o_data = getelementptr inbounds %struct.Tokens, %struct.Tokens* %1, i32 0, i32 3
  store %struct.obstack* %o_data, %struct.obstack** %__o, align 8, !tbaa !6
  %2 = bitcast i8** %__obj to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %2) #13
  store i8* null, i8** %__obj, align 8, !tbaa !6
  %3 = load i8*, i8** %__obj, align 8, !tbaa !6
  %4 = load %struct.obstack*, %struct.obstack** %__o, align 8, !tbaa !6
  %chunk = getelementptr inbounds %struct.obstack, %struct.obstack* %4, i32 0, i32 1
  %5 = load %struct._obstack_chunk*, %struct._obstack_chunk** %chunk, align 8, !tbaa !173
  %6 = bitcast %struct._obstack_chunk* %5 to i8*
  %cmp = icmp ugt i8* %3, %6
  br i1 %cmp, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %entry
  %7 = load i8*, i8** %__obj, align 8, !tbaa !6
  %8 = load %struct.obstack*, %struct.obstack** %__o, align 8, !tbaa !6
  %chunk_limit = getelementptr inbounds %struct.obstack, %struct.obstack* %8, i32 0, i32 4
  %9 = load i8*, i8** %chunk_limit, align 8, !tbaa !174
  %cmp1 = icmp ult i8* %7, %9
  br i1 %cmp1, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true
  %10 = load i8*, i8** %__obj, align 8, !tbaa !6
  %11 = load %struct.obstack*, %struct.obstack** %__o, align 8, !tbaa !6
  %object_base = getelementptr inbounds %struct.obstack, %struct.obstack* %11, i32 0, i32 2
  store i8* %10, i8** %object_base, align 8, !tbaa !175
  %12 = load %struct.obstack*, %struct.obstack** %__o, align 8, !tbaa !6
  %next_free = getelementptr inbounds %struct.obstack, %struct.obstack* %12, i32 0, i32 3
  store i8* %10, i8** %next_free, align 8, !tbaa !176
  br label %if.end

if.else:                                          ; preds = %land.lhs.true, %entry
  %13 = load %struct.obstack*, %struct.obstack** %__o, align 8, !tbaa !6
  %14 = load i8*, i8** %__obj, align 8, !tbaa !6
  call void @_obstack_free(%struct.obstack* %13, i8* %14)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %15 = bitcast i8** %__obj to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %15) #13
  %16 = bitcast %struct.obstack** %__o to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %16) #13
  %17 = bitcast %struct.obstack** %__o2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %17) #13
  %18 = load %struct.Tokens*, %struct.Tokens** %t.addr, align 8, !tbaa !6
  %o_tok = getelementptr inbounds %struct.Tokens, %struct.Tokens* %18, i32 0, i32 4
  store %struct.obstack* %o_tok, %struct.obstack** %__o2, align 8, !tbaa !6
  %19 = bitcast i8** %__obj3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %19) #13
  store i8* null, i8** %__obj3, align 8, !tbaa !6
  %20 = load i8*, i8** %__obj3, align 8, !tbaa !6
  %21 = load %struct.obstack*, %struct.obstack** %__o2, align 8, !tbaa !6
  %chunk4 = getelementptr inbounds %struct.obstack, %struct.obstack* %21, i32 0, i32 1
  %22 = load %struct._obstack_chunk*, %struct._obstack_chunk** %chunk4, align 8, !tbaa !173
  %23 = bitcast %struct._obstack_chunk* %22 to i8*
  %cmp5 = icmp ugt i8* %20, %23
  br i1 %cmp5, label %land.lhs.true6, label %if.else12

land.lhs.true6:                                   ; preds = %if.end
  %24 = load i8*, i8** %__obj3, align 8, !tbaa !6
  %25 = load %struct.obstack*, %struct.obstack** %__o2, align 8, !tbaa !6
  %chunk_limit7 = getelementptr inbounds %struct.obstack, %struct.obstack* %25, i32 0, i32 4
  %26 = load i8*, i8** %chunk_limit7, align 8, !tbaa !174
  %cmp8 = icmp ult i8* %24, %26
  br i1 %cmp8, label %if.then9, label %if.else12

if.then9:                                         ; preds = %land.lhs.true6
  %27 = load i8*, i8** %__obj3, align 8, !tbaa !6
  %28 = load %struct.obstack*, %struct.obstack** %__o2, align 8, !tbaa !6
  %object_base10 = getelementptr inbounds %struct.obstack, %struct.obstack* %28, i32 0, i32 2
  store i8* %27, i8** %object_base10, align 8, !tbaa !175
  %29 = load %struct.obstack*, %struct.obstack** %__o2, align 8, !tbaa !6
  %next_free11 = getelementptr inbounds %struct.obstack, %struct.obstack* %29, i32 0, i32 3
  store i8* %27, i8** %next_free11, align 8, !tbaa !176
  br label %if.end13

if.else12:                                        ; preds = %land.lhs.true6, %if.end
  %30 = load %struct.obstack*, %struct.obstack** %__o2, align 8, !tbaa !6
  %31 = load i8*, i8** %__obj3, align 8, !tbaa !6
  call void @_obstack_free(%struct.obstack* %30, i8* %31)
  br label %if.end13

if.end13:                                         ; preds = %if.else12, %if.then9
  %32 = bitcast i8** %__obj3 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %32) #13
  %33 = bitcast %struct.obstack** %__o2 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %33) #13
  %34 = bitcast %struct.obstack** %__o14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %34) #13
  %35 = load %struct.Tokens*, %struct.Tokens** %t.addr, align 8, !tbaa !6
  %o_tok_len = getelementptr inbounds %struct.Tokens, %struct.Tokens* %35, i32 0, i32 5
  store %struct.obstack* %o_tok_len, %struct.obstack** %__o14, align 8, !tbaa !6
  %36 = bitcast i8** %__obj15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %36) #13
  store i8* null, i8** %__obj15, align 8, !tbaa !6
  %37 = load i8*, i8** %__obj15, align 8, !tbaa !6
  %38 = load %struct.obstack*, %struct.obstack** %__o14, align 8, !tbaa !6
  %chunk16 = getelementptr inbounds %struct.obstack, %struct.obstack* %38, i32 0, i32 1
  %39 = load %struct._obstack_chunk*, %struct._obstack_chunk** %chunk16, align 8, !tbaa !173
  %40 = bitcast %struct._obstack_chunk* %39 to i8*
  %cmp17 = icmp ugt i8* %37, %40
  br i1 %cmp17, label %land.lhs.true18, label %if.else24

land.lhs.true18:                                  ; preds = %if.end13
  %41 = load i8*, i8** %__obj15, align 8, !tbaa !6
  %42 = load %struct.obstack*, %struct.obstack** %__o14, align 8, !tbaa !6
  %chunk_limit19 = getelementptr inbounds %struct.obstack, %struct.obstack* %42, i32 0, i32 4
  %43 = load i8*, i8** %chunk_limit19, align 8, !tbaa !174
  %cmp20 = icmp ult i8* %41, %43
  br i1 %cmp20, label %if.then21, label %if.else24

if.then21:                                        ; preds = %land.lhs.true18
  %44 = load i8*, i8** %__obj15, align 8, !tbaa !6
  %45 = load %struct.obstack*, %struct.obstack** %__o14, align 8, !tbaa !6
  %object_base22 = getelementptr inbounds %struct.obstack, %struct.obstack* %45, i32 0, i32 2
  store i8* %44, i8** %object_base22, align 8, !tbaa !175
  %46 = load %struct.obstack*, %struct.obstack** %__o14, align 8, !tbaa !6
  %next_free23 = getelementptr inbounds %struct.obstack, %struct.obstack* %46, i32 0, i32 3
  store i8* %44, i8** %next_free23, align 8, !tbaa !176
  br label %if.end25

if.else24:                                        ; preds = %land.lhs.true18, %if.end13
  %47 = load %struct.obstack*, %struct.obstack** %__o14, align 8, !tbaa !6
  %48 = load i8*, i8** %__obj15, align 8, !tbaa !6
  call void @_obstack_free(%struct.obstack* %47, i8* %48)
  br label %if.end25

if.end25:                                         ; preds = %if.else24, %if.then21
  %49 = bitcast i8** %__obj15 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %49) #13
  %50 = bitcast %struct.obstack** %__o14 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %50) #13
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local zeroext i1 @readtokens0(%struct._IO_FILE* %in, %struct.Tokens* %t) #7 {
entry:
  %in.addr = alloca %struct._IO_FILE*, align 8
  %t.addr = alloca %struct.Tokens*, align 8
  %c = alloca i32, align 4
  %len = alloca i64, align 8
  %__o = alloca %struct.obstack*, align 8
  %tmp = alloca i64, align 8
  %__o2 = alloca %struct.obstack*, align 8
  %__o1 = alloca %struct.obstack*, align 8
  %tmp4 = alloca i64, align 8
  %cleanup.dest.slot = alloca i32, align 4
  %__o14 = alloca %struct.obstack*, align 8
  %__o116 = alloca %struct.obstack*, align 8
  %tmp17 = alloca i64, align 8
  %__o32 = alloca %struct.obstack*, align 8
  %__o133 = alloca %struct.obstack*, align 8
  %tmp34 = alloca i64, align 8
  %__o144 = alloca %struct.obstack*, align 8
  %__p1 = alloca i8*, align 8
  %__o147 = alloca %struct.obstack*, align 8
  %__value = alloca i8*, align 8
  %tmp78 = alloca i8*, align 8
  %__o179 = alloca %struct.obstack*, align 8
  %__value80 = alloca i8*, align 8
  %tmp119 = alloca i8*, align 8
  store %struct._IO_FILE* %in, %struct._IO_FILE** %in.addr, align 8, !tbaa !6
  store %struct.Tokens* %t, %struct.Tokens** %t.addr, align 8, !tbaa !6
  br label %while.body

while.body:                                       ; preds = %entry, %cleanup.cont
  %0 = bitcast i32* %c to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #13
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** %in.addr, align 8, !tbaa !6
  %call = call i32 @fgetc(%struct._IO_FILE* %1)
  store i32 %call, i32* %c, align 4, !tbaa !2
  %2 = load i32, i32* %c, align 4, !tbaa !2
  %cmp = icmp eq i32 %2, -1
  br i1 %cmp, label %if.then, label %if.end13

if.then:                                          ; preds = %while.body
  %3 = bitcast i64* %len to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %3) #13
  %4 = bitcast %struct.obstack** %__o to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %4) #13
  %5 = load %struct.Tokens*, %struct.Tokens** %t.addr, align 8, !tbaa !6
  %o_data = getelementptr inbounds %struct.Tokens, %struct.Tokens* %5, i32 0, i32 3
  store %struct.obstack* %o_data, %struct.obstack** %__o, align 8, !tbaa !6
  %6 = load %struct.obstack*, %struct.obstack** %__o, align 8, !tbaa !6
  %next_free = getelementptr inbounds %struct.obstack, %struct.obstack* %6, i32 0, i32 3
  %7 = load i8*, i8** %next_free, align 8, !tbaa !176
  %8 = load %struct.obstack*, %struct.obstack** %__o, align 8, !tbaa !6
  %object_base = getelementptr inbounds %struct.obstack, %struct.obstack* %8, i32 0, i32 2
  %9 = load i8*, i8** %object_base, align 8, !tbaa !175
  %sub.ptr.lhs.cast = ptrtoint i8* %7 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %9 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  store i64 %sub.ptr.sub, i64* %tmp, align 8, !tbaa !14
  %10 = bitcast %struct.obstack** %__o to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %10) #13
  %11 = load i64, i64* %tmp, align 8, !tbaa !14
  store i64 %11, i64* %len, align 8, !tbaa !14
  %12 = load i64, i64* %len, align 8, !tbaa !14
  %tobool = icmp ne i64 %12, 0
  br i1 %tobool, label %if.then1, label %if.end12

if.then1:                                         ; preds = %if.then
  %13 = bitcast %struct.obstack** %__o2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %13) #13
  %14 = load %struct.Tokens*, %struct.Tokens** %t.addr, align 8, !tbaa !6
  %o_data3 = getelementptr inbounds %struct.Tokens, %struct.Tokens* %14, i32 0, i32 3
  store %struct.obstack* %o_data3, %struct.obstack** %__o2, align 8, !tbaa !6
  %15 = bitcast %struct.obstack** %__o1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %15) #13
  %16 = load %struct.obstack*, %struct.obstack** %__o2, align 8, !tbaa !6
  store %struct.obstack* %16, %struct.obstack** %__o1, align 8, !tbaa !6
  %17 = load %struct.obstack*, %struct.obstack** %__o1, align 8, !tbaa !6
  %chunk_limit = getelementptr inbounds %struct.obstack, %struct.obstack* %17, i32 0, i32 4
  %18 = load i8*, i8** %chunk_limit, align 8, !tbaa !174
  %19 = load %struct.obstack*, %struct.obstack** %__o1, align 8, !tbaa !6
  %next_free5 = getelementptr inbounds %struct.obstack, %struct.obstack* %19, i32 0, i32 3
  %20 = load i8*, i8** %next_free5, align 8, !tbaa !176
  %sub.ptr.lhs.cast6 = ptrtoint i8* %18 to i64
  %sub.ptr.rhs.cast7 = ptrtoint i8* %20 to i64
  %sub.ptr.sub8 = sub i64 %sub.ptr.lhs.cast6, %sub.ptr.rhs.cast7
  store i64 %sub.ptr.sub8, i64* %tmp4, align 8, !tbaa !14
  %21 = bitcast %struct.obstack** %__o1 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %21) #13
  %22 = load i64, i64* %tmp4, align 8, !tbaa !14
  %cmp9 = icmp ult i64 %22, 1
  br i1 %cmp9, label %if.then10, label %if.end

if.then10:                                        ; preds = %if.then1
  %23 = load %struct.obstack*, %struct.obstack** %__o2, align 8, !tbaa !6
  call void @_obstack_newchunk(%struct.obstack* %23, i64 1)
  br label %if.end

if.end:                                           ; preds = %if.then10, %if.then1
  %24 = load %struct.obstack*, %struct.obstack** %__o2, align 8, !tbaa !6
  %next_free11 = getelementptr inbounds %struct.obstack, %struct.obstack* %24, i32 0, i32 3
  %25 = load i8*, i8** %next_free11, align 8, !tbaa !176
  %incdec.ptr = getelementptr inbounds i8, i8* %25, i32 1
  store i8* %incdec.ptr, i8** %next_free11, align 8, !tbaa !176
  store i8 0, i8* %25, align 1, !tbaa !13
  %26 = bitcast %struct.obstack** %__o2 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %26) #13
  %27 = load %struct.Tokens*, %struct.Tokens** %t.addr, align 8, !tbaa !6
  call void @save_token(%struct.Tokens* %27)
  br label %if.end12

if.end12:                                         ; preds = %if.end, %if.then
  store i32 3, i32* %cleanup.dest.slot, align 4
  %28 = bitcast i64* %len to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %28) #13
  br label %cleanup

if.end13:                                         ; preds = %while.body
  %29 = bitcast %struct.obstack** %__o14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %29) #13
  %30 = load %struct.Tokens*, %struct.Tokens** %t.addr, align 8, !tbaa !6
  %o_data15 = getelementptr inbounds %struct.Tokens, %struct.Tokens* %30, i32 0, i32 3
  store %struct.obstack* %o_data15, %struct.obstack** %__o14, align 8, !tbaa !6
  %31 = bitcast %struct.obstack** %__o116 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %31) #13
  %32 = load %struct.obstack*, %struct.obstack** %__o14, align 8, !tbaa !6
  store %struct.obstack* %32, %struct.obstack** %__o116, align 8, !tbaa !6
  %33 = load %struct.obstack*, %struct.obstack** %__o116, align 8, !tbaa !6
  %chunk_limit18 = getelementptr inbounds %struct.obstack, %struct.obstack* %33, i32 0, i32 4
  %34 = load i8*, i8** %chunk_limit18, align 8, !tbaa !174
  %35 = load %struct.obstack*, %struct.obstack** %__o116, align 8, !tbaa !6
  %next_free19 = getelementptr inbounds %struct.obstack, %struct.obstack* %35, i32 0, i32 3
  %36 = load i8*, i8** %next_free19, align 8, !tbaa !176
  %sub.ptr.lhs.cast20 = ptrtoint i8* %34 to i64
  %sub.ptr.rhs.cast21 = ptrtoint i8* %36 to i64
  %sub.ptr.sub22 = sub i64 %sub.ptr.lhs.cast20, %sub.ptr.rhs.cast21
  store i64 %sub.ptr.sub22, i64* %tmp17, align 8, !tbaa !14
  %37 = bitcast %struct.obstack** %__o116 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %37) #13
  %38 = load i64, i64* %tmp17, align 8, !tbaa !14
  %cmp23 = icmp ult i64 %38, 1
  br i1 %cmp23, label %if.then24, label %if.end25

if.then24:                                        ; preds = %if.end13
  %39 = load %struct.obstack*, %struct.obstack** %__o14, align 8, !tbaa !6
  call void @_obstack_newchunk(%struct.obstack* %39, i64 1)
  br label %if.end25

if.end25:                                         ; preds = %if.then24, %if.end13
  %40 = load i32, i32* %c, align 4, !tbaa !2
  %conv = trunc i32 %40 to i8
  %41 = load %struct.obstack*, %struct.obstack** %__o14, align 8, !tbaa !6
  %next_free26 = getelementptr inbounds %struct.obstack, %struct.obstack* %41, i32 0, i32 3
  %42 = load i8*, i8** %next_free26, align 8, !tbaa !176
  %incdec.ptr27 = getelementptr inbounds i8, i8* %42, i32 1
  store i8* %incdec.ptr27, i8** %next_free26, align 8, !tbaa !176
  store i8 %conv, i8* %42, align 1, !tbaa !13
  %43 = bitcast %struct.obstack** %__o14 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %43) #13
  %44 = load i32, i32* %c, align 4, !tbaa !2
  %cmp28 = icmp eq i32 %44, 0
  br i1 %cmp28, label %if.then30, label %if.end31

if.then30:                                        ; preds = %if.end25
  %45 = load %struct.Tokens*, %struct.Tokens** %t.addr, align 8, !tbaa !6
  call void @save_token(%struct.Tokens* %45)
  br label %if.end31

if.end31:                                         ; preds = %if.then30, %if.end25
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end31, %if.end12
  %46 = bitcast i32* %c to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %46) #13
  %cleanup.dest = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest, label %unreachable [
    i32 0, label %cleanup.cont
    i32 3, label %while.end
  ]

cleanup.cont:                                     ; preds = %cleanup
  br label %while.body

while.end:                                        ; preds = %cleanup
  %47 = bitcast %struct.obstack** %__o32 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %47) #13
  %48 = load %struct.Tokens*, %struct.Tokens** %t.addr, align 8, !tbaa !6
  %o_tok = getelementptr inbounds %struct.Tokens, %struct.Tokens* %48, i32 0, i32 4
  store %struct.obstack* %o_tok, %struct.obstack** %__o32, align 8, !tbaa !6
  %49 = bitcast %struct.obstack** %__o133 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %49) #13
  %50 = load %struct.obstack*, %struct.obstack** %__o32, align 8, !tbaa !6
  store %struct.obstack* %50, %struct.obstack** %__o133, align 8, !tbaa !6
  %51 = load %struct.obstack*, %struct.obstack** %__o133, align 8, !tbaa !6
  %chunk_limit35 = getelementptr inbounds %struct.obstack, %struct.obstack* %51, i32 0, i32 4
  %52 = load i8*, i8** %chunk_limit35, align 8, !tbaa !174
  %53 = load %struct.obstack*, %struct.obstack** %__o133, align 8, !tbaa !6
  %next_free36 = getelementptr inbounds %struct.obstack, %struct.obstack* %53, i32 0, i32 3
  %54 = load i8*, i8** %next_free36, align 8, !tbaa !176
  %sub.ptr.lhs.cast37 = ptrtoint i8* %52 to i64
  %sub.ptr.rhs.cast38 = ptrtoint i8* %54 to i64
  %sub.ptr.sub39 = sub i64 %sub.ptr.lhs.cast37, %sub.ptr.rhs.cast38
  store i64 %sub.ptr.sub39, i64* %tmp34, align 8, !tbaa !14
  %55 = bitcast %struct.obstack** %__o133 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %55) #13
  %56 = load i64, i64* %tmp34, align 8, !tbaa !14
  %cmp40 = icmp ult i64 %56, 8
  br i1 %cmp40, label %if.then42, label %if.end43

if.then42:                                        ; preds = %while.end
  %57 = load %struct.obstack*, %struct.obstack** %__o32, align 8, !tbaa !6
  call void @_obstack_newchunk(%struct.obstack* %57, i64 8)
  br label %if.end43

if.end43:                                         ; preds = %if.then42, %while.end
  %58 = bitcast %struct.obstack** %__o144 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %58) #13
  %59 = load %struct.obstack*, %struct.obstack** %__o32, align 8, !tbaa !6
  store %struct.obstack* %59, %struct.obstack** %__o144, align 8, !tbaa !6
  %60 = bitcast i8** %__p1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %60) #13
  %61 = load %struct.obstack*, %struct.obstack** %__o144, align 8, !tbaa !6
  %next_free45 = getelementptr inbounds %struct.obstack, %struct.obstack* %61, i32 0, i32 3
  %62 = load i8*, i8** %next_free45, align 8, !tbaa !176
  store i8* %62, i8** %__p1, align 8, !tbaa !6
  %63 = load i8*, i8** %__p1, align 8, !tbaa !6
  %64 = bitcast i8* %63 to i8**
  store i8* null, i8** %64, align 8, !tbaa !6
  %65 = load %struct.obstack*, %struct.obstack** %__o144, align 8, !tbaa !6
  %next_free46 = getelementptr inbounds %struct.obstack, %struct.obstack* %65, i32 0, i32 3
  %66 = load i8*, i8** %next_free46, align 8, !tbaa !176
  %add.ptr = getelementptr inbounds i8, i8* %66, i64 8
  store i8* %add.ptr, i8** %next_free46, align 8, !tbaa !176
  %67 = bitcast i8** %__p1 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %67) #13
  %68 = bitcast %struct.obstack** %__o144 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %68) #13
  %69 = bitcast %struct.obstack** %__o32 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %69) #13
  %70 = bitcast %struct.obstack** %__o147 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %70) #13
  %71 = load %struct.Tokens*, %struct.Tokens** %t.addr, align 8, !tbaa !6
  %o_tok48 = getelementptr inbounds %struct.Tokens, %struct.Tokens* %71, i32 0, i32 4
  store %struct.obstack* %o_tok48, %struct.obstack** %__o147, align 8, !tbaa !6
  %72 = bitcast i8** %__value to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %72) #13
  %73 = load %struct.obstack*, %struct.obstack** %__o147, align 8, !tbaa !6
  %object_base49 = getelementptr inbounds %struct.obstack, %struct.obstack* %73, i32 0, i32 2
  %74 = load i8*, i8** %object_base49, align 8, !tbaa !175
  store i8* %74, i8** %__value, align 8, !tbaa !6
  %75 = load %struct.obstack*, %struct.obstack** %__o147, align 8, !tbaa !6
  %next_free50 = getelementptr inbounds %struct.obstack, %struct.obstack* %75, i32 0, i32 3
  %76 = load i8*, i8** %next_free50, align 8, !tbaa !176
  %77 = load i8*, i8** %__value, align 8, !tbaa !6
  %cmp51 = icmp eq i8* %76, %77
  br i1 %cmp51, label %if.then53, label %if.end54

if.then53:                                        ; preds = %if.end43
  %78 = load %struct.obstack*, %struct.obstack** %__o147, align 8, !tbaa !6
  %maybe_empty_object = getelementptr inbounds %struct.obstack, %struct.obstack* %78, i32 0, i32 10
  %bf.load = load i8, i8* %maybe_empty_object, align 8
  %bf.clear = and i8 %bf.load, -3
  %bf.set = or i8 %bf.clear, 2
  store i8 %bf.set, i8* %maybe_empty_object, align 8
  br label %if.end54

if.end54:                                         ; preds = %if.then53, %if.end43
  %79 = load %struct.obstack*, %struct.obstack** %__o147, align 8, !tbaa !6
  %next_free55 = getelementptr inbounds %struct.obstack, %struct.obstack* %79, i32 0, i32 3
  %80 = load i8*, i8** %next_free55, align 8, !tbaa !176
  %sub.ptr.lhs.cast56 = ptrtoint i8* %80 to i64
  %sub.ptr.sub57 = sub i64 %sub.ptr.lhs.cast56, 0
  %81 = load %struct.obstack*, %struct.obstack** %__o147, align 8, !tbaa !6
  %alignment_mask = getelementptr inbounds %struct.obstack, %struct.obstack* %81, i32 0, i32 6
  %82 = load i64, i64* %alignment_mask, align 8, !tbaa !177
  %add = add i64 %sub.ptr.sub57, %82
  %83 = load %struct.obstack*, %struct.obstack** %__o147, align 8, !tbaa !6
  %alignment_mask58 = getelementptr inbounds %struct.obstack, %struct.obstack* %83, i32 0, i32 6
  %84 = load i64, i64* %alignment_mask58, align 8, !tbaa !177
  %neg = xor i64 %84, -1
  %and = and i64 %add, %neg
  %add.ptr59 = getelementptr inbounds i8, i8* null, i64 %and
  %85 = load %struct.obstack*, %struct.obstack** %__o147, align 8, !tbaa !6
  %next_free60 = getelementptr inbounds %struct.obstack, %struct.obstack* %85, i32 0, i32 3
  store i8* %add.ptr59, i8** %next_free60, align 8, !tbaa !176
  %86 = load %struct.obstack*, %struct.obstack** %__o147, align 8, !tbaa !6
  %next_free61 = getelementptr inbounds %struct.obstack, %struct.obstack* %86, i32 0, i32 3
  %87 = load i8*, i8** %next_free61, align 8, !tbaa !176
  %88 = load %struct.obstack*, %struct.obstack** %__o147, align 8, !tbaa !6
  %chunk = getelementptr inbounds %struct.obstack, %struct.obstack* %88, i32 0, i32 1
  %89 = load %struct._obstack_chunk*, %struct._obstack_chunk** %chunk, align 8, !tbaa !173
  %90 = bitcast %struct._obstack_chunk* %89 to i8*
  %sub.ptr.lhs.cast62 = ptrtoint i8* %87 to i64
  %sub.ptr.rhs.cast63 = ptrtoint i8* %90 to i64
  %sub.ptr.sub64 = sub i64 %sub.ptr.lhs.cast62, %sub.ptr.rhs.cast63
  %91 = load %struct.obstack*, %struct.obstack** %__o147, align 8, !tbaa !6
  %chunk_limit65 = getelementptr inbounds %struct.obstack, %struct.obstack* %91, i32 0, i32 4
  %92 = load i8*, i8** %chunk_limit65, align 8, !tbaa !174
  %93 = load %struct.obstack*, %struct.obstack** %__o147, align 8, !tbaa !6
  %chunk66 = getelementptr inbounds %struct.obstack, %struct.obstack* %93, i32 0, i32 1
  %94 = load %struct._obstack_chunk*, %struct._obstack_chunk** %chunk66, align 8, !tbaa !173
  %95 = bitcast %struct._obstack_chunk* %94 to i8*
  %sub.ptr.lhs.cast67 = ptrtoint i8* %92 to i64
  %sub.ptr.rhs.cast68 = ptrtoint i8* %95 to i64
  %sub.ptr.sub69 = sub i64 %sub.ptr.lhs.cast67, %sub.ptr.rhs.cast68
  %cmp70 = icmp ugt i64 %sub.ptr.sub64, %sub.ptr.sub69
  br i1 %cmp70, label %if.then72, label %if.end75

if.then72:                                        ; preds = %if.end54
  %96 = load %struct.obstack*, %struct.obstack** %__o147, align 8, !tbaa !6
  %chunk_limit73 = getelementptr inbounds %struct.obstack, %struct.obstack* %96, i32 0, i32 4
  %97 = load i8*, i8** %chunk_limit73, align 8, !tbaa !174
  %98 = load %struct.obstack*, %struct.obstack** %__o147, align 8, !tbaa !6
  %next_free74 = getelementptr inbounds %struct.obstack, %struct.obstack* %98, i32 0, i32 3
  store i8* %97, i8** %next_free74, align 8, !tbaa !176
  br label %if.end75

if.end75:                                         ; preds = %if.then72, %if.end54
  %99 = load %struct.obstack*, %struct.obstack** %__o147, align 8, !tbaa !6
  %next_free76 = getelementptr inbounds %struct.obstack, %struct.obstack* %99, i32 0, i32 3
  %100 = load i8*, i8** %next_free76, align 8, !tbaa !176
  %101 = load %struct.obstack*, %struct.obstack** %__o147, align 8, !tbaa !6
  %object_base77 = getelementptr inbounds %struct.obstack, %struct.obstack* %101, i32 0, i32 2
  store i8* %100, i8** %object_base77, align 8, !tbaa !175
  %102 = load i8*, i8** %__value, align 8, !tbaa !6
  store i8* %102, i8** %tmp78, align 8, !tbaa !6
  %103 = bitcast i8** %__value to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %103) #13
  %104 = bitcast %struct.obstack** %__o147 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %104) #13
  %105 = load i8*, i8** %tmp78, align 8, !tbaa !6
  %106 = bitcast i8* %105 to i8**
  %107 = load %struct.Tokens*, %struct.Tokens** %t.addr, align 8, !tbaa !6
  %tok = getelementptr inbounds %struct.Tokens, %struct.Tokens* %107, i32 0, i32 1
  store i8** %106, i8*** %tok, align 8, !tbaa !33
  %108 = bitcast %struct.obstack** %__o179 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %108) #13
  %109 = load %struct.Tokens*, %struct.Tokens** %t.addr, align 8, !tbaa !6
  %o_tok_len = getelementptr inbounds %struct.Tokens, %struct.Tokens* %109, i32 0, i32 5
  store %struct.obstack* %o_tok_len, %struct.obstack** %__o179, align 8, !tbaa !6
  %110 = bitcast i8** %__value80 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %110) #13
  %111 = load %struct.obstack*, %struct.obstack** %__o179, align 8, !tbaa !6
  %object_base81 = getelementptr inbounds %struct.obstack, %struct.obstack* %111, i32 0, i32 2
  %112 = load i8*, i8** %object_base81, align 8, !tbaa !175
  store i8* %112, i8** %__value80, align 8, !tbaa !6
  %113 = load %struct.obstack*, %struct.obstack** %__o179, align 8, !tbaa !6
  %next_free82 = getelementptr inbounds %struct.obstack, %struct.obstack* %113, i32 0, i32 3
  %114 = load i8*, i8** %next_free82, align 8, !tbaa !176
  %115 = load i8*, i8** %__value80, align 8, !tbaa !6
  %cmp83 = icmp eq i8* %114, %115
  br i1 %cmp83, label %if.then85, label %if.end90

if.then85:                                        ; preds = %if.end75
  %116 = load %struct.obstack*, %struct.obstack** %__o179, align 8, !tbaa !6
  %maybe_empty_object86 = getelementptr inbounds %struct.obstack, %struct.obstack* %116, i32 0, i32 10
  %bf.load87 = load i8, i8* %maybe_empty_object86, align 8
  %bf.clear88 = and i8 %bf.load87, -3
  %bf.set89 = or i8 %bf.clear88, 2
  store i8 %bf.set89, i8* %maybe_empty_object86, align 8
  br label %if.end90

if.end90:                                         ; preds = %if.then85, %if.end75
  %117 = load %struct.obstack*, %struct.obstack** %__o179, align 8, !tbaa !6
  %next_free91 = getelementptr inbounds %struct.obstack, %struct.obstack* %117, i32 0, i32 3
  %118 = load i8*, i8** %next_free91, align 8, !tbaa !176
  %sub.ptr.lhs.cast92 = ptrtoint i8* %118 to i64
  %sub.ptr.sub93 = sub i64 %sub.ptr.lhs.cast92, 0
  %119 = load %struct.obstack*, %struct.obstack** %__o179, align 8, !tbaa !6
  %alignment_mask94 = getelementptr inbounds %struct.obstack, %struct.obstack* %119, i32 0, i32 6
  %120 = load i64, i64* %alignment_mask94, align 8, !tbaa !177
  %add95 = add i64 %sub.ptr.sub93, %120
  %121 = load %struct.obstack*, %struct.obstack** %__o179, align 8, !tbaa !6
  %alignment_mask96 = getelementptr inbounds %struct.obstack, %struct.obstack* %121, i32 0, i32 6
  %122 = load i64, i64* %alignment_mask96, align 8, !tbaa !177
  %neg97 = xor i64 %122, -1
  %and98 = and i64 %add95, %neg97
  %add.ptr99 = getelementptr inbounds i8, i8* null, i64 %and98
  %123 = load %struct.obstack*, %struct.obstack** %__o179, align 8, !tbaa !6
  %next_free100 = getelementptr inbounds %struct.obstack, %struct.obstack* %123, i32 0, i32 3
  store i8* %add.ptr99, i8** %next_free100, align 8, !tbaa !176
  %124 = load %struct.obstack*, %struct.obstack** %__o179, align 8, !tbaa !6
  %next_free101 = getelementptr inbounds %struct.obstack, %struct.obstack* %124, i32 0, i32 3
  %125 = load i8*, i8** %next_free101, align 8, !tbaa !176
  %126 = load %struct.obstack*, %struct.obstack** %__o179, align 8, !tbaa !6
  %chunk102 = getelementptr inbounds %struct.obstack, %struct.obstack* %126, i32 0, i32 1
  %127 = load %struct._obstack_chunk*, %struct._obstack_chunk** %chunk102, align 8, !tbaa !173
  %128 = bitcast %struct._obstack_chunk* %127 to i8*
  %sub.ptr.lhs.cast103 = ptrtoint i8* %125 to i64
  %sub.ptr.rhs.cast104 = ptrtoint i8* %128 to i64
  %sub.ptr.sub105 = sub i64 %sub.ptr.lhs.cast103, %sub.ptr.rhs.cast104
  %129 = load %struct.obstack*, %struct.obstack** %__o179, align 8, !tbaa !6
  %chunk_limit106 = getelementptr inbounds %struct.obstack, %struct.obstack* %129, i32 0, i32 4
  %130 = load i8*, i8** %chunk_limit106, align 8, !tbaa !174
  %131 = load %struct.obstack*, %struct.obstack** %__o179, align 8, !tbaa !6
  %chunk107 = getelementptr inbounds %struct.obstack, %struct.obstack* %131, i32 0, i32 1
  %132 = load %struct._obstack_chunk*, %struct._obstack_chunk** %chunk107, align 8, !tbaa !173
  %133 = bitcast %struct._obstack_chunk* %132 to i8*
  %sub.ptr.lhs.cast108 = ptrtoint i8* %130 to i64
  %sub.ptr.rhs.cast109 = ptrtoint i8* %133 to i64
  %sub.ptr.sub110 = sub i64 %sub.ptr.lhs.cast108, %sub.ptr.rhs.cast109
  %cmp111 = icmp ugt i64 %sub.ptr.sub105, %sub.ptr.sub110
  br i1 %cmp111, label %if.then113, label %if.end116

if.then113:                                       ; preds = %if.end90
  %134 = load %struct.obstack*, %struct.obstack** %__o179, align 8, !tbaa !6
  %chunk_limit114 = getelementptr inbounds %struct.obstack, %struct.obstack* %134, i32 0, i32 4
  %135 = load i8*, i8** %chunk_limit114, align 8, !tbaa !174
  %136 = load %struct.obstack*, %struct.obstack** %__o179, align 8, !tbaa !6
  %next_free115 = getelementptr inbounds %struct.obstack, %struct.obstack* %136, i32 0, i32 3
  store i8* %135, i8** %next_free115, align 8, !tbaa !176
  br label %if.end116

if.end116:                                        ; preds = %if.then113, %if.end90
  %137 = load %struct.obstack*, %struct.obstack** %__o179, align 8, !tbaa !6
  %next_free117 = getelementptr inbounds %struct.obstack, %struct.obstack* %137, i32 0, i32 3
  %138 = load i8*, i8** %next_free117, align 8, !tbaa !176
  %139 = load %struct.obstack*, %struct.obstack** %__o179, align 8, !tbaa !6
  %object_base118 = getelementptr inbounds %struct.obstack, %struct.obstack* %139, i32 0, i32 2
  store i8* %138, i8** %object_base118, align 8, !tbaa !175
  %140 = load i8*, i8** %__value80, align 8, !tbaa !6
  store i8* %140, i8** %tmp119, align 8, !tbaa !6
  %141 = bitcast i8** %__value80 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %141) #13
  %142 = bitcast %struct.obstack** %__o179 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %142) #13
  %143 = load i8*, i8** %tmp119, align 8, !tbaa !6
  %144 = bitcast i8* %143 to i64*
  %145 = load %struct.Tokens*, %struct.Tokens** %t.addr, align 8, !tbaa !6
  %tok_len = getelementptr inbounds %struct.Tokens, %struct.Tokens* %145, i32 0, i32 2
  store i64* %144, i64** %tok_len, align 8, !tbaa !172
  %146 = load %struct._IO_FILE*, %struct._IO_FILE** %in.addr, align 8, !tbaa !6
  %call120 = call i32 @ferror(%struct._IO_FILE* %146) #13
  %tobool121 = icmp ne i32 %call120, 0
  %lnot = xor i1 %tobool121, true
  ret i1 %lnot

unreachable:                                      ; preds = %cleanup
  unreachable
}

declare dso_local i32 @fgetc(%struct._IO_FILE*) #1

; Function Attrs: nounwind uwtable
define internal void @save_token(%struct.Tokens* %t) #7 {
entry:
  %t.addr = alloca %struct.Tokens*, align 8
  %len = alloca i64, align 8
  %__o = alloca %struct.obstack*, align 8
  %tmp = alloca i64, align 8
  %s = alloca i8*, align 8
  %__o1 = alloca %struct.obstack*, align 8
  %__value = alloca i8*, align 8
  %tmp24 = alloca i8*, align 8
  %__o25 = alloca %struct.obstack*, align 8
  %__o126 = alloca %struct.obstack*, align 8
  %tmp27 = alloca i64, align 8
  %__o136 = alloca %struct.obstack*, align 8
  %__p1 = alloca i8*, align 8
  %__o40 = alloca %struct.obstack*, align 8
  %__len = alloca i64, align 8
  %__o141 = alloca %struct.obstack*, align 8
  %tmp42 = alloca i64, align 8
  store %struct.Tokens* %t, %struct.Tokens** %t.addr, align 8, !tbaa !6
  %0 = bitcast i64* %len to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #13
  %1 = bitcast %struct.obstack** %__o to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %1) #13
  %2 = load %struct.Tokens*, %struct.Tokens** %t.addr, align 8, !tbaa !6
  %o_data = getelementptr inbounds %struct.Tokens, %struct.Tokens* %2, i32 0, i32 3
  store %struct.obstack* %o_data, %struct.obstack** %__o, align 8, !tbaa !6
  %3 = load %struct.obstack*, %struct.obstack** %__o, align 8, !tbaa !6
  %next_free = getelementptr inbounds %struct.obstack, %struct.obstack* %3, i32 0, i32 3
  %4 = load i8*, i8** %next_free, align 8, !tbaa !176
  %5 = load %struct.obstack*, %struct.obstack** %__o, align 8, !tbaa !6
  %object_base = getelementptr inbounds %struct.obstack, %struct.obstack* %5, i32 0, i32 2
  %6 = load i8*, i8** %object_base, align 8, !tbaa !175
  %sub.ptr.lhs.cast = ptrtoint i8* %4 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %6 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  store i64 %sub.ptr.sub, i64* %tmp, align 8, !tbaa !14
  %7 = bitcast %struct.obstack** %__o to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %7) #13
  %8 = load i64, i64* %tmp, align 8, !tbaa !14
  %sub = sub i64 %8, 1
  store i64 %sub, i64* %len, align 8, !tbaa !14
  %9 = bitcast i8** %s to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %9) #13
  %10 = bitcast %struct.obstack** %__o1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %10) #13
  %11 = load %struct.Tokens*, %struct.Tokens** %t.addr, align 8, !tbaa !6
  %o_data1 = getelementptr inbounds %struct.Tokens, %struct.Tokens* %11, i32 0, i32 3
  store %struct.obstack* %o_data1, %struct.obstack** %__o1, align 8, !tbaa !6
  %12 = bitcast i8** %__value to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %12) #13
  %13 = load %struct.obstack*, %struct.obstack** %__o1, align 8, !tbaa !6
  %object_base2 = getelementptr inbounds %struct.obstack, %struct.obstack* %13, i32 0, i32 2
  %14 = load i8*, i8** %object_base2, align 8, !tbaa !175
  store i8* %14, i8** %__value, align 8, !tbaa !6
  %15 = load %struct.obstack*, %struct.obstack** %__o1, align 8, !tbaa !6
  %next_free3 = getelementptr inbounds %struct.obstack, %struct.obstack* %15, i32 0, i32 3
  %16 = load i8*, i8** %next_free3, align 8, !tbaa !176
  %17 = load i8*, i8** %__value, align 8, !tbaa !6
  %cmp = icmp eq i8* %16, %17
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %18 = load %struct.obstack*, %struct.obstack** %__o1, align 8, !tbaa !6
  %maybe_empty_object = getelementptr inbounds %struct.obstack, %struct.obstack* %18, i32 0, i32 10
  %bf.load = load i8, i8* %maybe_empty_object, align 8
  %bf.clear = and i8 %bf.load, -3
  %bf.set = or i8 %bf.clear, 2
  store i8 %bf.set, i8* %maybe_empty_object, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %19 = load %struct.obstack*, %struct.obstack** %__o1, align 8, !tbaa !6
  %next_free4 = getelementptr inbounds %struct.obstack, %struct.obstack* %19, i32 0, i32 3
  %20 = load i8*, i8** %next_free4, align 8, !tbaa !176
  %sub.ptr.lhs.cast5 = ptrtoint i8* %20 to i64
  %sub.ptr.sub6 = sub i64 %sub.ptr.lhs.cast5, 0
  %21 = load %struct.obstack*, %struct.obstack** %__o1, align 8, !tbaa !6
  %alignment_mask = getelementptr inbounds %struct.obstack, %struct.obstack* %21, i32 0, i32 6
  %22 = load i64, i64* %alignment_mask, align 8, !tbaa !177
  %add = add i64 %sub.ptr.sub6, %22
  %23 = load %struct.obstack*, %struct.obstack** %__o1, align 8, !tbaa !6
  %alignment_mask7 = getelementptr inbounds %struct.obstack, %struct.obstack* %23, i32 0, i32 6
  %24 = load i64, i64* %alignment_mask7, align 8, !tbaa !177
  %neg = xor i64 %24, -1
  %and = and i64 %add, %neg
  %add.ptr = getelementptr inbounds i8, i8* null, i64 %and
  %25 = load %struct.obstack*, %struct.obstack** %__o1, align 8, !tbaa !6
  %next_free8 = getelementptr inbounds %struct.obstack, %struct.obstack* %25, i32 0, i32 3
  store i8* %add.ptr, i8** %next_free8, align 8, !tbaa !176
  %26 = load %struct.obstack*, %struct.obstack** %__o1, align 8, !tbaa !6
  %next_free9 = getelementptr inbounds %struct.obstack, %struct.obstack* %26, i32 0, i32 3
  %27 = load i8*, i8** %next_free9, align 8, !tbaa !176
  %28 = load %struct.obstack*, %struct.obstack** %__o1, align 8, !tbaa !6
  %chunk = getelementptr inbounds %struct.obstack, %struct.obstack* %28, i32 0, i32 1
  %29 = load %struct._obstack_chunk*, %struct._obstack_chunk** %chunk, align 8, !tbaa !173
  %30 = bitcast %struct._obstack_chunk* %29 to i8*
  %sub.ptr.lhs.cast10 = ptrtoint i8* %27 to i64
  %sub.ptr.rhs.cast11 = ptrtoint i8* %30 to i64
  %sub.ptr.sub12 = sub i64 %sub.ptr.lhs.cast10, %sub.ptr.rhs.cast11
  %31 = load %struct.obstack*, %struct.obstack** %__o1, align 8, !tbaa !6
  %chunk_limit = getelementptr inbounds %struct.obstack, %struct.obstack* %31, i32 0, i32 4
  %32 = load i8*, i8** %chunk_limit, align 8, !tbaa !174
  %33 = load %struct.obstack*, %struct.obstack** %__o1, align 8, !tbaa !6
  %chunk13 = getelementptr inbounds %struct.obstack, %struct.obstack* %33, i32 0, i32 1
  %34 = load %struct._obstack_chunk*, %struct._obstack_chunk** %chunk13, align 8, !tbaa !173
  %35 = bitcast %struct._obstack_chunk* %34 to i8*
  %sub.ptr.lhs.cast14 = ptrtoint i8* %32 to i64
  %sub.ptr.rhs.cast15 = ptrtoint i8* %35 to i64
  %sub.ptr.sub16 = sub i64 %sub.ptr.lhs.cast14, %sub.ptr.rhs.cast15
  %cmp17 = icmp ugt i64 %sub.ptr.sub12, %sub.ptr.sub16
  br i1 %cmp17, label %if.then18, label %if.end21

if.then18:                                        ; preds = %if.end
  %36 = load %struct.obstack*, %struct.obstack** %__o1, align 8, !tbaa !6
  %chunk_limit19 = getelementptr inbounds %struct.obstack, %struct.obstack* %36, i32 0, i32 4
  %37 = load i8*, i8** %chunk_limit19, align 8, !tbaa !174
  %38 = load %struct.obstack*, %struct.obstack** %__o1, align 8, !tbaa !6
  %next_free20 = getelementptr inbounds %struct.obstack, %struct.obstack* %38, i32 0, i32 3
  store i8* %37, i8** %next_free20, align 8, !tbaa !176
  br label %if.end21

if.end21:                                         ; preds = %if.then18, %if.end
  %39 = load %struct.obstack*, %struct.obstack** %__o1, align 8, !tbaa !6
  %next_free22 = getelementptr inbounds %struct.obstack, %struct.obstack* %39, i32 0, i32 3
  %40 = load i8*, i8** %next_free22, align 8, !tbaa !176
  %41 = load %struct.obstack*, %struct.obstack** %__o1, align 8, !tbaa !6
  %object_base23 = getelementptr inbounds %struct.obstack, %struct.obstack* %41, i32 0, i32 2
  store i8* %40, i8** %object_base23, align 8, !tbaa !175
  %42 = load i8*, i8** %__value, align 8, !tbaa !6
  store i8* %42, i8** %tmp24, align 8, !tbaa !6
  %43 = bitcast i8** %__value to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %43) #13
  %44 = bitcast %struct.obstack** %__o1 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %44) #13
  %45 = load i8*, i8** %tmp24, align 8, !tbaa !6
  store i8* %45, i8** %s, align 8, !tbaa !6
  %46 = bitcast %struct.obstack** %__o25 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %46) #13
  %47 = load %struct.Tokens*, %struct.Tokens** %t.addr, align 8, !tbaa !6
  %o_tok = getelementptr inbounds %struct.Tokens, %struct.Tokens* %47, i32 0, i32 4
  store %struct.obstack* %o_tok, %struct.obstack** %__o25, align 8, !tbaa !6
  %48 = bitcast %struct.obstack** %__o126 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %48) #13
  %49 = load %struct.obstack*, %struct.obstack** %__o25, align 8, !tbaa !6
  store %struct.obstack* %49, %struct.obstack** %__o126, align 8, !tbaa !6
  %50 = load %struct.obstack*, %struct.obstack** %__o126, align 8, !tbaa !6
  %chunk_limit28 = getelementptr inbounds %struct.obstack, %struct.obstack* %50, i32 0, i32 4
  %51 = load i8*, i8** %chunk_limit28, align 8, !tbaa !174
  %52 = load %struct.obstack*, %struct.obstack** %__o126, align 8, !tbaa !6
  %next_free29 = getelementptr inbounds %struct.obstack, %struct.obstack* %52, i32 0, i32 3
  %53 = load i8*, i8** %next_free29, align 8, !tbaa !176
  %sub.ptr.lhs.cast30 = ptrtoint i8* %51 to i64
  %sub.ptr.rhs.cast31 = ptrtoint i8* %53 to i64
  %sub.ptr.sub32 = sub i64 %sub.ptr.lhs.cast30, %sub.ptr.rhs.cast31
  store i64 %sub.ptr.sub32, i64* %tmp27, align 8, !tbaa !14
  %54 = bitcast %struct.obstack** %__o126 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %54) #13
  %55 = load i64, i64* %tmp27, align 8, !tbaa !14
  %cmp33 = icmp ult i64 %55, 8
  br i1 %cmp33, label %if.then34, label %if.end35

if.then34:                                        ; preds = %if.end21
  %56 = load %struct.obstack*, %struct.obstack** %__o25, align 8, !tbaa !6
  call void @_obstack_newchunk(%struct.obstack* %56, i64 8)
  br label %if.end35

if.end35:                                         ; preds = %if.then34, %if.end21
  %57 = bitcast %struct.obstack** %__o136 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %57) #13
  %58 = load %struct.obstack*, %struct.obstack** %__o25, align 8, !tbaa !6
  store %struct.obstack* %58, %struct.obstack** %__o136, align 8, !tbaa !6
  %59 = bitcast i8** %__p1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %59) #13
  %60 = load %struct.obstack*, %struct.obstack** %__o136, align 8, !tbaa !6
  %next_free37 = getelementptr inbounds %struct.obstack, %struct.obstack* %60, i32 0, i32 3
  %61 = load i8*, i8** %next_free37, align 8, !tbaa !176
  store i8* %61, i8** %__p1, align 8, !tbaa !6
  %62 = load i8*, i8** %s, align 8, !tbaa !6
  %63 = load i8*, i8** %__p1, align 8, !tbaa !6
  %64 = bitcast i8* %63 to i8**
  store i8* %62, i8** %64, align 8, !tbaa !6
  %65 = load %struct.obstack*, %struct.obstack** %__o136, align 8, !tbaa !6
  %next_free38 = getelementptr inbounds %struct.obstack, %struct.obstack* %65, i32 0, i32 3
  %66 = load i8*, i8** %next_free38, align 8, !tbaa !176
  %add.ptr39 = getelementptr inbounds i8, i8* %66, i64 8
  store i8* %add.ptr39, i8** %next_free38, align 8, !tbaa !176
  %67 = bitcast i8** %__p1 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %67) #13
  %68 = bitcast %struct.obstack** %__o136 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %68) #13
  %69 = bitcast %struct.obstack** %__o25 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %69) #13
  %70 = bitcast %struct.obstack** %__o40 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %70) #13
  %71 = load %struct.Tokens*, %struct.Tokens** %t.addr, align 8, !tbaa !6
  %o_tok_len = getelementptr inbounds %struct.Tokens, %struct.Tokens* %71, i32 0, i32 5
  store %struct.obstack* %o_tok_len, %struct.obstack** %__o40, align 8, !tbaa !6
  %72 = bitcast i64* %__len to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %72) #13
  store i64 8, i64* %__len, align 8, !tbaa !14
  %73 = bitcast %struct.obstack** %__o141 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %73) #13
  %74 = load %struct.obstack*, %struct.obstack** %__o40, align 8, !tbaa !6
  store %struct.obstack* %74, %struct.obstack** %__o141, align 8, !tbaa !6
  %75 = load %struct.obstack*, %struct.obstack** %__o141, align 8, !tbaa !6
  %chunk_limit43 = getelementptr inbounds %struct.obstack, %struct.obstack* %75, i32 0, i32 4
  %76 = load i8*, i8** %chunk_limit43, align 8, !tbaa !174
  %77 = load %struct.obstack*, %struct.obstack** %__o141, align 8, !tbaa !6
  %next_free44 = getelementptr inbounds %struct.obstack, %struct.obstack* %77, i32 0, i32 3
  %78 = load i8*, i8** %next_free44, align 8, !tbaa !176
  %sub.ptr.lhs.cast45 = ptrtoint i8* %76 to i64
  %sub.ptr.rhs.cast46 = ptrtoint i8* %78 to i64
  %sub.ptr.sub47 = sub i64 %sub.ptr.lhs.cast45, %sub.ptr.rhs.cast46
  store i64 %sub.ptr.sub47, i64* %tmp42, align 8, !tbaa !14
  %79 = bitcast %struct.obstack** %__o141 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %79) #13
  %80 = load i64, i64* %tmp42, align 8, !tbaa !14
  %81 = load i64, i64* %__len, align 8, !tbaa !14
  %cmp48 = icmp ult i64 %80, %81
  br i1 %cmp48, label %if.then49, label %if.end50

if.then49:                                        ; preds = %if.end35
  %82 = load %struct.obstack*, %struct.obstack** %__o40, align 8, !tbaa !6
  %83 = load i64, i64* %__len, align 8, !tbaa !14
  call void @_obstack_newchunk(%struct.obstack* %82, i64 %83)
  br label %if.end50

if.end50:                                         ; preds = %if.then49, %if.end35
  %84 = load %struct.obstack*, %struct.obstack** %__o40, align 8, !tbaa !6
  %next_free51 = getelementptr inbounds %struct.obstack, %struct.obstack* %84, i32 0, i32 3
  %85 = load i8*, i8** %next_free51, align 8, !tbaa !176
  %86 = bitcast i64* %len to i8*
  %87 = load i64, i64* %__len, align 8, !tbaa !14
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %85, i8* align 8 %86, i64 %87, i1 false)
  %88 = load i64, i64* %__len, align 8, !tbaa !14
  %89 = load %struct.obstack*, %struct.obstack** %__o40, align 8, !tbaa !6
  %next_free52 = getelementptr inbounds %struct.obstack, %struct.obstack* %89, i32 0, i32 3
  %90 = load i8*, i8** %next_free52, align 8, !tbaa !176
  %add.ptr53 = getelementptr inbounds i8, i8* %90, i64 %88
  store i8* %add.ptr53, i8** %next_free52, align 8, !tbaa !176
  %91 = bitcast i64* %__len to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %91) #13
  %92 = bitcast %struct.obstack** %__o40 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %92) #13
  %93 = load %struct.Tokens*, %struct.Tokens** %t.addr, align 8, !tbaa !6
  %n_tok = getelementptr inbounds %struct.Tokens, %struct.Tokens* %93, i32 0, i32 0
  %94 = load i64, i64* %n_tok, align 8, !tbaa !30
  %inc = add i64 %94, 1
  store i64 %inc, i64* %n_tok, align 8, !tbaa !30
  %95 = bitcast i8** %s to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %95) #13
  %96 = bitcast i64* %len to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %96) #13
  ret void
}

; Function Attrs: nounwind
declare dso_local i32 @ferror(%struct._IO_FILE*) #6

; Function Attrs: nounwind uwtable
define dso_local i32 @setlocale_null_r(i32 %category, i8* nonnull %buf, i64 %bufsize) #7 {
entry:
  %category.addr = alloca i32, align 4
  %buf.addr = alloca i8*, align 8
  %bufsize.addr = alloca i64, align 8
  store i32 %category, i32* %category.addr, align 4, !tbaa !2
  store i8* %buf, i8** %buf.addr, align 8, !tbaa !6
  store i64 %bufsize, i64* %bufsize.addr, align 8, !tbaa !14
  %0 = load i32, i32* %category.addr, align 4, !tbaa !2
  %1 = load i8*, i8** %buf.addr, align 8, !tbaa !6
  %2 = load i64, i64* %bufsize.addr, align 8, !tbaa !14
  %call = call i32 @setlocale_null_unlocked(i32 %0, i8* %1, i64 %2)
  ret i32 %call
}

; Function Attrs: nounwind uwtable
define internal i32 @setlocale_null_unlocked(i32 %category, i8* %buf, i64 %bufsize) #7 {
entry:
  %retval = alloca i32, align 4
  %category.addr = alloca i32, align 4
  %buf.addr = alloca i8*, align 8
  %bufsize.addr = alloca i64, align 8
  %result = alloca i8*, align 8
  %cleanup.dest.slot = alloca i32, align 4
  %length = alloca i64, align 8
  store i32 %category, i32* %category.addr, align 4, !tbaa !2
  store i8* %buf, i8** %buf.addr, align 8, !tbaa !6
  store i64 %bufsize, i64* %bufsize.addr, align 8, !tbaa !14
  %0 = bitcast i8** %result to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #13
  %1 = load i32, i32* %category.addr, align 4, !tbaa !2
  %call = call i8* @setlocale_null_androidfix(i32 %1)
  store i8* %call, i8** %result, align 8, !tbaa !6
  %2 = load i8*, i8** %result, align 8, !tbaa !6
  %cmp = icmp eq i8* %2, null
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %3 = load i64, i64* %bufsize.addr, align 8, !tbaa !14
  %cmp1 = icmp ugt i64 %3, 0
  br i1 %cmp1, label %if.then2, label %if.end

if.then2:                                         ; preds = %if.then
  %4 = load i8*, i8** %buf.addr, align 8, !tbaa !6
  %arrayidx = getelementptr inbounds i8, i8* %4, i64 0
  store i8 0, i8* %arrayidx, align 1, !tbaa !13
  br label %if.end

if.end:                                           ; preds = %if.then2, %if.then
  store i32 22, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup12

if.else:                                          ; preds = %entry
  %5 = bitcast i64* %length to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %5) #13
  %6 = load i8*, i8** %result, align 8, !tbaa !6
  %call3 = call i64 @strlen(i8* %6) #22
  store i64 %call3, i64* %length, align 8, !tbaa !14
  %7 = load i64, i64* %length, align 8, !tbaa !14
  %8 = load i64, i64* %bufsize.addr, align 8, !tbaa !14
  %cmp4 = icmp ult i64 %7, %8
  br i1 %cmp4, label %if.then5, label %if.else6

if.then5:                                         ; preds = %if.else
  %9 = load i8*, i8** %buf.addr, align 8, !tbaa !6
  %10 = load i8*, i8** %result, align 8, !tbaa !6
  %11 = load i64, i64* %length, align 8, !tbaa !14
  %add = add i64 %11, 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %9, i8* align 1 %10, i64 %add, i1 false)
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.else6:                                         ; preds = %if.else
  %12 = load i64, i64* %bufsize.addr, align 8, !tbaa !14
  %cmp7 = icmp ugt i64 %12, 0
  br i1 %cmp7, label %if.then8, label %if.end11

if.then8:                                         ; preds = %if.else6
  %13 = load i8*, i8** %buf.addr, align 8, !tbaa !6
  %14 = load i8*, i8** %result, align 8, !tbaa !6
  %15 = load i64, i64* %bufsize.addr, align 8, !tbaa !14
  %sub = sub i64 %15, 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %13, i8* align 1 %14, i64 %sub, i1 false)
  %16 = load i8*, i8** %buf.addr, align 8, !tbaa !6
  %17 = load i64, i64* %bufsize.addr, align 8, !tbaa !14
  %sub9 = sub i64 %17, 1
  %arrayidx10 = getelementptr inbounds i8, i8* %16, i64 %sub9
  store i8 0, i8* %arrayidx10, align 1, !tbaa !13
  br label %if.end11

if.end11:                                         ; preds = %if.then8, %if.else6
  store i32 34, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end11, %if.then5
  %18 = bitcast i64* %length to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %18) #13
  br label %cleanup12

cleanup12:                                        ; preds = %cleanup, %if.end
  %19 = bitcast i8** %result to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %19) #13
  %20 = load i32, i32* %retval, align 4
  ret i32 %20
}

; Function Attrs: nounwind uwtable
define internal i8* @setlocale_null_androidfix(i32 %category) #7 {
entry:
  %category.addr = alloca i32, align 4
  %result = alloca i8*, align 8
  store i32 %category, i32* %category.addr, align 4, !tbaa !2
  %0 = bitcast i8** %result to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #13
  %1 = load i32, i32* %category.addr, align 4, !tbaa !2
  %call = call i8* @setlocale(i32 %1, i8* null) #13
  store i8* %call, i8** %result, align 8, !tbaa !6
  %2 = load i8*, i8** %result, align 8, !tbaa !6
  %3 = bitcast i8** %result to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %3) #13
  ret i8* %2
}

; Function Attrs: nounwind uwtable
define dso_local i8* @setlocale_null(i32 %category) #7 {
entry:
  %category.addr = alloca i32, align 4
  store i32 %category, i32* %category.addr, align 4, !tbaa !2
  %0 = load i32, i32* %category.addr, align 4, !tbaa !2
  %call = call i8* @setlocale_null_androidfix(i32 %0)
  ret i8* %call
}

; Function Attrs: nounwind uwtable
define dso_local i32 @mkstemp_safer(i8* %templ) #7 {
entry:
  %templ.addr = alloca i8*, align 8
  store i8* %templ, i8** %templ.addr, align 8, !tbaa !6
  %0 = load i8*, i8** %templ.addr, align 8, !tbaa !6
  %call = call i32 @mkstemp(i8* %0)
  %call1 = call i32 @fd_safer(i32 %call)
  ret i32 %call1
}

declare dso_local i32 @mkstemp(i8*) #1

; Function Attrs: nounwind uwtable
define dso_local i32 @mkostemp_safer(i8* %templ, i32 %flags) #7 {
entry:
  %templ.addr = alloca i8*, align 8
  %flags.addr = alloca i32, align 4
  store i8* %templ, i8** %templ.addr, align 8, !tbaa !6
  store i32 %flags, i32* %flags.addr, align 4, !tbaa !2
  %0 = load i8*, i8** %templ.addr, align 8, !tbaa !6
  %1 = load i32, i32* %flags.addr, align 4, !tbaa !2
  %call = call i32 @mkostemp(i8* %0, i32 %1)
  %2 = load i32, i32* %flags.addr, align 4, !tbaa !2
  %call1 = call i32 @fd_safer_flag(i32 %call, i32 %2)
  ret i32 %call1
}

declare dso_local i32 @mkostemp(i8*, i32) #1

; Function Attrs: nounwind readonly uwtable
define dso_local i32 @strnumcmp(i8* nonnull %a, i8* nonnull %b, i32 %decimal_point, i32 %thousands_sep) #9 {
entry:
  %a.addr = alloca i8*, align 8
  %b.addr = alloca i8*, align 8
  %decimal_point.addr = alloca i32, align 4
  %thousands_sep.addr = alloca i32, align 4
  store i8* %a, i8** %a.addr, align 8, !tbaa !6
  store i8* %b, i8** %b.addr, align 8, !tbaa !6
  store i32 %decimal_point, i32* %decimal_point.addr, align 4, !tbaa !2
  store i32 %thousands_sep, i32* %thousands_sep.addr, align 4, !tbaa !2
  %0 = load i8*, i8** %a.addr, align 8, !tbaa !6
  %1 = load i8*, i8** %b.addr, align 8, !tbaa !6
  %2 = load i32, i32* %decimal_point.addr, align 4, !tbaa !2
  %3 = load i32, i32* %thousands_sep.addr, align 4, !tbaa !2
  %call = call i32 @numcompare.311(i8* %0, i8* %1, i32 %2, i32 %3) #22
  ret i32 %call
}

; Function Attrs: inlinehint nounwind readonly uwtable
define internal i32 @numcompare.311(i8* %a, i8* %b, i32 %decimal_point, i32 %thousands_sep) #12 {
entry:
  %retval = alloca i32, align 4
  %a.addr = alloca i8*, align 8
  %b.addr = alloca i8*, align 8
  %decimal_point.addr = alloca i32, align 4
  %thousands_sep.addr = alloca i32, align 4
  %tmpa = alloca i8, align 1
  %tmpb = alloca i8, align 1
  %tmp = alloca i32, align 4
  %log_a = alloca i64, align 8
  %log_b = alloca i64, align 8
  %cleanup.dest.slot = alloca i32, align 4
  store i8* %a, i8** %a.addr, align 8, !tbaa !6
  store i8* %b, i8** %b.addr, align 8, !tbaa !6
  store i32 %decimal_point, i32* %decimal_point.addr, align 4, !tbaa !2
  store i32 %thousands_sep, i32* %thousands_sep.addr, align 4, !tbaa !2
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %tmpa) #13
  %0 = load i8*, i8** %a.addr, align 8, !tbaa !6
  %1 = load i8, i8* %0, align 1, !tbaa !13
  store i8 %1, i8* %tmpa, align 1, !tbaa !13
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %tmpb) #13
  %2 = load i8*, i8** %b.addr, align 8, !tbaa !6
  %3 = load i8, i8* %2, align 1, !tbaa !13
  store i8 %3, i8* %tmpb, align 1, !tbaa !13
  %4 = bitcast i32* %tmp to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %4) #13
  %5 = bitcast i64* %log_a to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %5) #13
  %6 = bitcast i64* %log_b to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %6) #13
  %7 = load i8, i8* %tmpa, align 1, !tbaa !13
  %conv = zext i8 %7 to i32
  %cmp = icmp eq i32 %conv, 45
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  br label %do.body

do.body:                                          ; preds = %lor.end, %if.then
  %8 = load i8*, i8** %a.addr, align 8, !tbaa !6
  %incdec.ptr = getelementptr inbounds i8, i8* %8, i32 1
  store i8* %incdec.ptr, i8** %a.addr, align 8, !tbaa !6
  %9 = load i8, i8* %incdec.ptr, align 1, !tbaa !13
  store i8 %9, i8* %tmpa, align 1, !tbaa !13
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %10 = load i8, i8* %tmpa, align 1, !tbaa !13
  %conv2 = zext i8 %10 to i32
  %cmp3 = icmp eq i32 %conv2, 48
  br i1 %cmp3, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %do.cond
  %11 = load i8, i8* %tmpa, align 1, !tbaa !13
  %conv5 = zext i8 %11 to i32
  %12 = load i32, i32* %thousands_sep.addr, align 4, !tbaa !2
  %cmp6 = icmp eq i32 %conv5, %12
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %do.cond
  %13 = phi i1 [ true, %do.cond ], [ %cmp6, %lor.rhs ]
  br i1 %13, label %do.body, label %do.end

do.end:                                           ; preds = %lor.end
  %14 = load i8, i8* %tmpb, align 1, !tbaa !13
  %conv8 = zext i8 %14 to i32
  %cmp9 = icmp ne i32 %conv8, 45
  br i1 %cmp9, label %if.then11, label %if.end54

if.then11:                                        ; preds = %do.end
  %15 = load i8, i8* %tmpa, align 1, !tbaa !13
  %conv12 = zext i8 %15 to i32
  %16 = load i32, i32* %decimal_point.addr, align 4, !tbaa !2
  %cmp13 = icmp eq i32 %conv12, %16
  br i1 %cmp13, label %if.then15, label %if.end

if.then15:                                        ; preds = %if.then11
  br label %do.body16

do.body16:                                        ; preds = %do.cond18, %if.then15
  %17 = load i8*, i8** %a.addr, align 8, !tbaa !6
  %incdec.ptr17 = getelementptr inbounds i8, i8* %17, i32 1
  store i8* %incdec.ptr17, i8** %a.addr, align 8, !tbaa !6
  %18 = load i8, i8* %incdec.ptr17, align 1, !tbaa !13
  store i8 %18, i8* %tmpa, align 1, !tbaa !13
  br label %do.cond18

do.cond18:                                        ; preds = %do.body16
  %19 = load i8, i8* %tmpa, align 1, !tbaa !13
  %conv19 = zext i8 %19 to i32
  %cmp20 = icmp eq i32 %conv19, 48
  br i1 %cmp20, label %do.body16, label %do.end22

do.end22:                                         ; preds = %do.cond18
  br label %if.end

if.end:                                           ; preds = %do.end22, %if.then11
  %20 = load i8, i8* %tmpa, align 1, !tbaa !13
  %conv23 = zext i8 %20 to i32
  %sub = sub i32 %conv23, 48
  %cmp24 = icmp ule i32 %sub, 9
  br i1 %cmp24, label %if.then26, label %if.end27

if.then26:                                        ; preds = %if.end
  store i32 -1, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end27:                                         ; preds = %if.end
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end27
  %21 = load i8, i8* %tmpb, align 1, !tbaa !13
  %conv28 = zext i8 %21 to i32
  %cmp29 = icmp eq i32 %conv28, 48
  br i1 %cmp29, label %lor.end35, label %lor.rhs31

lor.rhs31:                                        ; preds = %while.cond
  %22 = load i8, i8* %tmpb, align 1, !tbaa !13
  %conv32 = zext i8 %22 to i32
  %23 = load i32, i32* %thousands_sep.addr, align 4, !tbaa !2
  %cmp33 = icmp eq i32 %conv32, %23
  br label %lor.end35

lor.end35:                                        ; preds = %lor.rhs31, %while.cond
  %24 = phi i1 [ true, %while.cond ], [ %cmp33, %lor.rhs31 ]
  br i1 %24, label %while.body, label %while.end

while.body:                                       ; preds = %lor.end35
  %25 = load i8*, i8** %b.addr, align 8, !tbaa !6
  %incdec.ptr36 = getelementptr inbounds i8, i8* %25, i32 1
  store i8* %incdec.ptr36, i8** %b.addr, align 8, !tbaa !6
  %26 = load i8, i8* %incdec.ptr36, align 1, !tbaa !13
  store i8 %26, i8* %tmpb, align 1, !tbaa !13
  br label %while.cond

while.end:                                        ; preds = %lor.end35
  %27 = load i8, i8* %tmpb, align 1, !tbaa !13
  %conv37 = zext i8 %27 to i32
  %28 = load i32, i32* %decimal_point.addr, align 4, !tbaa !2
  %cmp38 = icmp eq i32 %conv37, %28
  br i1 %cmp38, label %if.then40, label %if.end48

if.then40:                                        ; preds = %while.end
  br label %do.body41

do.body41:                                        ; preds = %do.cond43, %if.then40
  %29 = load i8*, i8** %b.addr, align 8, !tbaa !6
  %incdec.ptr42 = getelementptr inbounds i8, i8* %29, i32 1
  store i8* %incdec.ptr42, i8** %b.addr, align 8, !tbaa !6
  %30 = load i8, i8* %incdec.ptr42, align 1, !tbaa !13
  store i8 %30, i8* %tmpb, align 1, !tbaa !13
  br label %do.cond43

do.cond43:                                        ; preds = %do.body41
  %31 = load i8, i8* %tmpb, align 1, !tbaa !13
  %conv44 = zext i8 %31 to i32
  %cmp45 = icmp eq i32 %conv44, 48
  br i1 %cmp45, label %do.body41, label %do.end47

do.end47:                                         ; preds = %do.cond43
  br label %if.end48

if.end48:                                         ; preds = %do.end47, %while.end
  %32 = load i8, i8* %tmpb, align 1, !tbaa !13
  %conv49 = zext i8 %32 to i32
  %sub50 = sub i32 %conv49, 48
  %cmp51 = icmp ule i32 %sub50, 9
  %conv52 = zext i1 %cmp51 to i32
  %sub53 = sub nsw i32 0, %conv52
  store i32 %sub53, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end54:                                         ; preds = %do.end
  br label %do.body55

do.body55:                                        ; preds = %lor.end65, %if.end54
  %33 = load i8*, i8** %b.addr, align 8, !tbaa !6
  %incdec.ptr56 = getelementptr inbounds i8, i8* %33, i32 1
  store i8* %incdec.ptr56, i8** %b.addr, align 8, !tbaa !6
  %34 = load i8, i8* %incdec.ptr56, align 1, !tbaa !13
  store i8 %34, i8* %tmpb, align 1, !tbaa !13
  br label %do.cond57

do.cond57:                                        ; preds = %do.body55
  %35 = load i8, i8* %tmpb, align 1, !tbaa !13
  %conv58 = zext i8 %35 to i32
  %cmp59 = icmp eq i32 %conv58, 48
  br i1 %cmp59, label %lor.end65, label %lor.rhs61

lor.rhs61:                                        ; preds = %do.cond57
  %36 = load i8, i8* %tmpb, align 1, !tbaa !13
  %conv62 = zext i8 %36 to i32
  %37 = load i32, i32* %thousands_sep.addr, align 4, !tbaa !2
  %cmp63 = icmp eq i32 %conv62, %37
  br label %lor.end65

lor.end65:                                        ; preds = %lor.rhs61, %do.cond57
  %38 = phi i1 [ true, %do.cond57 ], [ %cmp63, %lor.rhs61 ]
  br i1 %38, label %do.body55, label %do.end66

do.end66:                                         ; preds = %lor.end65
  br label %while.cond67

while.cond67:                                     ; preds = %do.end90, %do.end66
  %39 = load i8, i8* %tmpa, align 1, !tbaa !13
  %conv68 = zext i8 %39 to i32
  %40 = load i8, i8* %tmpb, align 1, !tbaa !13
  %conv69 = zext i8 %40 to i32
  %cmp70 = icmp eq i32 %conv68, %conv69
  br i1 %cmp70, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond67
  %41 = load i8, i8* %tmpa, align 1, !tbaa !13
  %conv72 = zext i8 %41 to i32
  %sub73 = sub i32 %conv72, 48
  %cmp74 = icmp ule i32 %sub73, 9
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond67
  %42 = phi i1 [ false, %while.cond67 ], [ %cmp74, %land.rhs ]
  br i1 %42, label %while.body76, label %while.end91

while.body76:                                     ; preds = %land.end
  br label %do.body77

do.body77:                                        ; preds = %do.cond79, %while.body76
  %43 = load i8*, i8** %a.addr, align 8, !tbaa !6
  %incdec.ptr78 = getelementptr inbounds i8, i8* %43, i32 1
  store i8* %incdec.ptr78, i8** %a.addr, align 8, !tbaa !6
  %44 = load i8, i8* %incdec.ptr78, align 1, !tbaa !13
  store i8 %44, i8* %tmpa, align 1, !tbaa !13
  br label %do.cond79

do.cond79:                                        ; preds = %do.body77
  %45 = load i8, i8* %tmpa, align 1, !tbaa !13
  %conv80 = zext i8 %45 to i32
  %46 = load i32, i32* %thousands_sep.addr, align 4, !tbaa !2
  %cmp81 = icmp eq i32 %conv80, %46
  br i1 %cmp81, label %do.body77, label %do.end83

do.end83:                                         ; preds = %do.cond79
  br label %do.body84

do.body84:                                        ; preds = %do.cond86, %do.end83
  %47 = load i8*, i8** %b.addr, align 8, !tbaa !6
  %incdec.ptr85 = getelementptr inbounds i8, i8* %47, i32 1
  store i8* %incdec.ptr85, i8** %b.addr, align 8, !tbaa !6
  %48 = load i8, i8* %incdec.ptr85, align 1, !tbaa !13
  store i8 %48, i8* %tmpb, align 1, !tbaa !13
  br label %do.cond86

do.cond86:                                        ; preds = %do.body84
  %49 = load i8, i8* %tmpb, align 1, !tbaa !13
  %conv87 = zext i8 %49 to i32
  %50 = load i32, i32* %thousands_sep.addr, align 4, !tbaa !2
  %cmp88 = icmp eq i32 %conv87, %50
  br i1 %cmp88, label %do.body84, label %do.end90

do.end90:                                         ; preds = %do.cond86
  br label %while.cond67

while.end91:                                      ; preds = %land.end
  %51 = load i8, i8* %tmpa, align 1, !tbaa !13
  %conv92 = zext i8 %51 to i32
  %52 = load i32, i32* %decimal_point.addr, align 4, !tbaa !2
  %cmp93 = icmp eq i32 %conv92, %52
  br i1 %cmp93, label %land.lhs.true, label %lor.lhs.false

land.lhs.true:                                    ; preds = %while.end91
  %53 = load i8, i8* %tmpb, align 1, !tbaa !13
  %conv95 = zext i8 %53 to i32
  %sub96 = sub i32 %conv95, 48
  %cmp97 = icmp ule i32 %sub96, 9
  br i1 %cmp97, label %lor.lhs.false, label %if.then107

lor.lhs.false:                                    ; preds = %land.lhs.true, %while.end91
  %54 = load i8, i8* %tmpb, align 1, !tbaa !13
  %conv99 = zext i8 %54 to i32
  %55 = load i32, i32* %decimal_point.addr, align 4, !tbaa !2
  %cmp100 = icmp eq i32 %conv99, %55
  br i1 %cmp100, label %land.lhs.true102, label %if.end109

land.lhs.true102:                                 ; preds = %lor.lhs.false
  %56 = load i8, i8* %tmpa, align 1, !tbaa !13
  %conv103 = zext i8 %56 to i32
  %sub104 = sub i32 %conv103, 48
  %cmp105 = icmp ule i32 %sub104, 9
  br i1 %cmp105, label %if.end109, label %if.then107

if.then107:                                       ; preds = %land.lhs.true102, %land.lhs.true
  %57 = load i8*, i8** %b.addr, align 8, !tbaa !6
  %58 = load i8*, i8** %a.addr, align 8, !tbaa !6
  %59 = load i32, i32* %decimal_point.addr, align 4, !tbaa !2
  %conv108 = trunc i32 %59 to i8
  %call = call i32 @fraccompare(i8* %57, i8* %58, i8 signext %conv108) #22
  store i32 %call, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end109:                                        ; preds = %land.lhs.true102, %lor.lhs.false
  %60 = load i8, i8* %tmpb, align 1, !tbaa !13
  %conv110 = zext i8 %60 to i32
  %61 = load i8, i8* %tmpa, align 1, !tbaa !13
  %conv111 = zext i8 %61 to i32
  %sub112 = sub nsw i32 %conv110, %conv111
  store i32 %sub112, i32* %tmp, align 4, !tbaa !2
  store i64 0, i64* %log_a, align 8, !tbaa !14
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end109
  %62 = load i8, i8* %tmpa, align 1, !tbaa !13
  %conv113 = zext i8 %62 to i32
  %sub114 = sub i32 %conv113, 48
  %cmp115 = icmp ule i32 %sub114, 9
  br i1 %cmp115, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  br label %do.body117

do.body117:                                       ; preds = %do.cond119, %for.body
  %63 = load i8*, i8** %a.addr, align 8, !tbaa !6
  %incdec.ptr118 = getelementptr inbounds i8, i8* %63, i32 1
  store i8* %incdec.ptr118, i8** %a.addr, align 8, !tbaa !6
  %64 = load i8, i8* %incdec.ptr118, align 1, !tbaa !13
  store i8 %64, i8* %tmpa, align 1, !tbaa !13
  br label %do.cond119

do.cond119:                                       ; preds = %do.body117
  %65 = load i8, i8* %tmpa, align 1, !tbaa !13
  %conv120 = zext i8 %65 to i32
  %66 = load i32, i32* %thousands_sep.addr, align 4, !tbaa !2
  %cmp121 = icmp eq i32 %conv120, %66
  br i1 %cmp121, label %do.body117, label %do.end123

do.end123:                                        ; preds = %do.cond119
  br label %for.inc

for.inc:                                          ; preds = %do.end123
  %67 = load i64, i64* %log_a, align 8, !tbaa !14
  %inc = add i64 %67, 1
  store i64 %inc, i64* %log_a, align 8, !tbaa !14
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i64 0, i64* %log_b, align 8, !tbaa !14
  br label %for.cond124

for.cond124:                                      ; preds = %for.inc137, %for.end
  %68 = load i8, i8* %tmpb, align 1, !tbaa !13
  %conv125 = zext i8 %68 to i32
  %sub126 = sub i32 %conv125, 48
  %cmp127 = icmp ule i32 %sub126, 9
  br i1 %cmp127, label %for.body129, label %for.end139

for.body129:                                      ; preds = %for.cond124
  br label %do.body130

do.body130:                                       ; preds = %do.cond132, %for.body129
  %69 = load i8*, i8** %b.addr, align 8, !tbaa !6
  %incdec.ptr131 = getelementptr inbounds i8, i8* %69, i32 1
  store i8* %incdec.ptr131, i8** %b.addr, align 8, !tbaa !6
  %70 = load i8, i8* %incdec.ptr131, align 1, !tbaa !13
  store i8 %70, i8* %tmpb, align 1, !tbaa !13
  br label %do.cond132

do.cond132:                                       ; preds = %do.body130
  %71 = load i8, i8* %tmpb, align 1, !tbaa !13
  %conv133 = zext i8 %71 to i32
  %72 = load i32, i32* %thousands_sep.addr, align 4, !tbaa !2
  %cmp134 = icmp eq i32 %conv133, %72
  br i1 %cmp134, label %do.body130, label %do.end136

do.end136:                                        ; preds = %do.cond132
  br label %for.inc137

for.inc137:                                       ; preds = %do.end136
  %73 = load i64, i64* %log_b, align 8, !tbaa !14
  %inc138 = add i64 %73, 1
  store i64 %inc138, i64* %log_b, align 8, !tbaa !14
  br label %for.cond124

for.end139:                                       ; preds = %for.cond124
  %74 = load i64, i64* %log_a, align 8, !tbaa !14
  %75 = load i64, i64* %log_b, align 8, !tbaa !14
  %cmp140 = icmp ne i64 %74, %75
  br i1 %cmp140, label %if.then142, label %if.end145

if.then142:                                       ; preds = %for.end139
  %76 = load i64, i64* %log_a, align 8, !tbaa !14
  %77 = load i64, i64* %log_b, align 8, !tbaa !14
  %cmp143 = icmp ult i64 %76, %77
  %78 = zext i1 %cmp143 to i64
  %cond = select i1 %cmp143, i32 1, i32 -1
  store i32 %cond, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end145:                                        ; preds = %for.end139
  %79 = load i64, i64* %log_a, align 8, !tbaa !14
  %tobool = icmp ne i64 %79, 0
  br i1 %tobool, label %if.end147, label %if.then146

if.then146:                                       ; preds = %if.end145
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end147:                                        ; preds = %if.end145
  %80 = load i32, i32* %tmp, align 4, !tbaa !2
  store i32 %80, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.else:                                          ; preds = %entry
  %81 = load i8, i8* %tmpb, align 1, !tbaa !13
  %conv148 = zext i8 %81 to i32
  %cmp149 = icmp eq i32 %conv148, 45
  br i1 %cmp149, label %if.then151, label %if.else210

if.then151:                                       ; preds = %if.else
  br label %do.body152

do.body152:                                       ; preds = %lor.end162, %if.then151
  %82 = load i8*, i8** %b.addr, align 8, !tbaa !6
  %incdec.ptr153 = getelementptr inbounds i8, i8* %82, i32 1
  store i8* %incdec.ptr153, i8** %b.addr, align 8, !tbaa !6
  %83 = load i8, i8* %incdec.ptr153, align 1, !tbaa !13
  store i8 %83, i8* %tmpb, align 1, !tbaa !13
  br label %do.cond154

do.cond154:                                       ; preds = %do.body152
  %84 = load i8, i8* %tmpb, align 1, !tbaa !13
  %conv155 = zext i8 %84 to i32
  %cmp156 = icmp eq i32 %conv155, 48
  br i1 %cmp156, label %lor.end162, label %lor.rhs158

lor.rhs158:                                       ; preds = %do.cond154
  %85 = load i8, i8* %tmpb, align 1, !tbaa !13
  %conv159 = zext i8 %85 to i32
  %86 = load i32, i32* %thousands_sep.addr, align 4, !tbaa !2
  %cmp160 = icmp eq i32 %conv159, %86
  br label %lor.end162

lor.end162:                                       ; preds = %lor.rhs158, %do.cond154
  %87 = phi i1 [ true, %do.cond154 ], [ %cmp160, %lor.rhs158 ]
  br i1 %87, label %do.body152, label %do.end163

do.end163:                                        ; preds = %lor.end162
  %88 = load i8, i8* %tmpb, align 1, !tbaa !13
  %conv164 = zext i8 %88 to i32
  %89 = load i32, i32* %decimal_point.addr, align 4, !tbaa !2
  %cmp165 = icmp eq i32 %conv164, %89
  br i1 %cmp165, label %if.then167, label %if.end175

if.then167:                                       ; preds = %do.end163
  br label %do.body168

do.body168:                                       ; preds = %do.cond170, %if.then167
  %90 = load i8*, i8** %b.addr, align 8, !tbaa !6
  %incdec.ptr169 = getelementptr inbounds i8, i8* %90, i32 1
  store i8* %incdec.ptr169, i8** %b.addr, align 8, !tbaa !6
  %91 = load i8, i8* %incdec.ptr169, align 1, !tbaa !13
  store i8 %91, i8* %tmpb, align 1, !tbaa !13
  br label %do.cond170

do.cond170:                                       ; preds = %do.body168
  %92 = load i8, i8* %tmpb, align 1, !tbaa !13
  %conv171 = zext i8 %92 to i32
  %cmp172 = icmp eq i32 %conv171, 48
  br i1 %cmp172, label %do.body168, label %do.end174

do.end174:                                        ; preds = %do.cond170
  br label %if.end175

if.end175:                                        ; preds = %do.end174, %do.end163
  %93 = load i8, i8* %tmpb, align 1, !tbaa !13
  %conv176 = zext i8 %93 to i32
  %sub177 = sub i32 %conv176, 48
  %cmp178 = icmp ule i32 %sub177, 9
  br i1 %cmp178, label %if.then180, label %if.end181

if.then180:                                       ; preds = %if.end175
  store i32 1, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end181:                                        ; preds = %if.end175
  br label %while.cond182

while.cond182:                                    ; preds = %while.body191, %if.end181
  %94 = load i8, i8* %tmpa, align 1, !tbaa !13
  %conv183 = zext i8 %94 to i32
  %cmp184 = icmp eq i32 %conv183, 48
  br i1 %cmp184, label %lor.end190, label %lor.rhs186

lor.rhs186:                                       ; preds = %while.cond182
  %95 = load i8, i8* %tmpa, align 1, !tbaa !13
  %conv187 = zext i8 %95 to i32
  %96 = load i32, i32* %thousands_sep.addr, align 4, !tbaa !2
  %cmp188 = icmp eq i32 %conv187, %96
  br label %lor.end190

lor.end190:                                       ; preds = %lor.rhs186, %while.cond182
  %97 = phi i1 [ true, %while.cond182 ], [ %cmp188, %lor.rhs186 ]
  br i1 %97, label %while.body191, label %while.end193

while.body191:                                    ; preds = %lor.end190
  %98 = load i8*, i8** %a.addr, align 8, !tbaa !6
  %incdec.ptr192 = getelementptr inbounds i8, i8* %98, i32 1
  store i8* %incdec.ptr192, i8** %a.addr, align 8, !tbaa !6
  %99 = load i8, i8* %incdec.ptr192, align 1, !tbaa !13
  store i8 %99, i8* %tmpa, align 1, !tbaa !13
  br label %while.cond182

while.end193:                                     ; preds = %lor.end190
  %100 = load i8, i8* %tmpa, align 1, !tbaa !13
  %conv194 = zext i8 %100 to i32
  %101 = load i32, i32* %decimal_point.addr, align 4, !tbaa !2
  %cmp195 = icmp eq i32 %conv194, %101
  br i1 %cmp195, label %if.then197, label %if.end205

if.then197:                                       ; preds = %while.end193
  br label %do.body198

do.body198:                                       ; preds = %do.cond200, %if.then197
  %102 = load i8*, i8** %a.addr, align 8, !tbaa !6
  %incdec.ptr199 = getelementptr inbounds i8, i8* %102, i32 1
  store i8* %incdec.ptr199, i8** %a.addr, align 8, !tbaa !6
  %103 = load i8, i8* %incdec.ptr199, align 1, !tbaa !13
  store i8 %103, i8* %tmpa, align 1, !tbaa !13
  br label %do.cond200

do.cond200:                                       ; preds = %do.body198
  %104 = load i8, i8* %tmpa, align 1, !tbaa !13
  %conv201 = zext i8 %104 to i32
  %cmp202 = icmp eq i32 %conv201, 48
  br i1 %cmp202, label %do.body198, label %do.end204

do.end204:                                        ; preds = %do.cond200
  br label %if.end205

if.end205:                                        ; preds = %do.end204, %while.end193
  %105 = load i8, i8* %tmpa, align 1, !tbaa !13
  %conv206 = zext i8 %105 to i32
  %sub207 = sub i32 %conv206, 48
  %cmp208 = icmp ule i32 %sub207, 9
  %conv209 = zext i1 %cmp208 to i32
  store i32 %conv209, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.else210:                                       ; preds = %if.else
  br label %while.cond211

while.cond211:                                    ; preds = %while.body220, %if.else210
  %106 = load i8, i8* %tmpa, align 1, !tbaa !13
  %conv212 = zext i8 %106 to i32
  %cmp213 = icmp eq i32 %conv212, 48
  br i1 %cmp213, label %lor.end219, label %lor.rhs215

lor.rhs215:                                       ; preds = %while.cond211
  %107 = load i8, i8* %tmpa, align 1, !tbaa !13
  %conv216 = zext i8 %107 to i32
  %108 = load i32, i32* %thousands_sep.addr, align 4, !tbaa !2
  %cmp217 = icmp eq i32 %conv216, %108
  br label %lor.end219

lor.end219:                                       ; preds = %lor.rhs215, %while.cond211
  %109 = phi i1 [ true, %while.cond211 ], [ %cmp217, %lor.rhs215 ]
  br i1 %109, label %while.body220, label %while.end222

while.body220:                                    ; preds = %lor.end219
  %110 = load i8*, i8** %a.addr, align 8, !tbaa !6
  %incdec.ptr221 = getelementptr inbounds i8, i8* %110, i32 1
  store i8* %incdec.ptr221, i8** %a.addr, align 8, !tbaa !6
  %111 = load i8, i8* %incdec.ptr221, align 1, !tbaa !13
  store i8 %111, i8* %tmpa, align 1, !tbaa !13
  br label %while.cond211

while.end222:                                     ; preds = %lor.end219
  br label %while.cond223

while.cond223:                                    ; preds = %while.body232, %while.end222
  %112 = load i8, i8* %tmpb, align 1, !tbaa !13
  %conv224 = zext i8 %112 to i32
  %cmp225 = icmp eq i32 %conv224, 48
  br i1 %cmp225, label %lor.end231, label %lor.rhs227

lor.rhs227:                                       ; preds = %while.cond223
  %113 = load i8, i8* %tmpb, align 1, !tbaa !13
  %conv228 = zext i8 %113 to i32
  %114 = load i32, i32* %thousands_sep.addr, align 4, !tbaa !2
  %cmp229 = icmp eq i32 %conv228, %114
  br label %lor.end231

lor.end231:                                       ; preds = %lor.rhs227, %while.cond223
  %115 = phi i1 [ true, %while.cond223 ], [ %cmp229, %lor.rhs227 ]
  br i1 %115, label %while.body232, label %while.end234

while.body232:                                    ; preds = %lor.end231
  %116 = load i8*, i8** %b.addr, align 8, !tbaa !6
  %incdec.ptr233 = getelementptr inbounds i8, i8* %116, i32 1
  store i8* %incdec.ptr233, i8** %b.addr, align 8, !tbaa !6
  %117 = load i8, i8* %incdec.ptr233, align 1, !tbaa !13
  store i8 %117, i8* %tmpb, align 1, !tbaa !13
  br label %while.cond223

while.end234:                                     ; preds = %lor.end231
  br label %while.cond235

while.cond235:                                    ; preds = %do.end260, %while.end234
  %118 = load i8, i8* %tmpa, align 1, !tbaa !13
  %conv236 = zext i8 %118 to i32
  %119 = load i8, i8* %tmpb, align 1, !tbaa !13
  %conv237 = zext i8 %119 to i32
  %cmp238 = icmp eq i32 %conv236, %conv237
  br i1 %cmp238, label %land.rhs240, label %land.end245

land.rhs240:                                      ; preds = %while.cond235
  %120 = load i8, i8* %tmpa, align 1, !tbaa !13
  %conv241 = zext i8 %120 to i32
  %sub242 = sub i32 %conv241, 48
  %cmp243 = icmp ule i32 %sub242, 9
  br label %land.end245

land.end245:                                      ; preds = %land.rhs240, %while.cond235
  %121 = phi i1 [ false, %while.cond235 ], [ %cmp243, %land.rhs240 ]
  br i1 %121, label %while.body246, label %while.end261

while.body246:                                    ; preds = %land.end245
  br label %do.body247

do.body247:                                       ; preds = %do.cond249, %while.body246
  %122 = load i8*, i8** %a.addr, align 8, !tbaa !6
  %incdec.ptr248 = getelementptr inbounds i8, i8* %122, i32 1
  store i8* %incdec.ptr248, i8** %a.addr, align 8, !tbaa !6
  %123 = load i8, i8* %incdec.ptr248, align 1, !tbaa !13
  store i8 %123, i8* %tmpa, align 1, !tbaa !13
  br label %do.cond249

do.cond249:                                       ; preds = %do.body247
  %124 = load i8, i8* %tmpa, align 1, !tbaa !13
  %conv250 = zext i8 %124 to i32
  %125 = load i32, i32* %thousands_sep.addr, align 4, !tbaa !2
  %cmp251 = icmp eq i32 %conv250, %125
  br i1 %cmp251, label %do.body247, label %do.end253

do.end253:                                        ; preds = %do.cond249
  br label %do.body254

do.body254:                                       ; preds = %do.cond256, %do.end253
  %126 = load i8*, i8** %b.addr, align 8, !tbaa !6
  %incdec.ptr255 = getelementptr inbounds i8, i8* %126, i32 1
  store i8* %incdec.ptr255, i8** %b.addr, align 8, !tbaa !6
  %127 = load i8, i8* %incdec.ptr255, align 1, !tbaa !13
  store i8 %127, i8* %tmpb, align 1, !tbaa !13
  br label %do.cond256

do.cond256:                                       ; preds = %do.body254
  %128 = load i8, i8* %tmpb, align 1, !tbaa !13
  %conv257 = zext i8 %128 to i32
  %129 = load i32, i32* %thousands_sep.addr, align 4, !tbaa !2
  %cmp258 = icmp eq i32 %conv257, %129
  br i1 %cmp258, label %do.body254, label %do.end260

do.end260:                                        ; preds = %do.cond256
  br label %while.cond235

while.end261:                                     ; preds = %land.end245
  %130 = load i8, i8* %tmpa, align 1, !tbaa !13
  %conv262 = zext i8 %130 to i32
  %131 = load i32, i32* %decimal_point.addr, align 4, !tbaa !2
  %cmp263 = icmp eq i32 %conv262, %131
  br i1 %cmp263, label %land.lhs.true265, label %lor.lhs.false270

land.lhs.true265:                                 ; preds = %while.end261
  %132 = load i8, i8* %tmpb, align 1, !tbaa !13
  %conv266 = zext i8 %132 to i32
  %sub267 = sub i32 %conv266, 48
  %cmp268 = icmp ule i32 %sub267, 9
  br i1 %cmp268, label %lor.lhs.false270, label %if.then279

lor.lhs.false270:                                 ; preds = %land.lhs.true265, %while.end261
  %133 = load i8, i8* %tmpb, align 1, !tbaa !13
  %conv271 = zext i8 %133 to i32
  %134 = load i32, i32* %decimal_point.addr, align 4, !tbaa !2
  %cmp272 = icmp eq i32 %conv271, %134
  br i1 %cmp272, label %land.lhs.true274, label %if.end282

land.lhs.true274:                                 ; preds = %lor.lhs.false270
  %135 = load i8, i8* %tmpa, align 1, !tbaa !13
  %conv275 = zext i8 %135 to i32
  %sub276 = sub i32 %conv275, 48
  %cmp277 = icmp ule i32 %sub276, 9
  br i1 %cmp277, label %if.end282, label %if.then279

if.then279:                                       ; preds = %land.lhs.true274, %land.lhs.true265
  %136 = load i8*, i8** %a.addr, align 8, !tbaa !6
  %137 = load i8*, i8** %b.addr, align 8, !tbaa !6
  %138 = load i32, i32* %decimal_point.addr, align 4, !tbaa !2
  %conv280 = trunc i32 %138 to i8
  %call281 = call i32 @fraccompare(i8* %136, i8* %137, i8 signext %conv280) #22
  store i32 %call281, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end282:                                        ; preds = %land.lhs.true274, %lor.lhs.false270
  %139 = load i8, i8* %tmpa, align 1, !tbaa !13
  %conv283 = zext i8 %139 to i32
  %140 = load i8, i8* %tmpb, align 1, !tbaa !13
  %conv284 = zext i8 %140 to i32
  %sub285 = sub nsw i32 %conv283, %conv284
  store i32 %sub285, i32* %tmp, align 4, !tbaa !2
  store i64 0, i64* %log_a, align 8, !tbaa !14
  br label %for.cond286

for.cond286:                                      ; preds = %for.inc299, %if.end282
  %141 = load i8, i8* %tmpa, align 1, !tbaa !13
  %conv287 = zext i8 %141 to i32
  %sub288 = sub i32 %conv287, 48
  %cmp289 = icmp ule i32 %sub288, 9
  br i1 %cmp289, label %for.body291, label %for.end301

for.body291:                                      ; preds = %for.cond286
  br label %do.body292

do.body292:                                       ; preds = %do.cond294, %for.body291
  %142 = load i8*, i8** %a.addr, align 8, !tbaa !6
  %incdec.ptr293 = getelementptr inbounds i8, i8* %142, i32 1
  store i8* %incdec.ptr293, i8** %a.addr, align 8, !tbaa !6
  %143 = load i8, i8* %incdec.ptr293, align 1, !tbaa !13
  store i8 %143, i8* %tmpa, align 1, !tbaa !13
  br label %do.cond294

do.cond294:                                       ; preds = %do.body292
  %144 = load i8, i8* %tmpa, align 1, !tbaa !13
  %conv295 = zext i8 %144 to i32
  %145 = load i32, i32* %thousands_sep.addr, align 4, !tbaa !2
  %cmp296 = icmp eq i32 %conv295, %145
  br i1 %cmp296, label %do.body292, label %do.end298

do.end298:                                        ; preds = %do.cond294
  br label %for.inc299

for.inc299:                                       ; preds = %do.end298
  %146 = load i64, i64* %log_a, align 8, !tbaa !14
  %inc300 = add i64 %146, 1
  store i64 %inc300, i64* %log_a, align 8, !tbaa !14
  br label %for.cond286

for.end301:                                       ; preds = %for.cond286
  store i64 0, i64* %log_b, align 8, !tbaa !14
  br label %for.cond302

for.cond302:                                      ; preds = %for.inc315, %for.end301
  %147 = load i8, i8* %tmpb, align 1, !tbaa !13
  %conv303 = zext i8 %147 to i32
  %sub304 = sub i32 %conv303, 48
  %cmp305 = icmp ule i32 %sub304, 9
  br i1 %cmp305, label %for.body307, label %for.end317

for.body307:                                      ; preds = %for.cond302
  br label %do.body308

do.body308:                                       ; preds = %do.cond310, %for.body307
  %148 = load i8*, i8** %b.addr, align 8, !tbaa !6
  %incdec.ptr309 = getelementptr inbounds i8, i8* %148, i32 1
  store i8* %incdec.ptr309, i8** %b.addr, align 8, !tbaa !6
  %149 = load i8, i8* %incdec.ptr309, align 1, !tbaa !13
  store i8 %149, i8* %tmpb, align 1, !tbaa !13
  br label %do.cond310

do.cond310:                                       ; preds = %do.body308
  %150 = load i8, i8* %tmpb, align 1, !tbaa !13
  %conv311 = zext i8 %150 to i32
  %151 = load i32, i32* %thousands_sep.addr, align 4, !tbaa !2
  %cmp312 = icmp eq i32 %conv311, %151
  br i1 %cmp312, label %do.body308, label %do.end314

do.end314:                                        ; preds = %do.cond310
  br label %for.inc315

for.inc315:                                       ; preds = %do.end314
  %152 = load i64, i64* %log_b, align 8, !tbaa !14
  %inc316 = add i64 %152, 1
  store i64 %inc316, i64* %log_b, align 8, !tbaa !14
  br label %for.cond302

for.end317:                                       ; preds = %for.cond302
  %153 = load i64, i64* %log_a, align 8, !tbaa !14
  %154 = load i64, i64* %log_b, align 8, !tbaa !14
  %cmp318 = icmp ne i64 %153, %154
  br i1 %cmp318, label %if.then320, label %if.end324

if.then320:                                       ; preds = %for.end317
  %155 = load i64, i64* %log_a, align 8, !tbaa !14
  %156 = load i64, i64* %log_b, align 8, !tbaa !14
  %cmp321 = icmp ult i64 %155, %156
  %157 = zext i1 %cmp321 to i64
  %cond323 = select i1 %cmp321, i32 -1, i32 1
  store i32 %cond323, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end324:                                        ; preds = %for.end317
  %158 = load i64, i64* %log_a, align 8, !tbaa !14
  %tobool325 = icmp ne i64 %158, 0
  br i1 %tobool325, label %if.end327, label %if.then326

if.then326:                                       ; preds = %if.end324
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end327:                                        ; preds = %if.end324
  %159 = load i32, i32* %tmp, align 4, !tbaa !2
  store i32 %159, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end327, %if.then326, %if.then320, %if.then279, %if.end205, %if.then180, %if.end147, %if.then146, %if.then142, %if.then107, %if.end48, %if.then26
  %160 = bitcast i64* %log_b to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %160) #13
  %161 = bitcast i64* %log_a to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %161) #13
  %162 = bitcast i32* %tmp to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %162) #13
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %tmpb) #13
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %tmpa) #13
  %163 = load i32, i32* %retval, align 4
  ret i32 %163
}

; Function Attrs: inlinehint nounwind readonly uwtable
define internal i32 @fraccompare(i8* %a, i8* %b, i8 signext %decimal_point) #12 {
entry:
  %retval = alloca i32, align 4
  %a.addr = alloca i8*, align 8
  %b.addr = alloca i8*, align 8
  %decimal_point.addr = alloca i8, align 1
  store i8* %a, i8** %a.addr, align 8, !tbaa !6
  store i8* %b, i8** %b.addr, align 8, !tbaa !6
  store i8 %decimal_point, i8* %decimal_point.addr, align 1, !tbaa !13
  %0 = load i8*, i8** %a.addr, align 8, !tbaa !6
  %1 = load i8, i8* %0, align 1, !tbaa !13
  %conv = sext i8 %1 to i32
  %2 = load i8, i8* %decimal_point.addr, align 1, !tbaa !13
  %conv1 = sext i8 %2 to i32
  %cmp = icmp eq i32 %conv, %conv1
  br i1 %cmp, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %entry
  %3 = load i8*, i8** %b.addr, align 8, !tbaa !6
  %4 = load i8, i8* %3, align 1, !tbaa !13
  %conv3 = sext i8 %4 to i32
  %5 = load i8, i8* %decimal_point.addr, align 1, !tbaa !13
  %conv4 = sext i8 %5 to i32
  %cmp5 = icmp eq i32 %conv3, %conv4
  br i1 %cmp5, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true
  br label %while.cond

while.cond:                                       ; preds = %if.end, %if.then
  %6 = load i8*, i8** %a.addr, align 8, !tbaa !6
  %incdec.ptr = getelementptr inbounds i8, i8* %6, i32 1
  store i8* %incdec.ptr, i8** %a.addr, align 8, !tbaa !6
  %7 = load i8, i8* %incdec.ptr, align 1, !tbaa !13
  %conv7 = sext i8 %7 to i32
  %8 = load i8*, i8** %b.addr, align 8, !tbaa !6
  %incdec.ptr8 = getelementptr inbounds i8, i8* %8, i32 1
  store i8* %incdec.ptr8, i8** %b.addr, align 8, !tbaa !6
  %9 = load i8, i8* %incdec.ptr8, align 1, !tbaa !13
  %conv9 = sext i8 %9 to i32
  %cmp10 = icmp eq i32 %conv7, %conv9
  br i1 %cmp10, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %10 = load i8*, i8** %a.addr, align 8, !tbaa !6
  %11 = load i8, i8* %10, align 1, !tbaa !13
  %conv12 = sext i8 %11 to i32
  %sub = sub i32 %conv12, 48
  %cmp13 = icmp ule i32 %sub, 9
  br i1 %cmp13, label %if.end, label %if.then15

if.then15:                                        ; preds = %while.body
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %while.body
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %12 = load i8*, i8** %a.addr, align 8, !tbaa !6
  %13 = load i8, i8* %12, align 1, !tbaa !13
  %conv16 = sext i8 %13 to i32
  %sub17 = sub i32 %conv16, 48
  %cmp18 = icmp ule i32 %sub17, 9
  br i1 %cmp18, label %land.lhs.true20, label %if.end29

land.lhs.true20:                                  ; preds = %while.end
  %14 = load i8*, i8** %b.addr, align 8, !tbaa !6
  %15 = load i8, i8* %14, align 1, !tbaa !13
  %conv21 = sext i8 %15 to i32
  %sub22 = sub i32 %conv21, 48
  %cmp23 = icmp ule i32 %sub22, 9
  br i1 %cmp23, label %if.then25, label %if.end29

if.then25:                                        ; preds = %land.lhs.true20
  %16 = load i8*, i8** %a.addr, align 8, !tbaa !6
  %17 = load i8, i8* %16, align 1, !tbaa !13
  %conv26 = sext i8 %17 to i32
  %18 = load i8*, i8** %b.addr, align 8, !tbaa !6
  %19 = load i8, i8* %18, align 1, !tbaa !13
  %conv27 = sext i8 %19 to i32
  %sub28 = sub nsw i32 %conv26, %conv27
  store i32 %sub28, i32* %retval, align 4
  br label %return

if.end29:                                         ; preds = %land.lhs.true20, %while.end
  %20 = load i8*, i8** %a.addr, align 8, !tbaa !6
  %21 = load i8, i8* %20, align 1, !tbaa !13
  %conv30 = sext i8 %21 to i32
  %sub31 = sub i32 %conv30, 48
  %cmp32 = icmp ule i32 %sub31, 9
  br i1 %cmp32, label %if.then34, label %if.end35

if.then34:                                        ; preds = %if.end29
  br label %a_trailing_nonzero

if.end35:                                         ; preds = %if.end29
  %22 = load i8*, i8** %b.addr, align 8, !tbaa !6
  %23 = load i8, i8* %22, align 1, !tbaa !13
  %conv36 = sext i8 %23 to i32
  %sub37 = sub i32 %conv36, 48
  %cmp38 = icmp ule i32 %sub37, 9
  br i1 %cmp38, label %if.then40, label %if.end41

if.then40:                                        ; preds = %if.end35
  br label %b_trailing_nonzero

if.end41:                                         ; preds = %if.end35
  store i32 0, i32* %retval, align 4
  br label %return

if.else:                                          ; preds = %land.lhs.true, %entry
  %24 = load i8*, i8** %a.addr, align 8, !tbaa !6
  %incdec.ptr42 = getelementptr inbounds i8, i8* %24, i32 1
  store i8* %incdec.ptr42, i8** %a.addr, align 8, !tbaa !6
  %25 = load i8, i8* %24, align 1, !tbaa !13
  %conv43 = sext i8 %25 to i32
  %26 = load i8, i8* %decimal_point.addr, align 1, !tbaa !13
  %conv44 = sext i8 %26 to i32
  %cmp45 = icmp eq i32 %conv43, %conv44
  br i1 %cmp45, label %if.then47, label %if.else59

if.then47:                                        ; preds = %if.else
  br label %a_trailing_nonzero

a_trailing_nonzero:                               ; preds = %if.then47, %if.then34
  br label %while.cond48

while.cond48:                                     ; preds = %while.body52, %a_trailing_nonzero
  %27 = load i8*, i8** %a.addr, align 8, !tbaa !6
  %28 = load i8, i8* %27, align 1, !tbaa !13
  %conv49 = sext i8 %28 to i32
  %cmp50 = icmp eq i32 %conv49, 48
  br i1 %cmp50, label %while.body52, label %while.end54

while.body52:                                     ; preds = %while.cond48
  %29 = load i8*, i8** %a.addr, align 8, !tbaa !6
  %incdec.ptr53 = getelementptr inbounds i8, i8* %29, i32 1
  store i8* %incdec.ptr53, i8** %a.addr, align 8, !tbaa !6
  br label %while.cond48

while.end54:                                      ; preds = %while.cond48
  %30 = load i8*, i8** %a.addr, align 8, !tbaa !6
  %31 = load i8, i8* %30, align 1, !tbaa !13
  %conv55 = sext i8 %31 to i32
  %sub56 = sub i32 %conv55, 48
  %cmp57 = icmp ule i32 %sub56, 9
  %conv58 = zext i1 %cmp57 to i32
  store i32 %conv58, i32* %retval, align 4
  br label %return

if.else59:                                        ; preds = %if.else
  %32 = load i8*, i8** %b.addr, align 8, !tbaa !6
  %incdec.ptr60 = getelementptr inbounds i8, i8* %32, i32 1
  store i8* %incdec.ptr60, i8** %b.addr, align 8, !tbaa !6
  %33 = load i8, i8* %32, align 1, !tbaa !13
  %conv61 = sext i8 %33 to i32
  %34 = load i8, i8* %decimal_point.addr, align 1, !tbaa !13
  %conv62 = sext i8 %34 to i32
  %cmp63 = icmp eq i32 %conv61, %conv62
  br i1 %cmp63, label %if.then65, label %if.end78

if.then65:                                        ; preds = %if.else59
  br label %b_trailing_nonzero

b_trailing_nonzero:                               ; preds = %if.then65, %if.then40
  br label %while.cond66

while.cond66:                                     ; preds = %while.body70, %b_trailing_nonzero
  %35 = load i8*, i8** %b.addr, align 8, !tbaa !6
  %36 = load i8, i8* %35, align 1, !tbaa !13
  %conv67 = sext i8 %36 to i32
  %cmp68 = icmp eq i32 %conv67, 48
  br i1 %cmp68, label %while.body70, label %while.end72

while.body70:                                     ; preds = %while.cond66
  %37 = load i8*, i8** %b.addr, align 8, !tbaa !6
  %incdec.ptr71 = getelementptr inbounds i8, i8* %37, i32 1
  store i8* %incdec.ptr71, i8** %b.addr, align 8, !tbaa !6
  br label %while.cond66

while.end72:                                      ; preds = %while.cond66
  %38 = load i8*, i8** %b.addr, align 8, !tbaa !6
  %39 = load i8, i8* %38, align 1, !tbaa !13
  %conv73 = sext i8 %39 to i32
  %sub74 = sub i32 %conv73, 48
  %cmp75 = icmp ule i32 %sub74, 9
  %conv76 = zext i1 %cmp75 to i32
  %sub77 = sub nsw i32 0, %conv76
  store i32 %sub77, i32* %retval, align 4
  br label %return

if.end78:                                         ; preds = %if.else59
  br label %if.end79

if.end79:                                         ; preds = %if.end78
  br label %if.end80

if.end80:                                         ; preds = %if.end79
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end80, %while.end72, %while.end54, %if.end41, %if.then25, %if.then15
  %40 = load i32, i32* %retval, align 4
  ret i32 %40
}

; Function Attrs: nounwind uwtable
define dso_local i32 @fd_safer(i32 %fd) #7 {
entry:
  %fd.addr = alloca i32, align 4
  %f = alloca i32, align 4
  %e = alloca i32, align 4
  store i32 %fd, i32* %fd.addr, align 4, !tbaa !2
  %0 = load i32, i32* %fd.addr, align 4, !tbaa !2
  %cmp = icmp sle i32 0, %0
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %fd.addr, align 4, !tbaa !2
  %cmp1 = icmp sle i32 %1, 2
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %2 = bitcast i32* %f to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %2) #13
  %3 = load i32, i32* %fd.addr, align 4, !tbaa !2
  %call = call i32 @dup_safer(i32 %3)
  store i32 %call, i32* %f, align 4, !tbaa !2
  %4 = bitcast i32* %e to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %4) #13
  %call2 = call i32* @__errno_location() #26
  %5 = load i32, i32* %call2, align 4, !tbaa !2
  store i32 %5, i32* %e, align 4, !tbaa !2
  %6 = load i32, i32* %fd.addr, align 4, !tbaa !2
  %call3 = call i32 @close(i32 %6)
  %7 = load i32, i32* %e, align 4, !tbaa !2
  %call4 = call i32* @__errno_location() #26
  store i32 %7, i32* %call4, align 4, !tbaa !2
  %8 = load i32, i32* %f, align 4, !tbaa !2
  store i32 %8, i32* %fd.addr, align 4, !tbaa !2
  %9 = bitcast i32* %e to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %9) #13
  %10 = bitcast i32* %f to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %10) #13
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %11 = load i32, i32* %fd.addr, align 4, !tbaa !2
  ret i32 %11
}

; Function Attrs: nounwind uwtable
define dso_local void @version_etc_arn(%struct._IO_FILE* %stream, i8* %command_name, i8* %package, i8* %version, i8** %authors, i64 %n_authors) #7 {
entry:
  %stream.addr = alloca %struct._IO_FILE*, align 8
  %command_name.addr = alloca i8*, align 8
  %package.addr = alloca i8*, align 8
  %version.addr = alloca i8*, align 8
  %authors.addr = alloca i8**, align 8
  %n_authors.addr = alloca i64, align 8
  store %struct._IO_FILE* %stream, %struct._IO_FILE** %stream.addr, align 8, !tbaa !6
  store i8* %command_name, i8** %command_name.addr, align 8, !tbaa !6
  store i8* %package, i8** %package.addr, align 8, !tbaa !6
  store i8* %version, i8** %version.addr, align 8, !tbaa !6
  store i8** %authors, i8*** %authors.addr, align 8, !tbaa !6
  store i64 %n_authors, i64* %n_authors.addr, align 8, !tbaa !14
  %0 = load i8*, i8** %command_name.addr, align 8, !tbaa !6
  %tobool = icmp ne i8* %0, null
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** %stream.addr, align 8, !tbaa !6
  %2 = load i8*, i8** %command_name.addr, align 8, !tbaa !6
  %3 = load i8*, i8** %package.addr, align 8, !tbaa !6
  %4 = load i8*, i8** %version.addr, align 8, !tbaa !6
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.314, i64 0, i64 0), i8* %2, i8* %3, i8* %4)
  br label %if.end

if.else:                                          ; preds = %entry
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** %stream.addr, align 8, !tbaa !6
  %6 = load i8*, i8** %package.addr, align 8, !tbaa !6
  %7 = load i8*, i8** %version.addr, align 8, !tbaa !6
  %call1 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %5, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1.315, i64 0, i64 0), i8* %6, i8* %7)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %8 = load %struct._IO_FILE*, %struct._IO_FILE** %stream.addr, align 8, !tbaa !6
  %call2 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %8, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @version_etc_copyright, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2.316, i64 0, i64 0), i32 2021)
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** %stream.addr, align 8, !tbaa !6
  %call3 = call i32 @fputs_unlocked(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3.317, i64 0, i64 0), %struct._IO_FILE* %9)
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** %stream.addr, align 8, !tbaa !6
  %call4 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %10, i8* getelementptr inbounds ([171 x i8], [171 x i8]* @.str.4.318, i64 0, i64 0), i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.5.319, i64 0, i64 0))
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** %stream.addr, align 8, !tbaa !6
  %call5 = call i32 @fputs_unlocked(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3.317, i64 0, i64 0), %struct._IO_FILE* %11)
  %12 = load i64, i64* %n_authors.addr, align 8, !tbaa !14
  switch i64 %12, label %sw.default [
    i64 0, label %sw.epilog
    i64 1, label %sw.bb
    i64 2, label %sw.bb7
    i64 3, label %sw.bb11
    i64 4, label %sw.bb16
    i64 5, label %sw.bb22
    i64 6, label %sw.bb29
    i64 7, label %sw.bb37
    i64 8, label %sw.bb46
    i64 9, label %sw.bb56
  ]

sw.bb:                                            ; preds = %if.end
  %13 = load %struct._IO_FILE*, %struct._IO_FILE** %stream.addr, align 8, !tbaa !6
  %14 = load i8**, i8*** %authors.addr, align 8, !tbaa !6
  %arrayidx = getelementptr inbounds i8*, i8** %14, i64 0
  %15 = load i8*, i8** %arrayidx, align 8, !tbaa !6
  %call6 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %13, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.6.320, i64 0, i64 0), i8* %15)
  br label %sw.epilog

sw.bb7:                                           ; preds = %if.end
  %16 = load %struct._IO_FILE*, %struct._IO_FILE** %stream.addr, align 8, !tbaa !6
  %17 = load i8**, i8*** %authors.addr, align 8, !tbaa !6
  %arrayidx8 = getelementptr inbounds i8*, i8** %17, i64 0
  %18 = load i8*, i8** %arrayidx8, align 8, !tbaa !6
  %19 = load i8**, i8*** %authors.addr, align 8, !tbaa !6
  %arrayidx9 = getelementptr inbounds i8*, i8** %19, i64 1
  %20 = load i8*, i8** %arrayidx9, align 8, !tbaa !6
  %call10 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %16, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.7.321, i64 0, i64 0), i8* %18, i8* %20)
  br label %sw.epilog

sw.bb11:                                          ; preds = %if.end
  %21 = load %struct._IO_FILE*, %struct._IO_FILE** %stream.addr, align 8, !tbaa !6
  %22 = load i8**, i8*** %authors.addr, align 8, !tbaa !6
  %arrayidx12 = getelementptr inbounds i8*, i8** %22, i64 0
  %23 = load i8*, i8** %arrayidx12, align 8, !tbaa !6
  %24 = load i8**, i8*** %authors.addr, align 8, !tbaa !6
  %arrayidx13 = getelementptr inbounds i8*, i8** %24, i64 1
  %25 = load i8*, i8** %arrayidx13, align 8, !tbaa !6
  %26 = load i8**, i8*** %authors.addr, align 8, !tbaa !6
  %arrayidx14 = getelementptr inbounds i8*, i8** %26, i64 2
  %27 = load i8*, i8** %arrayidx14, align 8, !tbaa !6
  %call15 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %21, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.8.322, i64 0, i64 0), i8* %23, i8* %25, i8* %27)
  br label %sw.epilog

sw.bb16:                                          ; preds = %if.end
  %28 = load %struct._IO_FILE*, %struct._IO_FILE** %stream.addr, align 8, !tbaa !6
  %29 = load i8**, i8*** %authors.addr, align 8, !tbaa !6
  %arrayidx17 = getelementptr inbounds i8*, i8** %29, i64 0
  %30 = load i8*, i8** %arrayidx17, align 8, !tbaa !6
  %31 = load i8**, i8*** %authors.addr, align 8, !tbaa !6
  %arrayidx18 = getelementptr inbounds i8*, i8** %31, i64 1
  %32 = load i8*, i8** %arrayidx18, align 8, !tbaa !6
  %33 = load i8**, i8*** %authors.addr, align 8, !tbaa !6
  %arrayidx19 = getelementptr inbounds i8*, i8** %33, i64 2
  %34 = load i8*, i8** %arrayidx19, align 8, !tbaa !6
  %35 = load i8**, i8*** %authors.addr, align 8, !tbaa !6
  %arrayidx20 = getelementptr inbounds i8*, i8** %35, i64 3
  %36 = load i8*, i8** %arrayidx20, align 8, !tbaa !6
  %call21 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %28, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.9.323, i64 0, i64 0), i8* %30, i8* %32, i8* %34, i8* %36)
  br label %sw.epilog

sw.bb22:                                          ; preds = %if.end
  %37 = load %struct._IO_FILE*, %struct._IO_FILE** %stream.addr, align 8, !tbaa !6
  %38 = load i8**, i8*** %authors.addr, align 8, !tbaa !6
  %arrayidx23 = getelementptr inbounds i8*, i8** %38, i64 0
  %39 = load i8*, i8** %arrayidx23, align 8, !tbaa !6
  %40 = load i8**, i8*** %authors.addr, align 8, !tbaa !6
  %arrayidx24 = getelementptr inbounds i8*, i8** %40, i64 1
  %41 = load i8*, i8** %arrayidx24, align 8, !tbaa !6
  %42 = load i8**, i8*** %authors.addr, align 8, !tbaa !6
  %arrayidx25 = getelementptr inbounds i8*, i8** %42, i64 2
  %43 = load i8*, i8** %arrayidx25, align 8, !tbaa !6
  %44 = load i8**, i8*** %authors.addr, align 8, !tbaa !6
  %arrayidx26 = getelementptr inbounds i8*, i8** %44, i64 3
  %45 = load i8*, i8** %arrayidx26, align 8, !tbaa !6
  %46 = load i8**, i8*** %authors.addr, align 8, !tbaa !6
  %arrayidx27 = getelementptr inbounds i8*, i8** %46, i64 4
  %47 = load i8*, i8** %arrayidx27, align 8, !tbaa !6
  %call28 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %37, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.10.324, i64 0, i64 0), i8* %39, i8* %41, i8* %43, i8* %45, i8* %47)
  br label %sw.epilog

sw.bb29:                                          ; preds = %if.end
  %48 = load %struct._IO_FILE*, %struct._IO_FILE** %stream.addr, align 8, !tbaa !6
  %49 = load i8**, i8*** %authors.addr, align 8, !tbaa !6
  %arrayidx30 = getelementptr inbounds i8*, i8** %49, i64 0
  %50 = load i8*, i8** %arrayidx30, align 8, !tbaa !6
  %51 = load i8**, i8*** %authors.addr, align 8, !tbaa !6
  %arrayidx31 = getelementptr inbounds i8*, i8** %51, i64 1
  %52 = load i8*, i8** %arrayidx31, align 8, !tbaa !6
  %53 = load i8**, i8*** %authors.addr, align 8, !tbaa !6
  %arrayidx32 = getelementptr inbounds i8*, i8** %53, i64 2
  %54 = load i8*, i8** %arrayidx32, align 8, !tbaa !6
  %55 = load i8**, i8*** %authors.addr, align 8, !tbaa !6
  %arrayidx33 = getelementptr inbounds i8*, i8** %55, i64 3
  %56 = load i8*, i8** %arrayidx33, align 8, !tbaa !6
  %57 = load i8**, i8*** %authors.addr, align 8, !tbaa !6
  %arrayidx34 = getelementptr inbounds i8*, i8** %57, i64 4
  %58 = load i8*, i8** %arrayidx34, align 8, !tbaa !6
  %59 = load i8**, i8*** %authors.addr, align 8, !tbaa !6
  %arrayidx35 = getelementptr inbounds i8*, i8** %59, i64 5
  %60 = load i8*, i8** %arrayidx35, align 8, !tbaa !6
  %call36 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %48, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.11.325, i64 0, i64 0), i8* %50, i8* %52, i8* %54, i8* %56, i8* %58, i8* %60)
  br label %sw.epilog

sw.bb37:                                          ; preds = %if.end
  %61 = load %struct._IO_FILE*, %struct._IO_FILE** %stream.addr, align 8, !tbaa !6
  %62 = load i8**, i8*** %authors.addr, align 8, !tbaa !6
  %arrayidx38 = getelementptr inbounds i8*, i8** %62, i64 0
  %63 = load i8*, i8** %arrayidx38, align 8, !tbaa !6
  %64 = load i8**, i8*** %authors.addr, align 8, !tbaa !6
  %arrayidx39 = getelementptr inbounds i8*, i8** %64, i64 1
  %65 = load i8*, i8** %arrayidx39, align 8, !tbaa !6
  %66 = load i8**, i8*** %authors.addr, align 8, !tbaa !6
  %arrayidx40 = getelementptr inbounds i8*, i8** %66, i64 2
  %67 = load i8*, i8** %arrayidx40, align 8, !tbaa !6
  %68 = load i8**, i8*** %authors.addr, align 8, !tbaa !6
  %arrayidx41 = getelementptr inbounds i8*, i8** %68, i64 3
  %69 = load i8*, i8** %arrayidx41, align 8, !tbaa !6
  %70 = load i8**, i8*** %authors.addr, align 8, !tbaa !6
  %arrayidx42 = getelementptr inbounds i8*, i8** %70, i64 4
  %71 = load i8*, i8** %arrayidx42, align 8, !tbaa !6
  %72 = load i8**, i8*** %authors.addr, align 8, !tbaa !6
  %arrayidx43 = getelementptr inbounds i8*, i8** %72, i64 5
  %73 = load i8*, i8** %arrayidx43, align 8, !tbaa !6
  %74 = load i8**, i8*** %authors.addr, align 8, !tbaa !6
  %arrayidx44 = getelementptr inbounds i8*, i8** %74, i64 6
  %75 = load i8*, i8** %arrayidx44, align 8, !tbaa !6
  %call45 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %61, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.12.326, i64 0, i64 0), i8* %63, i8* %65, i8* %67, i8* %69, i8* %71, i8* %73, i8* %75)
  br label %sw.epilog

sw.bb46:                                          ; preds = %if.end
  %76 = load %struct._IO_FILE*, %struct._IO_FILE** %stream.addr, align 8, !tbaa !6
  %77 = load i8**, i8*** %authors.addr, align 8, !tbaa !6
  %arrayidx47 = getelementptr inbounds i8*, i8** %77, i64 0
  %78 = load i8*, i8** %arrayidx47, align 8, !tbaa !6
  %79 = load i8**, i8*** %authors.addr, align 8, !tbaa !6
  %arrayidx48 = getelementptr inbounds i8*, i8** %79, i64 1
  %80 = load i8*, i8** %arrayidx48, align 8, !tbaa !6
  %81 = load i8**, i8*** %authors.addr, align 8, !tbaa !6
  %arrayidx49 = getelementptr inbounds i8*, i8** %81, i64 2
  %82 = load i8*, i8** %arrayidx49, align 8, !tbaa !6
  %83 = load i8**, i8*** %authors.addr, align 8, !tbaa !6
  %arrayidx50 = getelementptr inbounds i8*, i8** %83, i64 3
  %84 = load i8*, i8** %arrayidx50, align 8, !tbaa !6
  %85 = load i8**, i8*** %authors.addr, align 8, !tbaa !6
  %arrayidx51 = getelementptr inbounds i8*, i8** %85, i64 4
  %86 = load i8*, i8** %arrayidx51, align 8, !tbaa !6
  %87 = load i8**, i8*** %authors.addr, align 8, !tbaa !6
  %arrayidx52 = getelementptr inbounds i8*, i8** %87, i64 5
  %88 = load i8*, i8** %arrayidx52, align 8, !tbaa !6
  %89 = load i8**, i8*** %authors.addr, align 8, !tbaa !6
  %arrayidx53 = getelementptr inbounds i8*, i8** %89, i64 6
  %90 = load i8*, i8** %arrayidx53, align 8, !tbaa !6
  %91 = load i8**, i8*** %authors.addr, align 8, !tbaa !6
  %arrayidx54 = getelementptr inbounds i8*, i8** %91, i64 7
  %92 = load i8*, i8** %arrayidx54, align 8, !tbaa !6
  %call55 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %76, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.13.327, i64 0, i64 0), i8* %78, i8* %80, i8* %82, i8* %84, i8* %86, i8* %88, i8* %90, i8* %92)
  br label %sw.epilog

sw.bb56:                                          ; preds = %if.end
  %93 = load %struct._IO_FILE*, %struct._IO_FILE** %stream.addr, align 8, !tbaa !6
  %94 = load i8**, i8*** %authors.addr, align 8, !tbaa !6
  %arrayidx57 = getelementptr inbounds i8*, i8** %94, i64 0
  %95 = load i8*, i8** %arrayidx57, align 8, !tbaa !6
  %96 = load i8**, i8*** %authors.addr, align 8, !tbaa !6
  %arrayidx58 = getelementptr inbounds i8*, i8** %96, i64 1
  %97 = load i8*, i8** %arrayidx58, align 8, !tbaa !6
  %98 = load i8**, i8*** %authors.addr, align 8, !tbaa !6
  %arrayidx59 = getelementptr inbounds i8*, i8** %98, i64 2
  %99 = load i8*, i8** %arrayidx59, align 8, !tbaa !6
  %100 = load i8**, i8*** %authors.addr, align 8, !tbaa !6
  %arrayidx60 = getelementptr inbounds i8*, i8** %100, i64 3
  %101 = load i8*, i8** %arrayidx60, align 8, !tbaa !6
  %102 = load i8**, i8*** %authors.addr, align 8, !tbaa !6
  %arrayidx61 = getelementptr inbounds i8*, i8** %102, i64 4
  %103 = load i8*, i8** %arrayidx61, align 8, !tbaa !6
  %104 = load i8**, i8*** %authors.addr, align 8, !tbaa !6
  %arrayidx62 = getelementptr inbounds i8*, i8** %104, i64 5
  %105 = load i8*, i8** %arrayidx62, align 8, !tbaa !6
  %106 = load i8**, i8*** %authors.addr, align 8, !tbaa !6
  %arrayidx63 = getelementptr inbounds i8*, i8** %106, i64 6
  %107 = load i8*, i8** %arrayidx63, align 8, !tbaa !6
  %108 = load i8**, i8*** %authors.addr, align 8, !tbaa !6
  %arrayidx64 = getelementptr inbounds i8*, i8** %108, i64 7
  %109 = load i8*, i8** %arrayidx64, align 8, !tbaa !6
  %110 = load i8**, i8*** %authors.addr, align 8, !tbaa !6
  %arrayidx65 = getelementptr inbounds i8*, i8** %110, i64 8
  %111 = load i8*, i8** %arrayidx65, align 8, !tbaa !6
  %call66 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %93, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.14.328, i64 0, i64 0), i8* %95, i8* %97, i8* %99, i8* %101, i8* %103, i8* %105, i8* %107, i8* %109, i8* %111)
  br label %sw.epilog

sw.default:                                       ; preds = %if.end
  %112 = load %struct._IO_FILE*, %struct._IO_FILE** %stream.addr, align 8, !tbaa !6
  %113 = load i8**, i8*** %authors.addr, align 8, !tbaa !6
  %arrayidx67 = getelementptr inbounds i8*, i8** %113, i64 0
  %114 = load i8*, i8** %arrayidx67, align 8, !tbaa !6
  %115 = load i8**, i8*** %authors.addr, align 8, !tbaa !6
  %arrayidx68 = getelementptr inbounds i8*, i8** %115, i64 1
  %116 = load i8*, i8** %arrayidx68, align 8, !tbaa !6
  %117 = load i8**, i8*** %authors.addr, align 8, !tbaa !6
  %arrayidx69 = getelementptr inbounds i8*, i8** %117, i64 2
  %118 = load i8*, i8** %arrayidx69, align 8, !tbaa !6
  %119 = load i8**, i8*** %authors.addr, align 8, !tbaa !6
  %arrayidx70 = getelementptr inbounds i8*, i8** %119, i64 3
  %120 = load i8*, i8** %arrayidx70, align 8, !tbaa !6
  %121 = load i8**, i8*** %authors.addr, align 8, !tbaa !6
  %arrayidx71 = getelementptr inbounds i8*, i8** %121, i64 4
  %122 = load i8*, i8** %arrayidx71, align 8, !tbaa !6
  %123 = load i8**, i8*** %authors.addr, align 8, !tbaa !6
  %arrayidx72 = getelementptr inbounds i8*, i8** %123, i64 5
  %124 = load i8*, i8** %arrayidx72, align 8, !tbaa !6
  %125 = load i8**, i8*** %authors.addr, align 8, !tbaa !6
  %arrayidx73 = getelementptr inbounds i8*, i8** %125, i64 6
  %126 = load i8*, i8** %arrayidx73, align 8, !tbaa !6
  %127 = load i8**, i8*** %authors.addr, align 8, !tbaa !6
  %arrayidx74 = getelementptr inbounds i8*, i8** %127, i64 7
  %128 = load i8*, i8** %arrayidx74, align 8, !tbaa !6
  %129 = load i8**, i8*** %authors.addr, align 8, !tbaa !6
  %arrayidx75 = getelementptr inbounds i8*, i8** %129, i64 8
  %130 = load i8*, i8** %arrayidx75, align 8, !tbaa !6
  %call76 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %112, i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.15.329, i64 0, i64 0), i8* %114, i8* %116, i8* %118, i8* %120, i8* %122, i8* %124, i8* %126, i8* %128, i8* %130)
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %sw.bb56, %sw.bb46, %sw.bb37, %sw.bb29, %sw.bb22, %sw.bb16, %sw.bb11, %sw.bb7, %sw.bb, %if.end
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local void @version_etc_ar(%struct._IO_FILE* %stream, i8* %command_name, i8* %package, i8* %version, i8** %authors) #7 {
entry:
  %stream.addr = alloca %struct._IO_FILE*, align 8
  %command_name.addr = alloca i8*, align 8
  %package.addr = alloca i8*, align 8
  %version.addr = alloca i8*, align 8
  %authors.addr = alloca i8**, align 8
  %n_authors = alloca i64, align 8
  store %struct._IO_FILE* %stream, %struct._IO_FILE** %stream.addr, align 8, !tbaa !6
  store i8* %command_name, i8** %command_name.addr, align 8, !tbaa !6
  store i8* %package, i8** %package.addr, align 8, !tbaa !6
  store i8* %version, i8** %version.addr, align 8, !tbaa !6
  store i8** %authors, i8*** %authors.addr, align 8, !tbaa !6
  %0 = bitcast i64* %n_authors to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #13
  store i64 0, i64* %n_authors, align 8, !tbaa !14
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i8**, i8*** %authors.addr, align 8, !tbaa !6
  %2 = load i64, i64* %n_authors, align 8, !tbaa !14
  %arrayidx = getelementptr inbounds i8*, i8** %1, i64 %2
  %3 = load i8*, i8** %arrayidx, align 8, !tbaa !6
  %tobool = icmp ne i8* %3, null
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %4 = load i64, i64* %n_authors, align 8, !tbaa !14
  %inc = add i64 %4, 1
  store i64 %inc, i64* %n_authors, align 8, !tbaa !14
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** %stream.addr, align 8, !tbaa !6
  %6 = load i8*, i8** %command_name.addr, align 8, !tbaa !6
  %7 = load i8*, i8** %package.addr, align 8, !tbaa !6
  %8 = load i8*, i8** %version.addr, align 8, !tbaa !6
  %9 = load i8**, i8*** %authors.addr, align 8, !tbaa !6
  %10 = load i64, i64* %n_authors, align 8, !tbaa !14
  call void @version_etc_arn(%struct._IO_FILE* %5, i8* %6, i8* %7, i8* %8, i8** %9, i64 %10)
  %11 = bitcast i64* %n_authors to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %11) #13
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local void @version_etc_va(%struct._IO_FILE* %stream, i8* %command_name, i8* %package, i8* %version, %struct.__va_list_tag* %authors) #7 {
entry:
  %stream.addr = alloca %struct._IO_FILE*, align 8
  %command_name.addr = alloca i8*, align 8
  %package.addr = alloca i8*, align 8
  %version.addr = alloca i8*, align 8
  %authors.addr = alloca %struct.__va_list_tag*, align 8
  %n_authors = alloca i64, align 8
  %authtab = alloca [10 x i8*], align 16
  store %struct._IO_FILE* %stream, %struct._IO_FILE** %stream.addr, align 8, !tbaa !6
  store i8* %command_name, i8** %command_name.addr, align 8, !tbaa !6
  store i8* %package, i8** %package.addr, align 8, !tbaa !6
  store i8* %version, i8** %version.addr, align 8, !tbaa !6
  store %struct.__va_list_tag* %authors, %struct.__va_list_tag** %authors.addr, align 8, !tbaa !6
  %0 = bitcast i64* %n_authors to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #13
  %1 = bitcast [10 x i8*]* %authtab to i8*
  call void @llvm.lifetime.start.p0i8(i64 80, i8* %1) #13
  store i64 0, i64* %n_authors, align 8, !tbaa !14
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i64, i64* %n_authors, align 8, !tbaa !14
  %cmp = icmp ult i64 %2, 10
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %3 = load %struct.__va_list_tag*, %struct.__va_list_tag** %authors.addr, align 8, !tbaa !6
  %gp_offset_p = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %3, i32 0, i32 0
  %gp_offset = load i32, i32* %gp_offset_p, align 8
  %fits_in_gp = icmp ule i32 %gp_offset, 40
  br i1 %fits_in_gp, label %vaarg.in_reg, label %vaarg.in_mem

vaarg.in_reg:                                     ; preds = %land.rhs
  %4 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %3, i32 0, i32 3
  %reg_save_area = load i8*, i8** %4, align 8
  %5 = getelementptr i8, i8* %reg_save_area, i32 %gp_offset
  %6 = bitcast i8* %5 to i8**
  %7 = add i32 %gp_offset, 8
  store i32 %7, i32* %gp_offset_p, align 8
  br label %vaarg.end

vaarg.in_mem:                                     ; preds = %land.rhs
  %overflow_arg_area_p = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %3, i32 0, i32 2
  %overflow_arg_area = load i8*, i8** %overflow_arg_area_p, align 8
  %8 = bitcast i8* %overflow_arg_area to i8**
  %overflow_arg_area.next = getelementptr i8, i8* %overflow_arg_area, i32 8
  store i8* %overflow_arg_area.next, i8** %overflow_arg_area_p, align 8
  br label %vaarg.end

vaarg.end:                                        ; preds = %vaarg.in_mem, %vaarg.in_reg
  %vaarg.addr = phi i8** [ %6, %vaarg.in_reg ], [ %8, %vaarg.in_mem ]
  %9 = load i8*, i8** %vaarg.addr, align 8
  %10 = load i64, i64* %n_authors, align 8, !tbaa !14
  %arrayidx = getelementptr inbounds [10 x i8*], [10 x i8*]* %authtab, i64 0, i64 %10
  store i8* %9, i8** %arrayidx, align 8, !tbaa !6
  %cmp1 = icmp ne i8* %9, null
  br label %land.end

land.end:                                         ; preds = %vaarg.end, %for.cond
  %11 = phi i1 [ false, %for.cond ], [ %cmp1, %vaarg.end ]
  br i1 %11, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %12 = load i64, i64* %n_authors, align 8, !tbaa !14
  %inc = add i64 %12, 1
  store i64 %inc, i64* %n_authors, align 8, !tbaa !14
  br label %for.cond

for.end:                                          ; preds = %land.end
  %13 = load %struct._IO_FILE*, %struct._IO_FILE** %stream.addr, align 8, !tbaa !6
  %14 = load i8*, i8** %command_name.addr, align 8, !tbaa !6
  %15 = load i8*, i8** %package.addr, align 8, !tbaa !6
  %16 = load i8*, i8** %version.addr, align 8, !tbaa !6
  %arraydecay = getelementptr inbounds [10 x i8*], [10 x i8*]* %authtab, i64 0, i64 0
  %17 = load i64, i64* %n_authors, align 8, !tbaa !14
  call void @version_etc_arn(%struct._IO_FILE* %13, i8* %14, i8* %15, i8* %16, i8** %arraydecay, i64 %17)
  %18 = bitcast [10 x i8*]* %authtab to i8*
  call void @llvm.lifetime.end.p0i8(i64 80, i8* %18) #13
  %19 = bitcast i64* %n_authors to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %19) #13
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local void @version_etc(%struct._IO_FILE* %stream, i8* %command_name, i8* %package, i8* %version, ...) #7 {
entry:
  %stream.addr = alloca %struct._IO_FILE*, align 8
  %command_name.addr = alloca i8*, align 8
  %package.addr = alloca i8*, align 8
  %version.addr = alloca i8*, align 8
  %authors = alloca [1 x %struct.__va_list_tag], align 16
  store %struct._IO_FILE* %stream, %struct._IO_FILE** %stream.addr, align 8, !tbaa !6
  store i8* %command_name, i8** %command_name.addr, align 8, !tbaa !6
  store i8* %package, i8** %package.addr, align 8, !tbaa !6
  store i8* %version, i8** %version.addr, align 8, !tbaa !6
  %0 = bitcast [1 x %struct.__va_list_tag]* %authors to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* %0) #13
  %arraydecay = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %authors, i64 0, i64 0
  %arraydecay1 = bitcast %struct.__va_list_tag* %arraydecay to i8*
  call void @llvm.va_start(i8* %arraydecay1)
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** %stream.addr, align 8, !tbaa !6
  %2 = load i8*, i8** %command_name.addr, align 8, !tbaa !6
  %3 = load i8*, i8** %package.addr, align 8, !tbaa !6
  %4 = load i8*, i8** %version.addr, align 8, !tbaa !6
  %arraydecay2 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %authors, i64 0, i64 0
  call void @version_etc_va(%struct._IO_FILE* %1, i8* %2, i8* %3, i8* %4, %struct.__va_list_tag* %arraydecay2)
  %arraydecay3 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %authors, i64 0, i64 0
  %arraydecay34 = bitcast %struct.__va_list_tag* %arraydecay3 to i8*
  call void @llvm.va_end(i8* %arraydecay34)
  %5 = bitcast [1 x %struct.__va_list_tag]* %authors to i8*
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %5) #13
  ret void
}

; Function Attrs: nounwind
declare void @llvm.va_start(i8*) #13

; Function Attrs: nounwind
declare void @llvm.va_end(i8*) #13

; Function Attrs: nounwind uwtable
define dso_local void @emit_bug_reporting_address() #7 {
entry:
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !6
  %call = call i32 @fputs_unlocked(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3.317, i64 0, i64 0), %struct._IO_FILE* %0)
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.16.332, i64 0, i64 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.17.333, i64 0, i64 0))
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.18.334, i64 0, i64 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.19.335, i64 0, i64 0), i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.20.336, i64 0, i64 0))
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.21.337, i64 0, i64 0), i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.22.338, i64 0, i64 0))
  ret void
}

; Function Attrs: inlinehint nounwind uwtable allocsize(1,2)
define dso_local i8* @xnrealloc(i8* %p, i64 %n, i64 %s) #14 {
entry:
  %p.addr = alloca i8*, align 8
  %n.addr = alloca i64, align 8
  %s.addr = alloca i64, align 8
  store i8* %p, i8** %p.addr, align 8, !tbaa !6
  store i64 %n, i64* %n.addr, align 8, !tbaa !14
  store i64 %s, i64* %s.addr, align 8, !tbaa !14
  %0 = load i8*, i8** %p.addr, align 8, !tbaa !6
  %1 = load i64, i64* %n.addr, align 8, !tbaa !14
  %2 = load i64, i64* %s.addr, align 8, !tbaa !14
  %call = call i8* @xreallocarray(i8* %0, i64 %1, i64 %2) #28
  ret i8* %call
}

; Function Attrs: nounwind uwtable allocsize(1,2)
define dso_local i8* @xreallocarray(i8* %p, i64 %n, i64 %s) #15 {
entry:
  %p.addr = alloca i8*, align 8
  %n.addr = alloca i64, align 8
  %s.addr = alloca i64, align 8
  %r = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8, !tbaa !6
  store i64 %n, i64* %n.addr, align 8, !tbaa !14
  store i64 %s, i64* %s.addr, align 8, !tbaa !14
  %0 = bitcast i8** %r to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #13
  %1 = load i8*, i8** %p.addr, align 8, !tbaa !6
  %2 = load i64, i64* %n.addr, align 8, !tbaa !14
  %3 = load i64, i64* %s.addr, align 8, !tbaa !14
  %call = call i8* @reallocarray(i8* %1, i64 %2, i64 %3) #13
  store i8* %call, i8** %r, align 8, !tbaa !6
  %4 = load i8*, i8** %r, align 8, !tbaa !6
  %tobool = icmp ne i8* %4, null
  br i1 %tobool, label %if.end, label %land.lhs.true

land.lhs.true:                                    ; preds = %entry
  %5 = load i8*, i8** %p.addr, align 8, !tbaa !6
  %tobool1 = icmp ne i8* %5, null
  br i1 %tobool1, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %land.lhs.true
  %6 = load i64, i64* %n.addr, align 8, !tbaa !14
  %tobool2 = icmp ne i64 %6, 0
  br i1 %tobool2, label %land.lhs.true3, label %if.end

land.lhs.true3:                                   ; preds = %lor.lhs.false
  %7 = load i64, i64* %s.addr, align 8, !tbaa !14
  %tobool4 = icmp ne i64 %7, 0
  br i1 %tobool4, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true3, %land.lhs.true
  call void @xalloc_die() #24
  unreachable

if.end:                                           ; preds = %land.lhs.true3, %lor.lhs.false, %entry
  %8 = load i8*, i8** %r, align 8, !tbaa !6
  %9 = bitcast i8** %r to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %9) #13
  ret i8* %8
}

; Function Attrs: nounwind
declare dso_local i8* @reallocarray(i8*, i64, i64) #6

; Function Attrs: nounwind uwtable allocsize(0)
define dso_local noalias nonnull i8* @xmalloc(i64 %s) #16 {
entry:
  %s.addr = alloca i64, align 8
  store i64 %s, i64* %s.addr, align 8, !tbaa !14
  %0 = load i64, i64* %s.addr, align 8, !tbaa !14
  %call = call noalias i8* @malloc(i64 %0) #13
  %call1 = call i8* @nonnull(i8* %call) #22
  ret i8* %call1
}

; Function Attrs: nounwind readonly uwtable
define internal i8* @nonnull(i8* %p) #9 {
entry:
  %p.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8, !tbaa !6
  %0 = load i8*, i8** %p.addr, align 8, !tbaa !6
  %tobool = icmp ne i8* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  call void @xalloc_die() #24
  unreachable

if.end:                                           ; preds = %entry
  %1 = load i8*, i8** %p.addr, align 8, !tbaa !6
  ret i8* %1
}

; Function Attrs: nounwind uwtable allocsize(0)
define dso_local noalias nonnull i8* @ximalloc(i64 %s) #16 {
entry:
  %s.addr = alloca i64, align 8
  store i64 %s, i64* %s.addr, align 8, !tbaa !14
  %0 = load i64, i64* %s.addr, align 8, !tbaa !14
  %call = call noalias i8* @imalloc(i64 %0)
  %call1 = call i8* @nonnull(i8* %call) #22
  ret i8* %call1
}

; Function Attrs: nounwind uwtable allocsize(0)
define dso_local noalias nonnull i8* @xcharalloc(i64 %n) #16 {
entry:
  %n.addr = alloca i64, align 8
  store i64 %n, i64* %n.addr, align 8, !tbaa !14
  %0 = load i64, i64* %n.addr, align 8, !tbaa !14
  %call = call noalias nonnull i8* @xmalloc(i64 %0) #25
  ret i8* %call
}

; Function Attrs: nounwind uwtable allocsize(1)
define dso_local i8* @xrealloc(i8* %p, i64 %s) #17 {
entry:
  %p.addr = alloca i8*, align 8
  %s.addr = alloca i64, align 8
  %r = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8, !tbaa !6
  store i64 %s, i64* %s.addr, align 8, !tbaa !14
  %0 = bitcast i8** %r to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #13
  %1 = load i8*, i8** %p.addr, align 8, !tbaa !6
  %2 = load i64, i64* %s.addr, align 8, !tbaa !14
  %call = call i8* @realloc(i8* %1, i64 %2) #13
  store i8* %call, i8** %r, align 8, !tbaa !6
  %3 = load i8*, i8** %r, align 8, !tbaa !6
  %tobool = icmp ne i8* %3, null
  br i1 %tobool, label %if.end, label %land.lhs.true

land.lhs.true:                                    ; preds = %entry
  %4 = load i8*, i8** %p.addr, align 8, !tbaa !6
  %tobool1 = icmp ne i8* %4, null
  br i1 %tobool1, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %land.lhs.true
  %5 = load i64, i64* %s.addr, align 8, !tbaa !14
  %tobool2 = icmp ne i64 %5, 0
  br i1 %tobool2, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %land.lhs.true
  call void @xalloc_die() #24
  unreachable

if.end:                                           ; preds = %lor.lhs.false, %entry
  %6 = load i8*, i8** %r, align 8, !tbaa !6
  %7 = bitcast i8** %r to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %7) #13
  ret i8* %6
}

; Function Attrs: nounwind
declare dso_local i8* @realloc(i8*, i64) #6

; Function Attrs: nounwind uwtable allocsize(1)
define dso_local nonnull i8* @xirealloc(i8* %p, i64 %s) #17 {
entry:
  %p.addr = alloca i8*, align 8
  %s.addr = alloca i64, align 8
  store i8* %p, i8** %p.addr, align 8, !tbaa !6
  store i64 %s, i64* %s.addr, align 8, !tbaa !14
  %0 = load i8*, i8** %p.addr, align 8, !tbaa !6
  %1 = load i64, i64* %s.addr, align 8, !tbaa !14
  %call = call i8* @irealloc(i8* %0, i64 %1)
  %call1 = call i8* @nonnull(i8* %call) #22
  ret i8* %call1
}

; Function Attrs: nounwind uwtable allocsize(1,2)
define dso_local nonnull i8* @xireallocarray(i8* %p, i64 %n, i64 %s) #15 {
entry:
  %p.addr = alloca i8*, align 8
  %n.addr = alloca i64, align 8
  %s.addr = alloca i64, align 8
  store i8* %p, i8** %p.addr, align 8, !tbaa !6
  store i64 %n, i64* %n.addr, align 8, !tbaa !14
  store i64 %s, i64* %s.addr, align 8, !tbaa !14
  %0 = load i8*, i8** %p.addr, align 8, !tbaa !6
  %1 = load i64, i64* %n.addr, align 8, !tbaa !14
  %2 = load i64, i64* %s.addr, align 8, !tbaa !14
  %call = call i8* @ireallocarray(i8* %0, i64 %1, i64 %2)
  %call1 = call i8* @nonnull(i8* %call) #22
  ret i8* %call1
}

; Function Attrs: nounwind uwtable allocsize(0,1)
define dso_local noalias nonnull i8* @xnmalloc(i64 %n, i64 %s) #18 {
entry:
  %n.addr = alloca i64, align 8
  %s.addr = alloca i64, align 8
  store i64 %n, i64* %n.addr, align 8, !tbaa !14
  store i64 %s, i64* %s.addr, align 8, !tbaa !14
  %0 = load i64, i64* %n.addr, align 8, !tbaa !14
  %1 = load i64, i64* %s.addr, align 8, !tbaa !14
  %call = call i8* @xreallocarray(i8* null, i64 %0, i64 %1) #28
  ret i8* %call
}

; Function Attrs: nounwind uwtable allocsize(0,1)
define dso_local noalias nonnull i8* @xinmalloc(i64 %n, i64 %s) #18 {
entry:
  %n.addr = alloca i64, align 8
  %s.addr = alloca i64, align 8
  store i64 %n, i64* %n.addr, align 8, !tbaa !14
  store i64 %s, i64* %s.addr, align 8, !tbaa !14
  %0 = load i64, i64* %n.addr, align 8, !tbaa !14
  %1 = load i64, i64* %s.addr, align 8, !tbaa !14
  %call = call nonnull i8* @xireallocarray(i8* null, i64 %0, i64 %1) #28
  ret i8* %call
}

; Function Attrs: nounwind uwtable
define dso_local nonnull i8* @x2realloc(i8* %p, i64* %ps) #7 {
entry:
  %p.addr = alloca i8*, align 8
  %ps.addr = alloca i64*, align 8
  store i8* %p, i8** %p.addr, align 8, !tbaa !6
  store i64* %ps, i64** %ps.addr, align 8, !tbaa !6
  %0 = load i8*, i8** %p.addr, align 8, !tbaa !6
  %1 = load i64*, i64** %ps.addr, align 8, !tbaa !6
  %call = call nonnull i8* @x2nrealloc(i8* %0, i64* %1, i64 1)
  ret i8* %call
}

; Function Attrs: nounwind uwtable
define dso_local nonnull i8* @x2nrealloc(i8* %p, i64* %pn, i64 %s) #7 {
entry:
  %p.addr = alloca i8*, align 8
  %pn.addr = alloca i64*, align 8
  %s.addr = alloca i64, align 8
  %n = alloca i64, align 8
  store i8* %p, i8** %p.addr, align 8, !tbaa !6
  store i64* %pn, i64** %pn.addr, align 8, !tbaa !6
  store i64 %s, i64* %s.addr, align 8, !tbaa !14
  %0 = bitcast i64* %n to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #13
  %1 = load i64*, i64** %pn.addr, align 8, !tbaa !6
  %2 = load i64, i64* %1, align 8, !tbaa !14
  store i64 %2, i64* %n, align 8, !tbaa !14
  %3 = load i8*, i8** %p.addr, align 8, !tbaa !6
  %tobool = icmp ne i8* %3, null
  br i1 %tobool, label %if.else, label %if.then

if.then:                                          ; preds = %entry
  %4 = load i64, i64* %n, align 8, !tbaa !14
  %tobool1 = icmp ne i64 %4, 0
  br i1 %tobool1, label %if.end, label %if.then2

if.then2:                                         ; preds = %if.then
  %5 = load i64, i64* %s.addr, align 8, !tbaa !14
  %div = udiv i64 128, %5
  store i64 %div, i64* %n, align 8, !tbaa !14
  %6 = load i64, i64* %n, align 8, !tbaa !14
  %tobool3 = icmp ne i64 %6, 0
  %lnot = xor i1 %tobool3, true
  %lnot.ext = zext i1 %lnot to i32
  %conv = sext i32 %lnot.ext to i64
  %7 = load i64, i64* %n, align 8, !tbaa !14
  %add = add i64 %7, %conv
  store i64 %add, i64* %n, align 8, !tbaa !14
  br label %if.end

if.end:                                           ; preds = %if.then2, %if.then
  br label %if.end7

if.else:                                          ; preds = %entry
  %8 = load i64, i64* %n, align 8, !tbaa !14
  %9 = load i64, i64* %n, align 8, !tbaa !14
  %shr = lshr i64 %9, 1
  %add4 = add i64 %shr, 1
  %10 = call { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %8, i64 %add4)
  %11 = extractvalue { i64, i1 } %10, 1
  %12 = extractvalue { i64, i1 } %10, 0
  store i64 %12, i64* %n, align 8
  br i1 %11, label %if.then5, label %if.end6

if.then5:                                         ; preds = %if.else
  call void @xalloc_die() #24
  unreachable

if.end6:                                          ; preds = %if.else
  br label %if.end7

if.end7:                                          ; preds = %if.end6, %if.end
  %13 = load i8*, i8** %p.addr, align 8, !tbaa !6
  %14 = load i64, i64* %n, align 8, !tbaa !14
  %15 = load i64, i64* %s.addr, align 8, !tbaa !14
  %call = call i8* @xreallocarray(i8* %13, i64 %14, i64 %15) #28
  store i8* %call, i8** %p.addr, align 8, !tbaa !6
  %16 = load i64, i64* %n, align 8, !tbaa !14
  %17 = load i64*, i64** %pn.addr, align 8, !tbaa !6
  store i64 %16, i64* %17, align 8, !tbaa !14
  %18 = load i8*, i8** %p.addr, align 8, !tbaa !6
  %19 = bitcast i64* %n to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %19) #13
  ret i8* %18
}

; Function Attrs: nounwind readnone speculatable
declare { i64, i1 } @llvm.uadd.with.overflow.i64(i64, i64) #19

; Function Attrs: nounwind uwtable
define dso_local nonnull i8* @xpalloc(i8* %pa, i64* %pn, i64 %n_incr_min, i64 %n_max, i64 %s) #7 {
entry:
  %pa.addr = alloca i8*, align 8
  %pn.addr = alloca i64*, align 8
  %n_incr_min.addr = alloca i64, align 8
  %n_max.addr = alloca i64, align 8
  %s.addr = alloca i64, align 8
  %n0 = alloca i64, align 8
  %n = alloca i64, align 8
  %nbytes = alloca i64, align 8
  %adjusted_nbytes = alloca i64, align 8
  store i8* %pa, i8** %pa.addr, align 8, !tbaa !6
  store i64* %pn, i64** %pn.addr, align 8, !tbaa !6
  store i64 %n_incr_min, i64* %n_incr_min.addr, align 8, !tbaa !14
  store i64 %n_max, i64* %n_max.addr, align 8, !tbaa !14
  store i64 %s, i64* %s.addr, align 8, !tbaa !14
  %0 = bitcast i64* %n0 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #13
  %1 = load i64*, i64** %pn.addr, align 8, !tbaa !6
  %2 = load i64, i64* %1, align 8, !tbaa !14
  store i64 %2, i64* %n0, align 8, !tbaa !14
  %3 = bitcast i64* %n to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %3) #13
  %4 = load i64, i64* %n0, align 8, !tbaa !14
  %5 = load i64, i64* %n0, align 8, !tbaa !14
  %shr = ashr i64 %5, 1
  %6 = call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %4, i64 %shr)
  %7 = extractvalue { i64, i1 } %6, 1
  %8 = extractvalue { i64, i1 } %6, 0
  store i64 %8, i64* %n, align 8
  br i1 %7, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i64 9223372036854775807, i64* %n, align 8, !tbaa !14
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %9 = load i64, i64* %n_max.addr, align 8, !tbaa !14
  %cmp = icmp sle i64 0, %9
  br i1 %cmp, label %land.lhs.true, label %if.end3

land.lhs.true:                                    ; preds = %if.end
  %10 = load i64, i64* %n_max.addr, align 8, !tbaa !14
  %11 = load i64, i64* %n, align 8, !tbaa !14
  %cmp1 = icmp slt i64 %10, %11
  br i1 %cmp1, label %if.then2, label %if.end3

if.then2:                                         ; preds = %land.lhs.true
  %12 = load i64, i64* %n_max.addr, align 8, !tbaa !14
  store i64 %12, i64* %n, align 8, !tbaa !14
  br label %if.end3

if.end3:                                          ; preds = %if.then2, %land.lhs.true, %if.end
  %13 = bitcast i64* %nbytes to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %13) #13
  %14 = bitcast i64* %adjusted_nbytes to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %14) #13
  br i1 false, label %cond.true, label %cond.false160

cond.true:                                        ; preds = %if.end3
  br i1 false, label %cond.false69, label %cond.true4

cond.true4:                                       ; preds = %cond.true
  %15 = load i64, i64* %s.addr, align 8, !tbaa !14
  %cmp5 = icmp slt i64 %15, 0
  br i1 %cmp5, label %cond.true6, label %cond.false36

cond.true6:                                       ; preds = %cond.true4
  %16 = load i64, i64* %n, align 8, !tbaa !14
  %cmp7 = icmp slt i64 %16, 0
  br i1 %cmp7, label %cond.true8, label %cond.false20

cond.true8:                                       ; preds = %cond.true6
  br i1 true, label %cond.true9, label %cond.false

cond.true9:                                       ; preds = %cond.true8
  %17 = load i64, i64* %n, align 8, !tbaa !14
  %18 = load i64, i64* %s.addr, align 8, !tbaa !14
  %div = sdiv i64 127, %18
  %cmp10 = icmp slt i64 %17, %div
  br i1 %cmp10, label %cond.true59, label %cond.false63

cond.false:                                       ; preds = %cond.true8
  br i1 true, label %cond.true11, label %cond.false13

cond.true11:                                      ; preds = %cond.false
  %19 = load i64, i64* %s.addr, align 8, !tbaa !14
  %cmp12 = icmp slt i64 %19, -9223372036854775807
  br i1 %cmp12, label %cond.true15, label %cond.false16

cond.false13:                                     ; preds = %cond.false
  %20 = load i64, i64* %s.addr, align 8, !tbaa !14
  %cmp14 = icmp slt i64 0, %20
  br i1 %cmp14, label %cond.true15, label %cond.false16

cond.true15:                                      ; preds = %cond.false13, %cond.true11
  br label %cond.end

cond.false16:                                     ; preds = %cond.false13, %cond.true11
  %21 = load i64, i64* %s.addr, align 8, !tbaa !14
  %sub = sub nsw i64 0, %21
  %div17 = sdiv i64 127, %sub
  br label %cond.end

cond.end:                                         ; preds = %cond.false16, %cond.true15
  %cond = phi i64 [ 0, %cond.true15 ], [ %div17, %cond.false16 ]
  %22 = load i64, i64* %n, align 8, !tbaa !14
  %sub18 = sub nsw i64 -1, %22
  %cmp19 = icmp sle i64 %cond, %sub18
  br i1 %cmp19, label %cond.true59, label %cond.false63

cond.false20:                                     ; preds = %cond.true6
  br i1 true, label %cond.true21, label %cond.false22

cond.true21:                                      ; preds = %cond.false20
  br i1 false, label %land.lhs.true23, label %cond.false33

cond.false22:                                     ; preds = %cond.false20
  br i1 false, label %land.lhs.true23, label %cond.false33

land.lhs.true23:                                  ; preds = %cond.false22, %cond.true21
  %23 = load i64, i64* %s.addr, align 8, !tbaa !14
  %cmp24 = icmp eq i64 %23, -1
  br i1 %cmp24, label %cond.true25, label %cond.false33

cond.true25:                                      ; preds = %land.lhs.true23
  br i1 true, label %cond.true26, label %cond.false28

cond.true26:                                      ; preds = %cond.true25
  %24 = load i64, i64* %n, align 8, !tbaa !14
  %add = add nsw i64 %24, -128
  %cmp27 = icmp slt i64 0, %add
  br i1 %cmp27, label %cond.true59, label %cond.false63

cond.false28:                                     ; preds = %cond.true25
  %25 = load i64, i64* %n, align 8, !tbaa !14
  %cmp29 = icmp slt i64 0, %25
  br i1 %cmp29, label %land.lhs.true30, label %cond.false63

land.lhs.true30:                                  ; preds = %cond.false28
  %26 = load i64, i64* %n, align 8, !tbaa !14
  %sub31 = sub nsw i64 %26, 1
  %cmp32 = icmp slt i64 127, %sub31
  br i1 %cmp32, label %cond.true59, label %cond.false63

cond.false33:                                     ; preds = %land.lhs.true23, %cond.false22, %cond.true21
  %27 = load i64, i64* %s.addr, align 8, !tbaa !14
  %div34 = sdiv i64 -128, %27
  %28 = load i64, i64* %n, align 8, !tbaa !14
  %cmp35 = icmp slt i64 %div34, %28
  br i1 %cmp35, label %cond.true59, label %cond.false63

cond.false36:                                     ; preds = %cond.true4
  %29 = load i64, i64* %s.addr, align 8, !tbaa !14
  %cmp37 = icmp eq i64 %29, 0
  br i1 %cmp37, label %cond.true38, label %cond.false39

cond.true38:                                      ; preds = %cond.false36
  br i1 false, label %cond.true59, label %cond.false63

cond.false39:                                     ; preds = %cond.false36
  %30 = load i64, i64* %n, align 8, !tbaa !14
  %cmp40 = icmp slt i64 %30, 0
  br i1 %cmp40, label %cond.true41, label %cond.false56

cond.true41:                                      ; preds = %cond.false39
  br i1 true, label %cond.true42, label %cond.false43

cond.true42:                                      ; preds = %cond.true41
  br i1 false, label %land.lhs.true44, label %cond.false53

cond.false43:                                     ; preds = %cond.true41
  br i1 false, label %land.lhs.true44, label %cond.false53

land.lhs.true44:                                  ; preds = %cond.false43, %cond.true42
  %31 = load i64, i64* %n, align 8, !tbaa !14
  %cmp45 = icmp eq i64 %31, -1
  br i1 %cmp45, label %cond.true46, label %cond.false53

cond.true46:                                      ; preds = %land.lhs.true44
  br i1 true, label %cond.true47, label %cond.false50

cond.true47:                                      ; preds = %cond.true46
  %32 = load i64, i64* %s.addr, align 8, !tbaa !14
  %add48 = add nsw i64 %32, -128
  %cmp49 = icmp slt i64 0, %add48
  br i1 %cmp49, label %cond.true59, label %cond.false63

cond.false50:                                     ; preds = %cond.true46
  %33 = load i64, i64* %s.addr, align 8, !tbaa !14
  %sub51 = sub nsw i64 %33, 1
  %cmp52 = icmp slt i64 127, %sub51
  br i1 %cmp52, label %cond.true59, label %cond.false63

cond.false53:                                     ; preds = %land.lhs.true44, %cond.false43, %cond.true42
  %34 = load i64, i64* %n, align 8, !tbaa !14
  %div54 = sdiv i64 -128, %34
  %35 = load i64, i64* %s.addr, align 8, !tbaa !14
  %cmp55 = icmp slt i64 %div54, %35
  br i1 %cmp55, label %cond.true59, label %cond.false63

cond.false56:                                     ; preds = %cond.false39
  %36 = load i64, i64* %s.addr, align 8, !tbaa !14
  %div57 = sdiv i64 127, %36
  %37 = load i64, i64* %n, align 8, !tbaa !14
  %cmp58 = icmp slt i64 %div57, %37
  br i1 %cmp58, label %cond.true59, label %cond.false63

cond.true59:                                      ; preds = %cond.false56, %cond.false53, %cond.false50, %cond.true47, %cond.true38, %cond.false33, %land.lhs.true30, %cond.true26, %cond.end, %cond.true9
  %38 = load i64, i64* %n, align 8, !tbaa !14
  %conv = trunc i64 %38 to i32
  %39 = load i64, i64* %s.addr, align 8, !tbaa !14
  %conv60 = trunc i64 %39 to i32
  %mul = mul i32 %conv, %conv60
  %conv61 = trunc i32 %mul to i8
  %conv62 = sext i8 %conv61 to i64
  store i64 %conv62, i64* %nbytes, align 8, !tbaa !14
  br i1 true, label %cond.true847, label %cond.false848

cond.false63:                                     ; preds = %cond.false56, %cond.false53, %cond.false50, %cond.true47, %cond.true38, %cond.false33, %land.lhs.true30, %cond.false28, %cond.true26, %cond.end, %cond.true9
  %40 = load i64, i64* %n, align 8, !tbaa !14
  %conv64 = trunc i64 %40 to i32
  %41 = load i64, i64* %s.addr, align 8, !tbaa !14
  %conv65 = trunc i64 %41 to i32
  %mul66 = mul i32 %conv64, %conv65
  %conv67 = trunc i32 %mul66 to i8
  %conv68 = sext i8 %conv67 to i64
  store i64 %conv68, i64* %nbytes, align 8, !tbaa !14
  br i1 false, label %cond.true847, label %cond.false848

cond.false69:                                     ; preds = %cond.true
  %42 = load i64, i64* %s.addr, align 8, !tbaa !14
  %cmp70 = icmp slt i64 %42, 0
  br i1 %cmp70, label %cond.true72, label %cond.false118

cond.true72:                                      ; preds = %cond.false69
  %43 = load i64, i64* %n, align 8, !tbaa !14
  %cmp73 = icmp slt i64 %43, 0
  br i1 %cmp73, label %cond.true75, label %cond.false96

cond.true75:                                      ; preds = %cond.true72
  br i1 true, label %cond.true76, label %cond.false80

cond.true76:                                      ; preds = %cond.true75
  %44 = load i64, i64* %n, align 8, !tbaa !14
  %45 = load i64, i64* %s.addr, align 8, !tbaa !14
  %div77 = sdiv i64 255, %45
  %cmp78 = icmp slt i64 %44, %div77
  br i1 %cmp78, label %cond.true148, label %cond.false154

cond.false80:                                     ; preds = %cond.true75
  br i1 true, label %cond.true81, label %cond.false84

cond.true81:                                      ; preds = %cond.false80
  %46 = load i64, i64* %s.addr, align 8, !tbaa !14
  %cmp82 = icmp slt i64 %46, -9223372036854775807
  br i1 %cmp82, label %cond.true87, label %cond.false88

cond.false84:                                     ; preds = %cond.false80
  %47 = load i64, i64* %s.addr, align 8, !tbaa !14
  %cmp85 = icmp slt i64 0, %47
  br i1 %cmp85, label %cond.true87, label %cond.false88

cond.true87:                                      ; preds = %cond.false84, %cond.true81
  br label %cond.end91

cond.false88:                                     ; preds = %cond.false84, %cond.true81
  %48 = load i64, i64* %s.addr, align 8, !tbaa !14
  %sub89 = sub nsw i64 0, %48
  %div90 = sdiv i64 255, %sub89
  br label %cond.end91

cond.end91:                                       ; preds = %cond.false88, %cond.true87
  %cond92 = phi i64 [ 0, %cond.true87 ], [ %div90, %cond.false88 ]
  %49 = load i64, i64* %n, align 8, !tbaa !14
  %sub93 = sub nsw i64 -1, %49
  %cmp94 = icmp sle i64 %cond92, %sub93
  br i1 %cmp94, label %cond.true148, label %cond.false154

cond.false96:                                     ; preds = %cond.true72
  br i1 true, label %cond.true97, label %cond.false98

cond.true97:                                      ; preds = %cond.false96
  br i1 false, label %land.lhs.true99, label %cond.false114

cond.false98:                                     ; preds = %cond.false96
  br i1 false, label %land.lhs.true99, label %cond.false114

land.lhs.true99:                                  ; preds = %cond.false98, %cond.true97
  %50 = load i64, i64* %s.addr, align 8, !tbaa !14
  %cmp100 = icmp eq i64 %50, -1
  br i1 %cmp100, label %cond.true102, label %cond.false114

cond.true102:                                     ; preds = %land.lhs.true99
  br i1 true, label %cond.true103, label %cond.false107

cond.true103:                                     ; preds = %cond.true102
  %51 = load i64, i64* %n, align 8, !tbaa !14
  %add104 = add nsw i64 %51, 0
  %cmp105 = icmp slt i64 0, %add104
  br i1 %cmp105, label %cond.true148, label %cond.false154

cond.false107:                                    ; preds = %cond.true102
  %52 = load i64, i64* %n, align 8, !tbaa !14
  %cmp108 = icmp slt i64 0, %52
  br i1 %cmp108, label %land.lhs.true110, label %cond.false154

land.lhs.true110:                                 ; preds = %cond.false107
  %53 = load i64, i64* %n, align 8, !tbaa !14
  %sub111 = sub nsw i64 %53, 1
  %cmp112 = icmp slt i64 -1, %sub111
  br i1 %cmp112, label %cond.true148, label %cond.false154

cond.false114:                                    ; preds = %land.lhs.true99, %cond.false98, %cond.true97
  %54 = load i64, i64* %s.addr, align 8, !tbaa !14
  %div115 = sdiv i64 0, %54
  %55 = load i64, i64* %n, align 8, !tbaa !14
  %cmp116 = icmp slt i64 %div115, %55
  br i1 %cmp116, label %cond.true148, label %cond.false154

cond.false118:                                    ; preds = %cond.false69
  %56 = load i64, i64* %s.addr, align 8, !tbaa !14
  %cmp119 = icmp eq i64 %56, 0
  br i1 %cmp119, label %cond.true121, label %cond.false122

cond.true121:                                     ; preds = %cond.false118
  br i1 false, label %cond.true148, label %cond.false154

cond.false122:                                    ; preds = %cond.false118
  %57 = load i64, i64* %n, align 8, !tbaa !14
  %cmp123 = icmp slt i64 %57, 0
  br i1 %cmp123, label %cond.true125, label %cond.false144

cond.true125:                                     ; preds = %cond.false122
  br i1 true, label %cond.true126, label %cond.false127

cond.true126:                                     ; preds = %cond.true125
  br i1 false, label %land.lhs.true128, label %cond.false140

cond.false127:                                    ; preds = %cond.true125
  br i1 false, label %land.lhs.true128, label %cond.false140

land.lhs.true128:                                 ; preds = %cond.false127, %cond.true126
  %58 = load i64, i64* %n, align 8, !tbaa !14
  %cmp129 = icmp eq i64 %58, -1
  br i1 %cmp129, label %cond.true131, label %cond.false140

cond.true131:                                     ; preds = %land.lhs.true128
  br i1 true, label %cond.true132, label %cond.false136

cond.true132:                                     ; preds = %cond.true131
  %59 = load i64, i64* %s.addr, align 8, !tbaa !14
  %add133 = add nsw i64 %59, 0
  %cmp134 = icmp slt i64 0, %add133
  br i1 %cmp134, label %cond.true148, label %cond.false154

cond.false136:                                    ; preds = %cond.true131
  %60 = load i64, i64* %s.addr, align 8, !tbaa !14
  %sub137 = sub nsw i64 %60, 1
  %cmp138 = icmp slt i64 -1, %sub137
  br i1 %cmp138, label %cond.true148, label %cond.false154

cond.false140:                                    ; preds = %land.lhs.true128, %cond.false127, %cond.true126
  %61 = load i64, i64* %n, align 8, !tbaa !14
  %div141 = sdiv i64 0, %61
  %62 = load i64, i64* %s.addr, align 8, !tbaa !14
  %cmp142 = icmp slt i64 %div141, %62
  br i1 %cmp142, label %cond.true148, label %cond.false154

cond.false144:                                    ; preds = %cond.false122
  %63 = load i64, i64* %s.addr, align 8, !tbaa !14
  %div145 = sdiv i64 255, %63
  %64 = load i64, i64* %n, align 8, !tbaa !14
  %cmp146 = icmp slt i64 %div145, %64
  br i1 %cmp146, label %cond.true148, label %cond.false154

cond.true148:                                     ; preds = %cond.false144, %cond.false140, %cond.false136, %cond.true132, %cond.true121, %cond.false114, %land.lhs.true110, %cond.true103, %cond.end91, %cond.true76
  %65 = load i64, i64* %n, align 8, !tbaa !14
  %conv149 = trunc i64 %65 to i32
  %66 = load i64, i64* %s.addr, align 8, !tbaa !14
  %conv150 = trunc i64 %66 to i32
  %mul151 = mul i32 %conv149, %conv150
  %conv152 = trunc i32 %mul151 to i8
  %conv153 = zext i8 %conv152 to i64
  store i64 %conv153, i64* %nbytes, align 8, !tbaa !14
  br i1 true, label %cond.true847, label %cond.false848

cond.false154:                                    ; preds = %cond.false144, %cond.false140, %cond.false136, %cond.true132, %cond.true121, %cond.false114, %land.lhs.true110, %cond.false107, %cond.true103, %cond.end91, %cond.true76
  %67 = load i64, i64* %n, align 8, !tbaa !14
  %conv155 = trunc i64 %67 to i32
  %68 = load i64, i64* %s.addr, align 8, !tbaa !14
  %conv156 = trunc i64 %68 to i32
  %mul157 = mul i32 %conv155, %conv156
  %conv158 = trunc i32 %mul157 to i8
  %conv159 = zext i8 %conv158 to i64
  store i64 %conv159, i64* %nbytes, align 8, !tbaa !14
  br i1 false, label %cond.true847, label %cond.false848

cond.false160:                                    ; preds = %if.end3
  br i1 false, label %cond.true161, label %cond.false344

cond.true161:                                     ; preds = %cond.false160
  br i1 false, label %cond.false253, label %cond.true162

cond.true162:                                     ; preds = %cond.true161
  %69 = load i64, i64* %s.addr, align 8, !tbaa !14
  %cmp163 = icmp slt i64 %69, 0
  br i1 %cmp163, label %cond.true165, label %cond.false211

cond.true165:                                     ; preds = %cond.true162
  %70 = load i64, i64* %n, align 8, !tbaa !14
  %cmp166 = icmp slt i64 %70, 0
  br i1 %cmp166, label %cond.true168, label %cond.false189

cond.true168:                                     ; preds = %cond.true165
  br i1 true, label %cond.true169, label %cond.false173

cond.true169:                                     ; preds = %cond.true168
  %71 = load i64, i64* %n, align 8, !tbaa !14
  %72 = load i64, i64* %s.addr, align 8, !tbaa !14
  %div170 = sdiv i64 32767, %72
  %cmp171 = icmp slt i64 %71, %div170
  br i1 %cmp171, label %cond.true241, label %cond.false247

cond.false173:                                    ; preds = %cond.true168
  br i1 true, label %cond.true174, label %cond.false177

cond.true174:                                     ; preds = %cond.false173
  %73 = load i64, i64* %s.addr, align 8, !tbaa !14
  %cmp175 = icmp slt i64 %73, -9223372036854775807
  br i1 %cmp175, label %cond.true180, label %cond.false181

cond.false177:                                    ; preds = %cond.false173
  %74 = load i64, i64* %s.addr, align 8, !tbaa !14
  %cmp178 = icmp slt i64 0, %74
  br i1 %cmp178, label %cond.true180, label %cond.false181

cond.true180:                                     ; preds = %cond.false177, %cond.true174
  br label %cond.end184

cond.false181:                                    ; preds = %cond.false177, %cond.true174
  %75 = load i64, i64* %s.addr, align 8, !tbaa !14
  %sub182 = sub nsw i64 0, %75
  %div183 = sdiv i64 32767, %sub182
  br label %cond.end184

cond.end184:                                      ; preds = %cond.false181, %cond.true180
  %cond185 = phi i64 [ 0, %cond.true180 ], [ %div183, %cond.false181 ]
  %76 = load i64, i64* %n, align 8, !tbaa !14
  %sub186 = sub nsw i64 -1, %76
  %cmp187 = icmp sle i64 %cond185, %sub186
  br i1 %cmp187, label %cond.true241, label %cond.false247

cond.false189:                                    ; preds = %cond.true165
  br i1 true, label %cond.true190, label %cond.false191

cond.true190:                                     ; preds = %cond.false189
  br i1 false, label %land.lhs.true192, label %cond.false207

cond.false191:                                    ; preds = %cond.false189
  br i1 false, label %land.lhs.true192, label %cond.false207

land.lhs.true192:                                 ; preds = %cond.false191, %cond.true190
  %77 = load i64, i64* %s.addr, align 8, !tbaa !14
  %cmp193 = icmp eq i64 %77, -1
  br i1 %cmp193, label %cond.true195, label %cond.false207

cond.true195:                                     ; preds = %land.lhs.true192
  br i1 true, label %cond.true196, label %cond.false200

cond.true196:                                     ; preds = %cond.true195
  %78 = load i64, i64* %n, align 8, !tbaa !14
  %add197 = add nsw i64 %78, -32768
  %cmp198 = icmp slt i64 0, %add197
  br i1 %cmp198, label %cond.true241, label %cond.false247

cond.false200:                                    ; preds = %cond.true195
  %79 = load i64, i64* %n, align 8, !tbaa !14
  %cmp201 = icmp slt i64 0, %79
  br i1 %cmp201, label %land.lhs.true203, label %cond.false247

land.lhs.true203:                                 ; preds = %cond.false200
  %80 = load i64, i64* %n, align 8, !tbaa !14
  %sub204 = sub nsw i64 %80, 1
  %cmp205 = icmp slt i64 32767, %sub204
  br i1 %cmp205, label %cond.true241, label %cond.false247

cond.false207:                                    ; preds = %land.lhs.true192, %cond.false191, %cond.true190
  %81 = load i64, i64* %s.addr, align 8, !tbaa !14
  %div208 = sdiv i64 -32768, %81
  %82 = load i64, i64* %n, align 8, !tbaa !14
  %cmp209 = icmp slt i64 %div208, %82
  br i1 %cmp209, label %cond.true241, label %cond.false247

cond.false211:                                    ; preds = %cond.true162
  %83 = load i64, i64* %s.addr, align 8, !tbaa !14
  %cmp212 = icmp eq i64 %83, 0
  br i1 %cmp212, label %cond.true214, label %cond.false215

cond.true214:                                     ; preds = %cond.false211
  br i1 false, label %cond.true241, label %cond.false247

cond.false215:                                    ; preds = %cond.false211
  %84 = load i64, i64* %n, align 8, !tbaa !14
  %cmp216 = icmp slt i64 %84, 0
  br i1 %cmp216, label %cond.true218, label %cond.false237

cond.true218:                                     ; preds = %cond.false215
  br i1 true, label %cond.true219, label %cond.false220

cond.true219:                                     ; preds = %cond.true218
  br i1 false, label %land.lhs.true221, label %cond.false233

cond.false220:                                    ; preds = %cond.true218
  br i1 false, label %land.lhs.true221, label %cond.false233

land.lhs.true221:                                 ; preds = %cond.false220, %cond.true219
  %85 = load i64, i64* %n, align 8, !tbaa !14
  %cmp222 = icmp eq i64 %85, -1
  br i1 %cmp222, label %cond.true224, label %cond.false233

cond.true224:                                     ; preds = %land.lhs.true221
  br i1 true, label %cond.true225, label %cond.false229

cond.true225:                                     ; preds = %cond.true224
  %86 = load i64, i64* %s.addr, align 8, !tbaa !14
  %add226 = add nsw i64 %86, -32768
  %cmp227 = icmp slt i64 0, %add226
  br i1 %cmp227, label %cond.true241, label %cond.false247

cond.false229:                                    ; preds = %cond.true224
  %87 = load i64, i64* %s.addr, align 8, !tbaa !14
  %sub230 = sub nsw i64 %87, 1
  %cmp231 = icmp slt i64 32767, %sub230
  br i1 %cmp231, label %cond.true241, label %cond.false247

cond.false233:                                    ; preds = %land.lhs.true221, %cond.false220, %cond.true219
  %88 = load i64, i64* %n, align 8, !tbaa !14
  %div234 = sdiv i64 -32768, %88
  %89 = load i64, i64* %s.addr, align 8, !tbaa !14
  %cmp235 = icmp slt i64 %div234, %89
  br i1 %cmp235, label %cond.true241, label %cond.false247

cond.false237:                                    ; preds = %cond.false215
  %90 = load i64, i64* %s.addr, align 8, !tbaa !14
  %div238 = sdiv i64 32767, %90
  %91 = load i64, i64* %n, align 8, !tbaa !14
  %cmp239 = icmp slt i64 %div238, %91
  br i1 %cmp239, label %cond.true241, label %cond.false247

cond.true241:                                     ; preds = %cond.false237, %cond.false233, %cond.false229, %cond.true225, %cond.true214, %cond.false207, %land.lhs.true203, %cond.true196, %cond.end184, %cond.true169
  %92 = load i64, i64* %n, align 8, !tbaa !14
  %conv242 = trunc i64 %92 to i32
  %93 = load i64, i64* %s.addr, align 8, !tbaa !14
  %conv243 = trunc i64 %93 to i32
  %mul244 = mul i32 %conv242, %conv243
  %conv245 = trunc i32 %mul244 to i16
  %conv246 = sext i16 %conv245 to i64
  store i64 %conv246, i64* %nbytes, align 8, !tbaa !14
  br i1 true, label %cond.true847, label %cond.false848

cond.false247:                                    ; preds = %cond.false237, %cond.false233, %cond.false229, %cond.true225, %cond.true214, %cond.false207, %land.lhs.true203, %cond.false200, %cond.true196, %cond.end184, %cond.true169
  %94 = load i64, i64* %n, align 8, !tbaa !14
  %conv248 = trunc i64 %94 to i32
  %95 = load i64, i64* %s.addr, align 8, !tbaa !14
  %conv249 = trunc i64 %95 to i32
  %mul250 = mul i32 %conv248, %conv249
  %conv251 = trunc i32 %mul250 to i16
  %conv252 = sext i16 %conv251 to i64
  store i64 %conv252, i64* %nbytes, align 8, !tbaa !14
  br i1 false, label %cond.true847, label %cond.false848

cond.false253:                                    ; preds = %cond.true161
  %96 = load i64, i64* %s.addr, align 8, !tbaa !14
  %cmp254 = icmp slt i64 %96, 0
  br i1 %cmp254, label %cond.true256, label %cond.false302

cond.true256:                                     ; preds = %cond.false253
  %97 = load i64, i64* %n, align 8, !tbaa !14
  %cmp257 = icmp slt i64 %97, 0
  br i1 %cmp257, label %cond.true259, label %cond.false280

cond.true259:                                     ; preds = %cond.true256
  br i1 true, label %cond.true260, label %cond.false264

cond.true260:                                     ; preds = %cond.true259
  %98 = load i64, i64* %n, align 8, !tbaa !14
  %99 = load i64, i64* %s.addr, align 8, !tbaa !14
  %div261 = sdiv i64 65535, %99
  %cmp262 = icmp slt i64 %98, %div261
  br i1 %cmp262, label %cond.true332, label %cond.false338

cond.false264:                                    ; preds = %cond.true259
  br i1 true, label %cond.true265, label %cond.false268

cond.true265:                                     ; preds = %cond.false264
  %100 = load i64, i64* %s.addr, align 8, !tbaa !14
  %cmp266 = icmp slt i64 %100, -9223372036854775807
  br i1 %cmp266, label %cond.true271, label %cond.false272

cond.false268:                                    ; preds = %cond.false264
  %101 = load i64, i64* %s.addr, align 8, !tbaa !14
  %cmp269 = icmp slt i64 0, %101
  br i1 %cmp269, label %cond.true271, label %cond.false272

cond.true271:                                     ; preds = %cond.false268, %cond.true265
  br label %cond.end275

cond.false272:                                    ; preds = %cond.false268, %cond.true265
  %102 = load i64, i64* %s.addr, align 8, !tbaa !14
  %sub273 = sub nsw i64 0, %102
  %div274 = sdiv i64 65535, %sub273
  br label %cond.end275

cond.end275:                                      ; preds = %cond.false272, %cond.true271
  %cond276 = phi i64 [ 0, %cond.true271 ], [ %div274, %cond.false272 ]
  %103 = load i64, i64* %n, align 8, !tbaa !14
  %sub277 = sub nsw i64 -1, %103
  %cmp278 = icmp sle i64 %cond276, %sub277
  br i1 %cmp278, label %cond.true332, label %cond.false338

cond.false280:                                    ; preds = %cond.true256
  br i1 true, label %cond.true281, label %cond.false282

cond.true281:                                     ; preds = %cond.false280
  br i1 false, label %land.lhs.true283, label %cond.false298

cond.false282:                                    ; preds = %cond.false280
  br i1 false, label %land.lhs.true283, label %cond.false298

land.lhs.true283:                                 ; preds = %cond.false282, %cond.true281
  %104 = load i64, i64* %s.addr, align 8, !tbaa !14
  %cmp284 = icmp eq i64 %104, -1
  br i1 %cmp284, label %cond.true286, label %cond.false298

cond.true286:                                     ; preds = %land.lhs.true283
  br i1 true, label %cond.true287, label %cond.false291

cond.true287:                                     ; preds = %cond.true286
  %105 = load i64, i64* %n, align 8, !tbaa !14
  %add288 = add nsw i64 %105, 0
  %cmp289 = icmp slt i64 0, %add288
  br i1 %cmp289, label %cond.true332, label %cond.false338

cond.false291:                                    ; preds = %cond.true286
  %106 = load i64, i64* %n, align 8, !tbaa !14
  %cmp292 = icmp slt i64 0, %106
  br i1 %cmp292, label %land.lhs.true294, label %cond.false338

land.lhs.true294:                                 ; preds = %cond.false291
  %107 = load i64, i64* %n, align 8, !tbaa !14
  %sub295 = sub nsw i64 %107, 1
  %cmp296 = icmp slt i64 -1, %sub295
  br i1 %cmp296, label %cond.true332, label %cond.false338

cond.false298:                                    ; preds = %land.lhs.true283, %cond.false282, %cond.true281
  %108 = load i64, i64* %s.addr, align 8, !tbaa !14
  %div299 = sdiv i64 0, %108
  %109 = load i64, i64* %n, align 8, !tbaa !14
  %cmp300 = icmp slt i64 %div299, %109
  br i1 %cmp300, label %cond.true332, label %cond.false338

cond.false302:                                    ; preds = %cond.false253
  %110 = load i64, i64* %s.addr, align 8, !tbaa !14
  %cmp303 = icmp eq i64 %110, 0
  br i1 %cmp303, label %cond.true305, label %cond.false306

cond.true305:                                     ; preds = %cond.false302
  br i1 false, label %cond.true332, label %cond.false338

cond.false306:                                    ; preds = %cond.false302
  %111 = load i64, i64* %n, align 8, !tbaa !14
  %cmp307 = icmp slt i64 %111, 0
  br i1 %cmp307, label %cond.true309, label %cond.false328

cond.true309:                                     ; preds = %cond.false306
  br i1 true, label %cond.true310, label %cond.false311

cond.true310:                                     ; preds = %cond.true309
  br i1 false, label %land.lhs.true312, label %cond.false324

cond.false311:                                    ; preds = %cond.true309
  br i1 false, label %land.lhs.true312, label %cond.false324

land.lhs.true312:                                 ; preds = %cond.false311, %cond.true310
  %112 = load i64, i64* %n, align 8, !tbaa !14
  %cmp313 = icmp eq i64 %112, -1
  br i1 %cmp313, label %cond.true315, label %cond.false324

cond.true315:                                     ; preds = %land.lhs.true312
  br i1 true, label %cond.true316, label %cond.false320

cond.true316:                                     ; preds = %cond.true315
  %113 = load i64, i64* %s.addr, align 8, !tbaa !14
  %add317 = add nsw i64 %113, 0
  %cmp318 = icmp slt i64 0, %add317
  br i1 %cmp318, label %cond.true332, label %cond.false338

cond.false320:                                    ; preds = %cond.true315
  %114 = load i64, i64* %s.addr, align 8, !tbaa !14
  %sub321 = sub nsw i64 %114, 1
  %cmp322 = icmp slt i64 -1, %sub321
  br i1 %cmp322, label %cond.true332, label %cond.false338

cond.false324:                                    ; preds = %land.lhs.true312, %cond.false311, %cond.true310
  %115 = load i64, i64* %n, align 8, !tbaa !14
  %div325 = sdiv i64 0, %115
  %116 = load i64, i64* %s.addr, align 8, !tbaa !14
  %cmp326 = icmp slt i64 %div325, %116
  br i1 %cmp326, label %cond.true332, label %cond.false338

cond.false328:                                    ; preds = %cond.false306
  %117 = load i64, i64* %s.addr, align 8, !tbaa !14
  %div329 = sdiv i64 65535, %117
  %118 = load i64, i64* %n, align 8, !tbaa !14
  %cmp330 = icmp slt i64 %div329, %118
  br i1 %cmp330, label %cond.true332, label %cond.false338

cond.true332:                                     ; preds = %cond.false328, %cond.false324, %cond.false320, %cond.true316, %cond.true305, %cond.false298, %land.lhs.true294, %cond.true287, %cond.end275, %cond.true260
  %119 = load i64, i64* %n, align 8, !tbaa !14
  %conv333 = trunc i64 %119 to i32
  %120 = load i64, i64* %s.addr, align 8, !tbaa !14
  %conv334 = trunc i64 %120 to i32
  %mul335 = mul i32 %conv333, %conv334
  %conv336 = trunc i32 %mul335 to i16
  %conv337 = zext i16 %conv336 to i64
  store i64 %conv337, i64* %nbytes, align 8, !tbaa !14
  br i1 true, label %cond.true847, label %cond.false848

cond.false338:                                    ; preds = %cond.false328, %cond.false324, %cond.false320, %cond.true316, %cond.true305, %cond.false298, %land.lhs.true294, %cond.false291, %cond.true287, %cond.end275, %cond.true260
  %121 = load i64, i64* %n, align 8, !tbaa !14
  %conv339 = trunc i64 %121 to i32
  %122 = load i64, i64* %s.addr, align 8, !tbaa !14
  %conv340 = trunc i64 %122 to i32
  %mul341 = mul i32 %conv339, %conv340
  %conv342 = trunc i32 %mul341 to i16
  %conv343 = zext i16 %conv342 to i64
  store i64 %conv343, i64* %nbytes, align 8, !tbaa !14
  br i1 false, label %cond.true847, label %cond.false848

cond.false344:                                    ; preds = %cond.false160
  br i1 false, label %cond.true345, label %cond.false524

cond.true345:                                     ; preds = %cond.false344
  br i1 true, label %cond.true346, label %cond.false435

cond.true346:                                     ; preds = %cond.true345
  %123 = load i64, i64* %s.addr, align 8, !tbaa !14
  %cmp347 = icmp slt i64 %123, 0
  br i1 %cmp347, label %cond.true349, label %cond.false395

cond.true349:                                     ; preds = %cond.true346
  %124 = load i64, i64* %n, align 8, !tbaa !14
  %cmp350 = icmp slt i64 %124, 0
  br i1 %cmp350, label %cond.true352, label %cond.false373

cond.true352:                                     ; preds = %cond.true349
  br i1 true, label %cond.true353, label %cond.false357

cond.true353:                                     ; preds = %cond.true352
  %125 = load i64, i64* %n, align 8, !tbaa !14
  %126 = load i64, i64* %s.addr, align 8, !tbaa !14
  %div354 = sdiv i64 2147483647, %126
  %cmp355 = icmp slt i64 %125, %div354
  br i1 %cmp355, label %cond.true425, label %cond.false430

cond.false357:                                    ; preds = %cond.true352
  br i1 true, label %cond.true358, label %cond.false361

cond.true358:                                     ; preds = %cond.false357
  %127 = load i64, i64* %s.addr, align 8, !tbaa !14
  %cmp359 = icmp slt i64 %127, -9223372036854775807
  br i1 %cmp359, label %cond.true364, label %cond.false365

cond.false361:                                    ; preds = %cond.false357
  %128 = load i64, i64* %s.addr, align 8, !tbaa !14
  %cmp362 = icmp slt i64 0, %128
  br i1 %cmp362, label %cond.true364, label %cond.false365

cond.true364:                                     ; preds = %cond.false361, %cond.true358
  br label %cond.end368

cond.false365:                                    ; preds = %cond.false361, %cond.true358
  %129 = load i64, i64* %s.addr, align 8, !tbaa !14
  %sub366 = sub nsw i64 0, %129
  %div367 = sdiv i64 2147483647, %sub366
  br label %cond.end368

cond.end368:                                      ; preds = %cond.false365, %cond.true364
  %cond369 = phi i64 [ 0, %cond.true364 ], [ %div367, %cond.false365 ]
  %130 = load i64, i64* %n, align 8, !tbaa !14
  %sub370 = sub nsw i64 -1, %130
  %cmp371 = icmp sle i64 %cond369, %sub370
  br i1 %cmp371, label %cond.true425, label %cond.false430

cond.false373:                                    ; preds = %cond.true349
  br i1 true, label %cond.true374, label %cond.false375

cond.true374:                                     ; preds = %cond.false373
  br i1 false, label %land.lhs.true376, label %cond.false391

cond.false375:                                    ; preds = %cond.false373
  br i1 false, label %land.lhs.true376, label %cond.false391

land.lhs.true376:                                 ; preds = %cond.false375, %cond.true374
  %131 = load i64, i64* %s.addr, align 8, !tbaa !14
  %cmp377 = icmp eq i64 %131, -1
  br i1 %cmp377, label %cond.true379, label %cond.false391

cond.true379:                                     ; preds = %land.lhs.true376
  br i1 true, label %cond.true380, label %cond.false384

cond.true380:                                     ; preds = %cond.true379
  %132 = load i64, i64* %n, align 8, !tbaa !14
  %add381 = add nsw i64 %132, -2147483648
  %cmp382 = icmp slt i64 0, %add381
  br i1 %cmp382, label %cond.true425, label %cond.false430

cond.false384:                                    ; preds = %cond.true379
  %133 = load i64, i64* %n, align 8, !tbaa !14
  %cmp385 = icmp slt i64 0, %133
  br i1 %cmp385, label %land.lhs.true387, label %cond.false430

land.lhs.true387:                                 ; preds = %cond.false384
  %134 = load i64, i64* %n, align 8, !tbaa !14
  %sub388 = sub nsw i64 %134, 1
  %cmp389 = icmp slt i64 2147483647, %sub388
  br i1 %cmp389, label %cond.true425, label %cond.false430

cond.false391:                                    ; preds = %land.lhs.true376, %cond.false375, %cond.true374
  %135 = load i64, i64* %s.addr, align 8, !tbaa !14
  %div392 = sdiv i64 -2147483648, %135
  %136 = load i64, i64* %n, align 8, !tbaa !14
  %cmp393 = icmp slt i64 %div392, %136
  br i1 %cmp393, label %cond.true425, label %cond.false430

cond.false395:                                    ; preds = %cond.true346
  %137 = load i64, i64* %s.addr, align 8, !tbaa !14
  %cmp396 = icmp eq i64 %137, 0
  br i1 %cmp396, label %cond.true398, label %cond.false399

cond.true398:                                     ; preds = %cond.false395
  br i1 false, label %cond.true425, label %cond.false430

cond.false399:                                    ; preds = %cond.false395
  %138 = load i64, i64* %n, align 8, !tbaa !14
  %cmp400 = icmp slt i64 %138, 0
  br i1 %cmp400, label %cond.true402, label %cond.false421

cond.true402:                                     ; preds = %cond.false399
  br i1 true, label %cond.true403, label %cond.false404

cond.true403:                                     ; preds = %cond.true402
  br i1 false, label %land.lhs.true405, label %cond.false417

cond.false404:                                    ; preds = %cond.true402
  br i1 false, label %land.lhs.true405, label %cond.false417

land.lhs.true405:                                 ; preds = %cond.false404, %cond.true403
  %139 = load i64, i64* %n, align 8, !tbaa !14
  %cmp406 = icmp eq i64 %139, -1
  br i1 %cmp406, label %cond.true408, label %cond.false417

cond.true408:                                     ; preds = %land.lhs.true405
  br i1 true, label %cond.true409, label %cond.false413

cond.true409:                                     ; preds = %cond.true408
  %140 = load i64, i64* %s.addr, align 8, !tbaa !14
  %add410 = add nsw i64 %140, -2147483648
  %cmp411 = icmp slt i64 0, %add410
  br i1 %cmp411, label %cond.true425, label %cond.false430

cond.false413:                                    ; preds = %cond.true408
  %141 = load i64, i64* %s.addr, align 8, !tbaa !14
  %sub414 = sub nsw i64 %141, 1
  %cmp415 = icmp slt i64 2147483647, %sub414
  br i1 %cmp415, label %cond.true425, label %cond.false430

cond.false417:                                    ; preds = %land.lhs.true405, %cond.false404, %cond.true403
  %142 = load i64, i64* %n, align 8, !tbaa !14
  %div418 = sdiv i64 -2147483648, %142
  %143 = load i64, i64* %s.addr, align 8, !tbaa !14
  %cmp419 = icmp slt i64 %div418, %143
  br i1 %cmp419, label %cond.true425, label %cond.false430

cond.false421:                                    ; preds = %cond.false399
  %144 = load i64, i64* %s.addr, align 8, !tbaa !14
  %div422 = sdiv i64 2147483647, %144
  %145 = load i64, i64* %n, align 8, !tbaa !14
  %cmp423 = icmp slt i64 %div422, %145
  br i1 %cmp423, label %cond.true425, label %cond.false430

cond.true425:                                     ; preds = %cond.false421, %cond.false417, %cond.false413, %cond.true409, %cond.true398, %cond.false391, %land.lhs.true387, %cond.true380, %cond.end368, %cond.true353
  %146 = load i64, i64* %n, align 8, !tbaa !14
  %conv426 = trunc i64 %146 to i32
  %147 = load i64, i64* %s.addr, align 8, !tbaa !14
  %conv427 = trunc i64 %147 to i32
  %mul428 = mul i32 %conv426, %conv427
  %conv429 = sext i32 %mul428 to i64
  store i64 %conv429, i64* %nbytes, align 8, !tbaa !14
  br i1 true, label %cond.true847, label %cond.false848

cond.false430:                                    ; preds = %cond.false421, %cond.false417, %cond.false413, %cond.true409, %cond.true398, %cond.false391, %land.lhs.true387, %cond.false384, %cond.true380, %cond.end368, %cond.true353
  %148 = load i64, i64* %n, align 8, !tbaa !14
  %conv431 = trunc i64 %148 to i32
  %149 = load i64, i64* %s.addr, align 8, !tbaa !14
  %conv432 = trunc i64 %149 to i32
  %mul433 = mul i32 %conv431, %conv432
  %conv434 = sext i32 %mul433 to i64
  store i64 %conv434, i64* %nbytes, align 8, !tbaa !14
  br i1 false, label %cond.true847, label %cond.false848

cond.false435:                                    ; preds = %cond.true345
  %150 = load i64, i64* %s.addr, align 8, !tbaa !14
  %cmp436 = icmp slt i64 %150, 0
  br i1 %cmp436, label %cond.true438, label %cond.false484

cond.true438:                                     ; preds = %cond.false435
  %151 = load i64, i64* %n, align 8, !tbaa !14
  %cmp439 = icmp slt i64 %151, 0
  br i1 %cmp439, label %cond.true441, label %cond.false462

cond.true441:                                     ; preds = %cond.true438
  br i1 true, label %cond.true442, label %cond.false446

cond.true442:                                     ; preds = %cond.true441
  %152 = load i64, i64* %n, align 8, !tbaa !14
  %153 = load i64, i64* %s.addr, align 8, !tbaa !14
  %div443 = sdiv i64 4294967295, %153
  %cmp444 = icmp slt i64 %152, %div443
  br i1 %cmp444, label %cond.true514, label %cond.false519

cond.false446:                                    ; preds = %cond.true441
  br i1 true, label %cond.true447, label %cond.false450

cond.true447:                                     ; preds = %cond.false446
  %154 = load i64, i64* %s.addr, align 8, !tbaa !14
  %cmp448 = icmp slt i64 %154, -9223372036854775807
  br i1 %cmp448, label %cond.true453, label %cond.false454

cond.false450:                                    ; preds = %cond.false446
  %155 = load i64, i64* %s.addr, align 8, !tbaa !14
  %cmp451 = icmp slt i64 0, %155
  br i1 %cmp451, label %cond.true453, label %cond.false454

cond.true453:                                     ; preds = %cond.false450, %cond.true447
  br label %cond.end457

cond.false454:                                    ; preds = %cond.false450, %cond.true447
  %156 = load i64, i64* %s.addr, align 8, !tbaa !14
  %sub455 = sub nsw i64 0, %156
  %div456 = sdiv i64 4294967295, %sub455
  br label %cond.end457

cond.end457:                                      ; preds = %cond.false454, %cond.true453
  %cond458 = phi i64 [ 0, %cond.true453 ], [ %div456, %cond.false454 ]
  %157 = load i64, i64* %n, align 8, !tbaa !14
  %sub459 = sub nsw i64 -1, %157
  %cmp460 = icmp sle i64 %cond458, %sub459
  br i1 %cmp460, label %cond.true514, label %cond.false519

cond.false462:                                    ; preds = %cond.true438
  br i1 true, label %cond.true463, label %cond.false464

cond.true463:                                     ; preds = %cond.false462
  br i1 false, label %land.lhs.true465, label %cond.false480

cond.false464:                                    ; preds = %cond.false462
  br i1 false, label %land.lhs.true465, label %cond.false480

land.lhs.true465:                                 ; preds = %cond.false464, %cond.true463
  %158 = load i64, i64* %s.addr, align 8, !tbaa !14
  %cmp466 = icmp eq i64 %158, -1
  br i1 %cmp466, label %cond.true468, label %cond.false480

cond.true468:                                     ; preds = %land.lhs.true465
  br i1 true, label %cond.true469, label %cond.false473

cond.true469:                                     ; preds = %cond.true468
  %159 = load i64, i64* %n, align 8, !tbaa !14
  %add470 = add nsw i64 %159, 0
  %cmp471 = icmp slt i64 0, %add470
  br i1 %cmp471, label %cond.true514, label %cond.false519

cond.false473:                                    ; preds = %cond.true468
  %160 = load i64, i64* %n, align 8, !tbaa !14
  %cmp474 = icmp slt i64 0, %160
  br i1 %cmp474, label %land.lhs.true476, label %cond.false519

land.lhs.true476:                                 ; preds = %cond.false473
  %161 = load i64, i64* %n, align 8, !tbaa !14
  %sub477 = sub nsw i64 %161, 1
  %cmp478 = icmp slt i64 -1, %sub477
  br i1 %cmp478, label %cond.true514, label %cond.false519

cond.false480:                                    ; preds = %land.lhs.true465, %cond.false464, %cond.true463
  %162 = load i64, i64* %s.addr, align 8, !tbaa !14
  %div481 = sdiv i64 0, %162
  %163 = load i64, i64* %n, align 8, !tbaa !14
  %cmp482 = icmp slt i64 %div481, %163
  br i1 %cmp482, label %cond.true514, label %cond.false519

cond.false484:                                    ; preds = %cond.false435
  %164 = load i64, i64* %s.addr, align 8, !tbaa !14
  %cmp485 = icmp eq i64 %164, 0
  br i1 %cmp485, label %cond.true487, label %cond.false488

cond.true487:                                     ; preds = %cond.false484
  br i1 false, label %cond.true514, label %cond.false519

cond.false488:                                    ; preds = %cond.false484
  %165 = load i64, i64* %n, align 8, !tbaa !14
  %cmp489 = icmp slt i64 %165, 0
  br i1 %cmp489, label %cond.true491, label %cond.false510

cond.true491:                                     ; preds = %cond.false488
  br i1 true, label %cond.true492, label %cond.false493

cond.true492:                                     ; preds = %cond.true491
  br i1 false, label %land.lhs.true494, label %cond.false506

cond.false493:                                    ; preds = %cond.true491
  br i1 false, label %land.lhs.true494, label %cond.false506

land.lhs.true494:                                 ; preds = %cond.false493, %cond.true492
  %166 = load i64, i64* %n, align 8, !tbaa !14
  %cmp495 = icmp eq i64 %166, -1
  br i1 %cmp495, label %cond.true497, label %cond.false506

cond.true497:                                     ; preds = %land.lhs.true494
  br i1 true, label %cond.true498, label %cond.false502

cond.true498:                                     ; preds = %cond.true497
  %167 = load i64, i64* %s.addr, align 8, !tbaa !14
  %add499 = add nsw i64 %167, 0
  %cmp500 = icmp slt i64 0, %add499
  br i1 %cmp500, label %cond.true514, label %cond.false519

cond.false502:                                    ; preds = %cond.true497
  %168 = load i64, i64* %s.addr, align 8, !tbaa !14
  %sub503 = sub nsw i64 %168, 1
  %cmp504 = icmp slt i64 -1, %sub503
  br i1 %cmp504, label %cond.true514, label %cond.false519

cond.false506:                                    ; preds = %land.lhs.true494, %cond.false493, %cond.true492
  %169 = load i64, i64* %n, align 8, !tbaa !14
  %div507 = sdiv i64 0, %169
  %170 = load i64, i64* %s.addr, align 8, !tbaa !14
  %cmp508 = icmp slt i64 %div507, %170
  br i1 %cmp508, label %cond.true514, label %cond.false519

cond.false510:                                    ; preds = %cond.false488
  %171 = load i64, i64* %s.addr, align 8, !tbaa !14
  %div511 = sdiv i64 4294967295, %171
  %172 = load i64, i64* %n, align 8, !tbaa !14
  %cmp512 = icmp slt i64 %div511, %172
  br i1 %cmp512, label %cond.true514, label %cond.false519

cond.true514:                                     ; preds = %cond.false510, %cond.false506, %cond.false502, %cond.true498, %cond.true487, %cond.false480, %land.lhs.true476, %cond.true469, %cond.end457, %cond.true442
  %173 = load i64, i64* %n, align 8, !tbaa !14
  %conv515 = trunc i64 %173 to i32
  %174 = load i64, i64* %s.addr, align 8, !tbaa !14
  %conv516 = trunc i64 %174 to i32
  %mul517 = mul i32 %conv515, %conv516
  %conv518 = zext i32 %mul517 to i64
  store i64 %conv518, i64* %nbytes, align 8, !tbaa !14
  br i1 true, label %cond.true847, label %cond.false848

cond.false519:                                    ; preds = %cond.false510, %cond.false506, %cond.false502, %cond.true498, %cond.true487, %cond.false480, %land.lhs.true476, %cond.false473, %cond.true469, %cond.end457, %cond.true442
  %175 = load i64, i64* %n, align 8, !tbaa !14
  %conv520 = trunc i64 %175 to i32
  %176 = load i64, i64* %s.addr, align 8, !tbaa !14
  %conv521 = trunc i64 %176 to i32
  %mul522 = mul i32 %conv520, %conv521
  %conv523 = zext i32 %mul522 to i64
  store i64 %conv523, i64* %nbytes, align 8, !tbaa !14
  br i1 false, label %cond.true847, label %cond.false848

cond.false524:                                    ; preds = %cond.false344
  br i1 true, label %cond.true525, label %cond.false686

cond.true525:                                     ; preds = %cond.false524
  br i1 true, label %cond.true526, label %cond.false603

cond.true526:                                     ; preds = %cond.true525
  %177 = load i64, i64* %s.addr, align 8, !tbaa !14
  %cmp527 = icmp slt i64 %177, 0
  br i1 %cmp527, label %cond.true529, label %cond.false572

cond.true529:                                     ; preds = %cond.true526
  %178 = load i64, i64* %n, align 8, !tbaa !14
  %cmp530 = icmp slt i64 %178, 0
  br i1 %cmp530, label %cond.true532, label %cond.false553

cond.true532:                                     ; preds = %cond.true529
  br i1 true, label %cond.true533, label %cond.false537

cond.true533:                                     ; preds = %cond.true532
  %179 = load i64, i64* %n, align 8, !tbaa !14
  %180 = load i64, i64* %s.addr, align 8, !tbaa !14
  %div534 = sdiv i64 9223372036854775807, %180
  %cmp535 = icmp slt i64 %179, %div534
  br i1 %cmp535, label %cond.true599, label %cond.false601

cond.false537:                                    ; preds = %cond.true532
  br i1 true, label %cond.true538, label %cond.false541

cond.true538:                                     ; preds = %cond.false537
  %181 = load i64, i64* %s.addr, align 8, !tbaa !14
  %cmp539 = icmp slt i64 %181, -9223372036854775807
  br i1 %cmp539, label %cond.true544, label %cond.false545

cond.false541:                                    ; preds = %cond.false537
  %182 = load i64, i64* %s.addr, align 8, !tbaa !14
  %cmp542 = icmp slt i64 0, %182
  br i1 %cmp542, label %cond.true544, label %cond.false545

cond.true544:                                     ; preds = %cond.false541, %cond.true538
  br label %cond.end548

cond.false545:                                    ; preds = %cond.false541, %cond.true538
  %183 = load i64, i64* %s.addr, align 8, !tbaa !14
  %sub546 = sub nsw i64 0, %183
  %div547 = sdiv i64 9223372036854775807, %sub546
  br label %cond.end548

cond.end548:                                      ; preds = %cond.false545, %cond.true544
  %cond549 = phi i64 [ 0, %cond.true544 ], [ %div547, %cond.false545 ]
  %184 = load i64, i64* %n, align 8, !tbaa !14
  %sub550 = sub nsw i64 -1, %184
  %cmp551 = icmp sle i64 %cond549, %sub550
  br i1 %cmp551, label %cond.true599, label %cond.false601

cond.false553:                                    ; preds = %cond.true529
  %185 = load i64, i64* %s.addr, align 8, !tbaa !14
  %cmp554 = icmp eq i64 %185, -1
  br i1 %cmp554, label %cond.true556, label %cond.false568

cond.true556:                                     ; preds = %cond.false553
  br i1 true, label %cond.true557, label %cond.false561

cond.true557:                                     ; preds = %cond.true556
  %186 = load i64, i64* %n, align 8, !tbaa !14
  %add558 = add nsw i64 %186, -9223372036854775808
  %cmp559 = icmp slt i64 0, %add558
  br i1 %cmp559, label %cond.true599, label %cond.false601

cond.false561:                                    ; preds = %cond.true556
  %187 = load i64, i64* %n, align 8, !tbaa !14
  %cmp562 = icmp slt i64 0, %187
  br i1 %cmp562, label %land.lhs.true564, label %cond.false601

land.lhs.true564:                                 ; preds = %cond.false561
  %188 = load i64, i64* %n, align 8, !tbaa !14
  %sub565 = sub nsw i64 %188, 1
  %cmp566 = icmp slt i64 9223372036854775807, %sub565
  br i1 %cmp566, label %cond.true599, label %cond.false601

cond.false568:                                    ; preds = %cond.false553
  %189 = load i64, i64* %s.addr, align 8, !tbaa !14
  %div569 = sdiv i64 -9223372036854775808, %189
  %190 = load i64, i64* %n, align 8, !tbaa !14
  %cmp570 = icmp slt i64 %div569, %190
  br i1 %cmp570, label %cond.true599, label %cond.false601

cond.false572:                                    ; preds = %cond.true526
  %191 = load i64, i64* %s.addr, align 8, !tbaa !14
  %cmp573 = icmp eq i64 %191, 0
  br i1 %cmp573, label %cond.true575, label %cond.false576

cond.true575:                                     ; preds = %cond.false572
  br i1 false, label %cond.true599, label %cond.false601

cond.false576:                                    ; preds = %cond.false572
  %192 = load i64, i64* %n, align 8, !tbaa !14
  %cmp577 = icmp slt i64 %192, 0
  br i1 %cmp577, label %cond.true579, label %cond.false595

cond.true579:                                     ; preds = %cond.false576
  %193 = load i64, i64* %n, align 8, !tbaa !14
  %cmp580 = icmp eq i64 %193, -1
  br i1 %cmp580, label %cond.true582, label %cond.false591

cond.true582:                                     ; preds = %cond.true579
  br i1 true, label %cond.true583, label %cond.false587

cond.true583:                                     ; preds = %cond.true582
  %194 = load i64, i64* %s.addr, align 8, !tbaa !14
  %add584 = add nsw i64 %194, -9223372036854775808
  %cmp585 = icmp slt i64 0, %add584
  br i1 %cmp585, label %cond.true599, label %cond.false601

cond.false587:                                    ; preds = %cond.true582
  %195 = load i64, i64* %s.addr, align 8, !tbaa !14
  %sub588 = sub nsw i64 %195, 1
  %cmp589 = icmp slt i64 9223372036854775807, %sub588
  br i1 %cmp589, label %cond.true599, label %cond.false601

cond.false591:                                    ; preds = %cond.true579
  %196 = load i64, i64* %n, align 8, !tbaa !14
  %div592 = sdiv i64 -9223372036854775808, %196
  %197 = load i64, i64* %s.addr, align 8, !tbaa !14
  %cmp593 = icmp slt i64 %div592, %197
  br i1 %cmp593, label %cond.true599, label %cond.false601

cond.false595:                                    ; preds = %cond.false576
  %198 = load i64, i64* %s.addr, align 8, !tbaa !14
  %div596 = sdiv i64 9223372036854775807, %198
  %199 = load i64, i64* %n, align 8, !tbaa !14
  %cmp597 = icmp slt i64 %div596, %199
  br i1 %cmp597, label %cond.true599, label %cond.false601

cond.true599:                                     ; preds = %cond.false595, %cond.false591, %cond.false587, %cond.true583, %cond.true575, %cond.false568, %land.lhs.true564, %cond.true557, %cond.end548, %cond.true533
  %200 = load i64, i64* %n, align 8, !tbaa !14
  %201 = load i64, i64* %s.addr, align 8, !tbaa !14
  %mul600 = mul i64 %200, %201
  store i64 %mul600, i64* %nbytes, align 8, !tbaa !14
  br i1 true, label %cond.true847, label %cond.false848

cond.false601:                                    ; preds = %cond.false595, %cond.false591, %cond.false587, %cond.true583, %cond.true575, %cond.false568, %land.lhs.true564, %cond.false561, %cond.true557, %cond.end548, %cond.true533
  %202 = load i64, i64* %n, align 8, !tbaa !14
  %203 = load i64, i64* %s.addr, align 8, !tbaa !14
  %mul602 = mul i64 %202, %203
  store i64 %mul602, i64* %nbytes, align 8, !tbaa !14
  br i1 false, label %cond.true847, label %cond.false848

cond.false603:                                    ; preds = %cond.true525
  %204 = load i64, i64* %s.addr, align 8, !tbaa !14
  %cmp604 = icmp slt i64 %204, 0
  br i1 %cmp604, label %cond.true606, label %cond.false652

cond.true606:                                     ; preds = %cond.false603
  %205 = load i64, i64* %n, align 8, !tbaa !14
  %cmp607 = icmp slt i64 %205, 0
  br i1 %cmp607, label %cond.true609, label %cond.false630

cond.true609:                                     ; preds = %cond.true606
  br i1 false, label %cond.true610, label %cond.false614

cond.true610:                                     ; preds = %cond.true609
  %206 = load i64, i64* %n, align 8, !tbaa !14
  %207 = load i64, i64* %s.addr, align 8, !tbaa !14
  %div611 = udiv i64 -1, %207
  %cmp612 = icmp ult i64 %206, %div611
  br i1 %cmp612, label %cond.true682, label %cond.false684

cond.false614:                                    ; preds = %cond.true609
  br i1 true, label %cond.true615, label %cond.false618

cond.true615:                                     ; preds = %cond.false614
  %208 = load i64, i64* %s.addr, align 8, !tbaa !14
  %cmp616 = icmp slt i64 %208, -9223372036854775807
  br i1 %cmp616, label %cond.true621, label %cond.false622

cond.false618:                                    ; preds = %cond.false614
  %209 = load i64, i64* %s.addr, align 8, !tbaa !14
  %cmp619 = icmp slt i64 0, %209
  br i1 %cmp619, label %cond.true621, label %cond.false622

cond.true621:                                     ; preds = %cond.false618, %cond.true615
  br label %cond.end625

cond.false622:                                    ; preds = %cond.false618, %cond.true615
  %210 = load i64, i64* %s.addr, align 8, !tbaa !14
  %sub623 = sub nsw i64 0, %210
  %div624 = udiv i64 -1, %sub623
  br label %cond.end625

cond.end625:                                      ; preds = %cond.false622, %cond.true621
  %cond626 = phi i64 [ 1, %cond.true621 ], [ %div624, %cond.false622 ]
  %211 = load i64, i64* %n, align 8, !tbaa !14
  %sub627 = sub nsw i64 -1, %211
  %cmp628 = icmp ule i64 %cond626, %sub627
  br i1 %cmp628, label %cond.true682, label %cond.false684

cond.false630:                                    ; preds = %cond.true606
  br i1 true, label %cond.true631, label %cond.false632

cond.true631:                                     ; preds = %cond.false630
  br i1 false, label %land.lhs.true633, label %cond.false648

cond.false632:                                    ; preds = %cond.false630
  br i1 false, label %land.lhs.true633, label %cond.false648

land.lhs.true633:                                 ; preds = %cond.false632, %cond.true631
  %212 = load i64, i64* %s.addr, align 8, !tbaa !14
  %cmp634 = icmp eq i64 %212, -1
  br i1 %cmp634, label %cond.true636, label %cond.false648

cond.true636:                                     ; preds = %land.lhs.true633
  br i1 true, label %cond.true637, label %cond.false641

cond.true637:                                     ; preds = %cond.true636
  %213 = load i64, i64* %n, align 8, !tbaa !14
  %add638 = add nsw i64 %213, 0
  %cmp639 = icmp slt i64 0, %add638
  br i1 %cmp639, label %cond.true682, label %cond.false684

cond.false641:                                    ; preds = %cond.true636
  %214 = load i64, i64* %n, align 8, !tbaa !14
  %cmp642 = icmp slt i64 0, %214
  br i1 %cmp642, label %land.lhs.true644, label %cond.false684

land.lhs.true644:                                 ; preds = %cond.false641
  %215 = load i64, i64* %n, align 8, !tbaa !14
  %sub645 = sub nsw i64 %215, 1
  %cmp646 = icmp slt i64 -1, %sub645
  br i1 %cmp646, label %cond.true682, label %cond.false684

cond.false648:                                    ; preds = %land.lhs.true633, %cond.false632, %cond.true631
  %216 = load i64, i64* %s.addr, align 8, !tbaa !14
  %div649 = sdiv i64 0, %216
  %217 = load i64, i64* %n, align 8, !tbaa !14
  %cmp650 = icmp slt i64 %div649, %217
  br i1 %cmp650, label %cond.true682, label %cond.false684

cond.false652:                                    ; preds = %cond.false603
  %218 = load i64, i64* %s.addr, align 8, !tbaa !14
  %cmp653 = icmp eq i64 %218, 0
  br i1 %cmp653, label %cond.true655, label %cond.false656

cond.true655:                                     ; preds = %cond.false652
  br i1 false, label %cond.true682, label %cond.false684

cond.false656:                                    ; preds = %cond.false652
  %219 = load i64, i64* %n, align 8, !tbaa !14
  %cmp657 = icmp slt i64 %219, 0
  br i1 %cmp657, label %cond.true659, label %cond.false678

cond.true659:                                     ; preds = %cond.false656
  br i1 true, label %cond.true660, label %cond.false661

cond.true660:                                     ; preds = %cond.true659
  br i1 false, label %land.lhs.true662, label %cond.false674

cond.false661:                                    ; preds = %cond.true659
  br i1 false, label %land.lhs.true662, label %cond.false674

land.lhs.true662:                                 ; preds = %cond.false661, %cond.true660
  %220 = load i64, i64* %n, align 8, !tbaa !14
  %cmp663 = icmp eq i64 %220, -1
  br i1 %cmp663, label %cond.true665, label %cond.false674

cond.true665:                                     ; preds = %land.lhs.true662
  br i1 true, label %cond.true666, label %cond.false670

cond.true666:                                     ; preds = %cond.true665
  %221 = load i64, i64* %s.addr, align 8, !tbaa !14
  %add667 = add nsw i64 %221, 0
  %cmp668 = icmp slt i64 0, %add667
  br i1 %cmp668, label %cond.true682, label %cond.false684

cond.false670:                                    ; preds = %cond.true665
  %222 = load i64, i64* %s.addr, align 8, !tbaa !14
  %sub671 = sub nsw i64 %222, 1
  %cmp672 = icmp slt i64 -1, %sub671
  br i1 %cmp672, label %cond.true682, label %cond.false684

cond.false674:                                    ; preds = %land.lhs.true662, %cond.false661, %cond.true660
  %223 = load i64, i64* %n, align 8, !tbaa !14
  %div675 = sdiv i64 0, %223
  %224 = load i64, i64* %s.addr, align 8, !tbaa !14
  %cmp676 = icmp slt i64 %div675, %224
  br i1 %cmp676, label %cond.true682, label %cond.false684

cond.false678:                                    ; preds = %cond.false656
  %225 = load i64, i64* %s.addr, align 8, !tbaa !14
  %div679 = udiv i64 -1, %225
  %226 = load i64, i64* %n, align 8, !tbaa !14
  %cmp680 = icmp ult i64 %div679, %226
  br i1 %cmp680, label %cond.true682, label %cond.false684

cond.true682:                                     ; preds = %cond.false678, %cond.false674, %cond.false670, %cond.true666, %cond.true655, %cond.false648, %land.lhs.true644, %cond.true637, %cond.end625, %cond.true610
  %227 = load i64, i64* %n, align 8, !tbaa !14
  %228 = load i64, i64* %s.addr, align 8, !tbaa !14
  %mul683 = mul i64 %227, %228
  store i64 %mul683, i64* %nbytes, align 8, !tbaa !14
  br i1 true, label %cond.true847, label %cond.false848

cond.false684:                                    ; preds = %cond.false678, %cond.false674, %cond.false670, %cond.true666, %cond.true655, %cond.false648, %land.lhs.true644, %cond.false641, %cond.true637, %cond.end625, %cond.true610
  %229 = load i64, i64* %n, align 8, !tbaa !14
  %230 = load i64, i64* %s.addr, align 8, !tbaa !14
  %mul685 = mul i64 %229, %230
  store i64 %mul685, i64* %nbytes, align 8, !tbaa !14
  br i1 false, label %cond.true847, label %cond.false848

cond.false686:                                    ; preds = %cond.false524
  br i1 true, label %cond.true687, label %cond.false764

cond.true687:                                     ; preds = %cond.false686
  %231 = load i64, i64* %s.addr, align 8, !tbaa !14
  %cmp688 = icmp slt i64 %231, 0
  br i1 %cmp688, label %cond.true690, label %cond.false733

cond.true690:                                     ; preds = %cond.true687
  %232 = load i64, i64* %n, align 8, !tbaa !14
  %cmp691 = icmp slt i64 %232, 0
  br i1 %cmp691, label %cond.true693, label %cond.false714

cond.true693:                                     ; preds = %cond.true690
  br i1 true, label %cond.true694, label %cond.false698

cond.true694:                                     ; preds = %cond.true693
  %233 = load i64, i64* %n, align 8, !tbaa !14
  %234 = load i64, i64* %s.addr, align 8, !tbaa !14
  %div695 = sdiv i64 9223372036854775807, %234
  %cmp696 = icmp slt i64 %233, %div695
  br i1 %cmp696, label %cond.true760, label %cond.false762

cond.false698:                                    ; preds = %cond.true693
  br i1 true, label %cond.true699, label %cond.false702

cond.true699:                                     ; preds = %cond.false698
  %235 = load i64, i64* %s.addr, align 8, !tbaa !14
  %cmp700 = icmp slt i64 %235, -9223372036854775807
  br i1 %cmp700, label %cond.true705, label %cond.false706

cond.false702:                                    ; preds = %cond.false698
  %236 = load i64, i64* %s.addr, align 8, !tbaa !14
  %cmp703 = icmp slt i64 0, %236
  br i1 %cmp703, label %cond.true705, label %cond.false706

cond.true705:                                     ; preds = %cond.false702, %cond.true699
  br label %cond.end709

cond.false706:                                    ; preds = %cond.false702, %cond.true699
  %237 = load i64, i64* %s.addr, align 8, !tbaa !14
  %sub707 = sub nsw i64 0, %237
  %div708 = sdiv i64 9223372036854775807, %sub707
  br label %cond.end709

cond.end709:                                      ; preds = %cond.false706, %cond.true705
  %cond710 = phi i64 [ 0, %cond.true705 ], [ %div708, %cond.false706 ]
  %238 = load i64, i64* %n, align 8, !tbaa !14
  %sub711 = sub nsw i64 -1, %238
  %cmp712 = icmp sle i64 %cond710, %sub711
  br i1 %cmp712, label %cond.true760, label %cond.false762

cond.false714:                                    ; preds = %cond.true690
  %239 = load i64, i64* %s.addr, align 8, !tbaa !14
  %cmp715 = icmp eq i64 %239, -1
  br i1 %cmp715, label %cond.true717, label %cond.false729

cond.true717:                                     ; preds = %cond.false714
  br i1 true, label %cond.true718, label %cond.false722

cond.true718:                                     ; preds = %cond.true717
  %240 = load i64, i64* %n, align 8, !tbaa !14
  %add719 = add nsw i64 %240, -9223372036854775808
  %cmp720 = icmp slt i64 0, %add719
  br i1 %cmp720, label %cond.true760, label %cond.false762

cond.false722:                                    ; preds = %cond.true717
  %241 = load i64, i64* %n, align 8, !tbaa !14
  %cmp723 = icmp slt i64 0, %241
  br i1 %cmp723, label %land.lhs.true725, label %cond.false762

land.lhs.true725:                                 ; preds = %cond.false722
  %242 = load i64, i64* %n, align 8, !tbaa !14
  %sub726 = sub nsw i64 %242, 1
  %cmp727 = icmp slt i64 9223372036854775807, %sub726
  br i1 %cmp727, label %cond.true760, label %cond.false762

cond.false729:                                    ; preds = %cond.false714
  %243 = load i64, i64* %s.addr, align 8, !tbaa !14
  %div730 = sdiv i64 -9223372036854775808, %243
  %244 = load i64, i64* %n, align 8, !tbaa !14
  %cmp731 = icmp slt i64 %div730, %244
  br i1 %cmp731, label %cond.true760, label %cond.false762

cond.false733:                                    ; preds = %cond.true687
  %245 = load i64, i64* %s.addr, align 8, !tbaa !14
  %cmp734 = icmp eq i64 %245, 0
  br i1 %cmp734, label %cond.true736, label %cond.false737

cond.true736:                                     ; preds = %cond.false733
  br i1 false, label %cond.true760, label %cond.false762

cond.false737:                                    ; preds = %cond.false733
  %246 = load i64, i64* %n, align 8, !tbaa !14
  %cmp738 = icmp slt i64 %246, 0
  br i1 %cmp738, label %cond.true740, label %cond.false756

cond.true740:                                     ; preds = %cond.false737
  %247 = load i64, i64* %n, align 8, !tbaa !14
  %cmp741 = icmp eq i64 %247, -1
  br i1 %cmp741, label %cond.true743, label %cond.false752

cond.true743:                                     ; preds = %cond.true740
  br i1 true, label %cond.true744, label %cond.false748

cond.true744:                                     ; preds = %cond.true743
  %248 = load i64, i64* %s.addr, align 8, !tbaa !14
  %add745 = add nsw i64 %248, -9223372036854775808
  %cmp746 = icmp slt i64 0, %add745
  br i1 %cmp746, label %cond.true760, label %cond.false762

cond.false748:                                    ; preds = %cond.true743
  %249 = load i64, i64* %s.addr, align 8, !tbaa !14
  %sub749 = sub nsw i64 %249, 1
  %cmp750 = icmp slt i64 9223372036854775807, %sub749
  br i1 %cmp750, label %cond.true760, label %cond.false762

cond.false752:                                    ; preds = %cond.true740
  %250 = load i64, i64* %n, align 8, !tbaa !14
  %div753 = sdiv i64 -9223372036854775808, %250
  %251 = load i64, i64* %s.addr, align 8, !tbaa !14
  %cmp754 = icmp slt i64 %div753, %251
  br i1 %cmp754, label %cond.true760, label %cond.false762

cond.false756:                                    ; preds = %cond.false737
  %252 = load i64, i64* %s.addr, align 8, !tbaa !14
  %div757 = sdiv i64 9223372036854775807, %252
  %253 = load i64, i64* %n, align 8, !tbaa !14
  %cmp758 = icmp slt i64 %div757, %253
  br i1 %cmp758, label %cond.true760, label %cond.false762

cond.true760:                                     ; preds = %cond.false756, %cond.false752, %cond.false748, %cond.true744, %cond.true736, %cond.false729, %land.lhs.true725, %cond.true718, %cond.end709, %cond.true694
  %254 = load i64, i64* %n, align 8, !tbaa !14
  %255 = load i64, i64* %s.addr, align 8, !tbaa !14
  %mul761 = mul i64 %254, %255
  store i64 %mul761, i64* %nbytes, align 8, !tbaa !14
  br i1 true, label %cond.true847, label %cond.false848

cond.false762:                                    ; preds = %cond.false756, %cond.false752, %cond.false748, %cond.true744, %cond.true736, %cond.false729, %land.lhs.true725, %cond.false722, %cond.true718, %cond.end709, %cond.true694
  %256 = load i64, i64* %n, align 8, !tbaa !14
  %257 = load i64, i64* %s.addr, align 8, !tbaa !14
  %mul763 = mul i64 %256, %257
  store i64 %mul763, i64* %nbytes, align 8, !tbaa !14
  br i1 false, label %cond.true847, label %cond.false848

cond.false764:                                    ; preds = %cond.false686
  %258 = load i64, i64* %s.addr, align 8, !tbaa !14
  %cmp765 = icmp slt i64 %258, 0
  br i1 %cmp765, label %cond.true767, label %cond.false813

cond.true767:                                     ; preds = %cond.false764
  %259 = load i64, i64* %n, align 8, !tbaa !14
  %cmp768 = icmp slt i64 %259, 0
  br i1 %cmp768, label %cond.true770, label %cond.false791

cond.true770:                                     ; preds = %cond.true767
  br i1 false, label %cond.true771, label %cond.false775

cond.true771:                                     ; preds = %cond.true770
  %260 = load i64, i64* %n, align 8, !tbaa !14
  %261 = load i64, i64* %s.addr, align 8, !tbaa !14
  %div772 = udiv i64 -1, %261
  %cmp773 = icmp ult i64 %260, %div772
  br i1 %cmp773, label %cond.true843, label %cond.false845

cond.false775:                                    ; preds = %cond.true770
  br i1 true, label %cond.true776, label %cond.false779

cond.true776:                                     ; preds = %cond.false775
  %262 = load i64, i64* %s.addr, align 8, !tbaa !14
  %cmp777 = icmp slt i64 %262, -9223372036854775807
  br i1 %cmp777, label %cond.true782, label %cond.false783

cond.false779:                                    ; preds = %cond.false775
  %263 = load i64, i64* %s.addr, align 8, !tbaa !14
  %cmp780 = icmp slt i64 0, %263
  br i1 %cmp780, label %cond.true782, label %cond.false783

cond.true782:                                     ; preds = %cond.false779, %cond.true776
  br label %cond.end786

cond.false783:                                    ; preds = %cond.false779, %cond.true776
  %264 = load i64, i64* %s.addr, align 8, !tbaa !14
  %sub784 = sub nsw i64 0, %264
  %div785 = udiv i64 -1, %sub784
  br label %cond.end786

cond.end786:                                      ; preds = %cond.false783, %cond.true782
  %cond787 = phi i64 [ 1, %cond.true782 ], [ %div785, %cond.false783 ]
  %265 = load i64, i64* %n, align 8, !tbaa !14
  %sub788 = sub nsw i64 -1, %265
  %cmp789 = icmp ule i64 %cond787, %sub788
  br i1 %cmp789, label %cond.true843, label %cond.false845

cond.false791:                                    ; preds = %cond.true767
  br i1 true, label %cond.true792, label %cond.false793

cond.true792:                                     ; preds = %cond.false791
  br i1 false, label %land.lhs.true794, label %cond.false809

cond.false793:                                    ; preds = %cond.false791
  br i1 false, label %land.lhs.true794, label %cond.false809

land.lhs.true794:                                 ; preds = %cond.false793, %cond.true792
  %266 = load i64, i64* %s.addr, align 8, !tbaa !14
  %cmp795 = icmp eq i64 %266, -1
  br i1 %cmp795, label %cond.true797, label %cond.false809

cond.true797:                                     ; preds = %land.lhs.true794
  br i1 true, label %cond.true798, label %cond.false802

cond.true798:                                     ; preds = %cond.true797
  %267 = load i64, i64* %n, align 8, !tbaa !14
  %add799 = add nsw i64 %267, 0
  %cmp800 = icmp slt i64 0, %add799
  br i1 %cmp800, label %cond.true843, label %cond.false845

cond.false802:                                    ; preds = %cond.true797
  %268 = load i64, i64* %n, align 8, !tbaa !14
  %cmp803 = icmp slt i64 0, %268
  br i1 %cmp803, label %land.lhs.true805, label %cond.false845

land.lhs.true805:                                 ; preds = %cond.false802
  %269 = load i64, i64* %n, align 8, !tbaa !14
  %sub806 = sub nsw i64 %269, 1
  %cmp807 = icmp slt i64 -1, %sub806
  br i1 %cmp807, label %cond.true843, label %cond.false845

cond.false809:                                    ; preds = %land.lhs.true794, %cond.false793, %cond.true792
  %270 = load i64, i64* %s.addr, align 8, !tbaa !14
  %div810 = sdiv i64 0, %270
  %271 = load i64, i64* %n, align 8, !tbaa !14
  %cmp811 = icmp slt i64 %div810, %271
  br i1 %cmp811, label %cond.true843, label %cond.false845

cond.false813:                                    ; preds = %cond.false764
  %272 = load i64, i64* %s.addr, align 8, !tbaa !14
  %cmp814 = icmp eq i64 %272, 0
  br i1 %cmp814, label %cond.true816, label %cond.false817

cond.true816:                                     ; preds = %cond.false813
  br i1 false, label %cond.true843, label %cond.false845

cond.false817:                                    ; preds = %cond.false813
  %273 = load i64, i64* %n, align 8, !tbaa !14
  %cmp818 = icmp slt i64 %273, 0
  br i1 %cmp818, label %cond.true820, label %cond.false839

cond.true820:                                     ; preds = %cond.false817
  br i1 true, label %cond.true821, label %cond.false822

cond.true821:                                     ; preds = %cond.true820
  br i1 false, label %land.lhs.true823, label %cond.false835

cond.false822:                                    ; preds = %cond.true820
  br i1 false, label %land.lhs.true823, label %cond.false835

land.lhs.true823:                                 ; preds = %cond.false822, %cond.true821
  %274 = load i64, i64* %n, align 8, !tbaa !14
  %cmp824 = icmp eq i64 %274, -1
  br i1 %cmp824, label %cond.true826, label %cond.false835

cond.true826:                                     ; preds = %land.lhs.true823
  br i1 true, label %cond.true827, label %cond.false831

cond.true827:                                     ; preds = %cond.true826
  %275 = load i64, i64* %s.addr, align 8, !tbaa !14
  %add828 = add nsw i64 %275, 0
  %cmp829 = icmp slt i64 0, %add828
  br i1 %cmp829, label %cond.true843, label %cond.false845

cond.false831:                                    ; preds = %cond.true826
  %276 = load i64, i64* %s.addr, align 8, !tbaa !14
  %sub832 = sub nsw i64 %276, 1
  %cmp833 = icmp slt i64 -1, %sub832
  br i1 %cmp833, label %cond.true843, label %cond.false845

cond.false835:                                    ; preds = %land.lhs.true823, %cond.false822, %cond.true821
  %277 = load i64, i64* %n, align 8, !tbaa !14
  %div836 = sdiv i64 0, %277
  %278 = load i64, i64* %s.addr, align 8, !tbaa !14
  %cmp837 = icmp slt i64 %div836, %278
  br i1 %cmp837, label %cond.true843, label %cond.false845

cond.false839:                                    ; preds = %cond.false817
  %279 = load i64, i64* %s.addr, align 8, !tbaa !14
  %div840 = udiv i64 -1, %279
  %280 = load i64, i64* %n, align 8, !tbaa !14
  %cmp841 = icmp ult i64 %div840, %280
  br i1 %cmp841, label %cond.true843, label %cond.false845

cond.true843:                                     ; preds = %cond.false839, %cond.false835, %cond.false831, %cond.true827, %cond.true816, %cond.false809, %land.lhs.true805, %cond.true798, %cond.end786, %cond.true771
  %281 = load i64, i64* %n, align 8, !tbaa !14
  %282 = load i64, i64* %s.addr, align 8, !tbaa !14
  %mul844 = mul i64 %281, %282
  store i64 %mul844, i64* %nbytes, align 8, !tbaa !14
  br i1 true, label %cond.true847, label %cond.false848

cond.false845:                                    ; preds = %cond.false839, %cond.false835, %cond.false831, %cond.true827, %cond.true816, %cond.false809, %land.lhs.true805, %cond.false802, %cond.true798, %cond.end786, %cond.true771
  %283 = load i64, i64* %n, align 8, !tbaa !14
  %284 = load i64, i64* %s.addr, align 8, !tbaa !14
  %mul846 = mul i64 %283, %284
  store i64 %mul846, i64* %nbytes, align 8, !tbaa !14
  br i1 false, label %cond.true847, label %cond.false848

cond.true847:                                     ; preds = %cond.false845, %cond.true843, %cond.false762, %cond.true760, %cond.false684, %cond.true682, %cond.false601, %cond.true599, %cond.false519, %cond.true514, %cond.false430, %cond.true425, %cond.false338, %cond.true332, %cond.false247, %cond.true241, %cond.false154, %cond.true148, %cond.false63, %cond.true59
  br label %cond.end853

cond.false848:                                    ; preds = %cond.false845, %cond.true843, %cond.false762, %cond.true760, %cond.false684, %cond.true682, %cond.false601, %cond.true599, %cond.false519, %cond.true514, %cond.false430, %cond.true425, %cond.false338, %cond.true332, %cond.false247, %cond.true241, %cond.false154, %cond.true148, %cond.false63, %cond.true59
  %285 = load i64, i64* %nbytes, align 8, !tbaa !14
  %cmp849 = icmp slt i64 %285, 128
  %286 = zext i1 %cmp849 to i64
  %cond851 = select i1 %cmp849, i32 128, i32 0
  %conv852 = sext i32 %cond851 to i64
  br label %cond.end853

cond.end853:                                      ; preds = %cond.false848, %cond.true847
  %cond854 = phi i64 [ 9223372036854775807, %cond.true847 ], [ %conv852, %cond.false848 ]
  store i64 %cond854, i64* %adjusted_nbytes, align 8, !tbaa !14
  %287 = load i64, i64* %adjusted_nbytes, align 8, !tbaa !14
  %tobool = icmp ne i64 %287, 0
  br i1 %tobool, label %if.then855, label %if.end858

if.then855:                                       ; preds = %cond.end853
  %288 = load i64, i64* %adjusted_nbytes, align 8, !tbaa !14
  %289 = load i64, i64* %s.addr, align 8, !tbaa !14
  %div856 = sdiv i64 %288, %289
  store i64 %div856, i64* %n, align 8, !tbaa !14
  %290 = load i64, i64* %adjusted_nbytes, align 8, !tbaa !14
  %291 = load i64, i64* %adjusted_nbytes, align 8, !tbaa !14
  %292 = load i64, i64* %s.addr, align 8, !tbaa !14
  %rem = srem i64 %291, %292
  %sub857 = sub nsw i64 %290, %rem
  store i64 %sub857, i64* %nbytes, align 8, !tbaa !14
  br label %if.end858

if.end858:                                        ; preds = %if.then855, %cond.end853
  %293 = load i8*, i8** %pa.addr, align 8, !tbaa !6
  %tobool859 = icmp ne i8* %293, null
  br i1 %tobool859, label %if.end861, label %if.then860

if.then860:                                       ; preds = %if.end858
  %294 = load i64*, i64** %pn.addr, align 8, !tbaa !6
  store i64 0, i64* %294, align 8, !tbaa !14
  br label %if.end861

if.end861:                                        ; preds = %if.then860, %if.end858
  %295 = load i64, i64* %n, align 8, !tbaa !14
  %296 = load i64, i64* %n0, align 8, !tbaa !14
  %sub862 = sub nsw i64 %295, %296
  %297 = load i64, i64* %n_incr_min.addr, align 8, !tbaa !14
  %cmp863 = icmp slt i64 %sub862, %297
  br i1 %cmp863, label %land.lhs.true865, label %if.end1744

land.lhs.true865:                                 ; preds = %if.end861
  %298 = load i64, i64* %n0, align 8, !tbaa !14
  %299 = load i64, i64* %n_incr_min.addr, align 8, !tbaa !14
  %300 = call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %298, i64 %299)
  %301 = extractvalue { i64, i1 } %300, 1
  %302 = extractvalue { i64, i1 } %300, 0
  store i64 %302, i64* %n, align 8
  br i1 %301, label %if.then1743, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true865
  %303 = load i64, i64* %n_max.addr, align 8, !tbaa !14
  %cmp867 = icmp sle i64 0, %303
  br i1 %cmp867, label %land.lhs.true869, label %lor.lhs.false872

land.lhs.true869:                                 ; preds = %lor.lhs.false
  %304 = load i64, i64* %n_max.addr, align 8, !tbaa !14
  %305 = load i64, i64* %n, align 8, !tbaa !14
  %cmp870 = icmp slt i64 %304, %305
  br i1 %cmp870, label %if.then1743, label %lor.lhs.false872

lor.lhs.false872:                                 ; preds = %land.lhs.true869, %lor.lhs.false
  br i1 false, label %cond.true873, label %cond.false1056

cond.true873:                                     ; preds = %lor.lhs.false872
  br i1 false, label %cond.false965, label %cond.true874

cond.true874:                                     ; preds = %cond.true873
  %306 = load i64, i64* %s.addr, align 8, !tbaa !14
  %cmp875 = icmp slt i64 %306, 0
  br i1 %cmp875, label %cond.true877, label %cond.false923

cond.true877:                                     ; preds = %cond.true874
  %307 = load i64, i64* %n, align 8, !tbaa !14
  %cmp878 = icmp slt i64 %307, 0
  br i1 %cmp878, label %cond.true880, label %cond.false901

cond.true880:                                     ; preds = %cond.true877
  br i1 true, label %cond.true881, label %cond.false885

cond.true881:                                     ; preds = %cond.true880
  %308 = load i64, i64* %n, align 8, !tbaa !14
  %309 = load i64, i64* %s.addr, align 8, !tbaa !14
  %div882 = sdiv i64 127, %309
  %cmp883 = icmp slt i64 %308, %div882
  br i1 %cmp883, label %cond.true953, label %cond.false959

cond.false885:                                    ; preds = %cond.true880
  br i1 true, label %cond.true886, label %cond.false889

cond.true886:                                     ; preds = %cond.false885
  %310 = load i64, i64* %s.addr, align 8, !tbaa !14
  %cmp887 = icmp slt i64 %310, -9223372036854775807
  br i1 %cmp887, label %cond.true892, label %cond.false893

cond.false889:                                    ; preds = %cond.false885
  %311 = load i64, i64* %s.addr, align 8, !tbaa !14
  %cmp890 = icmp slt i64 0, %311
  br i1 %cmp890, label %cond.true892, label %cond.false893

cond.true892:                                     ; preds = %cond.false889, %cond.true886
  br label %cond.end896

cond.false893:                                    ; preds = %cond.false889, %cond.true886
  %312 = load i64, i64* %s.addr, align 8, !tbaa !14
  %sub894 = sub nsw i64 0, %312
  %div895 = sdiv i64 127, %sub894
  br label %cond.end896

cond.end896:                                      ; preds = %cond.false893, %cond.true892
  %cond897 = phi i64 [ 0, %cond.true892 ], [ %div895, %cond.false893 ]
  %313 = load i64, i64* %n, align 8, !tbaa !14
  %sub898 = sub nsw i64 -1, %313
  %cmp899 = icmp sle i64 %cond897, %sub898
  br i1 %cmp899, label %cond.true953, label %cond.false959

cond.false901:                                    ; preds = %cond.true877
  br i1 true, label %cond.true902, label %cond.false903

cond.true902:                                     ; preds = %cond.false901
  br i1 false, label %land.lhs.true904, label %cond.false919

cond.false903:                                    ; preds = %cond.false901
  br i1 false, label %land.lhs.true904, label %cond.false919

land.lhs.true904:                                 ; preds = %cond.false903, %cond.true902
  %314 = load i64, i64* %s.addr, align 8, !tbaa !14
  %cmp905 = icmp eq i64 %314, -1
  br i1 %cmp905, label %cond.true907, label %cond.false919

cond.true907:                                     ; preds = %land.lhs.true904
  br i1 true, label %cond.true908, label %cond.false912

cond.true908:                                     ; preds = %cond.true907
  %315 = load i64, i64* %n, align 8, !tbaa !14
  %add909 = add nsw i64 %315, -128
  %cmp910 = icmp slt i64 0, %add909
  br i1 %cmp910, label %cond.true953, label %cond.false959

cond.false912:                                    ; preds = %cond.true907
  %316 = load i64, i64* %n, align 8, !tbaa !14
  %cmp913 = icmp slt i64 0, %316
  br i1 %cmp913, label %land.lhs.true915, label %cond.false959

land.lhs.true915:                                 ; preds = %cond.false912
  %317 = load i64, i64* %n, align 8, !tbaa !14
  %sub916 = sub nsw i64 %317, 1
  %cmp917 = icmp slt i64 127, %sub916
  br i1 %cmp917, label %cond.true953, label %cond.false959

cond.false919:                                    ; preds = %land.lhs.true904, %cond.false903, %cond.true902
  %318 = load i64, i64* %s.addr, align 8, !tbaa !14
  %div920 = sdiv i64 -128, %318
  %319 = load i64, i64* %n, align 8, !tbaa !14
  %cmp921 = icmp slt i64 %div920, %319
  br i1 %cmp921, label %cond.true953, label %cond.false959

cond.false923:                                    ; preds = %cond.true874
  %320 = load i64, i64* %s.addr, align 8, !tbaa !14
  %cmp924 = icmp eq i64 %320, 0
  br i1 %cmp924, label %cond.true926, label %cond.false927

cond.true926:                                     ; preds = %cond.false923
  br i1 false, label %cond.true953, label %cond.false959

cond.false927:                                    ; preds = %cond.false923
  %321 = load i64, i64* %n, align 8, !tbaa !14
  %cmp928 = icmp slt i64 %321, 0
  br i1 %cmp928, label %cond.true930, label %cond.false949

cond.true930:                                     ; preds = %cond.false927
  br i1 true, label %cond.true931, label %cond.false932

cond.true931:                                     ; preds = %cond.true930
  br i1 false, label %land.lhs.true933, label %cond.false945

cond.false932:                                    ; preds = %cond.true930
  br i1 false, label %land.lhs.true933, label %cond.false945

land.lhs.true933:                                 ; preds = %cond.false932, %cond.true931
  %322 = load i64, i64* %n, align 8, !tbaa !14
  %cmp934 = icmp eq i64 %322, -1
  br i1 %cmp934, label %cond.true936, label %cond.false945

cond.true936:                                     ; preds = %land.lhs.true933
  br i1 true, label %cond.true937, label %cond.false941

cond.true937:                                     ; preds = %cond.true936
  %323 = load i64, i64* %s.addr, align 8, !tbaa !14
  %add938 = add nsw i64 %323, -128
  %cmp939 = icmp slt i64 0, %add938
  br i1 %cmp939, label %cond.true953, label %cond.false959

cond.false941:                                    ; preds = %cond.true936
  %324 = load i64, i64* %s.addr, align 8, !tbaa !14
  %sub942 = sub nsw i64 %324, 1
  %cmp943 = icmp slt i64 127, %sub942
  br i1 %cmp943, label %cond.true953, label %cond.false959

cond.false945:                                    ; preds = %land.lhs.true933, %cond.false932, %cond.true931
  %325 = load i64, i64* %n, align 8, !tbaa !14
  %div946 = sdiv i64 -128, %325
  %326 = load i64, i64* %s.addr, align 8, !tbaa !14
  %cmp947 = icmp slt i64 %div946, %326
  br i1 %cmp947, label %cond.true953, label %cond.false959

cond.false949:                                    ; preds = %cond.false927
  %327 = load i64, i64* %s.addr, align 8, !tbaa !14
  %div950 = sdiv i64 127, %327
  %328 = load i64, i64* %n, align 8, !tbaa !14
  %cmp951 = icmp slt i64 %div950, %328
  br i1 %cmp951, label %cond.true953, label %cond.false959

cond.true953:                                     ; preds = %cond.false949, %cond.false945, %cond.false941, %cond.true937, %cond.true926, %cond.false919, %land.lhs.true915, %cond.true908, %cond.end896, %cond.true881
  %329 = load i64, i64* %n, align 8, !tbaa !14
  %conv954 = trunc i64 %329 to i32
  %330 = load i64, i64* %s.addr, align 8, !tbaa !14
  %conv955 = trunc i64 %330 to i32
  %mul956 = mul i32 %conv954, %conv955
  %conv957 = trunc i32 %mul956 to i8
  %conv958 = sext i8 %conv957 to i64
  store i64 %conv958, i64* %nbytes, align 8, !tbaa !14
  br i1 true, label %if.then1743, label %if.end1744

cond.false959:                                    ; preds = %cond.false949, %cond.false945, %cond.false941, %cond.true937, %cond.true926, %cond.false919, %land.lhs.true915, %cond.false912, %cond.true908, %cond.end896, %cond.true881
  %331 = load i64, i64* %n, align 8, !tbaa !14
  %conv960 = trunc i64 %331 to i32
  %332 = load i64, i64* %s.addr, align 8, !tbaa !14
  %conv961 = trunc i64 %332 to i32
  %mul962 = mul i32 %conv960, %conv961
  %conv963 = trunc i32 %mul962 to i8
  %conv964 = sext i8 %conv963 to i64
  store i64 %conv964, i64* %nbytes, align 8, !tbaa !14
  br i1 false, label %if.then1743, label %if.end1744

cond.false965:                                    ; preds = %cond.true873
  %333 = load i64, i64* %s.addr, align 8, !tbaa !14
  %cmp966 = icmp slt i64 %333, 0
  br i1 %cmp966, label %cond.true968, label %cond.false1014

cond.true968:                                     ; preds = %cond.false965
  %334 = load i64, i64* %n, align 8, !tbaa !14
  %cmp969 = icmp slt i64 %334, 0
  br i1 %cmp969, label %cond.true971, label %cond.false992

cond.true971:                                     ; preds = %cond.true968
  br i1 true, label %cond.true972, label %cond.false976

cond.true972:                                     ; preds = %cond.true971
  %335 = load i64, i64* %n, align 8, !tbaa !14
  %336 = load i64, i64* %s.addr, align 8, !tbaa !14
  %div973 = sdiv i64 255, %336
  %cmp974 = icmp slt i64 %335, %div973
  br i1 %cmp974, label %cond.true1044, label %cond.false1050

cond.false976:                                    ; preds = %cond.true971
  br i1 true, label %cond.true977, label %cond.false980

cond.true977:                                     ; preds = %cond.false976
  %337 = load i64, i64* %s.addr, align 8, !tbaa !14
  %cmp978 = icmp slt i64 %337, -9223372036854775807
  br i1 %cmp978, label %cond.true983, label %cond.false984

cond.false980:                                    ; preds = %cond.false976
  %338 = load i64, i64* %s.addr, align 8, !tbaa !14
  %cmp981 = icmp slt i64 0, %338
  br i1 %cmp981, label %cond.true983, label %cond.false984

cond.true983:                                     ; preds = %cond.false980, %cond.true977
  br label %cond.end987

cond.false984:                                    ; preds = %cond.false980, %cond.true977
  %339 = load i64, i64* %s.addr, align 8, !tbaa !14
  %sub985 = sub nsw i64 0, %339
  %div986 = sdiv i64 255, %sub985
  br label %cond.end987

cond.end987:                                      ; preds = %cond.false984, %cond.true983
  %cond988 = phi i64 [ 0, %cond.true983 ], [ %div986, %cond.false984 ]
  %340 = load i64, i64* %n, align 8, !tbaa !14
  %sub989 = sub nsw i64 -1, %340
  %cmp990 = icmp sle i64 %cond988, %sub989
  br i1 %cmp990, label %cond.true1044, label %cond.false1050

cond.false992:                                    ; preds = %cond.true968
  br i1 true, label %cond.true993, label %cond.false994

cond.true993:                                     ; preds = %cond.false992
  br i1 false, label %land.lhs.true995, label %cond.false1010

cond.false994:                                    ; preds = %cond.false992
  br i1 false, label %land.lhs.true995, label %cond.false1010

land.lhs.true995:                                 ; preds = %cond.false994, %cond.true993
  %341 = load i64, i64* %s.addr, align 8, !tbaa !14
  %cmp996 = icmp eq i64 %341, -1
  br i1 %cmp996, label %cond.true998, label %cond.false1010

cond.true998:                                     ; preds = %land.lhs.true995
  br i1 true, label %cond.true999, label %cond.false1003

cond.true999:                                     ; preds = %cond.true998
  %342 = load i64, i64* %n, align 8, !tbaa !14
  %add1000 = add nsw i64 %342, 0
  %cmp1001 = icmp slt i64 0, %add1000
  br i1 %cmp1001, label %cond.true1044, label %cond.false1050

cond.false1003:                                   ; preds = %cond.true998
  %343 = load i64, i64* %n, align 8, !tbaa !14
  %cmp1004 = icmp slt i64 0, %343
  br i1 %cmp1004, label %land.lhs.true1006, label %cond.false1050

land.lhs.true1006:                                ; preds = %cond.false1003
  %344 = load i64, i64* %n, align 8, !tbaa !14
  %sub1007 = sub nsw i64 %344, 1
  %cmp1008 = icmp slt i64 -1, %sub1007
  br i1 %cmp1008, label %cond.true1044, label %cond.false1050

cond.false1010:                                   ; preds = %land.lhs.true995, %cond.false994, %cond.true993
  %345 = load i64, i64* %s.addr, align 8, !tbaa !14
  %div1011 = sdiv i64 0, %345
  %346 = load i64, i64* %n, align 8, !tbaa !14
  %cmp1012 = icmp slt i64 %div1011, %346
  br i1 %cmp1012, label %cond.true1044, label %cond.false1050

cond.false1014:                                   ; preds = %cond.false965
  %347 = load i64, i64* %s.addr, align 8, !tbaa !14
  %cmp1015 = icmp eq i64 %347, 0
  br i1 %cmp1015, label %cond.true1017, label %cond.false1018

cond.true1017:                                    ; preds = %cond.false1014
  br i1 false, label %cond.true1044, label %cond.false1050

cond.false1018:                                   ; preds = %cond.false1014
  %348 = load i64, i64* %n, align 8, !tbaa !14
  %cmp1019 = icmp slt i64 %348, 0
  br i1 %cmp1019, label %cond.true1021, label %cond.false1040

cond.true1021:                                    ; preds = %cond.false1018
  br i1 true, label %cond.true1022, label %cond.false1023

cond.true1022:                                    ; preds = %cond.true1021
  br i1 false, label %land.lhs.true1024, label %cond.false1036

cond.false1023:                                   ; preds = %cond.true1021
  br i1 false, label %land.lhs.true1024, label %cond.false1036

land.lhs.true1024:                                ; preds = %cond.false1023, %cond.true1022
  %349 = load i64, i64* %n, align 8, !tbaa !14
  %cmp1025 = icmp eq i64 %349, -1
  br i1 %cmp1025, label %cond.true1027, label %cond.false1036

cond.true1027:                                    ; preds = %land.lhs.true1024
  br i1 true, label %cond.true1028, label %cond.false1032

cond.true1028:                                    ; preds = %cond.true1027
  %350 = load i64, i64* %s.addr, align 8, !tbaa !14
  %add1029 = add nsw i64 %350, 0
  %cmp1030 = icmp slt i64 0, %add1029
  br i1 %cmp1030, label %cond.true1044, label %cond.false1050

cond.false1032:                                   ; preds = %cond.true1027
  %351 = load i64, i64* %s.addr, align 8, !tbaa !14
  %sub1033 = sub nsw i64 %351, 1
  %cmp1034 = icmp slt i64 -1, %sub1033
  br i1 %cmp1034, label %cond.true1044, label %cond.false1050

cond.false1036:                                   ; preds = %land.lhs.true1024, %cond.false1023, %cond.true1022
  %352 = load i64, i64* %n, align 8, !tbaa !14
  %div1037 = sdiv i64 0, %352
  %353 = load i64, i64* %s.addr, align 8, !tbaa !14
  %cmp1038 = icmp slt i64 %div1037, %353
  br i1 %cmp1038, label %cond.true1044, label %cond.false1050

cond.false1040:                                   ; preds = %cond.false1018
  %354 = load i64, i64* %s.addr, align 8, !tbaa !14
  %div1041 = sdiv i64 255, %354
  %355 = load i64, i64* %n, align 8, !tbaa !14
  %cmp1042 = icmp slt i64 %div1041, %355
  br i1 %cmp1042, label %cond.true1044, label %cond.false1050

cond.true1044:                                    ; preds = %cond.false1040, %cond.false1036, %cond.false1032, %cond.true1028, %cond.true1017, %cond.false1010, %land.lhs.true1006, %cond.true999, %cond.end987, %cond.true972
  %356 = load i64, i64* %n, align 8, !tbaa !14
  %conv1045 = trunc i64 %356 to i32
  %357 = load i64, i64* %s.addr, align 8, !tbaa !14
  %conv1046 = trunc i64 %357 to i32
  %mul1047 = mul i32 %conv1045, %conv1046
  %conv1048 = trunc i32 %mul1047 to i8
  %conv1049 = zext i8 %conv1048 to i64
  store i64 %conv1049, i64* %nbytes, align 8, !tbaa !14
  br i1 true, label %if.then1743, label %if.end1744

cond.false1050:                                   ; preds = %cond.false1040, %cond.false1036, %cond.false1032, %cond.true1028, %cond.true1017, %cond.false1010, %land.lhs.true1006, %cond.false1003, %cond.true999, %cond.end987, %cond.true972
  %358 = load i64, i64* %n, align 8, !tbaa !14
  %conv1051 = trunc i64 %358 to i32
  %359 = load i64, i64* %s.addr, align 8, !tbaa !14
  %conv1052 = trunc i64 %359 to i32
  %mul1053 = mul i32 %conv1051, %conv1052
  %conv1054 = trunc i32 %mul1053 to i8
  %conv1055 = zext i8 %conv1054 to i64
  store i64 %conv1055, i64* %nbytes, align 8, !tbaa !14
  br i1 false, label %if.then1743, label %if.end1744

cond.false1056:                                   ; preds = %lor.lhs.false872
  br i1 false, label %cond.true1057, label %cond.false1240

cond.true1057:                                    ; preds = %cond.false1056
  br i1 false, label %cond.false1149, label %cond.true1058

cond.true1058:                                    ; preds = %cond.true1057
  %360 = load i64, i64* %s.addr, align 8, !tbaa !14
  %cmp1059 = icmp slt i64 %360, 0
  br i1 %cmp1059, label %cond.true1061, label %cond.false1107

cond.true1061:                                    ; preds = %cond.true1058
  %361 = load i64, i64* %n, align 8, !tbaa !14
  %cmp1062 = icmp slt i64 %361, 0
  br i1 %cmp1062, label %cond.true1064, label %cond.false1085

cond.true1064:                                    ; preds = %cond.true1061
  br i1 true, label %cond.true1065, label %cond.false1069

cond.true1065:                                    ; preds = %cond.true1064
  %362 = load i64, i64* %n, align 8, !tbaa !14
  %363 = load i64, i64* %s.addr, align 8, !tbaa !14
  %div1066 = sdiv i64 32767, %363
  %cmp1067 = icmp slt i64 %362, %div1066
  br i1 %cmp1067, label %cond.true1137, label %cond.false1143

cond.false1069:                                   ; preds = %cond.true1064
  br i1 true, label %cond.true1070, label %cond.false1073

cond.true1070:                                    ; preds = %cond.false1069
  %364 = load i64, i64* %s.addr, align 8, !tbaa !14
  %cmp1071 = icmp slt i64 %364, -9223372036854775807
  br i1 %cmp1071, label %cond.true1076, label %cond.false1077

cond.false1073:                                   ; preds = %cond.false1069
  %365 = load i64, i64* %s.addr, align 8, !tbaa !14
  %cmp1074 = icmp slt i64 0, %365
  br i1 %cmp1074, label %cond.true1076, label %cond.false1077

cond.true1076:                                    ; preds = %cond.false1073, %cond.true1070
  br label %cond.end1080

cond.false1077:                                   ; preds = %cond.false1073, %cond.true1070
  %366 = load i64, i64* %s.addr, align 8, !tbaa !14
  %sub1078 = sub nsw i64 0, %366
  %div1079 = sdiv i64 32767, %sub1078
  br label %cond.end1080

cond.end1080:                                     ; preds = %cond.false1077, %cond.true1076
  %cond1081 = phi i64 [ 0, %cond.true1076 ], [ %div1079, %cond.false1077 ]
  %367 = load i64, i64* %n, align 8, !tbaa !14
  %sub1082 = sub nsw i64 -1, %367
  %cmp1083 = icmp sle i64 %cond1081, %sub1082
  br i1 %cmp1083, label %cond.true1137, label %cond.false1143

cond.false1085:                                   ; preds = %cond.true1061
  br i1 true, label %cond.true1086, label %cond.false1087

cond.true1086:                                    ; preds = %cond.false1085
  br i1 false, label %land.lhs.true1088, label %cond.false1103

cond.false1087:                                   ; preds = %cond.false1085
  br i1 false, label %land.lhs.true1088, label %cond.false1103

land.lhs.true1088:                                ; preds = %cond.false1087, %cond.true1086
  %368 = load i64, i64* %s.addr, align 8, !tbaa !14
  %cmp1089 = icmp eq i64 %368, -1
  br i1 %cmp1089, label %cond.true1091, label %cond.false1103

cond.true1091:                                    ; preds = %land.lhs.true1088
  br i1 true, label %cond.true1092, label %cond.false1096

cond.true1092:                                    ; preds = %cond.true1091
  %369 = load i64, i64* %n, align 8, !tbaa !14
  %add1093 = add nsw i64 %369, -32768
  %cmp1094 = icmp slt i64 0, %add1093
  br i1 %cmp1094, label %cond.true1137, label %cond.false1143

cond.false1096:                                   ; preds = %cond.true1091
  %370 = load i64, i64* %n, align 8, !tbaa !14
  %cmp1097 = icmp slt i64 0, %370
  br i1 %cmp1097, label %land.lhs.true1099, label %cond.false1143

land.lhs.true1099:                                ; preds = %cond.false1096
  %371 = load i64, i64* %n, align 8, !tbaa !14
  %sub1100 = sub nsw i64 %371, 1
  %cmp1101 = icmp slt i64 32767, %sub1100
  br i1 %cmp1101, label %cond.true1137, label %cond.false1143

cond.false1103:                                   ; preds = %land.lhs.true1088, %cond.false1087, %cond.true1086
  %372 = load i64, i64* %s.addr, align 8, !tbaa !14
  %div1104 = sdiv i64 -32768, %372
  %373 = load i64, i64* %n, align 8, !tbaa !14
  %cmp1105 = icmp slt i64 %div1104, %373
  br i1 %cmp1105, label %cond.true1137, label %cond.false1143

cond.false1107:                                   ; preds = %cond.true1058
  %374 = load i64, i64* %s.addr, align 8, !tbaa !14
  %cmp1108 = icmp eq i64 %374, 0
  br i1 %cmp1108, label %cond.true1110, label %cond.false1111

cond.true1110:                                    ; preds = %cond.false1107
  br i1 false, label %cond.true1137, label %cond.false1143

cond.false1111:                                   ; preds = %cond.false1107
  %375 = load i64, i64* %n, align 8, !tbaa !14
  %cmp1112 = icmp slt i64 %375, 0
  br i1 %cmp1112, label %cond.true1114, label %cond.false1133

cond.true1114:                                    ; preds = %cond.false1111
  br i1 true, label %cond.true1115, label %cond.false1116

cond.true1115:                                    ; preds = %cond.true1114
  br i1 false, label %land.lhs.true1117, label %cond.false1129

cond.false1116:                                   ; preds = %cond.true1114
  br i1 false, label %land.lhs.true1117, label %cond.false1129

land.lhs.true1117:                                ; preds = %cond.false1116, %cond.true1115
  %376 = load i64, i64* %n, align 8, !tbaa !14
  %cmp1118 = icmp eq i64 %376, -1
  br i1 %cmp1118, label %cond.true1120, label %cond.false1129

cond.true1120:                                    ; preds = %land.lhs.true1117
  br i1 true, label %cond.true1121, label %cond.false1125

cond.true1121:                                    ; preds = %cond.true1120
  %377 = load i64, i64* %s.addr, align 8, !tbaa !14
  %add1122 = add nsw i64 %377, -32768
  %cmp1123 = icmp slt i64 0, %add1122
  br i1 %cmp1123, label %cond.true1137, label %cond.false1143

cond.false1125:                                   ; preds = %cond.true1120
  %378 = load i64, i64* %s.addr, align 8, !tbaa !14
  %sub1126 = sub nsw i64 %378, 1
  %cmp1127 = icmp slt i64 32767, %sub1126
  br i1 %cmp1127, label %cond.true1137, label %cond.false1143

cond.false1129:                                   ; preds = %land.lhs.true1117, %cond.false1116, %cond.true1115
  %379 = load i64, i64* %n, align 8, !tbaa !14
  %div1130 = sdiv i64 -32768, %379
  %380 = load i64, i64* %s.addr, align 8, !tbaa !14
  %cmp1131 = icmp slt i64 %div1130, %380
  br i1 %cmp1131, label %cond.true1137, label %cond.false1143

cond.false1133:                                   ; preds = %cond.false1111
  %381 = load i64, i64* %s.addr, align 8, !tbaa !14
  %div1134 = sdiv i64 32767, %381
  %382 = load i64, i64* %n, align 8, !tbaa !14
  %cmp1135 = icmp slt i64 %div1134, %382
  br i1 %cmp1135, label %cond.true1137, label %cond.false1143

cond.true1137:                                    ; preds = %cond.false1133, %cond.false1129, %cond.false1125, %cond.true1121, %cond.true1110, %cond.false1103, %land.lhs.true1099, %cond.true1092, %cond.end1080, %cond.true1065
  %383 = load i64, i64* %n, align 8, !tbaa !14
  %conv1138 = trunc i64 %383 to i32
  %384 = load i64, i64* %s.addr, align 8, !tbaa !14
  %conv1139 = trunc i64 %384 to i32
  %mul1140 = mul i32 %conv1138, %conv1139
  %conv1141 = trunc i32 %mul1140 to i16
  %conv1142 = sext i16 %conv1141 to i64
  store i64 %conv1142, i64* %nbytes, align 8, !tbaa !14
  br i1 true, label %if.then1743, label %if.end1744

cond.false1143:                                   ; preds = %cond.false1133, %cond.false1129, %cond.false1125, %cond.true1121, %cond.true1110, %cond.false1103, %land.lhs.true1099, %cond.false1096, %cond.true1092, %cond.end1080, %cond.true1065
  %385 = load i64, i64* %n, align 8, !tbaa !14
  %conv1144 = trunc i64 %385 to i32
  %386 = load i64, i64* %s.addr, align 8, !tbaa !14
  %conv1145 = trunc i64 %386 to i32
  %mul1146 = mul i32 %conv1144, %conv1145
  %conv1147 = trunc i32 %mul1146 to i16
  %conv1148 = sext i16 %conv1147 to i64
  store i64 %conv1148, i64* %nbytes, align 8, !tbaa !14
  br i1 false, label %if.then1743, label %if.end1744

cond.false1149:                                   ; preds = %cond.true1057
  %387 = load i64, i64* %s.addr, align 8, !tbaa !14
  %cmp1150 = icmp slt i64 %387, 0
  br i1 %cmp1150, label %cond.true1152, label %cond.false1198

cond.true1152:                                    ; preds = %cond.false1149
  %388 = load i64, i64* %n, align 8, !tbaa !14
  %cmp1153 = icmp slt i64 %388, 0
  br i1 %cmp1153, label %cond.true1155, label %cond.false1176

cond.true1155:                                    ; preds = %cond.true1152
  br i1 true, label %cond.true1156, label %cond.false1160

cond.true1156:                                    ; preds = %cond.true1155
  %389 = load i64, i64* %n, align 8, !tbaa !14
  %390 = load i64, i64* %s.addr, align 8, !tbaa !14
  %div1157 = sdiv i64 65535, %390
  %cmp1158 = icmp slt i64 %389, %div1157
  br i1 %cmp1158, label %cond.true1228, label %cond.false1234

cond.false1160:                                   ; preds = %cond.true1155
  br i1 true, label %cond.true1161, label %cond.false1164

cond.true1161:                                    ; preds = %cond.false1160
  %391 = load i64, i64* %s.addr, align 8, !tbaa !14
  %cmp1162 = icmp slt i64 %391, -9223372036854775807
  br i1 %cmp1162, label %cond.true1167, label %cond.false1168

cond.false1164:                                   ; preds = %cond.false1160
  %392 = load i64, i64* %s.addr, align 8, !tbaa !14
  %cmp1165 = icmp slt i64 0, %392
  br i1 %cmp1165, label %cond.true1167, label %cond.false1168

cond.true1167:                                    ; preds = %cond.false1164, %cond.true1161
  br label %cond.end1171

cond.false1168:                                   ; preds = %cond.false1164, %cond.true1161
  %393 = load i64, i64* %s.addr, align 8, !tbaa !14
  %sub1169 = sub nsw i64 0, %393
  %div1170 = sdiv i64 65535, %sub1169
  br label %cond.end1171

cond.end1171:                                     ; preds = %cond.false1168, %cond.true1167
  %cond1172 = phi i64 [ 0, %cond.true1167 ], [ %div1170, %cond.false1168 ]
  %394 = load i64, i64* %n, align 8, !tbaa !14
  %sub1173 = sub nsw i64 -1, %394
  %cmp1174 = icmp sle i64 %cond1172, %sub1173
  br i1 %cmp1174, label %cond.true1228, label %cond.false1234

cond.false1176:                                   ; preds = %cond.true1152
  br i1 true, label %cond.true1177, label %cond.false1178

cond.true1177:                                    ; preds = %cond.false1176
  br i1 false, label %land.lhs.true1179, label %cond.false1194

cond.false1178:                                   ; preds = %cond.false1176
  br i1 false, label %land.lhs.true1179, label %cond.false1194

land.lhs.true1179:                                ; preds = %cond.false1178, %cond.true1177
  %395 = load i64, i64* %s.addr, align 8, !tbaa !14
  %cmp1180 = icmp eq i64 %395, -1
  br i1 %cmp1180, label %cond.true1182, label %cond.false1194

cond.true1182:                                    ; preds = %land.lhs.true1179
  br i1 true, label %cond.true1183, label %cond.false1187

cond.true1183:                                    ; preds = %cond.true1182
  %396 = load i64, i64* %n, align 8, !tbaa !14
  %add1184 = add nsw i64 %396, 0
  %cmp1185 = icmp slt i64 0, %add1184
  br i1 %cmp1185, label %cond.true1228, label %cond.false1234

cond.false1187:                                   ; preds = %cond.true1182
  %397 = load i64, i64* %n, align 8, !tbaa !14
  %cmp1188 = icmp slt i64 0, %397
  br i1 %cmp1188, label %land.lhs.true1190, label %cond.false1234

land.lhs.true1190:                                ; preds = %cond.false1187
  %398 = load i64, i64* %n, align 8, !tbaa !14
  %sub1191 = sub nsw i64 %398, 1
  %cmp1192 = icmp slt i64 -1, %sub1191
  br i1 %cmp1192, label %cond.true1228, label %cond.false1234

cond.false1194:                                   ; preds = %land.lhs.true1179, %cond.false1178, %cond.true1177
  %399 = load i64, i64* %s.addr, align 8, !tbaa !14
  %div1195 = sdiv i64 0, %399
  %400 = load i64, i64* %n, align 8, !tbaa !14
  %cmp1196 = icmp slt i64 %div1195, %400
  br i1 %cmp1196, label %cond.true1228, label %cond.false1234

cond.false1198:                                   ; preds = %cond.false1149
  %401 = load i64, i64* %s.addr, align 8, !tbaa !14
  %cmp1199 = icmp eq i64 %401, 0
  br i1 %cmp1199, label %cond.true1201, label %cond.false1202

cond.true1201:                                    ; preds = %cond.false1198
  br i1 false, label %cond.true1228, label %cond.false1234

cond.false1202:                                   ; preds = %cond.false1198
  %402 = load i64, i64* %n, align 8, !tbaa !14
  %cmp1203 = icmp slt i64 %402, 0
  br i1 %cmp1203, label %cond.true1205, label %cond.false1224

cond.true1205:                                    ; preds = %cond.false1202
  br i1 true, label %cond.true1206, label %cond.false1207

cond.true1206:                                    ; preds = %cond.true1205
  br i1 false, label %land.lhs.true1208, label %cond.false1220

cond.false1207:                                   ; preds = %cond.true1205
  br i1 false, label %land.lhs.true1208, label %cond.false1220

land.lhs.true1208:                                ; preds = %cond.false1207, %cond.true1206
  %403 = load i64, i64* %n, align 8, !tbaa !14
  %cmp1209 = icmp eq i64 %403, -1
  br i1 %cmp1209, label %cond.true1211, label %cond.false1220

cond.true1211:                                    ; preds = %land.lhs.true1208
  br i1 true, label %cond.true1212, label %cond.false1216

cond.true1212:                                    ; preds = %cond.true1211
  %404 = load i64, i64* %s.addr, align 8, !tbaa !14
  %add1213 = add nsw i64 %404, 0
  %cmp1214 = icmp slt i64 0, %add1213
  br i1 %cmp1214, label %cond.true1228, label %cond.false1234

cond.false1216:                                   ; preds = %cond.true1211
  %405 = load i64, i64* %s.addr, align 8, !tbaa !14
  %sub1217 = sub nsw i64 %405, 1
  %cmp1218 = icmp slt i64 -1, %sub1217
  br i1 %cmp1218, label %cond.true1228, label %cond.false1234

cond.false1220:                                   ; preds = %land.lhs.true1208, %cond.false1207, %cond.true1206
  %406 = load i64, i64* %n, align 8, !tbaa !14
  %div1221 = sdiv i64 0, %406
  %407 = load i64, i64* %s.addr, align 8, !tbaa !14
  %cmp1222 = icmp slt i64 %div1221, %407
  br i1 %cmp1222, label %cond.true1228, label %cond.false1234

cond.false1224:                                   ; preds = %cond.false1202
  %408 = load i64, i64* %s.addr, align 8, !tbaa !14
  %div1225 = sdiv i64 65535, %408
  %409 = load i64, i64* %n, align 8, !tbaa !14
  %cmp1226 = icmp slt i64 %div1225, %409
  br i1 %cmp1226, label %cond.true1228, label %cond.false1234

cond.true1228:                                    ; preds = %cond.false1224, %cond.false1220, %cond.false1216, %cond.true1212, %cond.true1201, %cond.false1194, %land.lhs.true1190, %cond.true1183, %cond.end1171, %cond.true1156
  %410 = load i64, i64* %n, align 8, !tbaa !14
  %conv1229 = trunc i64 %410 to i32
  %411 = load i64, i64* %s.addr, align 8, !tbaa !14
  %conv1230 = trunc i64 %411 to i32
  %mul1231 = mul i32 %conv1229, %conv1230
  %conv1232 = trunc i32 %mul1231 to i16
  %conv1233 = zext i16 %conv1232 to i64
  store i64 %conv1233, i64* %nbytes, align 8, !tbaa !14
  br i1 true, label %if.then1743, label %if.end1744

cond.false1234:                                   ; preds = %cond.false1224, %cond.false1220, %cond.false1216, %cond.true1212, %cond.true1201, %cond.false1194, %land.lhs.true1190, %cond.false1187, %cond.true1183, %cond.end1171, %cond.true1156
  %412 = load i64, i64* %n, align 8, !tbaa !14
  %conv1235 = trunc i64 %412 to i32
  %413 = load i64, i64* %s.addr, align 8, !tbaa !14
  %conv1236 = trunc i64 %413 to i32
  %mul1237 = mul i32 %conv1235, %conv1236
  %conv1238 = trunc i32 %mul1237 to i16
  %conv1239 = zext i16 %conv1238 to i64
  store i64 %conv1239, i64* %nbytes, align 8, !tbaa !14
  br i1 false, label %if.then1743, label %if.end1744

cond.false1240:                                   ; preds = %cond.false1056
  br i1 false, label %cond.true1241, label %cond.false1420

cond.true1241:                                    ; preds = %cond.false1240
  br i1 true, label %cond.true1242, label %cond.false1331

cond.true1242:                                    ; preds = %cond.true1241
  %414 = load i64, i64* %s.addr, align 8, !tbaa !14
  %cmp1243 = icmp slt i64 %414, 0
  br i1 %cmp1243, label %cond.true1245, label %cond.false1291

cond.true1245:                                    ; preds = %cond.true1242
  %415 = load i64, i64* %n, align 8, !tbaa !14
  %cmp1246 = icmp slt i64 %415, 0
  br i1 %cmp1246, label %cond.true1248, label %cond.false1269

cond.true1248:                                    ; preds = %cond.true1245
  br i1 true, label %cond.true1249, label %cond.false1253

cond.true1249:                                    ; preds = %cond.true1248
  %416 = load i64, i64* %n, align 8, !tbaa !14
  %417 = load i64, i64* %s.addr, align 8, !tbaa !14
  %div1250 = sdiv i64 2147483647, %417
  %cmp1251 = icmp slt i64 %416, %div1250
  br i1 %cmp1251, label %cond.true1321, label %cond.false1326

cond.false1253:                                   ; preds = %cond.true1248
  br i1 true, label %cond.true1254, label %cond.false1257

cond.true1254:                                    ; preds = %cond.false1253
  %418 = load i64, i64* %s.addr, align 8, !tbaa !14
  %cmp1255 = icmp slt i64 %418, -9223372036854775807
  br i1 %cmp1255, label %cond.true1260, label %cond.false1261

cond.false1257:                                   ; preds = %cond.false1253
  %419 = load i64, i64* %s.addr, align 8, !tbaa !14
  %cmp1258 = icmp slt i64 0, %419
  br i1 %cmp1258, label %cond.true1260, label %cond.false1261

cond.true1260:                                    ; preds = %cond.false1257, %cond.true1254
  br label %cond.end1264

cond.false1261:                                   ; preds = %cond.false1257, %cond.true1254
  %420 = load i64, i64* %s.addr, align 8, !tbaa !14
  %sub1262 = sub nsw i64 0, %420
  %div1263 = sdiv i64 2147483647, %sub1262
  br label %cond.end1264

cond.end1264:                                     ; preds = %cond.false1261, %cond.true1260
  %cond1265 = phi i64 [ 0, %cond.true1260 ], [ %div1263, %cond.false1261 ]
  %421 = load i64, i64* %n, align 8, !tbaa !14
  %sub1266 = sub nsw i64 -1, %421
  %cmp1267 = icmp sle i64 %cond1265, %sub1266
  br i1 %cmp1267, label %cond.true1321, label %cond.false1326

cond.false1269:                                   ; preds = %cond.true1245
  br i1 true, label %cond.true1270, label %cond.false1271

cond.true1270:                                    ; preds = %cond.false1269
  br i1 false, label %land.lhs.true1272, label %cond.false1287

cond.false1271:                                   ; preds = %cond.false1269
  br i1 false, label %land.lhs.true1272, label %cond.false1287

land.lhs.true1272:                                ; preds = %cond.false1271, %cond.true1270
  %422 = load i64, i64* %s.addr, align 8, !tbaa !14
  %cmp1273 = icmp eq i64 %422, -1
  br i1 %cmp1273, label %cond.true1275, label %cond.false1287

cond.true1275:                                    ; preds = %land.lhs.true1272
  br i1 true, label %cond.true1276, label %cond.false1280

cond.true1276:                                    ; preds = %cond.true1275
  %423 = load i64, i64* %n, align 8, !tbaa !14
  %add1277 = add nsw i64 %423, -2147483648
  %cmp1278 = icmp slt i64 0, %add1277
  br i1 %cmp1278, label %cond.true1321, label %cond.false1326

cond.false1280:                                   ; preds = %cond.true1275
  %424 = load i64, i64* %n, align 8, !tbaa !14
  %cmp1281 = icmp slt i64 0, %424
  br i1 %cmp1281, label %land.lhs.true1283, label %cond.false1326

land.lhs.true1283:                                ; preds = %cond.false1280
  %425 = load i64, i64* %n, align 8, !tbaa !14
  %sub1284 = sub nsw i64 %425, 1
  %cmp1285 = icmp slt i64 2147483647, %sub1284
  br i1 %cmp1285, label %cond.true1321, label %cond.false1326

cond.false1287:                                   ; preds = %land.lhs.true1272, %cond.false1271, %cond.true1270
  %426 = load i64, i64* %s.addr, align 8, !tbaa !14
  %div1288 = sdiv i64 -2147483648, %426
  %427 = load i64, i64* %n, align 8, !tbaa !14
  %cmp1289 = icmp slt i64 %div1288, %427
  br i1 %cmp1289, label %cond.true1321, label %cond.false1326

cond.false1291:                                   ; preds = %cond.true1242
  %428 = load i64, i64* %s.addr, align 8, !tbaa !14
  %cmp1292 = icmp eq i64 %428, 0
  br i1 %cmp1292, label %cond.true1294, label %cond.false1295

cond.true1294:                                    ; preds = %cond.false1291
  br i1 false, label %cond.true1321, label %cond.false1326

cond.false1295:                                   ; preds = %cond.false1291
  %429 = load i64, i64* %n, align 8, !tbaa !14
  %cmp1296 = icmp slt i64 %429, 0
  br i1 %cmp1296, label %cond.true1298, label %cond.false1317

cond.true1298:                                    ; preds = %cond.false1295
  br i1 true, label %cond.true1299, label %cond.false1300

cond.true1299:                                    ; preds = %cond.true1298
  br i1 false, label %land.lhs.true1301, label %cond.false1313

cond.false1300:                                   ; preds = %cond.true1298
  br i1 false, label %land.lhs.true1301, label %cond.false1313

land.lhs.true1301:                                ; preds = %cond.false1300, %cond.true1299
  %430 = load i64, i64* %n, align 8, !tbaa !14
  %cmp1302 = icmp eq i64 %430, -1
  br i1 %cmp1302, label %cond.true1304, label %cond.false1313

cond.true1304:                                    ; preds = %land.lhs.true1301
  br i1 true, label %cond.true1305, label %cond.false1309

cond.true1305:                                    ; preds = %cond.true1304
  %431 = load i64, i64* %s.addr, align 8, !tbaa !14
  %add1306 = add nsw i64 %431, -2147483648
  %cmp1307 = icmp slt i64 0, %add1306
  br i1 %cmp1307, label %cond.true1321, label %cond.false1326

cond.false1309:                                   ; preds = %cond.true1304
  %432 = load i64, i64* %s.addr, align 8, !tbaa !14
  %sub1310 = sub nsw i64 %432, 1
  %cmp1311 = icmp slt i64 2147483647, %sub1310
  br i1 %cmp1311, label %cond.true1321, label %cond.false1326

cond.false1313:                                   ; preds = %land.lhs.true1301, %cond.false1300, %cond.true1299
  %433 = load i64, i64* %n, align 8, !tbaa !14
  %div1314 = sdiv i64 -2147483648, %433
  %434 = load i64, i64* %s.addr, align 8, !tbaa !14
  %cmp1315 = icmp slt i64 %div1314, %434
  br i1 %cmp1315, label %cond.true1321, label %cond.false1326

cond.false1317:                                   ; preds = %cond.false1295
  %435 = load i64, i64* %s.addr, align 8, !tbaa !14
  %div1318 = sdiv i64 2147483647, %435
  %436 = load i64, i64* %n, align 8, !tbaa !14
  %cmp1319 = icmp slt i64 %div1318, %436
  br i1 %cmp1319, label %cond.true1321, label %cond.false1326

cond.true1321:                                    ; preds = %cond.false1317, %cond.false1313, %cond.false1309, %cond.true1305, %cond.true1294, %cond.false1287, %land.lhs.true1283, %cond.true1276, %cond.end1264, %cond.true1249
  %437 = load i64, i64* %n, align 8, !tbaa !14
  %conv1322 = trunc i64 %437 to i32
  %438 = load i64, i64* %s.addr, align 8, !tbaa !14
  %conv1323 = trunc i64 %438 to i32
  %mul1324 = mul i32 %conv1322, %conv1323
  %conv1325 = sext i32 %mul1324 to i64
  store i64 %conv1325, i64* %nbytes, align 8, !tbaa !14
  br i1 true, label %if.then1743, label %if.end1744

cond.false1326:                                   ; preds = %cond.false1317, %cond.false1313, %cond.false1309, %cond.true1305, %cond.true1294, %cond.false1287, %land.lhs.true1283, %cond.false1280, %cond.true1276, %cond.end1264, %cond.true1249
  %439 = load i64, i64* %n, align 8, !tbaa !14
  %conv1327 = trunc i64 %439 to i32
  %440 = load i64, i64* %s.addr, align 8, !tbaa !14
  %conv1328 = trunc i64 %440 to i32
  %mul1329 = mul i32 %conv1327, %conv1328
  %conv1330 = sext i32 %mul1329 to i64
  store i64 %conv1330, i64* %nbytes, align 8, !tbaa !14
  br i1 false, label %if.then1743, label %if.end1744

cond.false1331:                                   ; preds = %cond.true1241
  %441 = load i64, i64* %s.addr, align 8, !tbaa !14
  %cmp1332 = icmp slt i64 %441, 0
  br i1 %cmp1332, label %cond.true1334, label %cond.false1380

cond.true1334:                                    ; preds = %cond.false1331
  %442 = load i64, i64* %n, align 8, !tbaa !14
  %cmp1335 = icmp slt i64 %442, 0
  br i1 %cmp1335, label %cond.true1337, label %cond.false1358

cond.true1337:                                    ; preds = %cond.true1334
  br i1 true, label %cond.true1338, label %cond.false1342

cond.true1338:                                    ; preds = %cond.true1337
  %443 = load i64, i64* %n, align 8, !tbaa !14
  %444 = load i64, i64* %s.addr, align 8, !tbaa !14
  %div1339 = sdiv i64 4294967295, %444
  %cmp1340 = icmp slt i64 %443, %div1339
  br i1 %cmp1340, label %cond.true1410, label %cond.false1415

cond.false1342:                                   ; preds = %cond.true1337
  br i1 true, label %cond.true1343, label %cond.false1346

cond.true1343:                                    ; preds = %cond.false1342
  %445 = load i64, i64* %s.addr, align 8, !tbaa !14
  %cmp1344 = icmp slt i64 %445, -9223372036854775807
  br i1 %cmp1344, label %cond.true1349, label %cond.false1350

cond.false1346:                                   ; preds = %cond.false1342
  %446 = load i64, i64* %s.addr, align 8, !tbaa !14
  %cmp1347 = icmp slt i64 0, %446
  br i1 %cmp1347, label %cond.true1349, label %cond.false1350

cond.true1349:                                    ; preds = %cond.false1346, %cond.true1343
  br label %cond.end1353

cond.false1350:                                   ; preds = %cond.false1346, %cond.true1343
  %447 = load i64, i64* %s.addr, align 8, !tbaa !14
  %sub1351 = sub nsw i64 0, %447
  %div1352 = sdiv i64 4294967295, %sub1351
  br label %cond.end1353

cond.end1353:                                     ; preds = %cond.false1350, %cond.true1349
  %cond1354 = phi i64 [ 0, %cond.true1349 ], [ %div1352, %cond.false1350 ]
  %448 = load i64, i64* %n, align 8, !tbaa !14
  %sub1355 = sub nsw i64 -1, %448
  %cmp1356 = icmp sle i64 %cond1354, %sub1355
  br i1 %cmp1356, label %cond.true1410, label %cond.false1415

cond.false1358:                                   ; preds = %cond.true1334
  br i1 true, label %cond.true1359, label %cond.false1360

cond.true1359:                                    ; preds = %cond.false1358
  br i1 false, label %land.lhs.true1361, label %cond.false1376

cond.false1360:                                   ; preds = %cond.false1358
  br i1 false, label %land.lhs.true1361, label %cond.false1376

land.lhs.true1361:                                ; preds = %cond.false1360, %cond.true1359
  %449 = load i64, i64* %s.addr, align 8, !tbaa !14
  %cmp1362 = icmp eq i64 %449, -1
  br i1 %cmp1362, label %cond.true1364, label %cond.false1376

cond.true1364:                                    ; preds = %land.lhs.true1361
  br i1 true, label %cond.true1365, label %cond.false1369

cond.true1365:                                    ; preds = %cond.true1364
  %450 = load i64, i64* %n, align 8, !tbaa !14
  %add1366 = add nsw i64 %450, 0
  %cmp1367 = icmp slt i64 0, %add1366
  br i1 %cmp1367, label %cond.true1410, label %cond.false1415

cond.false1369:                                   ; preds = %cond.true1364
  %451 = load i64, i64* %n, align 8, !tbaa !14
  %cmp1370 = icmp slt i64 0, %451
  br i1 %cmp1370, label %land.lhs.true1372, label %cond.false1415

land.lhs.true1372:                                ; preds = %cond.false1369
  %452 = load i64, i64* %n, align 8, !tbaa !14
  %sub1373 = sub nsw i64 %452, 1
  %cmp1374 = icmp slt i64 -1, %sub1373
  br i1 %cmp1374, label %cond.true1410, label %cond.false1415

cond.false1376:                                   ; preds = %land.lhs.true1361, %cond.false1360, %cond.true1359
  %453 = load i64, i64* %s.addr, align 8, !tbaa !14
  %div1377 = sdiv i64 0, %453
  %454 = load i64, i64* %n, align 8, !tbaa !14
  %cmp1378 = icmp slt i64 %div1377, %454
  br i1 %cmp1378, label %cond.true1410, label %cond.false1415

cond.false1380:                                   ; preds = %cond.false1331
  %455 = load i64, i64* %s.addr, align 8, !tbaa !14
  %cmp1381 = icmp eq i64 %455, 0
  br i1 %cmp1381, label %cond.true1383, label %cond.false1384

cond.true1383:                                    ; preds = %cond.false1380
  br i1 false, label %cond.true1410, label %cond.false1415

cond.false1384:                                   ; preds = %cond.false1380
  %456 = load i64, i64* %n, align 8, !tbaa !14
  %cmp1385 = icmp slt i64 %456, 0
  br i1 %cmp1385, label %cond.true1387, label %cond.false1406

cond.true1387:                                    ; preds = %cond.false1384
  br i1 true, label %cond.true1388, label %cond.false1389

cond.true1388:                                    ; preds = %cond.true1387
  br i1 false, label %land.lhs.true1390, label %cond.false1402

cond.false1389:                                   ; preds = %cond.true1387
  br i1 false, label %land.lhs.true1390, label %cond.false1402

land.lhs.true1390:                                ; preds = %cond.false1389, %cond.true1388
  %457 = load i64, i64* %n, align 8, !tbaa !14
  %cmp1391 = icmp eq i64 %457, -1
  br i1 %cmp1391, label %cond.true1393, label %cond.false1402

cond.true1393:                                    ; preds = %land.lhs.true1390
  br i1 true, label %cond.true1394, label %cond.false1398

cond.true1394:                                    ; preds = %cond.true1393
  %458 = load i64, i64* %s.addr, align 8, !tbaa !14
  %add1395 = add nsw i64 %458, 0
  %cmp1396 = icmp slt i64 0, %add1395
  br i1 %cmp1396, label %cond.true1410, label %cond.false1415

cond.false1398:                                   ; preds = %cond.true1393
  %459 = load i64, i64* %s.addr, align 8, !tbaa !14
  %sub1399 = sub nsw i64 %459, 1
  %cmp1400 = icmp slt i64 -1, %sub1399
  br i1 %cmp1400, label %cond.true1410, label %cond.false1415

cond.false1402:                                   ; preds = %land.lhs.true1390, %cond.false1389, %cond.true1388
  %460 = load i64, i64* %n, align 8, !tbaa !14
  %div1403 = sdiv i64 0, %460
  %461 = load i64, i64* %s.addr, align 8, !tbaa !14
  %cmp1404 = icmp slt i64 %div1403, %461
  br i1 %cmp1404, label %cond.true1410, label %cond.false1415

cond.false1406:                                   ; preds = %cond.false1384
  %462 = load i64, i64* %s.addr, align 8, !tbaa !14
  %div1407 = sdiv i64 4294967295, %462
  %463 = load i64, i64* %n, align 8, !tbaa !14
  %cmp1408 = icmp slt i64 %div1407, %463
  br i1 %cmp1408, label %cond.true1410, label %cond.false1415

cond.true1410:                                    ; preds = %cond.false1406, %cond.false1402, %cond.false1398, %cond.true1394, %cond.true1383, %cond.false1376, %land.lhs.true1372, %cond.true1365, %cond.end1353, %cond.true1338
  %464 = load i64, i64* %n, align 8, !tbaa !14
  %conv1411 = trunc i64 %464 to i32
  %465 = load i64, i64* %s.addr, align 8, !tbaa !14
  %conv1412 = trunc i64 %465 to i32
  %mul1413 = mul i32 %conv1411, %conv1412
  %conv1414 = zext i32 %mul1413 to i64
  store i64 %conv1414, i64* %nbytes, align 8, !tbaa !14
  br i1 true, label %if.then1743, label %if.end1744

cond.false1415:                                   ; preds = %cond.false1406, %cond.false1402, %cond.false1398, %cond.true1394, %cond.true1383, %cond.false1376, %land.lhs.true1372, %cond.false1369, %cond.true1365, %cond.end1353, %cond.true1338
  %466 = load i64, i64* %n, align 8, !tbaa !14
  %conv1416 = trunc i64 %466 to i32
  %467 = load i64, i64* %s.addr, align 8, !tbaa !14
  %conv1417 = trunc i64 %467 to i32
  %mul1418 = mul i32 %conv1416, %conv1417
  %conv1419 = zext i32 %mul1418 to i64
  store i64 %conv1419, i64* %nbytes, align 8, !tbaa !14
  br i1 false, label %if.then1743, label %if.end1744

cond.false1420:                                   ; preds = %cond.false1240
  br i1 true, label %cond.true1421, label %cond.false1582

cond.true1421:                                    ; preds = %cond.false1420
  br i1 true, label %cond.true1422, label %cond.false1499

cond.true1422:                                    ; preds = %cond.true1421
  %468 = load i64, i64* %s.addr, align 8, !tbaa !14
  %cmp1423 = icmp slt i64 %468, 0
  br i1 %cmp1423, label %cond.true1425, label %cond.false1468

cond.true1425:                                    ; preds = %cond.true1422
  %469 = load i64, i64* %n, align 8, !tbaa !14
  %cmp1426 = icmp slt i64 %469, 0
  br i1 %cmp1426, label %cond.true1428, label %cond.false1449

cond.true1428:                                    ; preds = %cond.true1425
  br i1 true, label %cond.true1429, label %cond.false1433

cond.true1429:                                    ; preds = %cond.true1428
  %470 = load i64, i64* %n, align 8, !tbaa !14
  %471 = load i64, i64* %s.addr, align 8, !tbaa !14
  %div1430 = sdiv i64 9223372036854775807, %471
  %cmp1431 = icmp slt i64 %470, %div1430
  br i1 %cmp1431, label %cond.true1495, label %cond.false1497

cond.false1433:                                   ; preds = %cond.true1428
  br i1 true, label %cond.true1434, label %cond.false1437

cond.true1434:                                    ; preds = %cond.false1433
  %472 = load i64, i64* %s.addr, align 8, !tbaa !14
  %cmp1435 = icmp slt i64 %472, -9223372036854775807
  br i1 %cmp1435, label %cond.true1440, label %cond.false1441

cond.false1437:                                   ; preds = %cond.false1433
  %473 = load i64, i64* %s.addr, align 8, !tbaa !14
  %cmp1438 = icmp slt i64 0, %473
  br i1 %cmp1438, label %cond.true1440, label %cond.false1441

cond.true1440:                                    ; preds = %cond.false1437, %cond.true1434
  br label %cond.end1444

cond.false1441:                                   ; preds = %cond.false1437, %cond.true1434
  %474 = load i64, i64* %s.addr, align 8, !tbaa !14
  %sub1442 = sub nsw i64 0, %474
  %div1443 = sdiv i64 9223372036854775807, %sub1442
  br label %cond.end1444

cond.end1444:                                     ; preds = %cond.false1441, %cond.true1440
  %cond1445 = phi i64 [ 0, %cond.true1440 ], [ %div1443, %cond.false1441 ]
  %475 = load i64, i64* %n, align 8, !tbaa !14
  %sub1446 = sub nsw i64 -1, %475
  %cmp1447 = icmp sle i64 %cond1445, %sub1446
  br i1 %cmp1447, label %cond.true1495, label %cond.false1497

cond.false1449:                                   ; preds = %cond.true1425
  %476 = load i64, i64* %s.addr, align 8, !tbaa !14
  %cmp1450 = icmp eq i64 %476, -1
  br i1 %cmp1450, label %cond.true1452, label %cond.false1464

cond.true1452:                                    ; preds = %cond.false1449
  br i1 true, label %cond.true1453, label %cond.false1457

cond.true1453:                                    ; preds = %cond.true1452
  %477 = load i64, i64* %n, align 8, !tbaa !14
  %add1454 = add nsw i64 %477, -9223372036854775808
  %cmp1455 = icmp slt i64 0, %add1454
  br i1 %cmp1455, label %cond.true1495, label %cond.false1497

cond.false1457:                                   ; preds = %cond.true1452
  %478 = load i64, i64* %n, align 8, !tbaa !14
  %cmp1458 = icmp slt i64 0, %478
  br i1 %cmp1458, label %land.lhs.true1460, label %cond.false1497

land.lhs.true1460:                                ; preds = %cond.false1457
  %479 = load i64, i64* %n, align 8, !tbaa !14
  %sub1461 = sub nsw i64 %479, 1
  %cmp1462 = icmp slt i64 9223372036854775807, %sub1461
  br i1 %cmp1462, label %cond.true1495, label %cond.false1497

cond.false1464:                                   ; preds = %cond.false1449
  %480 = load i64, i64* %s.addr, align 8, !tbaa !14
  %div1465 = sdiv i64 -9223372036854775808, %480
  %481 = load i64, i64* %n, align 8, !tbaa !14
  %cmp1466 = icmp slt i64 %div1465, %481
  br i1 %cmp1466, label %cond.true1495, label %cond.false1497

cond.false1468:                                   ; preds = %cond.true1422
  %482 = load i64, i64* %s.addr, align 8, !tbaa !14
  %cmp1469 = icmp eq i64 %482, 0
  br i1 %cmp1469, label %cond.true1471, label %cond.false1472

cond.true1471:                                    ; preds = %cond.false1468
  br i1 false, label %cond.true1495, label %cond.false1497

cond.false1472:                                   ; preds = %cond.false1468
  %483 = load i64, i64* %n, align 8, !tbaa !14
  %cmp1473 = icmp slt i64 %483, 0
  br i1 %cmp1473, label %cond.true1475, label %cond.false1491

cond.true1475:                                    ; preds = %cond.false1472
  %484 = load i64, i64* %n, align 8, !tbaa !14
  %cmp1476 = icmp eq i64 %484, -1
  br i1 %cmp1476, label %cond.true1478, label %cond.false1487

cond.true1478:                                    ; preds = %cond.true1475
  br i1 true, label %cond.true1479, label %cond.false1483

cond.true1479:                                    ; preds = %cond.true1478
  %485 = load i64, i64* %s.addr, align 8, !tbaa !14
  %add1480 = add nsw i64 %485, -9223372036854775808
  %cmp1481 = icmp slt i64 0, %add1480
  br i1 %cmp1481, label %cond.true1495, label %cond.false1497

cond.false1483:                                   ; preds = %cond.true1478
  %486 = load i64, i64* %s.addr, align 8, !tbaa !14
  %sub1484 = sub nsw i64 %486, 1
  %cmp1485 = icmp slt i64 9223372036854775807, %sub1484
  br i1 %cmp1485, label %cond.true1495, label %cond.false1497

cond.false1487:                                   ; preds = %cond.true1475
  %487 = load i64, i64* %n, align 8, !tbaa !14
  %div1488 = sdiv i64 -9223372036854775808, %487
  %488 = load i64, i64* %s.addr, align 8, !tbaa !14
  %cmp1489 = icmp slt i64 %div1488, %488
  br i1 %cmp1489, label %cond.true1495, label %cond.false1497

cond.false1491:                                   ; preds = %cond.false1472
  %489 = load i64, i64* %s.addr, align 8, !tbaa !14
  %div1492 = sdiv i64 9223372036854775807, %489
  %490 = load i64, i64* %n, align 8, !tbaa !14
  %cmp1493 = icmp slt i64 %div1492, %490
  br i1 %cmp1493, label %cond.true1495, label %cond.false1497

cond.true1495:                                    ; preds = %cond.false1491, %cond.false1487, %cond.false1483, %cond.true1479, %cond.true1471, %cond.false1464, %land.lhs.true1460, %cond.true1453, %cond.end1444, %cond.true1429
  %491 = load i64, i64* %n, align 8, !tbaa !14
  %492 = load i64, i64* %s.addr, align 8, !tbaa !14
  %mul1496 = mul i64 %491, %492
  store i64 %mul1496, i64* %nbytes, align 8, !tbaa !14
  br i1 true, label %if.then1743, label %if.end1744

cond.false1497:                                   ; preds = %cond.false1491, %cond.false1487, %cond.false1483, %cond.true1479, %cond.true1471, %cond.false1464, %land.lhs.true1460, %cond.false1457, %cond.true1453, %cond.end1444, %cond.true1429
  %493 = load i64, i64* %n, align 8, !tbaa !14
  %494 = load i64, i64* %s.addr, align 8, !tbaa !14
  %mul1498 = mul i64 %493, %494
  store i64 %mul1498, i64* %nbytes, align 8, !tbaa !14
  br i1 false, label %if.then1743, label %if.end1744

cond.false1499:                                   ; preds = %cond.true1421
  %495 = load i64, i64* %s.addr, align 8, !tbaa !14
  %cmp1500 = icmp slt i64 %495, 0
  br i1 %cmp1500, label %cond.true1502, label %cond.false1548

cond.true1502:                                    ; preds = %cond.false1499
  %496 = load i64, i64* %n, align 8, !tbaa !14
  %cmp1503 = icmp slt i64 %496, 0
  br i1 %cmp1503, label %cond.true1505, label %cond.false1526

cond.true1505:                                    ; preds = %cond.true1502
  br i1 false, label %cond.true1506, label %cond.false1510

cond.true1506:                                    ; preds = %cond.true1505
  %497 = load i64, i64* %n, align 8, !tbaa !14
  %498 = load i64, i64* %s.addr, align 8, !tbaa !14
  %div1507 = udiv i64 -1, %498
  %cmp1508 = icmp ult i64 %497, %div1507
  br i1 %cmp1508, label %cond.true1578, label %cond.false1580

cond.false1510:                                   ; preds = %cond.true1505
  br i1 true, label %cond.true1511, label %cond.false1514

cond.true1511:                                    ; preds = %cond.false1510
  %499 = load i64, i64* %s.addr, align 8, !tbaa !14
  %cmp1512 = icmp slt i64 %499, -9223372036854775807
  br i1 %cmp1512, label %cond.true1517, label %cond.false1518

cond.false1514:                                   ; preds = %cond.false1510
  %500 = load i64, i64* %s.addr, align 8, !tbaa !14
  %cmp1515 = icmp slt i64 0, %500
  br i1 %cmp1515, label %cond.true1517, label %cond.false1518

cond.true1517:                                    ; preds = %cond.false1514, %cond.true1511
  br label %cond.end1521

cond.false1518:                                   ; preds = %cond.false1514, %cond.true1511
  %501 = load i64, i64* %s.addr, align 8, !tbaa !14
  %sub1519 = sub nsw i64 0, %501
  %div1520 = udiv i64 -1, %sub1519
  br label %cond.end1521

cond.end1521:                                     ; preds = %cond.false1518, %cond.true1517
  %cond1522 = phi i64 [ 1, %cond.true1517 ], [ %div1520, %cond.false1518 ]
  %502 = load i64, i64* %n, align 8, !tbaa !14
  %sub1523 = sub nsw i64 -1, %502
  %cmp1524 = icmp ule i64 %cond1522, %sub1523
  br i1 %cmp1524, label %cond.true1578, label %cond.false1580

cond.false1526:                                   ; preds = %cond.true1502
  br i1 true, label %cond.true1527, label %cond.false1528

cond.true1527:                                    ; preds = %cond.false1526
  br i1 false, label %land.lhs.true1529, label %cond.false1544

cond.false1528:                                   ; preds = %cond.false1526
  br i1 false, label %land.lhs.true1529, label %cond.false1544

land.lhs.true1529:                                ; preds = %cond.false1528, %cond.true1527
  %503 = load i64, i64* %s.addr, align 8, !tbaa !14
  %cmp1530 = icmp eq i64 %503, -1
  br i1 %cmp1530, label %cond.true1532, label %cond.false1544

cond.true1532:                                    ; preds = %land.lhs.true1529
  br i1 true, label %cond.true1533, label %cond.false1537

cond.true1533:                                    ; preds = %cond.true1532
  %504 = load i64, i64* %n, align 8, !tbaa !14
  %add1534 = add nsw i64 %504, 0
  %cmp1535 = icmp slt i64 0, %add1534
  br i1 %cmp1535, label %cond.true1578, label %cond.false1580

cond.false1537:                                   ; preds = %cond.true1532
  %505 = load i64, i64* %n, align 8, !tbaa !14
  %cmp1538 = icmp slt i64 0, %505
  br i1 %cmp1538, label %land.lhs.true1540, label %cond.false1580

land.lhs.true1540:                                ; preds = %cond.false1537
  %506 = load i64, i64* %n, align 8, !tbaa !14
  %sub1541 = sub nsw i64 %506, 1
  %cmp1542 = icmp slt i64 -1, %sub1541
  br i1 %cmp1542, label %cond.true1578, label %cond.false1580

cond.false1544:                                   ; preds = %land.lhs.true1529, %cond.false1528, %cond.true1527
  %507 = load i64, i64* %s.addr, align 8, !tbaa !14
  %div1545 = sdiv i64 0, %507
  %508 = load i64, i64* %n, align 8, !tbaa !14
  %cmp1546 = icmp slt i64 %div1545, %508
  br i1 %cmp1546, label %cond.true1578, label %cond.false1580

cond.false1548:                                   ; preds = %cond.false1499
  %509 = load i64, i64* %s.addr, align 8, !tbaa !14
  %cmp1549 = icmp eq i64 %509, 0
  br i1 %cmp1549, label %cond.true1551, label %cond.false1552

cond.true1551:                                    ; preds = %cond.false1548
  br i1 false, label %cond.true1578, label %cond.false1580

cond.false1552:                                   ; preds = %cond.false1548
  %510 = load i64, i64* %n, align 8, !tbaa !14
  %cmp1553 = icmp slt i64 %510, 0
  br i1 %cmp1553, label %cond.true1555, label %cond.false1574

cond.true1555:                                    ; preds = %cond.false1552
  br i1 true, label %cond.true1556, label %cond.false1557

cond.true1556:                                    ; preds = %cond.true1555
  br i1 false, label %land.lhs.true1558, label %cond.false1570

cond.false1557:                                   ; preds = %cond.true1555
  br i1 false, label %land.lhs.true1558, label %cond.false1570

land.lhs.true1558:                                ; preds = %cond.false1557, %cond.true1556
  %511 = load i64, i64* %n, align 8, !tbaa !14
  %cmp1559 = icmp eq i64 %511, -1
  br i1 %cmp1559, label %cond.true1561, label %cond.false1570

cond.true1561:                                    ; preds = %land.lhs.true1558
  br i1 true, label %cond.true1562, label %cond.false1566

cond.true1562:                                    ; preds = %cond.true1561
  %512 = load i64, i64* %s.addr, align 8, !tbaa !14
  %add1563 = add nsw i64 %512, 0
  %cmp1564 = icmp slt i64 0, %add1563
  br i1 %cmp1564, label %cond.true1578, label %cond.false1580

cond.false1566:                                   ; preds = %cond.true1561
  %513 = load i64, i64* %s.addr, align 8, !tbaa !14
  %sub1567 = sub nsw i64 %513, 1
  %cmp1568 = icmp slt i64 -1, %sub1567
  br i1 %cmp1568, label %cond.true1578, label %cond.false1580

cond.false1570:                                   ; preds = %land.lhs.true1558, %cond.false1557, %cond.true1556
  %514 = load i64, i64* %n, align 8, !tbaa !14
  %div1571 = sdiv i64 0, %514
  %515 = load i64, i64* %s.addr, align 8, !tbaa !14
  %cmp1572 = icmp slt i64 %div1571, %515
  br i1 %cmp1572, label %cond.true1578, label %cond.false1580

cond.false1574:                                   ; preds = %cond.false1552
  %516 = load i64, i64* %s.addr, align 8, !tbaa !14
  %div1575 = udiv i64 -1, %516
  %517 = load i64, i64* %n, align 8, !tbaa !14
  %cmp1576 = icmp ult i64 %div1575, %517
  br i1 %cmp1576, label %cond.true1578, label %cond.false1580

cond.true1578:                                    ; preds = %cond.false1574, %cond.false1570, %cond.false1566, %cond.true1562, %cond.true1551, %cond.false1544, %land.lhs.true1540, %cond.true1533, %cond.end1521, %cond.true1506
  %518 = load i64, i64* %n, align 8, !tbaa !14
  %519 = load i64, i64* %s.addr, align 8, !tbaa !14
  %mul1579 = mul i64 %518, %519
  store i64 %mul1579, i64* %nbytes, align 8, !tbaa !14
  br i1 true, label %if.then1743, label %if.end1744

cond.false1580:                                   ; preds = %cond.false1574, %cond.false1570, %cond.false1566, %cond.true1562, %cond.true1551, %cond.false1544, %land.lhs.true1540, %cond.false1537, %cond.true1533, %cond.end1521, %cond.true1506
  %520 = load i64, i64* %n, align 8, !tbaa !14
  %521 = load i64, i64* %s.addr, align 8, !tbaa !14
  %mul1581 = mul i64 %520, %521
  store i64 %mul1581, i64* %nbytes, align 8, !tbaa !14
  br i1 false, label %if.then1743, label %if.end1744

cond.false1582:                                   ; preds = %cond.false1420
  br i1 true, label %cond.true1583, label %cond.false1660

cond.true1583:                                    ; preds = %cond.false1582
  %522 = load i64, i64* %s.addr, align 8, !tbaa !14
  %cmp1584 = icmp slt i64 %522, 0
  br i1 %cmp1584, label %cond.true1586, label %cond.false1629

cond.true1586:                                    ; preds = %cond.true1583
  %523 = load i64, i64* %n, align 8, !tbaa !14
  %cmp1587 = icmp slt i64 %523, 0
  br i1 %cmp1587, label %cond.true1589, label %cond.false1610

cond.true1589:                                    ; preds = %cond.true1586
  br i1 true, label %cond.true1590, label %cond.false1594

cond.true1590:                                    ; preds = %cond.true1589
  %524 = load i64, i64* %n, align 8, !tbaa !14
  %525 = load i64, i64* %s.addr, align 8, !tbaa !14
  %div1591 = sdiv i64 9223372036854775807, %525
  %cmp1592 = icmp slt i64 %524, %div1591
  br i1 %cmp1592, label %cond.true1656, label %cond.false1658

cond.false1594:                                   ; preds = %cond.true1589
  br i1 true, label %cond.true1595, label %cond.false1598

cond.true1595:                                    ; preds = %cond.false1594
  %526 = load i64, i64* %s.addr, align 8, !tbaa !14
  %cmp1596 = icmp slt i64 %526, -9223372036854775807
  br i1 %cmp1596, label %cond.true1601, label %cond.false1602

cond.false1598:                                   ; preds = %cond.false1594
  %527 = load i64, i64* %s.addr, align 8, !tbaa !14
  %cmp1599 = icmp slt i64 0, %527
  br i1 %cmp1599, label %cond.true1601, label %cond.false1602

cond.true1601:                                    ; preds = %cond.false1598, %cond.true1595
  br label %cond.end1605

cond.false1602:                                   ; preds = %cond.false1598, %cond.true1595
  %528 = load i64, i64* %s.addr, align 8, !tbaa !14
  %sub1603 = sub nsw i64 0, %528
  %div1604 = sdiv i64 9223372036854775807, %sub1603
  br label %cond.end1605

cond.end1605:                                     ; preds = %cond.false1602, %cond.true1601
  %cond1606 = phi i64 [ 0, %cond.true1601 ], [ %div1604, %cond.false1602 ]
  %529 = load i64, i64* %n, align 8, !tbaa !14
  %sub1607 = sub nsw i64 -1, %529
  %cmp1608 = icmp sle i64 %cond1606, %sub1607
  br i1 %cmp1608, label %cond.true1656, label %cond.false1658

cond.false1610:                                   ; preds = %cond.true1586
  %530 = load i64, i64* %s.addr, align 8, !tbaa !14
  %cmp1611 = icmp eq i64 %530, -1
  br i1 %cmp1611, label %cond.true1613, label %cond.false1625

cond.true1613:                                    ; preds = %cond.false1610
  br i1 true, label %cond.true1614, label %cond.false1618

cond.true1614:                                    ; preds = %cond.true1613
  %531 = load i64, i64* %n, align 8, !tbaa !14
  %add1615 = add nsw i64 %531, -9223372036854775808
  %cmp1616 = icmp slt i64 0, %add1615
  br i1 %cmp1616, label %cond.true1656, label %cond.false1658

cond.false1618:                                   ; preds = %cond.true1613
  %532 = load i64, i64* %n, align 8, !tbaa !14
  %cmp1619 = icmp slt i64 0, %532
  br i1 %cmp1619, label %land.lhs.true1621, label %cond.false1658

land.lhs.true1621:                                ; preds = %cond.false1618
  %533 = load i64, i64* %n, align 8, !tbaa !14
  %sub1622 = sub nsw i64 %533, 1
  %cmp1623 = icmp slt i64 9223372036854775807, %sub1622
  br i1 %cmp1623, label %cond.true1656, label %cond.false1658

cond.false1625:                                   ; preds = %cond.false1610
  %534 = load i64, i64* %s.addr, align 8, !tbaa !14
  %div1626 = sdiv i64 -9223372036854775808, %534
  %535 = load i64, i64* %n, align 8, !tbaa !14
  %cmp1627 = icmp slt i64 %div1626, %535
  br i1 %cmp1627, label %cond.true1656, label %cond.false1658

cond.false1629:                                   ; preds = %cond.true1583
  %536 = load i64, i64* %s.addr, align 8, !tbaa !14
  %cmp1630 = icmp eq i64 %536, 0
  br i1 %cmp1630, label %cond.true1632, label %cond.false1633

cond.true1632:                                    ; preds = %cond.false1629
  br i1 false, label %cond.true1656, label %cond.false1658

cond.false1633:                                   ; preds = %cond.false1629
  %537 = load i64, i64* %n, align 8, !tbaa !14
  %cmp1634 = icmp slt i64 %537, 0
  br i1 %cmp1634, label %cond.true1636, label %cond.false1652

cond.true1636:                                    ; preds = %cond.false1633
  %538 = load i64, i64* %n, align 8, !tbaa !14
  %cmp1637 = icmp eq i64 %538, -1
  br i1 %cmp1637, label %cond.true1639, label %cond.false1648

cond.true1639:                                    ; preds = %cond.true1636
  br i1 true, label %cond.true1640, label %cond.false1644

cond.true1640:                                    ; preds = %cond.true1639
  %539 = load i64, i64* %s.addr, align 8, !tbaa !14
  %add1641 = add nsw i64 %539, -9223372036854775808
  %cmp1642 = icmp slt i64 0, %add1641
  br i1 %cmp1642, label %cond.true1656, label %cond.false1658

cond.false1644:                                   ; preds = %cond.true1639
  %540 = load i64, i64* %s.addr, align 8, !tbaa !14
  %sub1645 = sub nsw i64 %540, 1
  %cmp1646 = icmp slt i64 9223372036854775807, %sub1645
  br i1 %cmp1646, label %cond.true1656, label %cond.false1658

cond.false1648:                                   ; preds = %cond.true1636
  %541 = load i64, i64* %n, align 8, !tbaa !14
  %div1649 = sdiv i64 -9223372036854775808, %541
  %542 = load i64, i64* %s.addr, align 8, !tbaa !14
  %cmp1650 = icmp slt i64 %div1649, %542
  br i1 %cmp1650, label %cond.true1656, label %cond.false1658

cond.false1652:                                   ; preds = %cond.false1633
  %543 = load i64, i64* %s.addr, align 8, !tbaa !14
  %div1653 = sdiv i64 9223372036854775807, %543
  %544 = load i64, i64* %n, align 8, !tbaa !14
  %cmp1654 = icmp slt i64 %div1653, %544
  br i1 %cmp1654, label %cond.true1656, label %cond.false1658

cond.true1656:                                    ; preds = %cond.false1652, %cond.false1648, %cond.false1644, %cond.true1640, %cond.true1632, %cond.false1625, %land.lhs.true1621, %cond.true1614, %cond.end1605, %cond.true1590
  %545 = load i64, i64* %n, align 8, !tbaa !14
  %546 = load i64, i64* %s.addr, align 8, !tbaa !14
  %mul1657 = mul i64 %545, %546
  store i64 %mul1657, i64* %nbytes, align 8, !tbaa !14
  br i1 true, label %if.then1743, label %if.end1744

cond.false1658:                                   ; preds = %cond.false1652, %cond.false1648, %cond.false1644, %cond.true1640, %cond.true1632, %cond.false1625, %land.lhs.true1621, %cond.false1618, %cond.true1614, %cond.end1605, %cond.true1590
  %547 = load i64, i64* %n, align 8, !tbaa !14
  %548 = load i64, i64* %s.addr, align 8, !tbaa !14
  %mul1659 = mul i64 %547, %548
  store i64 %mul1659, i64* %nbytes, align 8, !tbaa !14
  br i1 false, label %if.then1743, label %if.end1744

cond.false1660:                                   ; preds = %cond.false1582
  %549 = load i64, i64* %s.addr, align 8, !tbaa !14
  %cmp1661 = icmp slt i64 %549, 0
  br i1 %cmp1661, label %cond.true1663, label %cond.false1709

cond.true1663:                                    ; preds = %cond.false1660
  %550 = load i64, i64* %n, align 8, !tbaa !14
  %cmp1664 = icmp slt i64 %550, 0
  br i1 %cmp1664, label %cond.true1666, label %cond.false1687

cond.true1666:                                    ; preds = %cond.true1663
  br i1 false, label %cond.true1667, label %cond.false1671

cond.true1667:                                    ; preds = %cond.true1666
  %551 = load i64, i64* %n, align 8, !tbaa !14
  %552 = load i64, i64* %s.addr, align 8, !tbaa !14
  %div1668 = udiv i64 -1, %552
  %cmp1669 = icmp ult i64 %551, %div1668
  br i1 %cmp1669, label %cond.true1739, label %cond.false1741

cond.false1671:                                   ; preds = %cond.true1666
  br i1 true, label %cond.true1672, label %cond.false1675

cond.true1672:                                    ; preds = %cond.false1671
  %553 = load i64, i64* %s.addr, align 8, !tbaa !14
  %cmp1673 = icmp slt i64 %553, -9223372036854775807
  br i1 %cmp1673, label %cond.true1678, label %cond.false1679

cond.false1675:                                   ; preds = %cond.false1671
  %554 = load i64, i64* %s.addr, align 8, !tbaa !14
  %cmp1676 = icmp slt i64 0, %554
  br i1 %cmp1676, label %cond.true1678, label %cond.false1679

cond.true1678:                                    ; preds = %cond.false1675, %cond.true1672
  br label %cond.end1682

cond.false1679:                                   ; preds = %cond.false1675, %cond.true1672
  %555 = load i64, i64* %s.addr, align 8, !tbaa !14
  %sub1680 = sub nsw i64 0, %555
  %div1681 = udiv i64 -1, %sub1680
  br label %cond.end1682

cond.end1682:                                     ; preds = %cond.false1679, %cond.true1678
  %cond1683 = phi i64 [ 1, %cond.true1678 ], [ %div1681, %cond.false1679 ]
  %556 = load i64, i64* %n, align 8, !tbaa !14
  %sub1684 = sub nsw i64 -1, %556
  %cmp1685 = icmp ule i64 %cond1683, %sub1684
  br i1 %cmp1685, label %cond.true1739, label %cond.false1741

cond.false1687:                                   ; preds = %cond.true1663
  br i1 true, label %cond.true1688, label %cond.false1689

cond.true1688:                                    ; preds = %cond.false1687
  br i1 false, label %land.lhs.true1690, label %cond.false1705

cond.false1689:                                   ; preds = %cond.false1687
  br i1 false, label %land.lhs.true1690, label %cond.false1705

land.lhs.true1690:                                ; preds = %cond.false1689, %cond.true1688
  %557 = load i64, i64* %s.addr, align 8, !tbaa !14
  %cmp1691 = icmp eq i64 %557, -1
  br i1 %cmp1691, label %cond.true1693, label %cond.false1705

cond.true1693:                                    ; preds = %land.lhs.true1690
  br i1 true, label %cond.true1694, label %cond.false1698

cond.true1694:                                    ; preds = %cond.true1693
  %558 = load i64, i64* %n, align 8, !tbaa !14
  %add1695 = add nsw i64 %558, 0
  %cmp1696 = icmp slt i64 0, %add1695
  br i1 %cmp1696, label %cond.true1739, label %cond.false1741

cond.false1698:                                   ; preds = %cond.true1693
  %559 = load i64, i64* %n, align 8, !tbaa !14
  %cmp1699 = icmp slt i64 0, %559
  br i1 %cmp1699, label %land.lhs.true1701, label %cond.false1741

land.lhs.true1701:                                ; preds = %cond.false1698
  %560 = load i64, i64* %n, align 8, !tbaa !14
  %sub1702 = sub nsw i64 %560, 1
  %cmp1703 = icmp slt i64 -1, %sub1702
  br i1 %cmp1703, label %cond.true1739, label %cond.false1741

cond.false1705:                                   ; preds = %land.lhs.true1690, %cond.false1689, %cond.true1688
  %561 = load i64, i64* %s.addr, align 8, !tbaa !14
  %div1706 = sdiv i64 0, %561
  %562 = load i64, i64* %n, align 8, !tbaa !14
  %cmp1707 = icmp slt i64 %div1706, %562
  br i1 %cmp1707, label %cond.true1739, label %cond.false1741

cond.false1709:                                   ; preds = %cond.false1660
  %563 = load i64, i64* %s.addr, align 8, !tbaa !14
  %cmp1710 = icmp eq i64 %563, 0
  br i1 %cmp1710, label %cond.true1712, label %cond.false1713

cond.true1712:                                    ; preds = %cond.false1709
  br i1 false, label %cond.true1739, label %cond.false1741

cond.false1713:                                   ; preds = %cond.false1709
  %564 = load i64, i64* %n, align 8, !tbaa !14
  %cmp1714 = icmp slt i64 %564, 0
  br i1 %cmp1714, label %cond.true1716, label %cond.false1735

cond.true1716:                                    ; preds = %cond.false1713
  br i1 true, label %cond.true1717, label %cond.false1718

cond.true1717:                                    ; preds = %cond.true1716
  br i1 false, label %land.lhs.true1719, label %cond.false1731

cond.false1718:                                   ; preds = %cond.true1716
  br i1 false, label %land.lhs.true1719, label %cond.false1731

land.lhs.true1719:                                ; preds = %cond.false1718, %cond.true1717
  %565 = load i64, i64* %n, align 8, !tbaa !14
  %cmp1720 = icmp eq i64 %565, -1
  br i1 %cmp1720, label %cond.true1722, label %cond.false1731

cond.true1722:                                    ; preds = %land.lhs.true1719
  br i1 true, label %cond.true1723, label %cond.false1727

cond.true1723:                                    ; preds = %cond.true1722
  %566 = load i64, i64* %s.addr, align 8, !tbaa !14
  %add1724 = add nsw i64 %566, 0
  %cmp1725 = icmp slt i64 0, %add1724
  br i1 %cmp1725, label %cond.true1739, label %cond.false1741

cond.false1727:                                   ; preds = %cond.true1722
  %567 = load i64, i64* %s.addr, align 8, !tbaa !14
  %sub1728 = sub nsw i64 %567, 1
  %cmp1729 = icmp slt i64 -1, %sub1728
  br i1 %cmp1729, label %cond.true1739, label %cond.false1741

cond.false1731:                                   ; preds = %land.lhs.true1719, %cond.false1718, %cond.true1717
  %568 = load i64, i64* %n, align 8, !tbaa !14
  %div1732 = sdiv i64 0, %568
  %569 = load i64, i64* %s.addr, align 8, !tbaa !14
  %cmp1733 = icmp slt i64 %div1732, %569
  br i1 %cmp1733, label %cond.true1739, label %cond.false1741

cond.false1735:                                   ; preds = %cond.false1713
  %570 = load i64, i64* %s.addr, align 8, !tbaa !14
  %div1736 = udiv i64 -1, %570
  %571 = load i64, i64* %n, align 8, !tbaa !14
  %cmp1737 = icmp ult i64 %div1736, %571
  br i1 %cmp1737, label %cond.true1739, label %cond.false1741

cond.true1739:                                    ; preds = %cond.false1735, %cond.false1731, %cond.false1727, %cond.true1723, %cond.true1712, %cond.false1705, %land.lhs.true1701, %cond.true1694, %cond.end1682, %cond.true1667
  %572 = load i64, i64* %n, align 8, !tbaa !14
  %573 = load i64, i64* %s.addr, align 8, !tbaa !14
  %mul1740 = mul i64 %572, %573
  store i64 %mul1740, i64* %nbytes, align 8, !tbaa !14
  br i1 true, label %if.then1743, label %if.end1744

cond.false1741:                                   ; preds = %cond.false1735, %cond.false1731, %cond.false1727, %cond.true1723, %cond.true1712, %cond.false1705, %land.lhs.true1701, %cond.false1698, %cond.true1694, %cond.end1682, %cond.true1667
  %574 = load i64, i64* %n, align 8, !tbaa !14
  %575 = load i64, i64* %s.addr, align 8, !tbaa !14
  %mul1742 = mul i64 %574, %575
  store i64 %mul1742, i64* %nbytes, align 8, !tbaa !14
  br i1 false, label %if.then1743, label %if.end1744

if.then1743:                                      ; preds = %cond.false1741, %cond.true1739, %cond.false1658, %cond.true1656, %cond.false1580, %cond.true1578, %cond.false1497, %cond.true1495, %cond.false1415, %cond.true1410, %cond.false1326, %cond.true1321, %cond.false1234, %cond.true1228, %cond.false1143, %cond.true1137, %cond.false1050, %cond.true1044, %cond.false959, %cond.true953, %land.lhs.true869, %land.lhs.true865
  call void @xalloc_die() #24
  unreachable

if.end1744:                                       ; preds = %cond.false1741, %cond.true1739, %cond.false1658, %cond.true1656, %cond.false1580, %cond.true1578, %cond.false1497, %cond.true1495, %cond.false1415, %cond.true1410, %cond.false1326, %cond.true1321, %cond.false1234, %cond.true1228, %cond.false1143, %cond.true1137, %cond.false1050, %cond.true1044, %cond.false959, %cond.true953, %if.end861
  %576 = load i8*, i8** %pa.addr, align 8, !tbaa !6
  %577 = load i64, i64* %nbytes, align 8, !tbaa !14
  %call = call i8* @xrealloc(i8* %576, i64 %577) #27
  store i8* %call, i8** %pa.addr, align 8, !tbaa !6
  %578 = load i64, i64* %n, align 8, !tbaa !14
  %579 = load i64*, i64** %pn.addr, align 8, !tbaa !6
  store i64 %578, i64* %579, align 8, !tbaa !14
  %580 = load i8*, i8** %pa.addr, align 8, !tbaa !6
  %581 = bitcast i64* %adjusted_nbytes to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %581) #13
  %582 = bitcast i64* %nbytes to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %582) #13
  %583 = bitcast i64* %n to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %583) #13
  %584 = bitcast i64* %n0 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %584) #13
  ret i8* %580
}

; Function Attrs: nounwind readnone speculatable
declare { i64, i1 } @llvm.sadd.with.overflow.i64(i64, i64) #19

; Function Attrs: nounwind uwtable allocsize(0)
define dso_local noalias nonnull i8* @xzalloc(i64 %s) #16 {
entry:
  %s.addr = alloca i64, align 8
  store i64 %s, i64* %s.addr, align 8, !tbaa !14
  %0 = load i64, i64* %s.addr, align 8, !tbaa !14
  %call = call noalias nonnull i8* @xcalloc(i64 %0, i64 1) #23
  ret i8* %call
}

; Function Attrs: nounwind uwtable allocsize(0,1)
define dso_local noalias nonnull i8* @xcalloc(i64 %n, i64 %s) #18 {
entry:
  %n.addr = alloca i64, align 8
  %s.addr = alloca i64, align 8
  store i64 %n, i64* %n.addr, align 8, !tbaa !14
  store i64 %s, i64* %s.addr, align 8, !tbaa !14
  %0 = load i64, i64* %n.addr, align 8, !tbaa !14
  %1 = load i64, i64* %s.addr, align 8, !tbaa !14
  %call = call noalias i8* @calloc(i64 %0, i64 %1) #13
  %call1 = call i8* @nonnull(i8* %call) #22
  ret i8* %call1
}

; Function Attrs: nounwind uwtable allocsize(0)
define dso_local noalias nonnull i8* @xizalloc(i64 %s) #16 {
entry:
  %s.addr = alloca i64, align 8
  store i64 %s, i64* %s.addr, align 8, !tbaa !14
  %0 = load i64, i64* %s.addr, align 8, !tbaa !14
  %call = call noalias nonnull i8* @xicalloc(i64 %0, i64 1) #23
  ret i8* %call
}

; Function Attrs: nounwind uwtable allocsize(0,1)
define dso_local noalias nonnull i8* @xicalloc(i64 %n, i64 %s) #18 {
entry:
  %n.addr = alloca i64, align 8
  %s.addr = alloca i64, align 8
  store i64 %n, i64* %n.addr, align 8, !tbaa !14
  store i64 %s, i64* %s.addr, align 8, !tbaa !14
  %0 = load i64, i64* %n.addr, align 8, !tbaa !14
  %1 = load i64, i64* %s.addr, align 8, !tbaa !14
  %call = call noalias i8* @icalloc(i64 %0, i64 %1)
  %call1 = call i8* @nonnull(i8* %call) #22
  ret i8* %call1
}

; Function Attrs: nounwind uwtable allocsize(1)
define dso_local noalias nonnull i8* @xmemdup(i8* %p, i64 %s) #17 {
entry:
  %p.addr = alloca i8*, align 8
  %s.addr = alloca i64, align 8
  store i8* %p, i8** %p.addr, align 8, !tbaa !6
  store i64 %s, i64* %s.addr, align 8, !tbaa !14
  %0 = load i64, i64* %s.addr, align 8, !tbaa !14
  %call = call noalias nonnull i8* @xmalloc(i64 %0) #25
  %1 = load i8*, i8** %p.addr, align 8, !tbaa !6
  %2 = load i64, i64* %s.addr, align 8, !tbaa !14
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %call, i8* align 1 %1, i64 %2, i1 false)
  ret i8* %call
}

; Function Attrs: nounwind uwtable allocsize(1)
define dso_local noalias nonnull i8* @ximemdup(i8* %p, i64 %s) #17 {
entry:
  %p.addr = alloca i8*, align 8
  %s.addr = alloca i64, align 8
  store i8* %p, i8** %p.addr, align 8, !tbaa !6
  store i64 %s, i64* %s.addr, align 8, !tbaa !14
  %0 = load i64, i64* %s.addr, align 8, !tbaa !14
  %call = call noalias nonnull i8* @ximalloc(i64 %0) #25
  %1 = load i8*, i8** %p.addr, align 8, !tbaa !6
  %2 = load i64, i64* %s.addr, align 8, !tbaa !14
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %call, i8* align 1 %1, i64 %2, i1 false)
  ret i8* %call
}

; Function Attrs: nounwind uwtable
define dso_local noalias nonnull i8* @ximemdup0(i8* %p, i64 %s) #7 {
entry:
  %p.addr = alloca i8*, align 8
  %s.addr = alloca i64, align 8
  %result = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8, !tbaa !6
  store i64 %s, i64* %s.addr, align 8, !tbaa !14
  %0 = bitcast i8** %result to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #13
  %1 = load i64, i64* %s.addr, align 8, !tbaa !14
  %add = add nsw i64 %1, 1
  %call = call noalias nonnull i8* @ximalloc(i64 %add) #25
  store i8* %call, i8** %result, align 8, !tbaa !6
  %2 = load i8*, i8** %result, align 8, !tbaa !6
  %3 = load i64, i64* %s.addr, align 8, !tbaa !14
  %arrayidx = getelementptr inbounds i8, i8* %2, i64 %3
  store i8 0, i8* %arrayidx, align 1, !tbaa !13
  %4 = load i8*, i8** %result, align 8, !tbaa !6
  %5 = load i8*, i8** %p.addr, align 8, !tbaa !6
  %6 = load i64, i64* %s.addr, align 8, !tbaa !14
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %4, i8* align 1 %5, i64 %6, i1 false)
  %7 = bitcast i8** %result to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %7) #13
  ret i8* %4
}

; Function Attrs: nounwind uwtable
define dso_local noalias nonnull i8* @xstrdup(i8* %string) #7 {
entry:
  %string.addr = alloca i8*, align 8
  store i8* %string, i8** %string.addr, align 8, !tbaa !6
  %0 = load i8*, i8** %string.addr, align 8, !tbaa !6
  %1 = load i8*, i8** %string.addr, align 8, !tbaa !6
  %call = call i64 @strlen(i8* %1) #22
  %add = add i64 %call, 1
  %call1 = call noalias nonnull i8* @xmemdup(i8* %0, i64 %add) #27
  ret i8* %call1
}

; Function Attrs: noreturn nounwind uwtable
define dso_local void @xalloc_die() #0 {
entry:
  %0 = load volatile i32, i32* @exit_failure, align 4, !tbaa !2
  call void (i32, i32, i8*, ...) @error(i32 %0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.357, i64 0, i64 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1.358, i64 0, i64 0))
  call void @abort() #21
  unreachable
}

; Function Attrs: nounwind uwtable
define dso_local i32 @xmemcoll(i8* %s1, i64 %s1len, i8* %s2, i64 %s2len) #7 {
entry:
  %s1.addr = alloca i8*, align 8
  %s1len.addr = alloca i64, align 8
  %s2.addr = alloca i8*, align 8
  %s2len.addr = alloca i64, align 8
  %diff = alloca i32, align 4
  %collation_errno = alloca i32, align 4
  store i8* %s1, i8** %s1.addr, align 8, !tbaa !6
  store i64 %s1len, i64* %s1len.addr, align 8, !tbaa !14
  store i8* %s2, i8** %s2.addr, align 8, !tbaa !6
  store i64 %s2len, i64* %s2len.addr, align 8, !tbaa !14
  %0 = bitcast i32* %diff to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #13
  %1 = load i8*, i8** %s1.addr, align 8, !tbaa !6
  %2 = load i64, i64* %s1len.addr, align 8, !tbaa !14
  %3 = load i8*, i8** %s2.addr, align 8, !tbaa !6
  %4 = load i64, i64* %s2len.addr, align 8, !tbaa !14
  %call = call i32 @memcoll(i8* %1, i64 %2, i8* %3, i64 %4)
  store i32 %call, i32* %diff, align 4, !tbaa !2
  %5 = bitcast i32* %collation_errno to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %5) #13
  %call1 = call i32* @__errno_location() #26
  %6 = load i32, i32* %call1, align 4, !tbaa !2
  store i32 %6, i32* %collation_errno, align 4, !tbaa !2
  %7 = load i32, i32* %collation_errno, align 4, !tbaa !2
  %tobool = icmp ne i32 %7, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %8 = load i32, i32* %collation_errno, align 4, !tbaa !2
  %9 = load i8*, i8** %s1.addr, align 8, !tbaa !6
  %10 = load i64, i64* %s1len.addr, align 8, !tbaa !14
  %11 = load i8*, i8** %s2.addr, align 8, !tbaa !6
  %12 = load i64, i64* %s2len.addr, align 8, !tbaa !14
  call void @collate_error(i32 %8, i8* %9, i64 %10, i8* %11, i64 %12)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %13 = load i32, i32* %diff, align 4, !tbaa !2
  %14 = bitcast i32* %collation_errno to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %14) #13
  %15 = bitcast i32* %diff to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %15) #13
  ret i32 %13
}

; Function Attrs: nounwind uwtable
define internal void @collate_error(i32 %collation_errno, i8* %s1, i64 %s1len, i8* %s2, i64 %s2len) #7 {
entry:
  %collation_errno.addr = alloca i32, align 4
  %s1.addr = alloca i8*, align 8
  %s1len.addr = alloca i64, align 8
  %s2.addr = alloca i8*, align 8
  %s2len.addr = alloca i64, align 8
  store i32 %collation_errno, i32* %collation_errno.addr, align 4, !tbaa !2
  store i8* %s1, i8** %s1.addr, align 8, !tbaa !6
  store i64 %s1len, i64* %s1len.addr, align 8, !tbaa !14
  store i8* %s2, i8** %s2.addr, align 8, !tbaa !6
  store i64 %s2len, i64* %s2len.addr, align 8, !tbaa !14
  %0 = load i32, i32* %collation_errno.addr, align 4, !tbaa !2
  call void (i32, i32, i8*, ...) @error(i32 0, i32 %0, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.359, i64 0, i64 0))
  call void (i32, i32, i8*, ...) @error(i32 0, i32 0, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.1.360, i64 0, i64 0))
  %1 = load volatile i32, i32* @exit_failure, align 4, !tbaa !2
  %2 = load i8*, i8** %s1.addr, align 8, !tbaa !6
  %3 = load i64, i64* %s1len.addr, align 8, !tbaa !14
  %call = call i8* @quotearg_n_style_mem(i32 0, i32 8, i8* %2, i64 %3)
  %4 = load i8*, i8** %s2.addr, align 8, !tbaa !6
  %5 = load i64, i64* %s2len.addr, align 8, !tbaa !14
  %call1 = call i8* @quotearg_n_style_mem(i32 1, i32 8, i8* %4, i64 %5)
  call void (i32, i32, i8*, ...) @error(i32 %1, i32 0, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.2.361, i64 0, i64 0), i8* %call, i8* %call1)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @xmemcoll0(i8* %s1, i64 %s1size, i8* %s2, i64 %s2size) #7 {
entry:
  %s1.addr = alloca i8*, align 8
  %s1size.addr = alloca i64, align 8
  %s2.addr = alloca i8*, align 8
  %s2size.addr = alloca i64, align 8
  %diff = alloca i32, align 4
  %collation_errno = alloca i32, align 4
  store i8* %s1, i8** %s1.addr, align 8, !tbaa !6
  store i64 %s1size, i64* %s1size.addr, align 8, !tbaa !14
  store i8* %s2, i8** %s2.addr, align 8, !tbaa !6
  store i64 %s2size, i64* %s2size.addr, align 8, !tbaa !14
  %0 = bitcast i32* %diff to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #13
  %1 = load i8*, i8** %s1.addr, align 8, !tbaa !6
  %2 = load i64, i64* %s1size.addr, align 8, !tbaa !14
  %3 = load i8*, i8** %s2.addr, align 8, !tbaa !6
  %4 = load i64, i64* %s2size.addr, align 8, !tbaa !14
  %call = call i32 @memcoll0(i8* %1, i64 %2, i8* %3, i64 %4)
  store i32 %call, i32* %diff, align 4, !tbaa !2
  %5 = bitcast i32* %collation_errno to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %5) #13
  %call1 = call i32* @__errno_location() #26
  %6 = load i32, i32* %call1, align 4, !tbaa !2
  store i32 %6, i32* %collation_errno, align 4, !tbaa !2
  %7 = load i32, i32* %collation_errno, align 4, !tbaa !2
  %tobool = icmp ne i32 %7, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %8 = load i32, i32* %collation_errno, align 4, !tbaa !2
  %9 = load i8*, i8** %s1.addr, align 8, !tbaa !6
  %10 = load i64, i64* %s1size.addr, align 8, !tbaa !14
  %sub = sub i64 %10, 1
  %11 = load i8*, i8** %s2.addr, align 8, !tbaa !6
  %12 = load i64, i64* %s2size.addr, align 8, !tbaa !14
  %sub2 = sub i64 %12, 1
  call void @collate_error(i32 %8, i8* %9, i64 %sub, i8* %11, i64 %sub2)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %13 = load i32, i32* %diff, align 4, !tbaa !2
  %14 = bitcast i32* %collation_errno to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %14) #13
  %15 = bitcast i32* %diff to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %15) #13
  ret i32 %13
}

; Function Attrs: nounwind uwtable
define dso_local i32 @xnanosleep(double %seconds) #7 {
entry:
  %retval = alloca i32, align 4
  %seconds.addr = alloca double, align 8
  %ts_sleep = alloca %struct.timespec, align 8
  %cleanup.dest.slot = alloca i32, align 4
  store double %seconds, double* %seconds.addr, align 8, !tbaa !57
  %0 = load double, double* %seconds.addr, align 8, !tbaa !57
  %cmp = fcmp ole double 0x43E0000000000000, %0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %do.body

do.body:                                          ; preds = %do.cond, %if.then
  %call = call i32 @pause()
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %call1 = call i32* @__errno_location() #26
  %1 = load i32, i32* %call1, align 4, !tbaa !2
  %cmp2 = icmp eq i32 %1, 4
  br i1 %cmp2, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  br label %if.end

if.end:                                           ; preds = %do.end, %entry
  %2 = bitcast %struct.timespec* %ts_sleep to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %2) #13
  %3 = load double, double* %seconds.addr, align 8, !tbaa !57
  %call3 = call { i64, i64 } @dtotimespec(double %3) #26
  %4 = bitcast %struct.timespec* %ts_sleep to { i64, i64 }*
  %5 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %4, i32 0, i32 0
  %6 = extractvalue { i64, i64 } %call3, 0
  store i64 %6, i64* %5, align 8
  %7 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %4, i32 0, i32 1
  %8 = extractvalue { i64, i64 } %call3, 1
  store i64 %8, i64* %7, align 8
  br label %for.cond

for.cond:                                         ; preds = %if.end14, %if.end
  %call4 = call i32* @__errno_location() #26
  store i32 0, i32* %call4, align 4, !tbaa !2
  %call5 = call i32 @rpl_nanosleep(%struct.timespec* %ts_sleep, %struct.timespec* %ts_sleep)
  %cmp6 = icmp eq i32 %call5, 0
  br i1 %cmp6, label %if.then7, label %if.end8

if.then7:                                         ; preds = %for.cond
  br label %for.end

if.end8:                                          ; preds = %for.cond
  %call9 = call i32* @__errno_location() #26
  %9 = load i32, i32* %call9, align 4, !tbaa !2
  %cmp10 = icmp ne i32 %9, 4
  br i1 %cmp10, label %land.lhs.true, label %if.end14

land.lhs.true:                                    ; preds = %if.end8
  %call11 = call i32* @__errno_location() #26
  %10 = load i32, i32* %call11, align 4, !tbaa !2
  %cmp12 = icmp ne i32 %10, 0
  br i1 %cmp12, label %if.then13, label %if.end14

if.then13:                                        ; preds = %land.lhs.true
  store i32 -1, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end14:                                         ; preds = %land.lhs.true, %if.end8
  br label %for.cond

for.end:                                          ; preds = %if.then7
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %for.end, %if.then13
  %11 = bitcast %struct.timespec* %ts_sleep to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %11) #13
  %12 = load i32, i32* %retval, align 4
  ret i32 %12
}

declare dso_local i32 @pause() #1

; Function Attrs: noreturn nounwind uwtable
define dso_local void @xstrtol_fatal(i32 %err, i32 %opt_idx, i8 signext %c, %struct.option* %long_options, i8* %arg) #0 {
entry:
  %err.addr = alloca i32, align 4
  %opt_idx.addr = alloca i32, align 4
  %c.addr = alloca i8, align 1
  %long_options.addr = alloca %struct.option*, align 8
  %arg.addr = alloca i8*, align 8
  store i32 %err, i32* %err.addr, align 4, !tbaa !13
  store i32 %opt_idx, i32* %opt_idx.addr, align 4, !tbaa !2
  store i8 %c, i8* %c.addr, align 1, !tbaa !13
  store %struct.option* %long_options, %struct.option** %long_options.addr, align 8, !tbaa !6
  store i8* %arg, i8** %arg.addr, align 8, !tbaa !6
  %0 = load i32, i32* %err.addr, align 4, !tbaa !13
  %1 = load i32, i32* %opt_idx.addr, align 4, !tbaa !2
  %2 = load i8, i8* %c.addr, align 1, !tbaa !13
  %3 = load %struct.option*, %struct.option** %long_options.addr, align 8, !tbaa !6
  %4 = load i8*, i8** %arg.addr, align 8, !tbaa !6
  %5 = load volatile i32, i32* @exit_failure, align 4, !tbaa !2
  call void @xstrtol_error(i32 %0, i32 %1, i8 signext %2, %struct.option* %3, i8* %4, i32 %5)
  call void @abort() #21
  unreachable
}

; Function Attrs: nounwind uwtable
define internal void @xstrtol_error(i32 %err, i32 %opt_idx, i8 signext %c, %struct.option* %long_options, i8* %arg, i32 %exit_status) #7 {
entry:
  %err.addr = alloca i32, align 4
  %opt_idx.addr = alloca i32, align 4
  %c.addr = alloca i8, align 1
  %long_options.addr = alloca %struct.option*, align 8
  %arg.addr = alloca i8*, align 8
  %exit_status.addr = alloca i32, align 4
  %hyphens = alloca i8*, align 8
  %msgid = alloca i8*, align 8
  %option = alloca i8*, align 8
  %option_buffer = alloca [2 x i8], align 1
  store i32 %err, i32* %err.addr, align 4, !tbaa !13
  store i32 %opt_idx, i32* %opt_idx.addr, align 4, !tbaa !2
  store i8 %c, i8* %c.addr, align 1, !tbaa !13
  store %struct.option* %long_options, %struct.option** %long_options.addr, align 8, !tbaa !6
  store i8* %arg, i8** %arg.addr, align 8, !tbaa !6
  store i32 %exit_status, i32* %exit_status.addr, align 4, !tbaa !2
  %0 = bitcast i8** %hyphens to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #13
  store i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.368, i64 0, i64 0), i8** %hyphens, align 8, !tbaa !6
  %1 = bitcast i8** %msgid to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %1) #13
  %2 = bitcast i8** %option to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %2) #13
  %3 = bitcast [2 x i8]* %option_buffer to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* %3) #13
  %4 = load i32, i32* %err.addr, align 4, !tbaa !13
  switch i32 %4, label %sw.default [
    i32 4, label %sw.bb
    i32 2, label %sw.bb1
    i32 3, label %sw.bb1
    i32 1, label %sw.bb2
  ]

sw.default:                                       ; preds = %entry
  call void @abort() #21
  unreachable

sw.bb:                                            ; preds = %entry
  store i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.1.369, i64 0, i64 0), i8** %msgid, align 8, !tbaa !6
  br label %sw.epilog

sw.bb1:                                           ; preds = %entry, %entry
  store i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.2.370, i64 0, i64 0), i8** %msgid, align 8, !tbaa !6
  br label %sw.epilog

sw.bb2:                                           ; preds = %entry
  store i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.3.371, i64 0, i64 0), i8** %msgid, align 8, !tbaa !6
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.bb2, %sw.bb1, %sw.bb
  %5 = load i32, i32* %opt_idx.addr, align 4, !tbaa !2
  %cmp = icmp slt i32 %5, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %sw.epilog
  %6 = load i32, i32* %opt_idx.addr, align 4, !tbaa !2
  %7 = load i8*, i8** %hyphens, align 8, !tbaa !6
  %idx.ext = sext i32 %6 to i64
  %idx.neg = sub i64 0, %idx.ext
  %add.ptr = getelementptr inbounds i8, i8* %7, i64 %idx.neg
  store i8* %add.ptr, i8** %hyphens, align 8, !tbaa !6
  %8 = load i8, i8* %c.addr, align 1, !tbaa !13
  %arrayidx = getelementptr inbounds [2 x i8], [2 x i8]* %option_buffer, i64 0, i64 0
  store i8 %8, i8* %arrayidx, align 1, !tbaa !13
  %arrayidx3 = getelementptr inbounds [2 x i8], [2 x i8]* %option_buffer, i64 0, i64 1
  store i8 0, i8* %arrayidx3, align 1, !tbaa !13
  %arraydecay = getelementptr inbounds [2 x i8], [2 x i8]* %option_buffer, i64 0, i64 0
  store i8* %arraydecay, i8** %option, align 8, !tbaa !6
  br label %if.end

if.else:                                          ; preds = %sw.epilog
  %9 = load %struct.option*, %struct.option** %long_options.addr, align 8, !tbaa !6
  %10 = load i32, i32* %opt_idx.addr, align 4, !tbaa !2
  %idxprom = sext i32 %10 to i64
  %arrayidx4 = getelementptr inbounds %struct.option, %struct.option* %9, i64 %idxprom
  %name = getelementptr inbounds %struct.option, %struct.option* %arrayidx4, i32 0, i32 0
  %11 = load i8*, i8** %name, align 8, !tbaa !55
  store i8* %11, i8** %option, align 8, !tbaa !6
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %12 = load i32, i32* %exit_status.addr, align 4, !tbaa !2
  %13 = load i8*, i8** %msgid, align 8, !tbaa !6
  %14 = load i8*, i8** %hyphens, align 8, !tbaa !6
  %15 = load i8*, i8** %option, align 8, !tbaa !6
  %16 = load i8*, i8** %arg.addr, align 8, !tbaa !6
  call void (i32, i32, i8*, ...) @error(i32 %12, i32 0, i8* %13, i8* %14, i8* %15, i8* %16)
  %17 = bitcast [2 x i8]* %option_buffer to i8*
  call void @llvm.lifetime.end.p0i8(i64 2, i8* %17) #13
  %18 = bitcast i8** %option to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %18) #13
  %19 = bitcast i8** %msgid to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %19) #13
  %20 = bitcast i8** %hyphens to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %20) #13
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @xstrtoumax(i8* %s, i8** %ptr, i32 %strtol_base, i64* %val, i8* %valid_suffixes) #7 {
entry:
  %retval = alloca i32, align 4
  %s.addr = alloca i8*, align 8
  %ptr.addr = alloca i8**, align 8
  %strtol_base.addr = alloca i32, align 4
  %val.addr = alloca i64*, align 8
  %valid_suffixes.addr = alloca i8*, align 8
  %t_ptr = alloca i8*, align 8
  %p = alloca i8**, align 8
  %tmp = alloca i64, align 8
  %err = alloca i32, align 4
  %q = alloca i8*, align 8
  %ch = alloca i8, align 1
  %cleanup.dest.slot = alloca i32, align 4
  %base = alloca i32, align 4
  %suffixes = alloca i32, align 4
  %overflow = alloca i32, align 4
  store i8* %s, i8** %s.addr, align 8, !tbaa !6
  store i8** %ptr, i8*** %ptr.addr, align 8, !tbaa !6
  store i32 %strtol_base, i32* %strtol_base.addr, align 4, !tbaa !2
  store i64* %val, i64** %val.addr, align 8, !tbaa !6
  store i8* %valid_suffixes, i8** %valid_suffixes.addr, align 8, !tbaa !6
  %0 = bitcast i8** %t_ptr to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #13
  %1 = bitcast i8*** %p to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %1) #13
  %2 = bitcast i64* %tmp to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %2) #13
  %3 = bitcast i32* %err to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %3) #13
  store i32 0, i32* %err, align 4, !tbaa !13
  %4 = load i32, i32* %strtol_base.addr, align 4, !tbaa !2
  %cmp = icmp sle i32 0, %4
  br i1 %cmp, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %entry
  %5 = load i32, i32* %strtol_base.addr, align 4, !tbaa !2
  %cmp1 = icmp sle i32 %5, 36
  br i1 %cmp1, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true
  br label %if.end

if.else:                                          ; preds = %land.lhs.true, %entry
  call void @__assert_fail(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.374, i64 0, i64 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1.375, i64 0, i64 0), i32 84, i8* getelementptr inbounds ([79 x i8], [79 x i8]* @__PRETTY_FUNCTION__.xstrtoumax, i64 0, i64 0)) #21
  unreachable

if.end:                                           ; preds = %if.then
  %6 = load i8**, i8*** %ptr.addr, align 8, !tbaa !6
  %tobool = icmp ne i8** %6, null
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  %7 = load i8**, i8*** %ptr.addr, align 8, !tbaa !6
  br label %cond.end

cond.false:                                       ; preds = %if.end
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8** [ %7, %cond.true ], [ %t_ptr, %cond.false ]
  store i8** %cond, i8*** %p, align 8, !tbaa !6
  %call = call i32* @__errno_location() #26
  store i32 0, i32* %call, align 4, !tbaa !2
  %8 = bitcast i8** %q to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %8) #13
  %9 = load i8*, i8** %s.addr, align 8, !tbaa !6
  store i8* %9, i8** %q, align 8, !tbaa !6
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %ch) #13
  %10 = load i8*, i8** %q, align 8, !tbaa !6
  %11 = load i8, i8* %10, align 1, !tbaa !13
  store i8 %11, i8* %ch, align 1, !tbaa !13
  br label %while.cond

while.cond:                                       ; preds = %while.body, %cond.end
  %call2 = call i16** @__ctype_b_loc() #26
  %12 = load i16*, i16** %call2, align 8, !tbaa !6
  %13 = load i8, i8* %ch, align 1, !tbaa !13
  %conv = zext i8 %13 to i32
  %idxprom = sext i32 %conv to i64
  %arrayidx = getelementptr inbounds i16, i16* %12, i64 %idxprom
  %14 = load i16, i16* %arrayidx, align 2, !tbaa !48
  %conv3 = zext i16 %14 to i32
  %and = and i32 %conv3, 8192
  %tobool4 = icmp ne i32 %and, 0
  br i1 %tobool4, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %15 = load i8*, i8** %q, align 8, !tbaa !6
  %incdec.ptr = getelementptr inbounds i8, i8* %15, i32 1
  store i8* %incdec.ptr, i8** %q, align 8, !tbaa !6
  %16 = load i8, i8* %incdec.ptr, align 1, !tbaa !13
  store i8 %16, i8* %ch, align 1, !tbaa !13
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %17 = load i8, i8* %ch, align 1, !tbaa !13
  %conv5 = zext i8 %17 to i32
  %cmp6 = icmp eq i32 %conv5, 45
  br i1 %cmp6, label %if.then8, label %if.end9

if.then8:                                         ; preds = %while.end
  store i32 4, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end9:                                          ; preds = %while.end
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end9, %if.then8
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %ch) #13
  %18 = bitcast i8** %q to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %18) #13
  %cleanup.dest = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest, label %cleanup105 [
    i32 0, label %cleanup.cont
  ]

cleanup.cont:                                     ; preds = %cleanup
  %19 = load i8*, i8** %s.addr, align 8, !tbaa !6
  %20 = load i8**, i8*** %p, align 8, !tbaa !6
  %21 = load i32, i32* %strtol_base.addr, align 4, !tbaa !2
  %call11 = call i64 @strtoumax(i8* %19, i8** %20, i32 %21) #13
  store i64 %call11, i64* %tmp, align 8, !tbaa !14
  %22 = load i8**, i8*** %p, align 8, !tbaa !6
  %23 = load i8*, i8** %22, align 8, !tbaa !6
  %24 = load i8*, i8** %s.addr, align 8, !tbaa !6
  %cmp12 = icmp eq i8* %23, %24
  br i1 %cmp12, label %if.then14, label %if.else26

if.then14:                                        ; preds = %cleanup.cont
  %25 = load i8*, i8** %valid_suffixes.addr, align 8, !tbaa !6
  %tobool15 = icmp ne i8* %25, null
  br i1 %tobool15, label %land.lhs.true16, label %if.else24

land.lhs.true16:                                  ; preds = %if.then14
  %26 = load i8**, i8*** %p, align 8, !tbaa !6
  %27 = load i8*, i8** %26, align 8, !tbaa !6
  %28 = load i8, i8* %27, align 1, !tbaa !13
  %conv17 = sext i8 %28 to i32
  %tobool18 = icmp ne i32 %conv17, 0
  br i1 %tobool18, label %land.lhs.true19, label %if.else24

land.lhs.true19:                                  ; preds = %land.lhs.true16
  %29 = load i8*, i8** %valid_suffixes.addr, align 8, !tbaa !6
  %30 = load i8**, i8*** %p, align 8, !tbaa !6
  %31 = load i8*, i8** %30, align 8, !tbaa !6
  %32 = load i8, i8* %31, align 1, !tbaa !13
  %conv20 = sext i8 %32 to i32
  %call21 = call i8* @strchr(i8* %29, i32 %conv20) #22
  %tobool22 = icmp ne i8* %call21, null
  br i1 %tobool22, label %if.then23, label %if.else24

if.then23:                                        ; preds = %land.lhs.true19
  store i64 1, i64* %tmp, align 8, !tbaa !14
  br label %if.end25

if.else24:                                        ; preds = %land.lhs.true19, %land.lhs.true16, %if.then14
  store i32 4, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup105

if.end25:                                         ; preds = %if.then23
  br label %if.end37

if.else26:                                        ; preds = %cleanup.cont
  %call27 = call i32* @__errno_location() #26
  %33 = load i32, i32* %call27, align 4, !tbaa !2
  %cmp28 = icmp ne i32 %33, 0
  br i1 %cmp28, label %if.then30, label %if.end36

if.then30:                                        ; preds = %if.else26
  %call31 = call i32* @__errno_location() #26
  %34 = load i32, i32* %call31, align 4, !tbaa !2
  %cmp32 = icmp ne i32 %34, 34
  br i1 %cmp32, label %if.then34, label %if.end35

if.then34:                                        ; preds = %if.then30
  store i32 4, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup105

if.end35:                                         ; preds = %if.then30
  store i32 1, i32* %err, align 4, !tbaa !13
  br label %if.end36

if.end36:                                         ; preds = %if.end35, %if.else26
  br label %if.end37

if.end37:                                         ; preds = %if.end36, %if.end25
  %35 = load i8*, i8** %valid_suffixes.addr, align 8, !tbaa !6
  %tobool38 = icmp ne i8* %35, null
  br i1 %tobool38, label %if.end40, label %if.then39

if.then39:                                        ; preds = %if.end37
  %36 = load i64, i64* %tmp, align 8, !tbaa !14
  %37 = load i64*, i64** %val.addr, align 8, !tbaa !6
  store i64 %36, i64* %37, align 8, !tbaa !14
  %38 = load i32, i32* %err, align 4, !tbaa !13
  store i32 %38, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup105

if.end40:                                         ; preds = %if.end37
  %39 = load i8**, i8*** %p, align 8, !tbaa !6
  %40 = load i8*, i8** %39, align 8, !tbaa !6
  %41 = load i8, i8* %40, align 1, !tbaa !13
  %conv41 = sext i8 %41 to i32
  %cmp42 = icmp ne i32 %conv41, 0
  br i1 %cmp42, label %if.then44, label %if.end104

if.then44:                                        ; preds = %if.end40
  %42 = bitcast i32* %base to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %42) #13
  store i32 1024, i32* %base, align 4, !tbaa !2
  %43 = bitcast i32* %suffixes to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %43) #13
  store i32 1, i32* %suffixes, align 4, !tbaa !2
  %44 = bitcast i32* %overflow to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %44) #13
  %45 = load i8*, i8** %valid_suffixes.addr, align 8, !tbaa !6
  %46 = load i8**, i8*** %p, align 8, !tbaa !6
  %47 = load i8*, i8** %46, align 8, !tbaa !6
  %48 = load i8, i8* %47, align 1, !tbaa !13
  %conv45 = sext i8 %48 to i32
  %call46 = call i8* @strchr(i8* %45, i32 %conv45) #22
  %tobool47 = icmp ne i8* %call46, null
  br i1 %tobool47, label %if.end49, label %if.then48

if.then48:                                        ; preds = %if.then44
  %49 = load i64, i64* %tmp, align 8, !tbaa !14
  %50 = load i64*, i64** %val.addr, align 8, !tbaa !6
  store i64 %49, i64* %50, align 8, !tbaa !14
  %51 = load i32, i32* %err, align 4, !tbaa !13
  %or = or i32 %51, 2
  store i32 %or, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup99

if.end49:                                         ; preds = %if.then44
  %52 = load i8**, i8*** %p, align 8, !tbaa !6
  %53 = load i8*, i8** %52, align 8, !tbaa !6
  %54 = load i8, i8* %53, align 1, !tbaa !13
  %conv50 = sext i8 %54 to i32
  switch i32 %conv50, label %sw.epilog67 [
    i32 69, label %sw.bb
    i32 71, label %sw.bb
    i32 103, label %sw.bb
    i32 107, label %sw.bb
    i32 75, label %sw.bb
    i32 77, label %sw.bb
    i32 109, label %sw.bb
    i32 80, label %sw.bb
    i32 84, label %sw.bb
    i32 116, label %sw.bb
    i32 89, label %sw.bb
    i32 90, label %sw.bb
  ]

sw.bb:                                            ; preds = %if.end49, %if.end49, %if.end49, %if.end49, %if.end49, %if.end49, %if.end49, %if.end49, %if.end49, %if.end49, %if.end49, %if.end49
  %55 = load i8*, i8** %valid_suffixes.addr, align 8, !tbaa !6
  %call51 = call i8* @strchr(i8* %55, i32 48) #22
  %tobool52 = icmp ne i8* %call51, null
  br i1 %tobool52, label %if.then53, label %if.end66

if.then53:                                        ; preds = %sw.bb
  %56 = load i8**, i8*** %p, align 8, !tbaa !6
  %arrayidx54 = getelementptr inbounds i8*, i8** %56, i64 0
  %57 = load i8*, i8** %arrayidx54, align 8, !tbaa !6
  %arrayidx55 = getelementptr inbounds i8, i8* %57, i64 1
  %58 = load i8, i8* %arrayidx55, align 1, !tbaa !13
  %conv56 = sext i8 %58 to i32
  switch i32 %conv56, label %sw.epilog [
    i32 105, label %sw.bb57
    i32 66, label %sw.bb65
    i32 68, label %sw.bb65
  ]

sw.bb57:                                          ; preds = %if.then53
  %59 = load i8**, i8*** %p, align 8, !tbaa !6
  %arrayidx58 = getelementptr inbounds i8*, i8** %59, i64 0
  %60 = load i8*, i8** %arrayidx58, align 8, !tbaa !6
  %arrayidx59 = getelementptr inbounds i8, i8* %60, i64 2
  %61 = load i8, i8* %arrayidx59, align 1, !tbaa !13
  %conv60 = sext i8 %61 to i32
  %cmp61 = icmp eq i32 %conv60, 66
  br i1 %cmp61, label %if.then63, label %if.end64

if.then63:                                        ; preds = %sw.bb57
  %62 = load i32, i32* %suffixes, align 4, !tbaa !2
  %add = add nsw i32 %62, 2
  store i32 %add, i32* %suffixes, align 4, !tbaa !2
  br label %if.end64

if.end64:                                         ; preds = %if.then63, %sw.bb57
  br label %sw.epilog

sw.bb65:                                          ; preds = %if.then53, %if.then53
  store i32 1000, i32* %base, align 4, !tbaa !2
  %63 = load i32, i32* %suffixes, align 4, !tbaa !2
  %inc = add nsw i32 %63, 1
  store i32 %inc, i32* %suffixes, align 4, !tbaa !2
  br label %sw.epilog

sw.epilog:                                        ; preds = %if.then53, %sw.bb65, %if.end64
  br label %if.end66

if.end66:                                         ; preds = %sw.epilog, %sw.bb
  br label %sw.epilog67

sw.epilog67:                                      ; preds = %if.end66, %if.end49
  %64 = load i8**, i8*** %p, align 8, !tbaa !6
  %65 = load i8*, i8** %64, align 8, !tbaa !6
  %66 = load i8, i8* %65, align 1, !tbaa !13
  %conv68 = sext i8 %66 to i32
  switch i32 %conv68, label %sw.default [
    i32 98, label %sw.bb69
    i32 66, label %sw.bb71
    i32 99, label %sw.bb73
    i32 69, label %sw.bb74
    i32 71, label %sw.bb76
    i32 103, label %sw.bb76
    i32 107, label %sw.bb78
    i32 75, label %sw.bb78
    i32 77, label %sw.bb80
    i32 109, label %sw.bb80
    i32 80, label %sw.bb82
    i32 84, label %sw.bb84
    i32 116, label %sw.bb84
    i32 119, label %sw.bb86
    i32 89, label %sw.bb88
    i32 90, label %sw.bb90
  ]

sw.bb69:                                          ; preds = %sw.epilog67
  %call70 = call i32 @bkm_scale(i64* %tmp, i32 512)
  store i32 %call70, i32* %overflow, align 4, !tbaa !13
  br label %sw.epilog93

sw.bb71:                                          ; preds = %sw.epilog67
  %call72 = call i32 @bkm_scale(i64* %tmp, i32 1024)
  store i32 %call72, i32* %overflow, align 4, !tbaa !13
  br label %sw.epilog93

sw.bb73:                                          ; preds = %sw.epilog67
  store i32 0, i32* %overflow, align 4, !tbaa !13
  br label %sw.epilog93

sw.bb74:                                          ; preds = %sw.epilog67
  %67 = load i32, i32* %base, align 4, !tbaa !2
  %call75 = call i32 @bkm_scale_by_power(i64* %tmp, i32 %67, i32 6)
  store i32 %call75, i32* %overflow, align 4, !tbaa !13
  br label %sw.epilog93

sw.bb76:                                          ; preds = %sw.epilog67, %sw.epilog67
  %68 = load i32, i32* %base, align 4, !tbaa !2
  %call77 = call i32 @bkm_scale_by_power(i64* %tmp, i32 %68, i32 3)
  store i32 %call77, i32* %overflow, align 4, !tbaa !13
  br label %sw.epilog93

sw.bb78:                                          ; preds = %sw.epilog67, %sw.epilog67
  %69 = load i32, i32* %base, align 4, !tbaa !2
  %call79 = call i32 @bkm_scale_by_power(i64* %tmp, i32 %69, i32 1)
  store i32 %call79, i32* %overflow, align 4, !tbaa !13
  br label %sw.epilog93

sw.bb80:                                          ; preds = %sw.epilog67, %sw.epilog67
  %70 = load i32, i32* %base, align 4, !tbaa !2
  %call81 = call i32 @bkm_scale_by_power(i64* %tmp, i32 %70, i32 2)
  store i32 %call81, i32* %overflow, align 4, !tbaa !13
  br label %sw.epilog93

sw.bb82:                                          ; preds = %sw.epilog67
  %71 = load i32, i32* %base, align 4, !tbaa !2
  %call83 = call i32 @bkm_scale_by_power(i64* %tmp, i32 %71, i32 5)
  store i32 %call83, i32* %overflow, align 4, !tbaa !13
  br label %sw.epilog93

sw.bb84:                                          ; preds = %sw.epilog67, %sw.epilog67
  %72 = load i32, i32* %base, align 4, !tbaa !2
  %call85 = call i32 @bkm_scale_by_power(i64* %tmp, i32 %72, i32 4)
  store i32 %call85, i32* %overflow, align 4, !tbaa !13
  br label %sw.epilog93

sw.bb86:                                          ; preds = %sw.epilog67
  %call87 = call i32 @bkm_scale(i64* %tmp, i32 2)
  store i32 %call87, i32* %overflow, align 4, !tbaa !13
  br label %sw.epilog93

sw.bb88:                                          ; preds = %sw.epilog67
  %73 = load i32, i32* %base, align 4, !tbaa !2
  %call89 = call i32 @bkm_scale_by_power(i64* %tmp, i32 %73, i32 8)
  store i32 %call89, i32* %overflow, align 4, !tbaa !13
  br label %sw.epilog93

sw.bb90:                                          ; preds = %sw.epilog67
  %74 = load i32, i32* %base, align 4, !tbaa !2
  %call91 = call i32 @bkm_scale_by_power(i64* %tmp, i32 %74, i32 7)
  store i32 %call91, i32* %overflow, align 4, !tbaa !13
  br label %sw.epilog93

sw.default:                                       ; preds = %sw.epilog67
  %75 = load i64, i64* %tmp, align 8, !tbaa !14
  %76 = load i64*, i64** %val.addr, align 8, !tbaa !6
  store i64 %75, i64* %76, align 8, !tbaa !14
  %77 = load i32, i32* %err, align 4, !tbaa !13
  %or92 = or i32 %77, 2
  store i32 %or92, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup99

sw.epilog93:                                      ; preds = %sw.bb90, %sw.bb88, %sw.bb86, %sw.bb84, %sw.bb82, %sw.bb80, %sw.bb78, %sw.bb76, %sw.bb74, %sw.bb73, %sw.bb71, %sw.bb69
  %78 = load i32, i32* %overflow, align 4, !tbaa !13
  %79 = load i32, i32* %err, align 4, !tbaa !13
  %or94 = or i32 %79, %78
  store i32 %or94, i32* %err, align 4, !tbaa !13
  %80 = load i32, i32* %suffixes, align 4, !tbaa !2
  %81 = load i8**, i8*** %p, align 8, !tbaa !6
  %82 = load i8*, i8** %81, align 8, !tbaa !6
  %idx.ext = sext i32 %80 to i64
  %add.ptr = getelementptr inbounds i8, i8* %82, i64 %idx.ext
  store i8* %add.ptr, i8** %81, align 8, !tbaa !6
  %83 = load i8**, i8*** %p, align 8, !tbaa !6
  %84 = load i8*, i8** %83, align 8, !tbaa !6
  %85 = load i8, i8* %84, align 1, !tbaa !13
  %tobool95 = icmp ne i8 %85, 0
  br i1 %tobool95, label %if.then96, label %if.end98

if.then96:                                        ; preds = %sw.epilog93
  %86 = load i32, i32* %err, align 4, !tbaa !13
  %or97 = or i32 %86, 2
  store i32 %or97, i32* %err, align 4, !tbaa !13
  br label %if.end98

if.end98:                                         ; preds = %if.then96, %sw.epilog93
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup99

cleanup99:                                        ; preds = %if.end98, %sw.default, %if.then48
  %87 = bitcast i32* %overflow to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %87) #13
  %88 = bitcast i32* %suffixes to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %88) #13
  %89 = bitcast i32* %base to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %89) #13
  %cleanup.dest102 = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest102, label %cleanup105 [
    i32 0, label %cleanup.cont103
  ]

cleanup.cont103:                                  ; preds = %cleanup99
  br label %if.end104

if.end104:                                        ; preds = %cleanup.cont103, %if.end40
  %90 = load i64, i64* %tmp, align 8, !tbaa !14
  %91 = load i64*, i64** %val.addr, align 8, !tbaa !6
  store i64 %90, i64* %91, align 8, !tbaa !14
  %92 = load i32, i32* %err, align 4, !tbaa !13
  store i32 %92, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup105

cleanup105:                                       ; preds = %if.end104, %cleanup99, %if.then39, %if.then34, %if.else24, %cleanup
  %93 = bitcast i32* %err to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %93) #13
  %94 = bitcast i64* %tmp to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %94) #13
  %95 = bitcast i8*** %p to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %95) #13
  %96 = bitcast i8** %t_ptr to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %96) #13
  %97 = load i32, i32* %retval, align 4
  ret i32 %97
}

; Function Attrs: nounwind
declare dso_local i64 @strtoumax(i8*, i8**, i32) #6

; Function Attrs: nounwind readonly
declare dso_local i8* @strchr(i8*, i32) #5

; Function Attrs: nounwind uwtable
define internal i32 @bkm_scale(i64* %x, i32 %scale_factor) #7 {
entry:
  %retval = alloca i32, align 4
  %x.addr = alloca i64*, align 8
  %scale_factor.addr = alloca i32, align 4
  store i64* %x, i64** %x.addr, align 8, !tbaa !6
  store i32 %scale_factor, i32* %scale_factor.addr, align 4, !tbaa !2
  %0 = load i32, i32* %scale_factor.addr, align 4, !tbaa !2
  %conv = sext i32 %0 to i64
  %div = udiv i64 -1, %conv
  %1 = load i64*, i64** %x.addr, align 8, !tbaa !6
  %2 = load i64, i64* %1, align 8, !tbaa !14
  %cmp = icmp ult i64 %div, %2
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load i64*, i64** %x.addr, align 8, !tbaa !6
  store i64 -1, i64* %3, align 8, !tbaa !14
  store i32 1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %4 = load i32, i32* %scale_factor.addr, align 4, !tbaa !2
  %conv2 = sext i32 %4 to i64
  %5 = load i64*, i64** %x.addr, align 8, !tbaa !6
  %6 = load i64, i64* %5, align 8, !tbaa !14
  %mul = mul i64 %6, %conv2
  store i64 %mul, i64* %5, align 8, !tbaa !14
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %7 = load i32, i32* %retval, align 4
  ret i32 %7
}

; Function Attrs: nounwind uwtable
define internal i32 @bkm_scale_by_power(i64* %x, i32 %base, i32 %power) #7 {
entry:
  %x.addr = alloca i64*, align 8
  %base.addr = alloca i32, align 4
  %power.addr = alloca i32, align 4
  %err = alloca i32, align 4
  store i64* %x, i64** %x.addr, align 8, !tbaa !6
  store i32 %base, i32* %base.addr, align 4, !tbaa !2
  store i32 %power, i32* %power.addr, align 4, !tbaa !2
  %0 = bitcast i32* %err to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #13
  store i32 0, i32* %err, align 4, !tbaa !13
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %1 = load i32, i32* %power.addr, align 4, !tbaa !2
  %dec = add nsw i32 %1, -1
  store i32 %dec, i32* %power.addr, align 4, !tbaa !2
  %tobool = icmp ne i32 %1, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %2 = load i64*, i64** %x.addr, align 8, !tbaa !6
  %3 = load i32, i32* %base.addr, align 4, !tbaa !2
  %call = call i32 @bkm_scale(i64* %2, i32 %3)
  %4 = load i32, i32* %err, align 4, !tbaa !13
  %or = or i32 %4, %call
  store i32 %or, i32* %err, align 4, !tbaa !13
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %5 = load i32, i32* %err, align 4, !tbaa !13
  %6 = bitcast i32* %err to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %6) #13
  ret i32 %5
}

; Function Attrs: nounwind uwtable
define dso_local i32 @rpl_fclose(%struct._IO_FILE* nonnull %fp) #7 {
entry:
  %retval = alloca i32, align 4
  %fp.addr = alloca %struct._IO_FILE*, align 8
  %saved_errno = alloca i32, align 4
  %fd = alloca i32, align 4
  %result = alloca i32, align 4
  %cleanup.dest.slot = alloca i32, align 4
  store %struct._IO_FILE* %fp, %struct._IO_FILE** %fp.addr, align 8, !tbaa !6
  %0 = bitcast i32* %saved_errno to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #13
  store i32 0, i32* %saved_errno, align 4, !tbaa !2
  %1 = bitcast i32* %fd to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %1) #13
  %2 = bitcast i32* %result to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %2) #13
  store i32 0, i32* %result, align 4, !tbaa !2
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** %fp.addr, align 8, !tbaa !6
  %call = call i32 @fileno(%struct._IO_FILE* %3) #13
  store i32 %call, i32* %fd, align 4, !tbaa !2
  %4 = load i32, i32* %fd, align 4, !tbaa !2
  %cmp = icmp slt i32 %4, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** %fp.addr, align 8, !tbaa !6
  %call1 = call i32 @fclose(%struct._IO_FILE* %5)
  store i32 %call1, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %entry
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** %fp.addr, align 8, !tbaa !6
  %call2 = call i32 @__freading(%struct._IO_FILE* %6) #13
  %cmp3 = icmp ne i32 %call2, 0
  br i1 %cmp3, label %lor.lhs.false, label %land.lhs.true

lor.lhs.false:                                    ; preds = %if.end
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** %fp.addr, align 8, !tbaa !6
  %call4 = call i32 @fileno(%struct._IO_FILE* %7) #13
  %call5 = call i64 @lseek(i32 %call4, i64 0, i32 1) #13
  %cmp6 = icmp ne i64 %call5, -1
  br i1 %cmp6, label %land.lhs.true, label %if.end10

land.lhs.true:                                    ; preds = %lor.lhs.false, %if.end
  %8 = load %struct._IO_FILE*, %struct._IO_FILE** %fp.addr, align 8, !tbaa !6
  %call7 = call i32 @rpl_fflush(%struct._IO_FILE* %8)
  %tobool = icmp ne i32 %call7, 0
  br i1 %tobool, label %if.then8, label %if.end10

if.then8:                                         ; preds = %land.lhs.true
  %call9 = call i32* @__errno_location() #26
  %9 = load i32, i32* %call9, align 4, !tbaa !2
  store i32 %9, i32* %saved_errno, align 4, !tbaa !2
  br label %if.end10

if.end10:                                         ; preds = %if.then8, %land.lhs.true, %lor.lhs.false
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** %fp.addr, align 8, !tbaa !6
  %call11 = call i32 @fclose(%struct._IO_FILE* %10)
  store i32 %call11, i32* %result, align 4, !tbaa !2
  %11 = load i32, i32* %saved_errno, align 4, !tbaa !2
  %cmp12 = icmp ne i32 %11, 0
  br i1 %cmp12, label %if.then13, label %if.end15

if.then13:                                        ; preds = %if.end10
  %12 = load i32, i32* %saved_errno, align 4, !tbaa !2
  %call14 = call i32* @__errno_location() #26
  store i32 %12, i32* %call14, align 4, !tbaa !2
  store i32 -1, i32* %result, align 4, !tbaa !2
  br label %if.end15

if.end15:                                         ; preds = %if.then13, %if.end10
  %13 = load i32, i32* %result, align 4, !tbaa !2
  store i32 %13, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end15, %if.then
  %14 = bitcast i32* %result to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %14) #13
  %15 = bitcast i32* %fd to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %15) #13
  %16 = bitcast i32* %saved_errno to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %16) #13
  %17 = load i32, i32* %retval, align 4
  ret i32 %17
}

declare dso_local i32 @fclose(%struct._IO_FILE*) #1

; Function Attrs: nounwind
declare dso_local i32 @__freading(%struct._IO_FILE*) #6

; Function Attrs: nounwind
declare dso_local i64 @lseek(i32, i64, i32) #6

; Function Attrs: nounwind uwtable
define dso_local i32 @rpl_fcntl(i32 %fd, i32 %action, ...) #7 {
entry:
  %fd.addr = alloca i32, align 4
  %action.addr = alloca i32, align 4
  %arg = alloca [1 x %struct.__va_list_tag], align 16
  %result = alloca i32, align 4
  %target = alloca i32, align 4
  %target4 = alloca i32, align 4
  %x = alloca i32, align 4
  %p = alloca i8*, align 8
  store i32 %fd, i32* %fd.addr, align 4, !tbaa !2
  store i32 %action, i32* %action.addr, align 4, !tbaa !2
  %0 = bitcast [1 x %struct.__va_list_tag]* %arg to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* %0) #13
  %1 = bitcast i32* %result to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %1) #13
  store i32 -1, i32* %result, align 4, !tbaa !2
  %arraydecay = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %arg, i64 0, i64 0
  %arraydecay1 = bitcast %struct.__va_list_tag* %arraydecay to i8*
  call void @llvm.va_start(i8* %arraydecay1)
  %2 = load i32, i32* %action.addr, align 4, !tbaa !2
  switch i32 %2, label %sw.default [
    i32 0, label %sw.bb
    i32 1030, label %sw.bb3
  ]

sw.bb:                                            ; preds = %entry
  %3 = bitcast i32* %target to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %3) #13
  %arraydecay2 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %arg, i64 0, i64 0
  %gp_offset_p = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay2, i32 0, i32 0
  %gp_offset = load i32, i32* %gp_offset_p, align 16
  %fits_in_gp = icmp ule i32 %gp_offset, 40
  br i1 %fits_in_gp, label %vaarg.in_reg, label %vaarg.in_mem

vaarg.in_reg:                                     ; preds = %sw.bb
  %4 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay2, i32 0, i32 3
  %reg_save_area = load i8*, i8** %4, align 16
  %5 = getelementptr i8, i8* %reg_save_area, i32 %gp_offset
  %6 = bitcast i8* %5 to i32*
  %7 = add i32 %gp_offset, 8
  store i32 %7, i32* %gp_offset_p, align 16
  br label %vaarg.end

vaarg.in_mem:                                     ; preds = %sw.bb
  %overflow_arg_area_p = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay2, i32 0, i32 2
  %overflow_arg_area = load i8*, i8** %overflow_arg_area_p, align 8
  %8 = bitcast i8* %overflow_arg_area to i32*
  %overflow_arg_area.next = getelementptr i8, i8* %overflow_arg_area, i32 8
  store i8* %overflow_arg_area.next, i8** %overflow_arg_area_p, align 8
  br label %vaarg.end

vaarg.end:                                        ; preds = %vaarg.in_mem, %vaarg.in_reg
  %vaarg.addr = phi i32* [ %6, %vaarg.in_reg ], [ %8, %vaarg.in_mem ]
  %9 = load i32, i32* %vaarg.addr, align 4
  store i32 %9, i32* %target, align 4, !tbaa !2
  %10 = load i32, i32* %fd.addr, align 4, !tbaa !2
  %11 = load i32, i32* %target, align 4, !tbaa !2
  %call = call i32 @rpl_fcntl_DUPFD(i32 %10, i32 %11)
  store i32 %call, i32* %result, align 4, !tbaa !2
  %12 = bitcast i32* %target to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %12) #13
  br label %sw.epilog48

sw.bb3:                                           ; preds = %entry
  %13 = bitcast i32* %target4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %13) #13
  %arraydecay5 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %arg, i64 0, i64 0
  %gp_offset_p6 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay5, i32 0, i32 0
  %gp_offset7 = load i32, i32* %gp_offset_p6, align 16
  %fits_in_gp8 = icmp ule i32 %gp_offset7, 40
  br i1 %fits_in_gp8, label %vaarg.in_reg9, label %vaarg.in_mem11

vaarg.in_reg9:                                    ; preds = %sw.bb3
  %14 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay5, i32 0, i32 3
  %reg_save_area10 = load i8*, i8** %14, align 16
  %15 = getelementptr i8, i8* %reg_save_area10, i32 %gp_offset7
  %16 = bitcast i8* %15 to i32*
  %17 = add i32 %gp_offset7, 8
  store i32 %17, i32* %gp_offset_p6, align 16
  br label %vaarg.end15

vaarg.in_mem11:                                   ; preds = %sw.bb3
  %overflow_arg_area_p12 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay5, i32 0, i32 2
  %overflow_arg_area13 = load i8*, i8** %overflow_arg_area_p12, align 8
  %18 = bitcast i8* %overflow_arg_area13 to i32*
  %overflow_arg_area.next14 = getelementptr i8, i8* %overflow_arg_area13, i32 8
  store i8* %overflow_arg_area.next14, i8** %overflow_arg_area_p12, align 8
  br label %vaarg.end15

vaarg.end15:                                      ; preds = %vaarg.in_mem11, %vaarg.in_reg9
  %vaarg.addr16 = phi i32* [ %16, %vaarg.in_reg9 ], [ %18, %vaarg.in_mem11 ]
  %19 = load i32, i32* %vaarg.addr16, align 4
  store i32 %19, i32* %target4, align 4, !tbaa !2
  %20 = load i32, i32* %fd.addr, align 4, !tbaa !2
  %21 = load i32, i32* %target4, align 4, !tbaa !2
  %call17 = call i32 @rpl_fcntl_DUPFD_CLOEXEC(i32 %20, i32 %21)
  store i32 %call17, i32* %result, align 4, !tbaa !2
  %22 = bitcast i32* %target4 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %22) #13
  br label %sw.epilog48

sw.default:                                       ; preds = %entry
  %23 = load i32, i32* %action.addr, align 4, !tbaa !2
  switch i32 %23, label %sw.default34 [
    i32 1, label %sw.bb18
    i32 3, label %sw.bb18
    i32 1025, label %sw.bb18
    i32 9, label %sw.bb18
    i32 1032, label %sw.bb18
    i32 1034, label %sw.bb18
    i32 11, label %sw.bb18
    i32 1033, label %sw.bb20
    i32 0, label %sw.bb20
    i32 1030, label %sw.bb20
    i32 1026, label %sw.bb20
    i32 2, label %sw.bb20
    i32 4, label %sw.bb20
    i32 1024, label %sw.bb20
    i32 8, label %sw.bb20
    i32 1031, label %sw.bb20
    i32 10, label %sw.bb20
  ]

sw.bb18:                                          ; preds = %sw.default, %sw.default, %sw.default, %sw.default, %sw.default, %sw.default, %sw.default
  %24 = load i32, i32* %fd.addr, align 4, !tbaa !2
  %25 = load i32, i32* %action.addr, align 4, !tbaa !2
  %call19 = call i32 (i32, i32, ...) @fcntl(i32 %24, i32 %25)
  store i32 %call19, i32* %result, align 4, !tbaa !2
  br label %sw.epilog

sw.bb20:                                          ; preds = %sw.default, %sw.default, %sw.default, %sw.default, %sw.default, %sw.default, %sw.default, %sw.default, %sw.default, %sw.default
  %26 = bitcast i32* %x to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %26) #13
  %arraydecay21 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %arg, i64 0, i64 0
  %gp_offset_p22 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay21, i32 0, i32 0
  %gp_offset23 = load i32, i32* %gp_offset_p22, align 16
  %fits_in_gp24 = icmp ule i32 %gp_offset23, 40
  br i1 %fits_in_gp24, label %vaarg.in_reg25, label %vaarg.in_mem27

vaarg.in_reg25:                                   ; preds = %sw.bb20
  %27 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay21, i32 0, i32 3
  %reg_save_area26 = load i8*, i8** %27, align 16
  %28 = getelementptr i8, i8* %reg_save_area26, i32 %gp_offset23
  %29 = bitcast i8* %28 to i32*
  %30 = add i32 %gp_offset23, 8
  store i32 %30, i32* %gp_offset_p22, align 16
  br label %vaarg.end31

vaarg.in_mem27:                                   ; preds = %sw.bb20
  %overflow_arg_area_p28 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay21, i32 0, i32 2
  %overflow_arg_area29 = load i8*, i8** %overflow_arg_area_p28, align 8
  %31 = bitcast i8* %overflow_arg_area29 to i32*
  %overflow_arg_area.next30 = getelementptr i8, i8* %overflow_arg_area29, i32 8
  store i8* %overflow_arg_area.next30, i8** %overflow_arg_area_p28, align 8
  br label %vaarg.end31

vaarg.end31:                                      ; preds = %vaarg.in_mem27, %vaarg.in_reg25
  %vaarg.addr32 = phi i32* [ %29, %vaarg.in_reg25 ], [ %31, %vaarg.in_mem27 ]
  %32 = load i32, i32* %vaarg.addr32, align 4
  store i32 %32, i32* %x, align 4, !tbaa !2
  %33 = load i32, i32* %fd.addr, align 4, !tbaa !2
  %34 = load i32, i32* %action.addr, align 4, !tbaa !2
  %35 = load i32, i32* %x, align 4, !tbaa !2
  %call33 = call i32 (i32, i32, ...) @fcntl(i32 %33, i32 %34, i32 %35)
  store i32 %call33, i32* %result, align 4, !tbaa !2
  %36 = bitcast i32* %x to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %36) #13
  br label %sw.epilog

sw.default34:                                     ; preds = %sw.default
  %37 = bitcast i8** %p to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %37) #13
  %arraydecay35 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %arg, i64 0, i64 0
  %gp_offset_p36 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay35, i32 0, i32 0
  %gp_offset37 = load i32, i32* %gp_offset_p36, align 16
  %fits_in_gp38 = icmp ule i32 %gp_offset37, 40
  br i1 %fits_in_gp38, label %vaarg.in_reg39, label %vaarg.in_mem41

vaarg.in_reg39:                                   ; preds = %sw.default34
  %38 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay35, i32 0, i32 3
  %reg_save_area40 = load i8*, i8** %38, align 16
  %39 = getelementptr i8, i8* %reg_save_area40, i32 %gp_offset37
  %40 = bitcast i8* %39 to i8**
  %41 = add i32 %gp_offset37, 8
  store i32 %41, i32* %gp_offset_p36, align 16
  br label %vaarg.end45

vaarg.in_mem41:                                   ; preds = %sw.default34
  %overflow_arg_area_p42 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay35, i32 0, i32 2
  %overflow_arg_area43 = load i8*, i8** %overflow_arg_area_p42, align 8
  %42 = bitcast i8* %overflow_arg_area43 to i8**
  %overflow_arg_area.next44 = getelementptr i8, i8* %overflow_arg_area43, i32 8
  store i8* %overflow_arg_area.next44, i8** %overflow_arg_area_p42, align 8
  br label %vaarg.end45

vaarg.end45:                                      ; preds = %vaarg.in_mem41, %vaarg.in_reg39
  %vaarg.addr46 = phi i8** [ %40, %vaarg.in_reg39 ], [ %42, %vaarg.in_mem41 ]
  %43 = load i8*, i8** %vaarg.addr46, align 8
  store i8* %43, i8** %p, align 8, !tbaa !6
  %44 = load i32, i32* %fd.addr, align 4, !tbaa !2
  %45 = load i32, i32* %action.addr, align 4, !tbaa !2
  %46 = load i8*, i8** %p, align 8, !tbaa !6
  %call47 = call i32 (i32, i32, ...) @fcntl(i32 %44, i32 %45, i8* %46)
  store i32 %call47, i32* %result, align 4, !tbaa !2
  %47 = bitcast i8** %p to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %47) #13
  br label %sw.epilog

sw.epilog:                                        ; preds = %vaarg.end45, %vaarg.end31, %sw.bb18
  br label %sw.epilog48

sw.epilog48:                                      ; preds = %sw.epilog, %vaarg.end15, %vaarg.end
  %arraydecay49 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %arg, i64 0, i64 0
  %arraydecay4950 = bitcast %struct.__va_list_tag* %arraydecay49 to i8*
  call void @llvm.va_end(i8* %arraydecay4950)
  %48 = load i32, i32* %result, align 4, !tbaa !2
  %49 = bitcast i32* %result to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %49) #13
  %50 = bitcast [1 x %struct.__va_list_tag]* %arg to i8*
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %50) #13
  ret i32 %48
}

; Function Attrs: nounwind uwtable
define internal i32 @rpl_fcntl_DUPFD(i32 %fd, i32 %target) #7 {
entry:
  %fd.addr = alloca i32, align 4
  %target.addr = alloca i32, align 4
  %result = alloca i32, align 4
  store i32 %fd, i32* %fd.addr, align 4, !tbaa !2
  store i32 %target, i32* %target.addr, align 4, !tbaa !2
  %0 = bitcast i32* %result to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #13
  %1 = load i32, i32* %fd.addr, align 4, !tbaa !2
  %2 = load i32, i32* %target.addr, align 4, !tbaa !2
  %call = call i32 (i32, i32, ...) @fcntl(i32 %1, i32 0, i32 %2)
  store i32 %call, i32* %result, align 4, !tbaa !2
  %3 = load i32, i32* %result, align 4, !tbaa !2
  %4 = bitcast i32* %result to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %4) #13
  ret i32 %3
}

; Function Attrs: nounwind uwtable
define internal i32 @rpl_fcntl_DUPFD_CLOEXEC(i32 %fd, i32 %target) #7 {
entry:
  %fd.addr = alloca i32, align 4
  %target.addr = alloca i32, align 4
  %result = alloca i32, align 4
  %flags = alloca i32, align 4
  %saved_errno = alloca i32, align 4
  store i32 %fd, i32* %fd.addr, align 4, !tbaa !2
  store i32 %target, i32* %target.addr, align 4, !tbaa !2
  %0 = bitcast i32* %result to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #13
  %1 = load i32, i32* @rpl_fcntl_DUPFD_CLOEXEC.have_dupfd_cloexec, align 4, !tbaa !2
  %cmp = icmp sle i32 0, %1
  br i1 %cmp, label %if.then, label %if.else9

if.then:                                          ; preds = %entry
  %2 = load i32, i32* %fd.addr, align 4, !tbaa !2
  %3 = load i32, i32* %target.addr, align 4, !tbaa !2
  %call = call i32 (i32, i32, ...) @fcntl(i32 %2, i32 1030, i32 %3)
  store i32 %call, i32* %result, align 4, !tbaa !2
  %4 = load i32, i32* %result, align 4, !tbaa !2
  %cmp1 = icmp sle i32 0, %4
  br i1 %cmp1, label %if.then4, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then
  %call2 = call i32* @__errno_location() #26
  %5 = load i32, i32* %call2, align 4, !tbaa !2
  %cmp3 = icmp ne i32 %5, 22
  br i1 %cmp3, label %if.then4, label %if.else

if.then4:                                         ; preds = %lor.lhs.false, %if.then
  store i32 1, i32* @rpl_fcntl_DUPFD_CLOEXEC.have_dupfd_cloexec, align 4, !tbaa !2
  br label %if.end8

if.else:                                          ; preds = %lor.lhs.false
  %6 = load i32, i32* %fd.addr, align 4, !tbaa !2
  %7 = load i32, i32* %target.addr, align 4, !tbaa !2
  %call5 = call i32 @rpl_fcntl_DUPFD(i32 %6, i32 %7)
  store i32 %call5, i32* %result, align 4, !tbaa !2
  %8 = load i32, i32* %result, align 4, !tbaa !2
  %cmp6 = icmp sge i32 %8, 0
  br i1 %cmp6, label %if.then7, label %if.end

if.then7:                                         ; preds = %if.else
  store i32 -1, i32* @rpl_fcntl_DUPFD_CLOEXEC.have_dupfd_cloexec, align 4, !tbaa !2
  br label %if.end

if.end:                                           ; preds = %if.then7, %if.else
  br label %if.end8

if.end8:                                          ; preds = %if.end, %if.then4
  br label %if.end11

if.else9:                                         ; preds = %entry
  %9 = load i32, i32* %fd.addr, align 4, !tbaa !2
  %10 = load i32, i32* %target.addr, align 4, !tbaa !2
  %call10 = call i32 @rpl_fcntl_DUPFD(i32 %9, i32 %10)
  store i32 %call10, i32* %result, align 4, !tbaa !2
  br label %if.end11

if.end11:                                         ; preds = %if.else9, %if.end8
  %11 = load i32, i32* %result, align 4, !tbaa !2
  %cmp12 = icmp sle i32 0, %11
  br i1 %cmp12, label %land.lhs.true, label %if.end25

land.lhs.true:                                    ; preds = %if.end11
  %12 = load i32, i32* @rpl_fcntl_DUPFD_CLOEXEC.have_dupfd_cloexec, align 4, !tbaa !2
  %cmp13 = icmp eq i32 %12, -1
  br i1 %cmp13, label %if.then14, label %if.end25

if.then14:                                        ; preds = %land.lhs.true
  %13 = bitcast i32* %flags to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %13) #13
  %14 = load i32, i32* %result, align 4, !tbaa !2
  %call15 = call i32 (i32, i32, ...) @fcntl(i32 %14, i32 1)
  store i32 %call15, i32* %flags, align 4, !tbaa !2
  %15 = load i32, i32* %flags, align 4, !tbaa !2
  %cmp16 = icmp slt i32 %15, 0
  br i1 %cmp16, label %if.then20, label %lor.lhs.false17

lor.lhs.false17:                                  ; preds = %if.then14
  %16 = load i32, i32* %result, align 4, !tbaa !2
  %17 = load i32, i32* %flags, align 4, !tbaa !2
  %or = or i32 %17, 1
  %call18 = call i32 (i32, i32, ...) @fcntl(i32 %16, i32 2, i32 %or)
  %cmp19 = icmp eq i32 %call18, -1
  br i1 %cmp19, label %if.then20, label %if.end24

if.then20:                                        ; preds = %lor.lhs.false17, %if.then14
  %18 = bitcast i32* %saved_errno to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %18) #13
  %call21 = call i32* @__errno_location() #26
  %19 = load i32, i32* %call21, align 4, !tbaa !2
  store i32 %19, i32* %saved_errno, align 4, !tbaa !2
  %20 = load i32, i32* %result, align 4, !tbaa !2
  %call22 = call i32 @close(i32 %20)
  %21 = load i32, i32* %saved_errno, align 4, !tbaa !2
  %call23 = call i32* @__errno_location() #26
  store i32 %21, i32* %call23, align 4, !tbaa !2
  store i32 -1, i32* %result, align 4, !tbaa !2
  %22 = bitcast i32* %saved_errno to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %22) #13
  br label %if.end24

if.end24:                                         ; preds = %if.then20, %lor.lhs.false17
  %23 = bitcast i32* %flags to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %23) #13
  br label %if.end25

if.end25:                                         ; preds = %if.end24, %land.lhs.true, %if.end11
  %24 = load i32, i32* %result, align 4, !tbaa !2
  %25 = bitcast i32* %result to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %25) #13
  ret i32 %24
}

declare dso_local i32 @fcntl(i32, i32, ...) #1

; Function Attrs: nounwind uwtable
define dso_local i32 @rpl_fflush(%struct._IO_FILE* %stream) #7 {
entry:
  %retval = alloca i32, align 4
  %stream.addr = alloca %struct._IO_FILE*, align 8
  store %struct._IO_FILE* %stream, %struct._IO_FILE** %stream.addr, align 8, !tbaa !6
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** %stream.addr, align 8, !tbaa !6
  %cmp = icmp eq %struct._IO_FILE* %0, null
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** %stream.addr, align 8, !tbaa !6
  %call = call i32 @__freading(%struct._IO_FILE* %1) #13
  %cmp1 = icmp ne i32 %call, 0
  br i1 %cmp1, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false, %entry
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** %stream.addr, align 8, !tbaa !6
  %call2 = call i32 @fflush(%struct._IO_FILE* %2)
  store i32 %call2, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** %stream.addr, align 8, !tbaa !6
  call void @clear_ungetc_buffer_preserving_position(%struct._IO_FILE* %3)
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** %stream.addr, align 8, !tbaa !6
  %call3 = call i32 @fflush(%struct._IO_FILE* %4)
  store i32 %call3, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %5 = load i32, i32* %retval, align 4
  ret i32 %5
}

declare dso_local i32 @fflush(%struct._IO_FILE*) #1

; Function Attrs: nounwind uwtable
define internal void @clear_ungetc_buffer_preserving_position(%struct._IO_FILE* %fp) #7 {
entry:
  %fp.addr = alloca %struct._IO_FILE*, align 8
  store %struct._IO_FILE* %fp, %struct._IO_FILE** %fp.addr, align 8, !tbaa !6
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** %fp.addr, align 8, !tbaa !6
  %_flags = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %0, i32 0, i32 0
  %1 = load i32, i32* %_flags, align 8, !tbaa !178
  %and = and i32 %1, 256
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** %fp.addr, align 8, !tbaa !6
  %call = call i32 @rpl_fseeko(%struct._IO_FILE* %2, i64 0, i32 1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local void @rpl_free(i8* %p) #7 {
entry:
  %p.addr = alloca i8*, align 8
  %err = alloca i32, align 4
  store i8* %p, i8** %p.addr, align 8, !tbaa !6
  %0 = bitcast i32* %err to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #13
  %call = call i32* @__errno_location() #26
  %1 = load i32, i32* %call, align 4, !tbaa !2
  store i32 %1, i32* %err, align 4, !tbaa !2
  %2 = load i8*, i8** %p.addr, align 8, !tbaa !6
  call void @free(i8* %2) #13
  %3 = load i32, i32* %err, align 4, !tbaa !2
  %call1 = call i32* @__errno_location() #26
  store i32 %3, i32* %call1, align 4, !tbaa !2
  %4 = bitcast i32* %err to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %4) #13
  ret void
}

; Function Attrs: nounwind
declare dso_local void @free(i8*) #6

; Function Attrs: nounwind uwtable
define dso_local i32 @rpl_fseeko(%struct._IO_FILE* nonnull %fp, i64 %offset, i32 %whence) #7 {
entry:
  %retval = alloca i32, align 4
  %fp.addr = alloca %struct._IO_FILE*, align 8
  %offset.addr = alloca i64, align 8
  %whence.addr = alloca i32, align 4
  %pos = alloca i64, align 8
  %cleanup.dest.slot = alloca i32, align 4
  store %struct._IO_FILE* %fp, %struct._IO_FILE** %fp.addr, align 8, !tbaa !6
  store i64 %offset, i64* %offset.addr, align 8, !tbaa !14
  store i32 %whence, i32* %whence.addr, align 4, !tbaa !2
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** %fp.addr, align 8, !tbaa !6
  %_IO_read_end = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %0, i32 0, i32 2
  %1 = load i8*, i8** %_IO_read_end, align 8, !tbaa !180
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** %fp.addr, align 8, !tbaa !6
  %_IO_read_ptr = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %2, i32 0, i32 1
  %3 = load i8*, i8** %_IO_read_ptr, align 8, !tbaa !181
  %cmp = icmp eq i8* %1, %3
  br i1 %cmp, label %land.lhs.true, label %if.end7

land.lhs.true:                                    ; preds = %entry
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** %fp.addr, align 8, !tbaa !6
  %_IO_write_ptr = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %4, i32 0, i32 5
  %5 = load i8*, i8** %_IO_write_ptr, align 8, !tbaa !182
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** %fp.addr, align 8, !tbaa !6
  %_IO_write_base = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %6, i32 0, i32 4
  %7 = load i8*, i8** %_IO_write_base, align 8, !tbaa !183
  %cmp1 = icmp eq i8* %5, %7
  br i1 %cmp1, label %land.lhs.true2, label %if.end7

land.lhs.true2:                                   ; preds = %land.lhs.true
  %8 = load %struct._IO_FILE*, %struct._IO_FILE** %fp.addr, align 8, !tbaa !6
  %_IO_save_base = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %8, i32 0, i32 9
  %9 = load i8*, i8** %_IO_save_base, align 8, !tbaa !184
  %cmp3 = icmp eq i8* %9, null
  br i1 %cmp3, label %if.then, label %if.end7

if.then:                                          ; preds = %land.lhs.true2
  %10 = bitcast i64* %pos to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %10) #13
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** %fp.addr, align 8, !tbaa !6
  %call = call i32 @fileno(%struct._IO_FILE* %11) #13
  %12 = load i64, i64* %offset.addr, align 8, !tbaa !14
  %13 = load i32, i32* %whence.addr, align 4, !tbaa !2
  %call4 = call i64 @lseek(i32 %call, i64 %12, i32 %13) #13
  store i64 %call4, i64* %pos, align 8, !tbaa !14
  %14 = load i64, i64* %pos, align 8, !tbaa !14
  %cmp5 = icmp eq i64 %14, -1
  br i1 %cmp5, label %if.then6, label %if.end

if.then6:                                         ; preds = %if.then
  store i32 -1, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %if.then
  %15 = load %struct._IO_FILE*, %struct._IO_FILE** %fp.addr, align 8, !tbaa !6
  %_flags = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %15, i32 0, i32 0
  %16 = load i32, i32* %_flags, align 8, !tbaa !178
  %and = and i32 %16, -17
  store i32 %and, i32* %_flags, align 8, !tbaa !178
  %17 = load i64, i64* %pos, align 8, !tbaa !14
  %18 = load %struct._IO_FILE*, %struct._IO_FILE** %fp.addr, align 8, !tbaa !6
  %_offset = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %18, i32 0, i32 21
  store i64 %17, i64* %_offset, align 8, !tbaa !185
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end, %if.then6
  %19 = bitcast i64* %pos to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %19) #13
  br label %return

if.end7:                                          ; preds = %land.lhs.true2, %land.lhs.true, %entry
  %20 = load %struct._IO_FILE*, %struct._IO_FILE** %fp.addr, align 8, !tbaa !6
  %21 = load i64, i64* %offset.addr, align 8, !tbaa !14
  %22 = load i32, i32* %whence.addr, align 4, !tbaa !2
  %call8 = call i32 @fseeko(%struct._IO_FILE* %20, i64 %21, i32 %22)
  store i32 %call8, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end7, %cleanup
  %23 = load i32, i32* %retval, align 4
  ret i32 %23
}

declare dso_local i32 @fseeko(%struct._IO_FILE*, i64, i32) #1

; Function Attrs: nounwind uwtable
define dso_local i64 @rpl_mbrtowc(i32* %pwc, i8* %s, i64 %n, %struct.__mbstate_t* %ps) #7 {
entry:
  %retval = alloca i64, align 8
  %pwc.addr = alloca i32*, align 8
  %s.addr = alloca i8*, align 8
  %n.addr = alloca i64, align 8
  %ps.addr = alloca %struct.__mbstate_t*, align 8
  %ret = alloca i64, align 8
  %wc = alloca i32, align 4
  %uc = alloca i8, align 1
  %cleanup.dest.slot = alloca i32, align 4
  store i32* %pwc, i32** %pwc.addr, align 8, !tbaa !6
  store i8* %s, i8** %s.addr, align 8, !tbaa !6
  store i64 %n, i64* %n.addr, align 8, !tbaa !14
  store %struct.__mbstate_t* %ps, %struct.__mbstate_t** %ps.addr, align 8, !tbaa !6
  %0 = bitcast i64* %ret to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #13
  %1 = bitcast i32* %wc to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %1) #13
  %2 = load i32*, i32** %pwc.addr, align 8, !tbaa !6
  %tobool = icmp ne i32* %2, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32* %wc, i32** %pwc.addr, align 8, !tbaa !6
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %3 = load i32*, i32** %pwc.addr, align 8, !tbaa !6
  %4 = load i8*, i8** %s.addr, align 8, !tbaa !6
  %5 = load i64, i64* %n.addr, align 8, !tbaa !14
  %6 = load %struct.__mbstate_t*, %struct.__mbstate_t** %ps.addr, align 8, !tbaa !6
  %call = call i64 @mbrtowc(i32* %3, i8* %4, i64 %5, %struct.__mbstate_t* %6) #13
  store i64 %call, i64* %ret, align 8, !tbaa !14
  %7 = load i64, i64* %ret, align 8, !tbaa !14
  %cmp = icmp ule i64 -2, %7
  br i1 %cmp, label %land.lhs.true, label %if.end5

land.lhs.true:                                    ; preds = %if.end
  %8 = load i64, i64* %n.addr, align 8, !tbaa !14
  %cmp1 = icmp ne i64 %8, 0
  br i1 %cmp1, label %land.lhs.true2, label %if.end5

land.lhs.true2:                                   ; preds = %land.lhs.true
  %call3 = call zeroext i1 @hard_locale(i32 0)
  br i1 %call3, label %if.end5, label %if.then4

if.then4:                                         ; preds = %land.lhs.true2
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %uc) #13
  %9 = load i8*, i8** %s.addr, align 8, !tbaa !6
  %10 = load i8, i8* %9, align 1, !tbaa !13
  store i8 %10, i8* %uc, align 1, !tbaa !13
  %11 = load i8, i8* %uc, align 1, !tbaa !13
  %conv = zext i8 %11 to i32
  %12 = load i32*, i32** %pwc.addr, align 8, !tbaa !6
  store i32 %conv, i32* %12, align 4, !tbaa !2
  store i64 1, i64* %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %uc) #13
  br label %cleanup

if.end5:                                          ; preds = %land.lhs.true2, %land.lhs.true, %if.end
  %13 = load i64, i64* %ret, align 8, !tbaa !14
  store i64 %13, i64* %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end5, %if.then4
  %14 = bitcast i32* %wc to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %14) #13
  %15 = bitcast i64* %ret to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %15) #13
  %16 = load i64, i64* %retval, align 8
  ret i64 %16
}

; Function Attrs: nounwind
declare dso_local i64 @mbrtowc(i32*, i8*, i64, %struct.__mbstate_t*) #6

; Function Attrs: nounwind uwtable
define dso_local i32 @rpl_nanosleep(%struct.timespec* nonnull %requested_delay, %struct.timespec* %remaining_delay) #7 {
entry:
  %retval = alloca i32, align 4
  %requested_delay.addr = alloca %struct.timespec*, align 8
  %remaining_delay.addr = alloca %struct.timespec*, align 8
  %limit = alloca i64, align 8
  %seconds = alloca i64, align 8
  %intermediate = alloca %struct.timespec, align 8
  %result = alloca i32, align 4
  %cleanup.dest.slot = alloca i32, align 4
  store %struct.timespec* %requested_delay, %struct.timespec** %requested_delay.addr, align 8, !tbaa !6
  store %struct.timespec* %remaining_delay, %struct.timespec** %remaining_delay.addr, align 8, !tbaa !6
  %0 = load %struct.timespec*, %struct.timespec** %requested_delay.addr, align 8, !tbaa !6
  %tv_nsec = getelementptr inbounds %struct.timespec, %struct.timespec* %0, i32 0, i32 1
  %1 = load i64, i64* %tv_nsec, align 8, !tbaa !186
  %cmp = icmp slt i64 %1, 0
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.timespec*, %struct.timespec** %requested_delay.addr, align 8, !tbaa !6
  %tv_nsec1 = getelementptr inbounds %struct.timespec, %struct.timespec* %2, i32 0, i32 1
  %3 = load i64, i64* %tv_nsec1, align 8, !tbaa !186
  %cmp2 = icmp sle i64 1000000000, %3
  br i1 %cmp2, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  %call = call i32* @__errno_location() #26
  store i32 22, i32* %call, align 4, !tbaa !2
  store i32 -1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %4 = bitcast i64* %limit to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %4) #13
  store i64 2073600, i64* %limit, align 8, !tbaa !14
  %5 = bitcast i64* %seconds to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %5) #13
  %6 = load %struct.timespec*, %struct.timespec** %requested_delay.addr, align 8, !tbaa !6
  %tv_sec = getelementptr inbounds %struct.timespec, %struct.timespec* %6, i32 0, i32 0
  %7 = load i64, i64* %tv_sec, align 8, !tbaa !187
  store i64 %7, i64* %seconds, align 8, !tbaa !14
  %8 = bitcast %struct.timespec* %intermediate to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %8) #13
  %9 = load %struct.timespec*, %struct.timespec** %requested_delay.addr, align 8, !tbaa !6
  %tv_nsec3 = getelementptr inbounds %struct.timespec, %struct.timespec* %9, i32 0, i32 1
  %10 = load i64, i64* %tv_nsec3, align 8, !tbaa !186
  %tv_nsec4 = getelementptr inbounds %struct.timespec, %struct.timespec* %intermediate, i32 0, i32 1
  store i64 %10, i64* %tv_nsec4, align 8, !tbaa !186
  br label %while.cond

while.cond:                                       ; preds = %cleanup.cont, %if.end
  %11 = load i64, i64* %seconds, align 8, !tbaa !14
  %cmp5 = icmp slt i64 2073600, %11
  br i1 %cmp5, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %12 = bitcast i32* %result to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %12) #13
  %tv_sec6 = getelementptr inbounds %struct.timespec, %struct.timespec* %intermediate, i32 0, i32 0
  store i64 2073600, i64* %tv_sec6, align 8, !tbaa !187
  %13 = load %struct.timespec*, %struct.timespec** %remaining_delay.addr, align 8, !tbaa !6
  %call7 = call i32 @nanosleep(%struct.timespec* %intermediate, %struct.timespec* %13)
  store i32 %call7, i32* %result, align 4, !tbaa !2
  %14 = load i64, i64* %seconds, align 8, !tbaa !14
  %sub = sub nsw i64 %14, 2073600
  store i64 %sub, i64* %seconds, align 8, !tbaa !14
  %15 = load i32, i32* %result, align 4, !tbaa !2
  %tobool = icmp ne i32 %15, 0
  br i1 %tobool, label %if.then8, label %if.end13

if.then8:                                         ; preds = %while.body
  %16 = load %struct.timespec*, %struct.timespec** %remaining_delay.addr, align 8, !tbaa !6
  %tobool9 = icmp ne %struct.timespec* %16, null
  br i1 %tobool9, label %if.then10, label %if.end12

if.then10:                                        ; preds = %if.then8
  %17 = load i64, i64* %seconds, align 8, !tbaa !14
  %18 = load %struct.timespec*, %struct.timespec** %remaining_delay.addr, align 8, !tbaa !6
  %tv_sec11 = getelementptr inbounds %struct.timespec, %struct.timespec* %18, i32 0, i32 0
  %19 = load i64, i64* %tv_sec11, align 8, !tbaa !187
  %add = add nsw i64 %19, %17
  store i64 %add, i64* %tv_sec11, align 8, !tbaa !187
  br label %if.end12

if.end12:                                         ; preds = %if.then10, %if.then8
  %20 = load i32, i32* %result, align 4, !tbaa !2
  store i32 %20, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end13:                                         ; preds = %while.body
  %tv_nsec14 = getelementptr inbounds %struct.timespec, %struct.timespec* %intermediate, i32 0, i32 1
  store i64 0, i64* %tv_nsec14, align 8, !tbaa !186
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end13, %if.end12
  %21 = bitcast i32* %result to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %21) #13
  %cleanup.dest = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest, label %cleanup17 [
    i32 0, label %cleanup.cont
  ]

cleanup.cont:                                     ; preds = %cleanup
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %22 = load i64, i64* %seconds, align 8, !tbaa !14
  %tv_sec15 = getelementptr inbounds %struct.timespec, %struct.timespec* %intermediate, i32 0, i32 0
  store i64 %22, i64* %tv_sec15, align 8, !tbaa !187
  %23 = load %struct.timespec*, %struct.timespec** %remaining_delay.addr, align 8, !tbaa !6
  %call16 = call i32 @nanosleep(%struct.timespec* %intermediate, %struct.timespec* %23)
  store i32 %call16, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup17

cleanup17:                                        ; preds = %while.end, %cleanup
  %24 = bitcast %struct.timespec* %intermediate to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %24) #13
  %25 = bitcast i64* %seconds to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %25) #13
  %26 = bitcast i64* %limit to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %26) #13
  br label %return

return:                                           ; preds = %cleanup17, %if.then
  %27 = load i32, i32* %retval, align 4
  ret i32 %27
}

declare dso_local i32 @nanosleep(%struct.timespec*, %struct.timespec*) #1

; Function Attrs: noreturn nounwind uwtable
define internal void @print_and_abort() #0 {
entry:
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !6
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.390, i64 0, i64 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1.391, i64 0, i64 0))
  %1 = load volatile i32, i32* @exit_failure, align 4, !tbaa !2
  call void @exit(i32 %1) #21
  unreachable
}

; Function Attrs: nounwind uwtable
define dso_local i32 @_obstack_begin(%struct.obstack* %h, i64 %size, i64 %alignment, i8* (i64)* %chunkfun, void (i8*)* %freefun) #7 {
entry:
  %h.addr = alloca %struct.obstack*, align 8
  %size.addr = alloca i64, align 8
  %alignment.addr = alloca i64, align 8
  %chunkfun.addr = alloca i8* (i64)*, align 8
  %freefun.addr = alloca void (i8*)*, align 8
  store %struct.obstack* %h, %struct.obstack** %h.addr, align 8, !tbaa !6
  store i64 %size, i64* %size.addr, align 8, !tbaa !14
  store i64 %alignment, i64* %alignment.addr, align 8, !tbaa !14
  store i8* (i64)* %chunkfun, i8* (i64)** %chunkfun.addr, align 8, !tbaa !6
  store void (i8*)* %freefun, void (i8*)** %freefun.addr, align 8, !tbaa !6
  %0 = load i8* (i64)*, i8* (i64)** %chunkfun.addr, align 8, !tbaa !6
  %1 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !tbaa !6
  %chunkfun1 = getelementptr inbounds %struct.obstack, %struct.obstack* %1, i32 0, i32 7
  %plain = bitcast %union.anon.0* %chunkfun1 to i8* (i64)**
  store i8* (i64)* %0, i8* (i64)** %plain, align 8, !tbaa !13
  %2 = load void (i8*)*, void (i8*)** %freefun.addr, align 8, !tbaa !6
  %3 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !tbaa !6
  %freefun2 = getelementptr inbounds %struct.obstack, %struct.obstack* %3, i32 0, i32 8
  %plain3 = bitcast %union.anon.1* %freefun2 to void (i8*)**
  store void (i8*)* %2, void (i8*)** %plain3, align 8, !tbaa !13
  %4 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !tbaa !6
  %use_extra_arg = getelementptr inbounds %struct.obstack, %struct.obstack* %4, i32 0, i32 10
  %bf.load = load i8, i8* %use_extra_arg, align 8
  %bf.clear = and i8 %bf.load, -2
  store i8 %bf.clear, i8* %use_extra_arg, align 8
  %5 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !tbaa !6
  %6 = load i64, i64* %size.addr, align 8, !tbaa !14
  %7 = load i64, i64* %alignment.addr, align 8, !tbaa !14
  %call = call i32 @_obstack_begin_worker(%struct.obstack* %5, i64 %6, i64 %7)
  ret i32 %call
}

; Function Attrs: nounwind uwtable
define internal i32 @_obstack_begin_worker(%struct.obstack* %h, i64 %size, i64 %alignment) #7 {
entry:
  %h.addr = alloca %struct.obstack*, align 8
  %size.addr = alloca i64, align 8
  %alignment.addr = alloca i64, align 8
  %chunk = alloca %struct._obstack_chunk*, align 8
  %extra = alloca i32, align 4
  store %struct.obstack* %h, %struct.obstack** %h.addr, align 8, !tbaa !6
  store i64 %size, i64* %size.addr, align 8, !tbaa !14
  store i64 %alignment, i64* %alignment.addr, align 8, !tbaa !14
  %0 = bitcast %struct._obstack_chunk** %chunk to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #13
  %1 = load i64, i64* %alignment.addr, align 8, !tbaa !14
  %cmp = icmp eq i64 %1, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i64 16, i64* %alignment.addr, align 8, !tbaa !14
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %2 = load i64, i64* %size.addr, align 8, !tbaa !14
  %cmp1 = icmp eq i64 %2, 0
  br i1 %cmp1, label %if.then2, label %if.end3

if.then2:                                         ; preds = %if.end
  %3 = bitcast i32* %extra to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %3) #13
  store i32 32, i32* %extra, align 4, !tbaa !2
  %4 = load i32, i32* %extra, align 4, !tbaa !2
  %sub = sub nsw i32 4096, %4
  %conv = sext i32 %sub to i64
  store i64 %conv, i64* %size.addr, align 8, !tbaa !14
  %5 = bitcast i32* %extra to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %5) #13
  br label %if.end3

if.end3:                                          ; preds = %if.then2, %if.end
  %6 = load i64, i64* %size.addr, align 8, !tbaa !14
  %7 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !tbaa !6
  %chunk_size = getelementptr inbounds %struct.obstack, %struct.obstack* %7, i32 0, i32 0
  store i64 %6, i64* %chunk_size, align 8, !tbaa !188
  %8 = load i64, i64* %alignment.addr, align 8, !tbaa !14
  %sub4 = sub i64 %8, 1
  %9 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !tbaa !6
  %alignment_mask = getelementptr inbounds %struct.obstack, %struct.obstack* %9, i32 0, i32 6
  store i64 %sub4, i64* %alignment_mask, align 8, !tbaa !177
  %10 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !tbaa !6
  %11 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !tbaa !6
  %chunk_size5 = getelementptr inbounds %struct.obstack, %struct.obstack* %11, i32 0, i32 0
  %12 = load i64, i64* %chunk_size5, align 8, !tbaa !188
  %call = call i8* @call_chunkfun(%struct.obstack* %10, i64 %12)
  %13 = bitcast i8* %call to %struct._obstack_chunk*
  %14 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !tbaa !6
  %chunk6 = getelementptr inbounds %struct.obstack, %struct.obstack* %14, i32 0, i32 1
  store %struct._obstack_chunk* %13, %struct._obstack_chunk** %chunk6, align 8, !tbaa !173
  store %struct._obstack_chunk* %13, %struct._obstack_chunk** %chunk, align 8, !tbaa !6
  %15 = load %struct._obstack_chunk*, %struct._obstack_chunk** %chunk, align 8, !tbaa !6
  %tobool = icmp ne %struct._obstack_chunk* %15, null
  br i1 %tobool, label %if.end8, label %if.then7

if.then7:                                         ; preds = %if.end3
  %16 = load void ()*, void ()** @obstack_alloc_failed_handler, align 8, !tbaa !6
  call void %16() #24
  unreachable

if.end8:                                          ; preds = %if.end3
  %17 = load %struct._obstack_chunk*, %struct._obstack_chunk** %chunk, align 8, !tbaa !6
  %contents = getelementptr inbounds %struct._obstack_chunk, %struct._obstack_chunk* %17, i32 0, i32 2
  %arraydecay = getelementptr inbounds [0 x i8], [0 x i8]* %contents, i64 0, i64 0
  %sub.ptr.lhs.cast = ptrtoint i8* %arraydecay to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, 0
  %18 = load i64, i64* %alignment.addr, align 8, !tbaa !14
  %sub9 = sub i64 %18, 1
  %add = add i64 %sub.ptr.sub, %sub9
  %19 = load i64, i64* %alignment.addr, align 8, !tbaa !14
  %sub10 = sub i64 %19, 1
  %neg = xor i64 %sub10, -1
  %and = and i64 %add, %neg
  %add.ptr = getelementptr inbounds i8, i8* null, i64 %and
  %20 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !tbaa !6
  %object_base = getelementptr inbounds %struct.obstack, %struct.obstack* %20, i32 0, i32 2
  store i8* %add.ptr, i8** %object_base, align 8, !tbaa !175
  %21 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !tbaa !6
  %next_free = getelementptr inbounds %struct.obstack, %struct.obstack* %21, i32 0, i32 3
  store i8* %add.ptr, i8** %next_free, align 8, !tbaa !176
  %22 = load %struct._obstack_chunk*, %struct._obstack_chunk** %chunk, align 8, !tbaa !6
  %23 = bitcast %struct._obstack_chunk* %22 to i8*
  %24 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !tbaa !6
  %chunk_size11 = getelementptr inbounds %struct.obstack, %struct.obstack* %24, i32 0, i32 0
  %25 = load i64, i64* %chunk_size11, align 8, !tbaa !188
  %add.ptr12 = getelementptr inbounds i8, i8* %23, i64 %25
  %26 = load %struct._obstack_chunk*, %struct._obstack_chunk** %chunk, align 8, !tbaa !6
  %limit = getelementptr inbounds %struct._obstack_chunk, %struct._obstack_chunk* %26, i32 0, i32 0
  store i8* %add.ptr12, i8** %limit, align 8, !tbaa !6
  %27 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !tbaa !6
  %chunk_limit = getelementptr inbounds %struct.obstack, %struct.obstack* %27, i32 0, i32 4
  store i8* %add.ptr12, i8** %chunk_limit, align 8, !tbaa !174
  %28 = load %struct._obstack_chunk*, %struct._obstack_chunk** %chunk, align 8, !tbaa !6
  %prev = getelementptr inbounds %struct._obstack_chunk, %struct._obstack_chunk* %28, i32 0, i32 1
  store %struct._obstack_chunk* null, %struct._obstack_chunk** %prev, align 8, !tbaa !6
  %29 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !tbaa !6
  %maybe_empty_object = getelementptr inbounds %struct.obstack, %struct.obstack* %29, i32 0, i32 10
  %bf.load = load i8, i8* %maybe_empty_object, align 8
  %bf.clear = and i8 %bf.load, -3
  store i8 %bf.clear, i8* %maybe_empty_object, align 8
  %30 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !tbaa !6
  %alloc_failed = getelementptr inbounds %struct.obstack, %struct.obstack* %30, i32 0, i32 10
  %bf.load13 = load i8, i8* %alloc_failed, align 8
  %bf.clear14 = and i8 %bf.load13, -5
  store i8 %bf.clear14, i8* %alloc_failed, align 8
  %31 = bitcast %struct._obstack_chunk** %chunk to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %31) #13
  ret i32 1
}

; Function Attrs: nounwind uwtable
define internal i8* @call_chunkfun(%struct.obstack* %h, i64 %size) #7 {
entry:
  %retval = alloca i8*, align 8
  %h.addr = alloca %struct.obstack*, align 8
  %size.addr = alloca i64, align 8
  store %struct.obstack* %h, %struct.obstack** %h.addr, align 8, !tbaa !6
  store i64 %size, i64* %size.addr, align 8, !tbaa !14
  %0 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !tbaa !6
  %use_extra_arg = getelementptr inbounds %struct.obstack, %struct.obstack* %0, i32 0, i32 10
  %bf.load = load i8, i8* %use_extra_arg, align 8
  %bf.clear = and i8 %bf.load, 1
  %bf.cast = zext i8 %bf.clear to i32
  %tobool = icmp ne i32 %bf.cast, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !tbaa !6
  %chunkfun = getelementptr inbounds %struct.obstack, %struct.obstack* %1, i32 0, i32 7
  %extra = bitcast %union.anon.0* %chunkfun to i8* (i8*, i64)**
  %2 = load i8* (i8*, i64)*, i8* (i8*, i64)** %extra, align 8, !tbaa !13
  %3 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !tbaa !6
  %extra_arg = getelementptr inbounds %struct.obstack, %struct.obstack* %3, i32 0, i32 9
  %4 = load i8*, i8** %extra_arg, align 8, !tbaa !189
  %5 = load i64, i64* %size.addr, align 8, !tbaa !14
  %call = call i8* %2(i8* %4, i64 %5)
  store i8* %call, i8** %retval, align 8
  br label %return

if.else:                                          ; preds = %entry
  %6 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !tbaa !6
  %chunkfun1 = getelementptr inbounds %struct.obstack, %struct.obstack* %6, i32 0, i32 7
  %plain = bitcast %union.anon.0* %chunkfun1 to i8* (i64)**
  %7 = load i8* (i64)*, i8* (i64)** %plain, align 8, !tbaa !13
  %8 = load i64, i64* %size.addr, align 8, !tbaa !14
  %call2 = call i8* %7(i64 %8)
  store i8* %call2, i8** %retval, align 8
  br label %return

return:                                           ; preds = %if.else, %if.then
  %9 = load i8*, i8** %retval, align 8
  ret i8* %9
}

; Function Attrs: nounwind uwtable
define dso_local i32 @_obstack_begin_1(%struct.obstack* %h, i64 %size, i64 %alignment, i8* (i8*, i64)* %chunkfun, void (i8*, i8*)* %freefun, i8* %arg) #7 {
entry:
  %h.addr = alloca %struct.obstack*, align 8
  %size.addr = alloca i64, align 8
  %alignment.addr = alloca i64, align 8
  %chunkfun.addr = alloca i8* (i8*, i64)*, align 8
  %freefun.addr = alloca void (i8*, i8*)*, align 8
  %arg.addr = alloca i8*, align 8
  store %struct.obstack* %h, %struct.obstack** %h.addr, align 8, !tbaa !6
  store i64 %size, i64* %size.addr, align 8, !tbaa !14
  store i64 %alignment, i64* %alignment.addr, align 8, !tbaa !14
  store i8* (i8*, i64)* %chunkfun, i8* (i8*, i64)** %chunkfun.addr, align 8, !tbaa !6
  store void (i8*, i8*)* %freefun, void (i8*, i8*)** %freefun.addr, align 8, !tbaa !6
  store i8* %arg, i8** %arg.addr, align 8, !tbaa !6
  %0 = load i8* (i8*, i64)*, i8* (i8*, i64)** %chunkfun.addr, align 8, !tbaa !6
  %1 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !tbaa !6
  %chunkfun1 = getelementptr inbounds %struct.obstack, %struct.obstack* %1, i32 0, i32 7
  %extra = bitcast %union.anon.0* %chunkfun1 to i8* (i8*, i64)**
  store i8* (i8*, i64)* %0, i8* (i8*, i64)** %extra, align 8, !tbaa !13
  %2 = load void (i8*, i8*)*, void (i8*, i8*)** %freefun.addr, align 8, !tbaa !6
  %3 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !tbaa !6
  %freefun2 = getelementptr inbounds %struct.obstack, %struct.obstack* %3, i32 0, i32 8
  %extra3 = bitcast %union.anon.1* %freefun2 to void (i8*, i8*)**
  store void (i8*, i8*)* %2, void (i8*, i8*)** %extra3, align 8, !tbaa !13
  %4 = load i8*, i8** %arg.addr, align 8, !tbaa !6
  %5 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !tbaa !6
  %extra_arg = getelementptr inbounds %struct.obstack, %struct.obstack* %5, i32 0, i32 9
  store i8* %4, i8** %extra_arg, align 8, !tbaa !189
  %6 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !tbaa !6
  %use_extra_arg = getelementptr inbounds %struct.obstack, %struct.obstack* %6, i32 0, i32 10
  %bf.load = load i8, i8* %use_extra_arg, align 8
  %bf.clear = and i8 %bf.load, -2
  %bf.set = or i8 %bf.clear, 1
  store i8 %bf.set, i8* %use_extra_arg, align 8
  %7 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !tbaa !6
  %8 = load i64, i64* %size.addr, align 8, !tbaa !14
  %9 = load i64, i64* %alignment.addr, align 8, !tbaa !14
  %call = call i32 @_obstack_begin_worker(%struct.obstack* %7, i64 %8, i64 %9)
  ret i32 %call
}

; Function Attrs: nounwind uwtable
define dso_local void @_obstack_newchunk(%struct.obstack* %h, i64 %length) #7 {
entry:
  %h.addr = alloca %struct.obstack*, align 8
  %length.addr = alloca i64, align 8
  %old_chunk = alloca %struct._obstack_chunk*, align 8
  %new_chunk = alloca %struct._obstack_chunk*, align 8
  %obj_size = alloca i64, align 8
  %object_base1 = alloca i8*, align 8
  %sum1 = alloca i64, align 8
  %sum2 = alloca i64, align 8
  %new_size = alloca i64, align 8
  store %struct.obstack* %h, %struct.obstack** %h.addr, align 8, !tbaa !6
  store i64 %length, i64* %length.addr, align 8, !tbaa !14
  %0 = bitcast %struct._obstack_chunk** %old_chunk to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #13
  %1 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !tbaa !6
  %chunk = getelementptr inbounds %struct.obstack, %struct.obstack* %1, i32 0, i32 1
  %2 = load %struct._obstack_chunk*, %struct._obstack_chunk** %chunk, align 8, !tbaa !173
  store %struct._obstack_chunk* %2, %struct._obstack_chunk** %old_chunk, align 8, !tbaa !6
  %3 = bitcast %struct._obstack_chunk** %new_chunk to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %3) #13
  store %struct._obstack_chunk* null, %struct._obstack_chunk** %new_chunk, align 8, !tbaa !6
  %4 = bitcast i64* %obj_size to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %4) #13
  %5 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !tbaa !6
  %next_free = getelementptr inbounds %struct.obstack, %struct.obstack* %5, i32 0, i32 3
  %6 = load i8*, i8** %next_free, align 8, !tbaa !176
  %7 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !tbaa !6
  %object_base = getelementptr inbounds %struct.obstack, %struct.obstack* %7, i32 0, i32 2
  %8 = load i8*, i8** %object_base, align 8, !tbaa !175
  %sub.ptr.lhs.cast = ptrtoint i8* %6 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %8 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  store i64 %sub.ptr.sub, i64* %obj_size, align 8, !tbaa !14
  %9 = bitcast i8** %object_base1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %9) #13
  %10 = bitcast i64* %sum1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %10) #13
  %11 = load i64, i64* %obj_size, align 8, !tbaa !14
  %12 = load i64, i64* %length.addr, align 8, !tbaa !14
  %add = add i64 %11, %12
  store i64 %add, i64* %sum1, align 8, !tbaa !14
  %13 = bitcast i64* %sum2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %13) #13
  %14 = load i64, i64* %sum1, align 8, !tbaa !14
  %15 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !tbaa !6
  %alignment_mask = getelementptr inbounds %struct.obstack, %struct.obstack* %15, i32 0, i32 6
  %16 = load i64, i64* %alignment_mask, align 8, !tbaa !177
  %add2 = add i64 %14, %16
  store i64 %add2, i64* %sum2, align 8, !tbaa !14
  %17 = bitcast i64* %new_size to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %17) #13
  %18 = load i64, i64* %sum2, align 8, !tbaa !14
  %19 = load i64, i64* %obj_size, align 8, !tbaa !14
  %shr = lshr i64 %19, 3
  %add3 = add i64 %18, %shr
  %add4 = add i64 %add3, 100
  store i64 %add4, i64* %new_size, align 8, !tbaa !14
  %20 = load i64, i64* %new_size, align 8, !tbaa !14
  %21 = load i64, i64* %sum2, align 8, !tbaa !14
  %cmp = icmp ult i64 %20, %21
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %22 = load i64, i64* %sum2, align 8, !tbaa !14
  store i64 %22, i64* %new_size, align 8, !tbaa !14
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %23 = load i64, i64* %new_size, align 8, !tbaa !14
  %24 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !tbaa !6
  %chunk_size = getelementptr inbounds %struct.obstack, %struct.obstack* %24, i32 0, i32 0
  %25 = load i64, i64* %chunk_size, align 8, !tbaa !188
  %cmp5 = icmp ult i64 %23, %25
  br i1 %cmp5, label %if.then6, label %if.end8

if.then6:                                         ; preds = %if.end
  %26 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !tbaa !6
  %chunk_size7 = getelementptr inbounds %struct.obstack, %struct.obstack* %26, i32 0, i32 0
  %27 = load i64, i64* %chunk_size7, align 8, !tbaa !188
  store i64 %27, i64* %new_size, align 8, !tbaa !14
  br label %if.end8

if.end8:                                          ; preds = %if.then6, %if.end
  %28 = load i64, i64* %obj_size, align 8, !tbaa !14
  %29 = load i64, i64* %sum1, align 8, !tbaa !14
  %cmp9 = icmp ule i64 %28, %29
  br i1 %cmp9, label %land.lhs.true, label %if.end12

land.lhs.true:                                    ; preds = %if.end8
  %30 = load i64, i64* %sum1, align 8, !tbaa !14
  %31 = load i64, i64* %sum2, align 8, !tbaa !14
  %cmp10 = icmp ule i64 %30, %31
  br i1 %cmp10, label %if.then11, label %if.end12

if.then11:                                        ; preds = %land.lhs.true
  %32 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !tbaa !6
  %33 = load i64, i64* %new_size, align 8, !tbaa !14
  %call = call i8* @call_chunkfun(%struct.obstack* %32, i64 %33)
  %34 = bitcast i8* %call to %struct._obstack_chunk*
  store %struct._obstack_chunk* %34, %struct._obstack_chunk** %new_chunk, align 8, !tbaa !6
  br label %if.end12

if.end12:                                         ; preds = %if.then11, %land.lhs.true, %if.end8
  %35 = load %struct._obstack_chunk*, %struct._obstack_chunk** %new_chunk, align 8, !tbaa !6
  %tobool = icmp ne %struct._obstack_chunk* %35, null
  br i1 %tobool, label %if.end14, label %if.then13

if.then13:                                        ; preds = %if.end12
  %36 = load void ()*, void ()** @obstack_alloc_failed_handler, align 8, !tbaa !6
  call void %36() #24
  unreachable

if.end14:                                         ; preds = %if.end12
  %37 = load %struct._obstack_chunk*, %struct._obstack_chunk** %new_chunk, align 8, !tbaa !6
  %38 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !tbaa !6
  %chunk15 = getelementptr inbounds %struct.obstack, %struct.obstack* %38, i32 0, i32 1
  store %struct._obstack_chunk* %37, %struct._obstack_chunk** %chunk15, align 8, !tbaa !173
  %39 = load %struct._obstack_chunk*, %struct._obstack_chunk** %old_chunk, align 8, !tbaa !6
  %40 = load %struct._obstack_chunk*, %struct._obstack_chunk** %new_chunk, align 8, !tbaa !6
  %prev = getelementptr inbounds %struct._obstack_chunk, %struct._obstack_chunk* %40, i32 0, i32 1
  store %struct._obstack_chunk* %39, %struct._obstack_chunk** %prev, align 8, !tbaa !6
  %41 = load %struct._obstack_chunk*, %struct._obstack_chunk** %new_chunk, align 8, !tbaa !6
  %42 = bitcast %struct._obstack_chunk* %41 to i8*
  %43 = load i64, i64* %new_size, align 8, !tbaa !14
  %add.ptr = getelementptr inbounds i8, i8* %42, i64 %43
  %44 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !tbaa !6
  %chunk_limit = getelementptr inbounds %struct.obstack, %struct.obstack* %44, i32 0, i32 4
  store i8* %add.ptr, i8** %chunk_limit, align 8, !tbaa !174
  %45 = load %struct._obstack_chunk*, %struct._obstack_chunk** %new_chunk, align 8, !tbaa !6
  %limit = getelementptr inbounds %struct._obstack_chunk, %struct._obstack_chunk* %45, i32 0, i32 0
  store i8* %add.ptr, i8** %limit, align 8, !tbaa !6
  %46 = load %struct._obstack_chunk*, %struct._obstack_chunk** %new_chunk, align 8, !tbaa !6
  %contents = getelementptr inbounds %struct._obstack_chunk, %struct._obstack_chunk* %46, i32 0, i32 2
  %arraydecay = getelementptr inbounds [0 x i8], [0 x i8]* %contents, i64 0, i64 0
  %sub.ptr.lhs.cast16 = ptrtoint i8* %arraydecay to i64
  %sub.ptr.sub17 = sub i64 %sub.ptr.lhs.cast16, 0
  %47 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !tbaa !6
  %alignment_mask18 = getelementptr inbounds %struct.obstack, %struct.obstack* %47, i32 0, i32 6
  %48 = load i64, i64* %alignment_mask18, align 8, !tbaa !177
  %add19 = add i64 %sub.ptr.sub17, %48
  %49 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !tbaa !6
  %alignment_mask20 = getelementptr inbounds %struct.obstack, %struct.obstack* %49, i32 0, i32 6
  %50 = load i64, i64* %alignment_mask20, align 8, !tbaa !177
  %neg = xor i64 %50, -1
  %and = and i64 %add19, %neg
  %add.ptr21 = getelementptr inbounds i8, i8* null, i64 %and
  store i8* %add.ptr21, i8** %object_base1, align 8, !tbaa !6
  %51 = load i8*, i8** %object_base1, align 8, !tbaa !6
  %52 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !tbaa !6
  %object_base22 = getelementptr inbounds %struct.obstack, %struct.obstack* %52, i32 0, i32 2
  %53 = load i8*, i8** %object_base22, align 8, !tbaa !175
  %54 = load i64, i64* %obj_size, align 8, !tbaa !14
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %51, i8* align 1 %53, i64 %54, i1 false)
  %55 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !tbaa !6
  %maybe_empty_object = getelementptr inbounds %struct.obstack, %struct.obstack* %55, i32 0, i32 10
  %bf.load = load i8, i8* %maybe_empty_object, align 8
  %bf.lshr = lshr i8 %bf.load, 1
  %bf.clear = and i8 %bf.lshr, 1
  %bf.cast = zext i8 %bf.clear to i32
  %tobool23 = icmp ne i32 %bf.cast, 0
  br i1 %tobool23, label %if.end40, label %land.lhs.true24

land.lhs.true24:                                  ; preds = %if.end14
  %56 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !tbaa !6
  %object_base25 = getelementptr inbounds %struct.obstack, %struct.obstack* %56, i32 0, i32 2
  %57 = load i8*, i8** %object_base25, align 8, !tbaa !175
  %58 = load %struct._obstack_chunk*, %struct._obstack_chunk** %old_chunk, align 8, !tbaa !6
  %contents26 = getelementptr inbounds %struct._obstack_chunk, %struct._obstack_chunk* %58, i32 0, i32 2
  %arraydecay27 = getelementptr inbounds [0 x i8], [0 x i8]* %contents26, i64 0, i64 0
  %sub.ptr.lhs.cast28 = ptrtoint i8* %arraydecay27 to i64
  %sub.ptr.sub29 = sub i64 %sub.ptr.lhs.cast28, 0
  %59 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !tbaa !6
  %alignment_mask30 = getelementptr inbounds %struct.obstack, %struct.obstack* %59, i32 0, i32 6
  %60 = load i64, i64* %alignment_mask30, align 8, !tbaa !177
  %add31 = add i64 %sub.ptr.sub29, %60
  %61 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !tbaa !6
  %alignment_mask32 = getelementptr inbounds %struct.obstack, %struct.obstack* %61, i32 0, i32 6
  %62 = load i64, i64* %alignment_mask32, align 8, !tbaa !177
  %neg33 = xor i64 %62, -1
  %and34 = and i64 %add31, %neg33
  %add.ptr35 = getelementptr inbounds i8, i8* null, i64 %and34
  %cmp36 = icmp eq i8* %57, %add.ptr35
  br i1 %cmp36, label %if.then37, label %if.end40

if.then37:                                        ; preds = %land.lhs.true24
  %63 = load %struct._obstack_chunk*, %struct._obstack_chunk** %old_chunk, align 8, !tbaa !6
  %prev38 = getelementptr inbounds %struct._obstack_chunk, %struct._obstack_chunk* %63, i32 0, i32 1
  %64 = load %struct._obstack_chunk*, %struct._obstack_chunk** %prev38, align 8, !tbaa !6
  %65 = load %struct._obstack_chunk*, %struct._obstack_chunk** %new_chunk, align 8, !tbaa !6
  %prev39 = getelementptr inbounds %struct._obstack_chunk, %struct._obstack_chunk* %65, i32 0, i32 1
  store %struct._obstack_chunk* %64, %struct._obstack_chunk** %prev39, align 8, !tbaa !6
  %66 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !tbaa !6
  %67 = load %struct._obstack_chunk*, %struct._obstack_chunk** %old_chunk, align 8, !tbaa !6
  %68 = bitcast %struct._obstack_chunk* %67 to i8*
  call void @call_freefun(%struct.obstack* %66, i8* %68)
  br label %if.end40

if.end40:                                         ; preds = %if.then37, %land.lhs.true24, %if.end14
  %69 = load i8*, i8** %object_base1, align 8, !tbaa !6
  %70 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !tbaa !6
  %object_base41 = getelementptr inbounds %struct.obstack, %struct.obstack* %70, i32 0, i32 2
  store i8* %69, i8** %object_base41, align 8, !tbaa !175
  %71 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !tbaa !6
  %object_base42 = getelementptr inbounds %struct.obstack, %struct.obstack* %71, i32 0, i32 2
  %72 = load i8*, i8** %object_base42, align 8, !tbaa !175
  %73 = load i64, i64* %obj_size, align 8, !tbaa !14
  %add.ptr43 = getelementptr inbounds i8, i8* %72, i64 %73
  %74 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !tbaa !6
  %next_free44 = getelementptr inbounds %struct.obstack, %struct.obstack* %74, i32 0, i32 3
  store i8* %add.ptr43, i8** %next_free44, align 8, !tbaa !176
  %75 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !tbaa !6
  %maybe_empty_object45 = getelementptr inbounds %struct.obstack, %struct.obstack* %75, i32 0, i32 10
  %bf.load46 = load i8, i8* %maybe_empty_object45, align 8
  %bf.clear47 = and i8 %bf.load46, -3
  store i8 %bf.clear47, i8* %maybe_empty_object45, align 8
  %76 = bitcast i64* %new_size to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %76) #13
  %77 = bitcast i64* %sum2 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %77) #13
  %78 = bitcast i64* %sum1 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %78) #13
  %79 = bitcast i8** %object_base1 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %79) #13
  %80 = bitcast i64* %obj_size to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %80) #13
  %81 = bitcast %struct._obstack_chunk** %new_chunk to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %81) #13
  %82 = bitcast %struct._obstack_chunk** %old_chunk to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %82) #13
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @call_freefun(%struct.obstack* %h, i8* %old_chunk) #7 {
entry:
  %h.addr = alloca %struct.obstack*, align 8
  %old_chunk.addr = alloca i8*, align 8
  store %struct.obstack* %h, %struct.obstack** %h.addr, align 8, !tbaa !6
  store i8* %old_chunk, i8** %old_chunk.addr, align 8, !tbaa !6
  %0 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !tbaa !6
  %use_extra_arg = getelementptr inbounds %struct.obstack, %struct.obstack* %0, i32 0, i32 10
  %bf.load = load i8, i8* %use_extra_arg, align 8
  %bf.clear = and i8 %bf.load, 1
  %bf.cast = zext i8 %bf.clear to i32
  %tobool = icmp ne i32 %bf.cast, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !tbaa !6
  %freefun = getelementptr inbounds %struct.obstack, %struct.obstack* %1, i32 0, i32 8
  %extra = bitcast %union.anon.1* %freefun to void (i8*, i8*)**
  %2 = load void (i8*, i8*)*, void (i8*, i8*)** %extra, align 8, !tbaa !13
  %3 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !tbaa !6
  %extra_arg = getelementptr inbounds %struct.obstack, %struct.obstack* %3, i32 0, i32 9
  %4 = load i8*, i8** %extra_arg, align 8, !tbaa !189
  %5 = load i8*, i8** %old_chunk.addr, align 8, !tbaa !6
  call void %2(i8* %4, i8* %5)
  br label %if.end

if.else:                                          ; preds = %entry
  %6 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !tbaa !6
  %freefun1 = getelementptr inbounds %struct.obstack, %struct.obstack* %6, i32 0, i32 8
  %plain = bitcast %union.anon.1* %freefun1 to void (i8*)**
  %7 = load void (i8*)*, void (i8*)** %plain, align 8, !tbaa !13
  %8 = load i8*, i8** %old_chunk.addr, align 8, !tbaa !6
  call void %7(i8* %8)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void
}

; Function Attrs: nounwind readonly uwtable
define dso_local i32 @_obstack_allocated_p(%struct.obstack* %h, i8* %obj) #9 {
entry:
  %h.addr = alloca %struct.obstack*, align 8
  %obj.addr = alloca i8*, align 8
  %lp = alloca %struct._obstack_chunk*, align 8
  %plp = alloca %struct._obstack_chunk*, align 8
  store %struct.obstack* %h, %struct.obstack** %h.addr, align 8, !tbaa !6
  store i8* %obj, i8** %obj.addr, align 8, !tbaa !6
  %0 = bitcast %struct._obstack_chunk** %lp to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #13
  %1 = bitcast %struct._obstack_chunk** %plp to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %1) #13
  %2 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !tbaa !6
  %chunk = getelementptr inbounds %struct.obstack, %struct.obstack* %2, i32 0, i32 1
  %3 = load %struct._obstack_chunk*, %struct._obstack_chunk** %chunk, align 8, !tbaa !173
  store %struct._obstack_chunk* %3, %struct._obstack_chunk** %lp, align 8, !tbaa !6
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %4 = load %struct._obstack_chunk*, %struct._obstack_chunk** %lp, align 8, !tbaa !6
  %cmp = icmp ne %struct._obstack_chunk* %4, null
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %5 = load %struct._obstack_chunk*, %struct._obstack_chunk** %lp, align 8, !tbaa !6
  %6 = bitcast %struct._obstack_chunk* %5 to i8*
  %7 = load i8*, i8** %obj.addr, align 8, !tbaa !6
  %cmp1 = icmp uge i8* %6, %7
  br i1 %cmp1, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %land.rhs
  %8 = load %struct._obstack_chunk*, %struct._obstack_chunk** %lp, align 8, !tbaa !6
  %limit = getelementptr inbounds %struct._obstack_chunk, %struct._obstack_chunk* %8, i32 0, i32 0
  %9 = load i8*, i8** %limit, align 8, !tbaa !6
  %10 = load i8*, i8** %obj.addr, align 8, !tbaa !6
  %cmp2 = icmp ult i8* %9, %10
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %land.rhs
  %11 = phi i1 [ true, %land.rhs ], [ %cmp2, %lor.rhs ]
  br label %land.end

land.end:                                         ; preds = %lor.end, %while.cond
  %12 = phi i1 [ false, %while.cond ], [ %11, %lor.end ]
  br i1 %12, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %13 = load %struct._obstack_chunk*, %struct._obstack_chunk** %lp, align 8, !tbaa !6
  %prev = getelementptr inbounds %struct._obstack_chunk, %struct._obstack_chunk* %13, i32 0, i32 1
  %14 = load %struct._obstack_chunk*, %struct._obstack_chunk** %prev, align 8, !tbaa !6
  store %struct._obstack_chunk* %14, %struct._obstack_chunk** %plp, align 8, !tbaa !6
  %15 = load %struct._obstack_chunk*, %struct._obstack_chunk** %plp, align 8, !tbaa !6
  store %struct._obstack_chunk* %15, %struct._obstack_chunk** %lp, align 8, !tbaa !6
  br label %while.cond

while.end:                                        ; preds = %land.end
  %16 = load %struct._obstack_chunk*, %struct._obstack_chunk** %lp, align 8, !tbaa !6
  %cmp3 = icmp ne %struct._obstack_chunk* %16, null
  %conv = zext i1 %cmp3 to i32
  %17 = bitcast %struct._obstack_chunk** %plp to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %17) #13
  %18 = bitcast %struct._obstack_chunk** %lp to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %18) #13
  ret i32 %conv
}

; Function Attrs: nounwind uwtable
define dso_local void @_obstack_free(%struct.obstack* %h, i8* %obj) #7 {
entry:
  %h.addr = alloca %struct.obstack*, align 8
  %obj.addr = alloca i8*, align 8
  %lp = alloca %struct._obstack_chunk*, align 8
  %plp = alloca %struct._obstack_chunk*, align 8
  store %struct.obstack* %h, %struct.obstack** %h.addr, align 8, !tbaa !6
  store i8* %obj, i8** %obj.addr, align 8, !tbaa !6
  %0 = bitcast %struct._obstack_chunk** %lp to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #13
  %1 = bitcast %struct._obstack_chunk** %plp to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %1) #13
  %2 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !tbaa !6
  %chunk = getelementptr inbounds %struct.obstack, %struct.obstack* %2, i32 0, i32 1
  %3 = load %struct._obstack_chunk*, %struct._obstack_chunk** %chunk, align 8, !tbaa !173
  store %struct._obstack_chunk* %3, %struct._obstack_chunk** %lp, align 8, !tbaa !6
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %4 = load %struct._obstack_chunk*, %struct._obstack_chunk** %lp, align 8, !tbaa !6
  %cmp = icmp ne %struct._obstack_chunk* %4, null
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %5 = load %struct._obstack_chunk*, %struct._obstack_chunk** %lp, align 8, !tbaa !6
  %6 = bitcast %struct._obstack_chunk* %5 to i8*
  %7 = load i8*, i8** %obj.addr, align 8, !tbaa !6
  %cmp1 = icmp uge i8* %6, %7
  br i1 %cmp1, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %land.rhs
  %8 = load %struct._obstack_chunk*, %struct._obstack_chunk** %lp, align 8, !tbaa !6
  %limit = getelementptr inbounds %struct._obstack_chunk, %struct._obstack_chunk* %8, i32 0, i32 0
  %9 = load i8*, i8** %limit, align 8, !tbaa !6
  %10 = load i8*, i8** %obj.addr, align 8, !tbaa !6
  %cmp2 = icmp ult i8* %9, %10
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %land.rhs
  %11 = phi i1 [ true, %land.rhs ], [ %cmp2, %lor.rhs ]
  br label %land.end

land.end:                                         ; preds = %lor.end, %while.cond
  %12 = phi i1 [ false, %while.cond ], [ %11, %lor.end ]
  br i1 %12, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %13 = load %struct._obstack_chunk*, %struct._obstack_chunk** %lp, align 8, !tbaa !6
  %prev = getelementptr inbounds %struct._obstack_chunk, %struct._obstack_chunk* %13, i32 0, i32 1
  %14 = load %struct._obstack_chunk*, %struct._obstack_chunk** %prev, align 8, !tbaa !6
  store %struct._obstack_chunk* %14, %struct._obstack_chunk** %plp, align 8, !tbaa !6
  %15 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !tbaa !6
  %16 = load %struct._obstack_chunk*, %struct._obstack_chunk** %lp, align 8, !tbaa !6
  %17 = bitcast %struct._obstack_chunk* %16 to i8*
  call void @call_freefun(%struct.obstack* %15, i8* %17)
  %18 = load %struct._obstack_chunk*, %struct._obstack_chunk** %plp, align 8, !tbaa !6
  store %struct._obstack_chunk* %18, %struct._obstack_chunk** %lp, align 8, !tbaa !6
  %19 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !tbaa !6
  %maybe_empty_object = getelementptr inbounds %struct.obstack, %struct.obstack* %19, i32 0, i32 10
  %bf.load = load i8, i8* %maybe_empty_object, align 8
  %bf.clear = and i8 %bf.load, -3
  %bf.set = or i8 %bf.clear, 2
  store i8 %bf.set, i8* %maybe_empty_object, align 8
  br label %while.cond

while.end:                                        ; preds = %land.end
  %20 = load %struct._obstack_chunk*, %struct._obstack_chunk** %lp, align 8, !tbaa !6
  %tobool = icmp ne %struct._obstack_chunk* %20, null
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %while.end
  %21 = load i8*, i8** %obj.addr, align 8, !tbaa !6
  %22 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !tbaa !6
  %next_free = getelementptr inbounds %struct.obstack, %struct.obstack* %22, i32 0, i32 3
  store i8* %21, i8** %next_free, align 8, !tbaa !176
  %23 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !tbaa !6
  %object_base = getelementptr inbounds %struct.obstack, %struct.obstack* %23, i32 0, i32 2
  store i8* %21, i8** %object_base, align 8, !tbaa !175
  %24 = load %struct._obstack_chunk*, %struct._obstack_chunk** %lp, align 8, !tbaa !6
  %limit3 = getelementptr inbounds %struct._obstack_chunk, %struct._obstack_chunk* %24, i32 0, i32 0
  %25 = load i8*, i8** %limit3, align 8, !tbaa !6
  %26 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !tbaa !6
  %chunk_limit = getelementptr inbounds %struct.obstack, %struct.obstack* %26, i32 0, i32 4
  store i8* %25, i8** %chunk_limit, align 8, !tbaa !174
  %27 = load %struct._obstack_chunk*, %struct._obstack_chunk** %lp, align 8, !tbaa !6
  %28 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !tbaa !6
  %chunk4 = getelementptr inbounds %struct.obstack, %struct.obstack* %28, i32 0, i32 1
  store %struct._obstack_chunk* %27, %struct._obstack_chunk** %chunk4, align 8, !tbaa !173
  br label %if.end7

if.else:                                          ; preds = %while.end
  %29 = load i8*, i8** %obj.addr, align 8, !tbaa !6
  %cmp5 = icmp ne i8* %29, null
  br i1 %cmp5, label %if.then6, label %if.end

if.then6:                                         ; preds = %if.else
  call void @abort() #21
  unreachable

if.end:                                           ; preds = %if.else
  br label %if.end7

if.end7:                                          ; preds = %if.end, %if.then
  %30 = bitcast %struct._obstack_chunk** %plp to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %30) #13
  %31 = bitcast %struct._obstack_chunk** %lp to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %31) #13
  ret void
}

; Function Attrs: nounwind readonly uwtable
define dso_local i64 @_obstack_memory_used(%struct.obstack* %h) #9 {
entry:
  %h.addr = alloca %struct.obstack*, align 8
  %lp = alloca %struct._obstack_chunk*, align 8
  %nbytes = alloca i64, align 8
  store %struct.obstack* %h, %struct.obstack** %h.addr, align 8, !tbaa !6
  %0 = bitcast %struct._obstack_chunk** %lp to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #13
  %1 = bitcast i64* %nbytes to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %1) #13
  store i64 0, i64* %nbytes, align 8, !tbaa !14
  %2 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !tbaa !6
  %chunk = getelementptr inbounds %struct.obstack, %struct.obstack* %2, i32 0, i32 1
  %3 = load %struct._obstack_chunk*, %struct._obstack_chunk** %chunk, align 8, !tbaa !173
  store %struct._obstack_chunk* %3, %struct._obstack_chunk** %lp, align 8, !tbaa !6
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load %struct._obstack_chunk*, %struct._obstack_chunk** %lp, align 8, !tbaa !6
  %cmp = icmp ne %struct._obstack_chunk* %4, null
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load %struct._obstack_chunk*, %struct._obstack_chunk** %lp, align 8, !tbaa !6
  %limit = getelementptr inbounds %struct._obstack_chunk, %struct._obstack_chunk* %5, i32 0, i32 0
  %6 = load i8*, i8** %limit, align 8, !tbaa !6
  %7 = load %struct._obstack_chunk*, %struct._obstack_chunk** %lp, align 8, !tbaa !6
  %8 = bitcast %struct._obstack_chunk* %7 to i8*
  %sub.ptr.lhs.cast = ptrtoint i8* %6 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %8 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %9 = load i64, i64* %nbytes, align 8, !tbaa !14
  %add = add i64 %9, %sub.ptr.sub
  store i64 %add, i64* %nbytes, align 8, !tbaa !14
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %10 = load %struct._obstack_chunk*, %struct._obstack_chunk** %lp, align 8, !tbaa !6
  %prev = getelementptr inbounds %struct._obstack_chunk, %struct._obstack_chunk* %10, i32 0, i32 1
  %11 = load %struct._obstack_chunk*, %struct._obstack_chunk** %prev, align 8, !tbaa !6
  store %struct._obstack_chunk* %11, %struct._obstack_chunk** %lp, align 8, !tbaa !6
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %12 = load i64, i64* %nbytes, align 8, !tbaa !14
  %13 = bitcast i64* %nbytes to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %13) #13
  %14 = bitcast %struct._obstack_chunk** %lp to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %14) #13
  ret i64 %12
}

; Function Attrs: inlinehint nounwind uwtable
define dso_local i64 @rotl64(i64 %x, i32 %n) #2 {
entry:
  %x.addr = alloca i64, align 8
  %n.addr = alloca i32, align 4
  store i64 %x, i64* %x.addr, align 8, !tbaa !14
  store i32 %n, i32* %n.addr, align 4, !tbaa !2
  %0 = load i64, i64* %x.addr, align 8, !tbaa !14
  %1 = load i32, i32* %n.addr, align 4, !tbaa !2
  %sh_prom = zext i32 %1 to i64
  %shl = shl i64 %0, %sh_prom
  %2 = load i64, i64* %x.addr, align 8, !tbaa !14
  %3 = load i32, i32* %n.addr, align 4, !tbaa !2
  %sub = sub nsw i32 64, %3
  %sh_prom1 = zext i32 %sub to i64
  %shr = lshr i64 %2, %sh_prom1
  %or = or i64 %shl, %shr
  ret i64 %or
}

; Function Attrs: inlinehint nounwind uwtable
define dso_local i64 @rotr64(i64 %x, i32 %n) #2 {
entry:
  %x.addr = alloca i64, align 8
  %n.addr = alloca i32, align 4
  store i64 %x, i64* %x.addr, align 8, !tbaa !14
  store i32 %n, i32* %n.addr, align 4, !tbaa !2
  %0 = load i64, i64* %x.addr, align 8, !tbaa !14
  %1 = load i32, i32* %n.addr, align 4, !tbaa !2
  %sh_prom = zext i32 %1 to i64
  %shr = lshr i64 %0, %sh_prom
  %2 = load i64, i64* %x.addr, align 8, !tbaa !14
  %3 = load i32, i32* %n.addr, align 4, !tbaa !2
  %sub = sub nsw i32 64, %3
  %sh_prom1 = zext i32 %sub to i64
  %shl = shl i64 %2, %sh_prom1
  %or = or i64 %shr, %shl
  ret i64 %or
}

; Function Attrs: inlinehint nounwind uwtable
define dso_local i32 @rotl32(i32 %x, i32 %n) #2 {
entry:
  %x.addr = alloca i32, align 4
  %n.addr = alloca i32, align 4
  store i32 %x, i32* %x.addr, align 4, !tbaa !2
  store i32 %n, i32* %n.addr, align 4, !tbaa !2
  %0 = load i32, i32* %x.addr, align 4, !tbaa !2
  %1 = load i32, i32* %n.addr, align 4, !tbaa !2
  %shl = shl i32 %0, %1
  %2 = load i32, i32* %x.addr, align 4, !tbaa !2
  %3 = load i32, i32* %n.addr, align 4, !tbaa !2
  %sub = sub nsw i32 32, %3
  %shr = lshr i32 %2, %sub
  %or = or i32 %shl, %shr
  ret i32 %or
}

; Function Attrs: inlinehint nounwind uwtable
define dso_local i32 @rotr32(i32 %x, i32 %n) #2 {
entry:
  %x.addr = alloca i32, align 4
  %n.addr = alloca i32, align 4
  store i32 %x, i32* %x.addr, align 4, !tbaa !2
  store i32 %n, i32* %n.addr, align 4, !tbaa !2
  %0 = load i32, i32* %x.addr, align 4, !tbaa !2
  %1 = load i32, i32* %n.addr, align 4, !tbaa !2
  %shr = lshr i32 %0, %1
  %2 = load i32, i32* %x.addr, align 4, !tbaa !2
  %3 = load i32, i32* %n.addr, align 4, !tbaa !2
  %sub = sub nsw i32 32, %3
  %shl = shl i32 %2, %sub
  %or = or i32 %shr, %shl
  ret i32 %or
}

; Function Attrs: inlinehint nounwind uwtable
define dso_local i64 @rotl_sz(i64 %x, i32 %n) #2 {
entry:
  %x.addr = alloca i64, align 8
  %n.addr = alloca i32, align 4
  store i64 %x, i64* %x.addr, align 8, !tbaa !14
  store i32 %n, i32* %n.addr, align 4, !tbaa !2
  %0 = load i64, i64* %x.addr, align 8, !tbaa !14
  %1 = load i32, i32* %n.addr, align 4, !tbaa !2
  %sh_prom = zext i32 %1 to i64
  %shl = shl i64 %0, %sh_prom
  %2 = load i64, i64* %x.addr, align 8, !tbaa !14
  %3 = load i32, i32* %n.addr, align 4, !tbaa !2
  %conv = sext i32 %3 to i64
  %sub = sub i64 64, %conv
  %shr = lshr i64 %2, %sub
  %or = or i64 %shl, %shr
  ret i64 %or
}

; Function Attrs: inlinehint nounwind uwtable
define dso_local i64 @rotr_sz(i64 %x, i32 %n) #2 {
entry:
  %x.addr = alloca i64, align 8
  %n.addr = alloca i32, align 4
  store i64 %x, i64* %x.addr, align 8, !tbaa !14
  store i32 %n, i32* %n.addr, align 4, !tbaa !2
  %0 = load i64, i64* %x.addr, align 8, !tbaa !14
  %1 = load i32, i32* %n.addr, align 4, !tbaa !2
  %sh_prom = zext i32 %1 to i64
  %shr = lshr i64 %0, %sh_prom
  %2 = load i64, i64* %x.addr, align 8, !tbaa !14
  %3 = load i32, i32* %n.addr, align 4, !tbaa !2
  %conv = sext i32 %3 to i64
  %sub = sub i64 64, %conv
  %shl = shl i64 %2, %sub
  %or = or i64 %shr, %shl
  ret i64 %or
}

; Function Attrs: inlinehint nounwind uwtable
define dso_local zeroext i16 @rotl16(i16 zeroext %x, i32 %n) #2 {
entry:
  %x.addr = alloca i16, align 2
  %n.addr = alloca i32, align 4
  store i16 %x, i16* %x.addr, align 2, !tbaa !48
  store i32 %n, i32* %n.addr, align 4, !tbaa !2
  %0 = load i16, i16* %x.addr, align 2, !tbaa !48
  %conv = zext i16 %0 to i32
  %1 = load i32, i32* %n.addr, align 4, !tbaa !2
  %shl = shl i32 %conv, %1
  %2 = load i16, i16* %x.addr, align 2, !tbaa !48
  %conv1 = zext i16 %2 to i32
  %3 = load i32, i32* %n.addr, align 4, !tbaa !2
  %sub = sub nsw i32 16, %3
  %shr = lshr i32 %conv1, %sub
  %or = or i32 %shl, %shr
  %and = and i32 %or, 65535
  %conv2 = trunc i32 %and to i16
  ret i16 %conv2
}

; Function Attrs: inlinehint nounwind uwtable
define dso_local zeroext i16 @rotr16(i16 zeroext %x, i32 %n) #2 {
entry:
  %x.addr = alloca i16, align 2
  %n.addr = alloca i32, align 4
  store i16 %x, i16* %x.addr, align 2, !tbaa !48
  store i32 %n, i32* %n.addr, align 4, !tbaa !2
  %0 = load i16, i16* %x.addr, align 2, !tbaa !48
  %conv = zext i16 %0 to i32
  %1 = load i32, i32* %n.addr, align 4, !tbaa !2
  %shr = lshr i32 %conv, %1
  %2 = load i16, i16* %x.addr, align 2, !tbaa !48
  %conv1 = zext i16 %2 to i32
  %3 = load i32, i32* %n.addr, align 4, !tbaa !2
  %sub = sub nsw i32 16, %3
  %shl = shl i32 %conv1, %sub
  %or = or i32 %shr, %shl
  %and = and i32 %or, 65535
  %conv2 = trunc i32 %and to i16
  ret i16 %conv2
}

; Function Attrs: inlinehint nounwind uwtable
define dso_local zeroext i8 @rotl8(i8 zeroext %x, i32 %n) #2 {
entry:
  %x.addr = alloca i8, align 1
  %n.addr = alloca i32, align 4
  store i8 %x, i8* %x.addr, align 1, !tbaa !13
  store i32 %n, i32* %n.addr, align 4, !tbaa !2
  %0 = load i8, i8* %x.addr, align 1, !tbaa !13
  %conv = zext i8 %0 to i32
  %1 = load i32, i32* %n.addr, align 4, !tbaa !2
  %shl = shl i32 %conv, %1
  %2 = load i8, i8* %x.addr, align 1, !tbaa !13
  %conv1 = zext i8 %2 to i32
  %3 = load i32, i32* %n.addr, align 4, !tbaa !2
  %sub = sub nsw i32 8, %3
  %shr = lshr i32 %conv1, %sub
  %or = or i32 %shl, %shr
  %and = and i32 %or, 255
  %conv2 = trunc i32 %and to i8
  ret i8 %conv2
}

; Function Attrs: inlinehint nounwind uwtable
define dso_local zeroext i8 @rotr8(i8 zeroext %x, i32 %n) #2 {
entry:
  %x.addr = alloca i8, align 1
  %n.addr = alloca i32, align 4
  store i8 %x, i8* %x.addr, align 1, !tbaa !13
  store i32 %n, i32* %n.addr, align 4, !tbaa !2
  %0 = load i8, i8* %x.addr, align 1, !tbaa !13
  %conv = zext i8 %0 to i32
  %1 = load i32, i32* %n.addr, align 4, !tbaa !2
  %shr = lshr i32 %conv, %1
  %2 = load i8, i8* %x.addr, align 1, !tbaa !13
  %conv1 = zext i8 %2 to i32
  %3 = load i32, i32* %n.addr, align 4, !tbaa !2
  %sub = sub nsw i32 8, %3
  %shl = shl i32 %conv1, %sub
  %or = or i32 %shr, %shl
  %and = and i32 %or, 255
  %conv2 = trunc i32 %and to i8
  ret i8 %conv2
}

; Function Attrs: inlinehint nounwind uwtable
define dso_local zeroext i1 @c_isalnum(i32 %c) #2 {
entry:
  %retval = alloca i1, align 1
  %c.addr = alloca i32, align 4
  store i32 %c, i32* %c.addr, align 4, !tbaa !2
  %0 = load i32, i32* %c.addr, align 4, !tbaa !2
  switch i32 %0, label %sw.default [
    i32 48, label %sw.bb
    i32 49, label %sw.bb
    i32 50, label %sw.bb
    i32 51, label %sw.bb
    i32 52, label %sw.bb
    i32 53, label %sw.bb
    i32 54, label %sw.bb
    i32 55, label %sw.bb
    i32 56, label %sw.bb
    i32 57, label %sw.bb
    i32 97, label %sw.bb
    i32 98, label %sw.bb
    i32 99, label %sw.bb
    i32 100, label %sw.bb
    i32 101, label %sw.bb
    i32 102, label %sw.bb
    i32 103, label %sw.bb
    i32 104, label %sw.bb
    i32 105, label %sw.bb
    i32 106, label %sw.bb
    i32 107, label %sw.bb
    i32 108, label %sw.bb
    i32 109, label %sw.bb
    i32 110, label %sw.bb
    i32 111, label %sw.bb
    i32 112, label %sw.bb
    i32 113, label %sw.bb
    i32 114, label %sw.bb
    i32 115, label %sw.bb
    i32 116, label %sw.bb
    i32 117, label %sw.bb
    i32 118, label %sw.bb
    i32 119, label %sw.bb
    i32 120, label %sw.bb
    i32 121, label %sw.bb
    i32 122, label %sw.bb
    i32 65, label %sw.bb
    i32 66, label %sw.bb
    i32 67, label %sw.bb
    i32 68, label %sw.bb
    i32 69, label %sw.bb
    i32 70, label %sw.bb
    i32 71, label %sw.bb
    i32 72, label %sw.bb
    i32 73, label %sw.bb
    i32 74, label %sw.bb
    i32 75, label %sw.bb
    i32 76, label %sw.bb
    i32 77, label %sw.bb
    i32 78, label %sw.bb
    i32 79, label %sw.bb
    i32 80, label %sw.bb
    i32 81, label %sw.bb
    i32 82, label %sw.bb
    i32 83, label %sw.bb
    i32 84, label %sw.bb
    i32 85, label %sw.bb
    i32 86, label %sw.bb
    i32 87, label %sw.bb
    i32 88, label %sw.bb
    i32 89, label %sw.bb
    i32 90, label %sw.bb
  ]

sw.bb:                                            ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry
  store i1 true, i1* %retval, align 1
  br label %return

sw.default:                                       ; preds = %entry
  store i1 false, i1* %retval, align 1
  br label %return

return:                                           ; preds = %sw.default, %sw.bb
  %1 = load i1, i1* %retval, align 1
  ret i1 %1
}

; Function Attrs: inlinehint nounwind uwtable
define dso_local zeroext i1 @c_isalpha(i32 %c) #2 {
entry:
  %retval = alloca i1, align 1
  %c.addr = alloca i32, align 4
  store i32 %c, i32* %c.addr, align 4, !tbaa !2
  %0 = load i32, i32* %c.addr, align 4, !tbaa !2
  switch i32 %0, label %sw.default [
    i32 97, label %sw.bb
    i32 98, label %sw.bb
    i32 99, label %sw.bb
    i32 100, label %sw.bb
    i32 101, label %sw.bb
    i32 102, label %sw.bb
    i32 103, label %sw.bb
    i32 104, label %sw.bb
    i32 105, label %sw.bb
    i32 106, label %sw.bb
    i32 107, label %sw.bb
    i32 108, label %sw.bb
    i32 109, label %sw.bb
    i32 110, label %sw.bb
    i32 111, label %sw.bb
    i32 112, label %sw.bb
    i32 113, label %sw.bb
    i32 114, label %sw.bb
    i32 115, label %sw.bb
    i32 116, label %sw.bb
    i32 117, label %sw.bb
    i32 118, label %sw.bb
    i32 119, label %sw.bb
    i32 120, label %sw.bb
    i32 121, label %sw.bb
    i32 122, label %sw.bb
    i32 65, label %sw.bb
    i32 66, label %sw.bb
    i32 67, label %sw.bb
    i32 68, label %sw.bb
    i32 69, label %sw.bb
    i32 70, label %sw.bb
    i32 71, label %sw.bb
    i32 72, label %sw.bb
    i32 73, label %sw.bb
    i32 74, label %sw.bb
    i32 75, label %sw.bb
    i32 76, label %sw.bb
    i32 77, label %sw.bb
    i32 78, label %sw.bb
    i32 79, label %sw.bb
    i32 80, label %sw.bb
    i32 81, label %sw.bb
    i32 82, label %sw.bb
    i32 83, label %sw.bb
    i32 84, label %sw.bb
    i32 85, label %sw.bb
    i32 86, label %sw.bb
    i32 87, label %sw.bb
    i32 88, label %sw.bb
    i32 89, label %sw.bb
    i32 90, label %sw.bb
  ]

sw.bb:                                            ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry
  store i1 true, i1* %retval, align 1
  br label %return

sw.default:                                       ; preds = %entry
  store i1 false, i1* %retval, align 1
  br label %return

return:                                           ; preds = %sw.default, %sw.bb
  %1 = load i1, i1* %retval, align 1
  ret i1 %1
}

; Function Attrs: inlinehint nounwind uwtable
define dso_local zeroext i1 @c_isascii(i32 %c) #2 {
entry:
  %retval = alloca i1, align 1
  %c.addr = alloca i32, align 4
  store i32 %c, i32* %c.addr, align 4, !tbaa !2
  %0 = load i32, i32* %c.addr, align 4, !tbaa !2
  switch i32 %0, label %sw.default [
    i32 32, label %sw.bb
    i32 7, label %sw.bb
    i32 8, label %sw.bb
    i32 12, label %sw.bb
    i32 10, label %sw.bb
    i32 13, label %sw.bb
    i32 9, label %sw.bb
    i32 11, label %sw.bb
    i32 0, label %sw.bb
    i32 1, label %sw.bb
    i32 2, label %sw.bb
    i32 3, label %sw.bb
    i32 4, label %sw.bb
    i32 5, label %sw.bb
    i32 6, label %sw.bb
    i32 14, label %sw.bb
    i32 15, label %sw.bb
    i32 16, label %sw.bb
    i32 17, label %sw.bb
    i32 18, label %sw.bb
    i32 19, label %sw.bb
    i32 20, label %sw.bb
    i32 21, label %sw.bb
    i32 22, label %sw.bb
    i32 23, label %sw.bb
    i32 24, label %sw.bb
    i32 25, label %sw.bb
    i32 26, label %sw.bb
    i32 27, label %sw.bb
    i32 28, label %sw.bb
    i32 29, label %sw.bb
    i32 30, label %sw.bb
    i32 31, label %sw.bb
    i32 127, label %sw.bb
    i32 48, label %sw.bb
    i32 49, label %sw.bb
    i32 50, label %sw.bb
    i32 51, label %sw.bb
    i32 52, label %sw.bb
    i32 53, label %sw.bb
    i32 54, label %sw.bb
    i32 55, label %sw.bb
    i32 56, label %sw.bb
    i32 57, label %sw.bb
    i32 97, label %sw.bb
    i32 98, label %sw.bb
    i32 99, label %sw.bb
    i32 100, label %sw.bb
    i32 101, label %sw.bb
    i32 102, label %sw.bb
    i32 103, label %sw.bb
    i32 104, label %sw.bb
    i32 105, label %sw.bb
    i32 106, label %sw.bb
    i32 107, label %sw.bb
    i32 108, label %sw.bb
    i32 109, label %sw.bb
    i32 110, label %sw.bb
    i32 111, label %sw.bb
    i32 112, label %sw.bb
    i32 113, label %sw.bb
    i32 114, label %sw.bb
    i32 115, label %sw.bb
    i32 116, label %sw.bb
    i32 117, label %sw.bb
    i32 118, label %sw.bb
    i32 119, label %sw.bb
    i32 120, label %sw.bb
    i32 121, label %sw.bb
    i32 122, label %sw.bb
    i32 33, label %sw.bb
    i32 34, label %sw.bb
    i32 35, label %sw.bb
    i32 36, label %sw.bb
    i32 37, label %sw.bb
    i32 38, label %sw.bb
    i32 39, label %sw.bb
    i32 40, label %sw.bb
    i32 41, label %sw.bb
    i32 42, label %sw.bb
    i32 43, label %sw.bb
    i32 44, label %sw.bb
    i32 45, label %sw.bb
    i32 46, label %sw.bb
    i32 47, label %sw.bb
    i32 58, label %sw.bb
    i32 59, label %sw.bb
    i32 60, label %sw.bb
    i32 61, label %sw.bb
    i32 62, label %sw.bb
    i32 63, label %sw.bb
    i32 64, label %sw.bb
    i32 91, label %sw.bb
    i32 92, label %sw.bb
    i32 93, label %sw.bb
    i32 94, label %sw.bb
    i32 95, label %sw.bb
    i32 96, label %sw.bb
    i32 123, label %sw.bb
    i32 124, label %sw.bb
    i32 125, label %sw.bb
    i32 126, label %sw.bb
    i32 65, label %sw.bb
    i32 66, label %sw.bb
    i32 67, label %sw.bb
    i32 68, label %sw.bb
    i32 69, label %sw.bb
    i32 70, label %sw.bb
    i32 71, label %sw.bb
    i32 72, label %sw.bb
    i32 73, label %sw.bb
    i32 74, label %sw.bb
    i32 75, label %sw.bb
    i32 76, label %sw.bb
    i32 77, label %sw.bb
    i32 78, label %sw.bb
    i32 79, label %sw.bb
    i32 80, label %sw.bb
    i32 81, label %sw.bb
    i32 82, label %sw.bb
    i32 83, label %sw.bb
    i32 84, label %sw.bb
    i32 85, label %sw.bb
    i32 86, label %sw.bb
    i32 87, label %sw.bb
    i32 88, label %sw.bb
    i32 89, label %sw.bb
    i32 90, label %sw.bb
  ]

sw.bb:                                            ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry
  store i1 true, i1* %retval, align 1
  br label %return

sw.default:                                       ; preds = %entry
  store i1 false, i1* %retval, align 1
  br label %return

return:                                           ; preds = %sw.default, %sw.bb
  %1 = load i1, i1* %retval, align 1
  ret i1 %1
}

; Function Attrs: inlinehint nounwind uwtable
define dso_local zeroext i1 @c_isblank(i32 %c) #2 {
entry:
  %c.addr = alloca i32, align 4
  store i32 %c, i32* %c.addr, align 4, !tbaa !2
  %0 = load i32, i32* %c.addr, align 4, !tbaa !2
  %cmp = icmp eq i32 %0, 32
  br i1 %cmp, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %entry
  %1 = load i32, i32* %c.addr, align 4, !tbaa !2
  %cmp1 = icmp eq i32 %1, 9
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %entry
  %2 = phi i1 [ true, %entry ], [ %cmp1, %lor.rhs ]
  ret i1 %2
}

; Function Attrs: inlinehint nounwind uwtable
define dso_local zeroext i1 @c_iscntrl(i32 %c) #2 {
entry:
  %retval = alloca i1, align 1
  %c.addr = alloca i32, align 4
  store i32 %c, i32* %c.addr, align 4, !tbaa !2
  %0 = load i32, i32* %c.addr, align 4, !tbaa !2
  switch i32 %0, label %sw.default [
    i32 7, label %sw.bb
    i32 8, label %sw.bb
    i32 12, label %sw.bb
    i32 10, label %sw.bb
    i32 13, label %sw.bb
    i32 9, label %sw.bb
    i32 11, label %sw.bb
    i32 0, label %sw.bb
    i32 1, label %sw.bb
    i32 2, label %sw.bb
    i32 3, label %sw.bb
    i32 4, label %sw.bb
    i32 5, label %sw.bb
    i32 6, label %sw.bb
    i32 14, label %sw.bb
    i32 15, label %sw.bb
    i32 16, label %sw.bb
    i32 17, label %sw.bb
    i32 18, label %sw.bb
    i32 19, label %sw.bb
    i32 20, label %sw.bb
    i32 21, label %sw.bb
    i32 22, label %sw.bb
    i32 23, label %sw.bb
    i32 24, label %sw.bb
    i32 25, label %sw.bb
    i32 26, label %sw.bb
    i32 27, label %sw.bb
    i32 28, label %sw.bb
    i32 29, label %sw.bb
    i32 30, label %sw.bb
    i32 31, label %sw.bb
    i32 127, label %sw.bb
  ]

sw.bb:                                            ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry
  store i1 true, i1* %retval, align 1
  br label %return

sw.default:                                       ; preds = %entry
  store i1 false, i1* %retval, align 1
  br label %return

return:                                           ; preds = %sw.default, %sw.bb
  %1 = load i1, i1* %retval, align 1
  ret i1 %1
}

; Function Attrs: inlinehint nounwind uwtable
define dso_local zeroext i1 @c_isdigit(i32 %c) #2 {
entry:
  %retval = alloca i1, align 1
  %c.addr = alloca i32, align 4
  store i32 %c, i32* %c.addr, align 4, !tbaa !2
  %0 = load i32, i32* %c.addr, align 4, !tbaa !2
  switch i32 %0, label %sw.default [
    i32 48, label %sw.bb
    i32 49, label %sw.bb
    i32 50, label %sw.bb
    i32 51, label %sw.bb
    i32 52, label %sw.bb
    i32 53, label %sw.bb
    i32 54, label %sw.bb
    i32 55, label %sw.bb
    i32 56, label %sw.bb
    i32 57, label %sw.bb
  ]

sw.bb:                                            ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry
  store i1 true, i1* %retval, align 1
  br label %return

sw.default:                                       ; preds = %entry
  store i1 false, i1* %retval, align 1
  br label %return

return:                                           ; preds = %sw.default, %sw.bb
  %1 = load i1, i1* %retval, align 1
  ret i1 %1
}

; Function Attrs: inlinehint nounwind uwtable
define dso_local zeroext i1 @c_isgraph(i32 %c) #2 {
entry:
  %retval = alloca i1, align 1
  %c.addr = alloca i32, align 4
  store i32 %c, i32* %c.addr, align 4, !tbaa !2
  %0 = load i32, i32* %c.addr, align 4, !tbaa !2
  switch i32 %0, label %sw.default [
    i32 48, label %sw.bb
    i32 49, label %sw.bb
    i32 50, label %sw.bb
    i32 51, label %sw.bb
    i32 52, label %sw.bb
    i32 53, label %sw.bb
    i32 54, label %sw.bb
    i32 55, label %sw.bb
    i32 56, label %sw.bb
    i32 57, label %sw.bb
    i32 97, label %sw.bb
    i32 98, label %sw.bb
    i32 99, label %sw.bb
    i32 100, label %sw.bb
    i32 101, label %sw.bb
    i32 102, label %sw.bb
    i32 103, label %sw.bb
    i32 104, label %sw.bb
    i32 105, label %sw.bb
    i32 106, label %sw.bb
    i32 107, label %sw.bb
    i32 108, label %sw.bb
    i32 109, label %sw.bb
    i32 110, label %sw.bb
    i32 111, label %sw.bb
    i32 112, label %sw.bb
    i32 113, label %sw.bb
    i32 114, label %sw.bb
    i32 115, label %sw.bb
    i32 116, label %sw.bb
    i32 117, label %sw.bb
    i32 118, label %sw.bb
    i32 119, label %sw.bb
    i32 120, label %sw.bb
    i32 121, label %sw.bb
    i32 122, label %sw.bb
    i32 33, label %sw.bb
    i32 34, label %sw.bb
    i32 35, label %sw.bb
    i32 36, label %sw.bb
    i32 37, label %sw.bb
    i32 38, label %sw.bb
    i32 39, label %sw.bb
    i32 40, label %sw.bb
    i32 41, label %sw.bb
    i32 42, label %sw.bb
    i32 43, label %sw.bb
    i32 44, label %sw.bb
    i32 45, label %sw.bb
    i32 46, label %sw.bb
    i32 47, label %sw.bb
    i32 58, label %sw.bb
    i32 59, label %sw.bb
    i32 60, label %sw.bb
    i32 61, label %sw.bb
    i32 62, label %sw.bb
    i32 63, label %sw.bb
    i32 64, label %sw.bb
    i32 91, label %sw.bb
    i32 92, label %sw.bb
    i32 93, label %sw.bb
    i32 94, label %sw.bb
    i32 95, label %sw.bb
    i32 96, label %sw.bb
    i32 123, label %sw.bb
    i32 124, label %sw.bb
    i32 125, label %sw.bb
    i32 126, label %sw.bb
    i32 65, label %sw.bb
    i32 66, label %sw.bb
    i32 67, label %sw.bb
    i32 68, label %sw.bb
    i32 69, label %sw.bb
    i32 70, label %sw.bb
    i32 71, label %sw.bb
    i32 72, label %sw.bb
    i32 73, label %sw.bb
    i32 74, label %sw.bb
    i32 75, label %sw.bb
    i32 76, label %sw.bb
    i32 77, label %sw.bb
    i32 78, label %sw.bb
    i32 79, label %sw.bb
    i32 80, label %sw.bb
    i32 81, label %sw.bb
    i32 82, label %sw.bb
    i32 83, label %sw.bb
    i32 84, label %sw.bb
    i32 85, label %sw.bb
    i32 86, label %sw.bb
    i32 87, label %sw.bb
    i32 88, label %sw.bb
    i32 89, label %sw.bb
    i32 90, label %sw.bb
  ]

sw.bb:                                            ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry
  store i1 true, i1* %retval, align 1
  br label %return

sw.default:                                       ; preds = %entry
  store i1 false, i1* %retval, align 1
  br label %return

return:                                           ; preds = %sw.default, %sw.bb
  %1 = load i1, i1* %retval, align 1
  ret i1 %1
}

; Function Attrs: inlinehint nounwind uwtable
define dso_local zeroext i1 @c_islower(i32 %c) #2 {
entry:
  %retval = alloca i1, align 1
  %c.addr = alloca i32, align 4
  store i32 %c, i32* %c.addr, align 4, !tbaa !2
  %0 = load i32, i32* %c.addr, align 4, !tbaa !2
  switch i32 %0, label %sw.default [
    i32 97, label %sw.bb
    i32 98, label %sw.bb
    i32 99, label %sw.bb
    i32 100, label %sw.bb
    i32 101, label %sw.bb
    i32 102, label %sw.bb
    i32 103, label %sw.bb
    i32 104, label %sw.bb
    i32 105, label %sw.bb
    i32 106, label %sw.bb
    i32 107, label %sw.bb
    i32 108, label %sw.bb
    i32 109, label %sw.bb
    i32 110, label %sw.bb
    i32 111, label %sw.bb
    i32 112, label %sw.bb
    i32 113, label %sw.bb
    i32 114, label %sw.bb
    i32 115, label %sw.bb
    i32 116, label %sw.bb
    i32 117, label %sw.bb
    i32 118, label %sw.bb
    i32 119, label %sw.bb
    i32 120, label %sw.bb
    i32 121, label %sw.bb
    i32 122, label %sw.bb
  ]

sw.bb:                                            ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry
  store i1 true, i1* %retval, align 1
  br label %return

sw.default:                                       ; preds = %entry
  store i1 false, i1* %retval, align 1
  br label %return

return:                                           ; preds = %sw.default, %sw.bb
  %1 = load i1, i1* %retval, align 1
  ret i1 %1
}

; Function Attrs: inlinehint nounwind uwtable
define dso_local zeroext i1 @c_isprint(i32 %c) #2 {
entry:
  %retval = alloca i1, align 1
  %c.addr = alloca i32, align 4
  store i32 %c, i32* %c.addr, align 4, !tbaa !2
  %0 = load i32, i32* %c.addr, align 4, !tbaa !2
  switch i32 %0, label %sw.default [
    i32 32, label %sw.bb
    i32 48, label %sw.bb
    i32 49, label %sw.bb
    i32 50, label %sw.bb
    i32 51, label %sw.bb
    i32 52, label %sw.bb
    i32 53, label %sw.bb
    i32 54, label %sw.bb
    i32 55, label %sw.bb
    i32 56, label %sw.bb
    i32 57, label %sw.bb
    i32 97, label %sw.bb
    i32 98, label %sw.bb
    i32 99, label %sw.bb
    i32 100, label %sw.bb
    i32 101, label %sw.bb
    i32 102, label %sw.bb
    i32 103, label %sw.bb
    i32 104, label %sw.bb
    i32 105, label %sw.bb
    i32 106, label %sw.bb
    i32 107, label %sw.bb
    i32 108, label %sw.bb
    i32 109, label %sw.bb
    i32 110, label %sw.bb
    i32 111, label %sw.bb
    i32 112, label %sw.bb
    i32 113, label %sw.bb
    i32 114, label %sw.bb
    i32 115, label %sw.bb
    i32 116, label %sw.bb
    i32 117, label %sw.bb
    i32 118, label %sw.bb
    i32 119, label %sw.bb
    i32 120, label %sw.bb
    i32 121, label %sw.bb
    i32 122, label %sw.bb
    i32 33, label %sw.bb
    i32 34, label %sw.bb
    i32 35, label %sw.bb
    i32 36, label %sw.bb
    i32 37, label %sw.bb
    i32 38, label %sw.bb
    i32 39, label %sw.bb
    i32 40, label %sw.bb
    i32 41, label %sw.bb
    i32 42, label %sw.bb
    i32 43, label %sw.bb
    i32 44, label %sw.bb
    i32 45, label %sw.bb
    i32 46, label %sw.bb
    i32 47, label %sw.bb
    i32 58, label %sw.bb
    i32 59, label %sw.bb
    i32 60, label %sw.bb
    i32 61, label %sw.bb
    i32 62, label %sw.bb
    i32 63, label %sw.bb
    i32 64, label %sw.bb
    i32 91, label %sw.bb
    i32 92, label %sw.bb
    i32 93, label %sw.bb
    i32 94, label %sw.bb
    i32 95, label %sw.bb
    i32 96, label %sw.bb
    i32 123, label %sw.bb
    i32 124, label %sw.bb
    i32 125, label %sw.bb
    i32 126, label %sw.bb
    i32 65, label %sw.bb
    i32 66, label %sw.bb
    i32 67, label %sw.bb
    i32 68, label %sw.bb
    i32 69, label %sw.bb
    i32 70, label %sw.bb
    i32 71, label %sw.bb
    i32 72, label %sw.bb
    i32 73, label %sw.bb
    i32 74, label %sw.bb
    i32 75, label %sw.bb
    i32 76, label %sw.bb
    i32 77, label %sw.bb
    i32 78, label %sw.bb
    i32 79, label %sw.bb
    i32 80, label %sw.bb
    i32 81, label %sw.bb
    i32 82, label %sw.bb
    i32 83, label %sw.bb
    i32 84, label %sw.bb
    i32 85, label %sw.bb
    i32 86, label %sw.bb
    i32 87, label %sw.bb
    i32 88, label %sw.bb
    i32 89, label %sw.bb
    i32 90, label %sw.bb
  ]

sw.bb:                                            ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry
  store i1 true, i1* %retval, align 1
  br label %return

sw.default:                                       ; preds = %entry
  store i1 false, i1* %retval, align 1
  br label %return

return:                                           ; preds = %sw.default, %sw.bb
  %1 = load i1, i1* %retval, align 1
  ret i1 %1
}

; Function Attrs: inlinehint nounwind uwtable
define dso_local zeroext i1 @c_ispunct(i32 %c) #2 {
entry:
  %retval = alloca i1, align 1
  %c.addr = alloca i32, align 4
  store i32 %c, i32* %c.addr, align 4, !tbaa !2
  %0 = load i32, i32* %c.addr, align 4, !tbaa !2
  switch i32 %0, label %sw.default [
    i32 33, label %sw.bb
    i32 34, label %sw.bb
    i32 35, label %sw.bb
    i32 36, label %sw.bb
    i32 37, label %sw.bb
    i32 38, label %sw.bb
    i32 39, label %sw.bb
    i32 40, label %sw.bb
    i32 41, label %sw.bb
    i32 42, label %sw.bb
    i32 43, label %sw.bb
    i32 44, label %sw.bb
    i32 45, label %sw.bb
    i32 46, label %sw.bb
    i32 47, label %sw.bb
    i32 58, label %sw.bb
    i32 59, label %sw.bb
    i32 60, label %sw.bb
    i32 61, label %sw.bb
    i32 62, label %sw.bb
    i32 63, label %sw.bb
    i32 64, label %sw.bb
    i32 91, label %sw.bb
    i32 92, label %sw.bb
    i32 93, label %sw.bb
    i32 94, label %sw.bb
    i32 95, label %sw.bb
    i32 96, label %sw.bb
    i32 123, label %sw.bb
    i32 124, label %sw.bb
    i32 125, label %sw.bb
    i32 126, label %sw.bb
  ]

sw.bb:                                            ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry
  store i1 true, i1* %retval, align 1
  br label %return

sw.default:                                       ; preds = %entry
  store i1 false, i1* %retval, align 1
  br label %return

return:                                           ; preds = %sw.default, %sw.bb
  %1 = load i1, i1* %retval, align 1
  ret i1 %1
}

; Function Attrs: inlinehint nounwind uwtable
define dso_local zeroext i1 @c_isspace(i32 %c) #2 {
entry:
  %retval = alloca i1, align 1
  %c.addr = alloca i32, align 4
  store i32 %c, i32* %c.addr, align 4, !tbaa !2
  %0 = load i32, i32* %c.addr, align 4, !tbaa !2
  switch i32 %0, label %sw.default [
    i32 32, label %sw.bb
    i32 9, label %sw.bb
    i32 10, label %sw.bb
    i32 11, label %sw.bb
    i32 12, label %sw.bb
    i32 13, label %sw.bb
  ]

sw.bb:                                            ; preds = %entry, %entry, %entry, %entry, %entry, %entry
  store i1 true, i1* %retval, align 1
  br label %return

sw.default:                                       ; preds = %entry
  store i1 false, i1* %retval, align 1
  br label %return

return:                                           ; preds = %sw.default, %sw.bb
  %1 = load i1, i1* %retval, align 1
  ret i1 %1
}

; Function Attrs: inlinehint nounwind uwtable
define dso_local zeroext i1 @c_isupper(i32 %c) #2 {
entry:
  %retval = alloca i1, align 1
  %c.addr = alloca i32, align 4
  store i32 %c, i32* %c.addr, align 4, !tbaa !2
  %0 = load i32, i32* %c.addr, align 4, !tbaa !2
  switch i32 %0, label %sw.default [
    i32 65, label %sw.bb
    i32 66, label %sw.bb
    i32 67, label %sw.bb
    i32 68, label %sw.bb
    i32 69, label %sw.bb
    i32 70, label %sw.bb
    i32 71, label %sw.bb
    i32 72, label %sw.bb
    i32 73, label %sw.bb
    i32 74, label %sw.bb
    i32 75, label %sw.bb
    i32 76, label %sw.bb
    i32 77, label %sw.bb
    i32 78, label %sw.bb
    i32 79, label %sw.bb
    i32 80, label %sw.bb
    i32 81, label %sw.bb
    i32 82, label %sw.bb
    i32 83, label %sw.bb
    i32 84, label %sw.bb
    i32 85, label %sw.bb
    i32 86, label %sw.bb
    i32 87, label %sw.bb
    i32 88, label %sw.bb
    i32 89, label %sw.bb
    i32 90, label %sw.bb
  ]

sw.bb:                                            ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry
  store i1 true, i1* %retval, align 1
  br label %return

sw.default:                                       ; preds = %entry
  store i1 false, i1* %retval, align 1
  br label %return

return:                                           ; preds = %sw.default, %sw.bb
  %1 = load i1, i1* %retval, align 1
  ret i1 %1
}

; Function Attrs: inlinehint nounwind uwtable
define dso_local zeroext i1 @c_isxdigit(i32 %c) #2 {
entry:
  %retval = alloca i1, align 1
  %c.addr = alloca i32, align 4
  store i32 %c, i32* %c.addr, align 4, !tbaa !2
  %0 = load i32, i32* %c.addr, align 4, !tbaa !2
  switch i32 %0, label %sw.default [
    i32 48, label %sw.bb
    i32 49, label %sw.bb
    i32 50, label %sw.bb
    i32 51, label %sw.bb
    i32 52, label %sw.bb
    i32 53, label %sw.bb
    i32 54, label %sw.bb
    i32 55, label %sw.bb
    i32 56, label %sw.bb
    i32 57, label %sw.bb
    i32 97, label %sw.bb
    i32 98, label %sw.bb
    i32 99, label %sw.bb
    i32 100, label %sw.bb
    i32 101, label %sw.bb
    i32 102, label %sw.bb
    i32 65, label %sw.bb
    i32 66, label %sw.bb
    i32 67, label %sw.bb
    i32 68, label %sw.bb
    i32 69, label %sw.bb
    i32 70, label %sw.bb
  ]

sw.bb:                                            ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry
  store i1 true, i1* %retval, align 1
  br label %return

sw.default:                                       ; preds = %entry
  store i1 false, i1* %retval, align 1
  br label %return

return:                                           ; preds = %sw.default, %sw.bb
  %1 = load i1, i1* %retval, align 1
  ret i1 %1
}

; Function Attrs: inlinehint nounwind uwtable
define dso_local i32 @c_tolower(i32 %c) #2 {
entry:
  %retval = alloca i32, align 4
  %c.addr = alloca i32, align 4
  store i32 %c, i32* %c.addr, align 4, !tbaa !2
  %0 = load i32, i32* %c.addr, align 4, !tbaa !2
  switch i32 %0, label %sw.default [
    i32 65, label %sw.bb
    i32 66, label %sw.bb
    i32 67, label %sw.bb
    i32 68, label %sw.bb
    i32 69, label %sw.bb
    i32 70, label %sw.bb
    i32 71, label %sw.bb
    i32 72, label %sw.bb
    i32 73, label %sw.bb
    i32 74, label %sw.bb
    i32 75, label %sw.bb
    i32 76, label %sw.bb
    i32 77, label %sw.bb
    i32 78, label %sw.bb
    i32 79, label %sw.bb
    i32 80, label %sw.bb
    i32 81, label %sw.bb
    i32 82, label %sw.bb
    i32 83, label %sw.bb
    i32 84, label %sw.bb
    i32 85, label %sw.bb
    i32 86, label %sw.bb
    i32 87, label %sw.bb
    i32 88, label %sw.bb
    i32 89, label %sw.bb
    i32 90, label %sw.bb
  ]

sw.bb:                                            ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry
  %1 = load i32, i32* %c.addr, align 4, !tbaa !2
  %sub = sub nsw i32 %1, 65
  %add = add nsw i32 %sub, 97
  store i32 %add, i32* %retval, align 4
  br label %return

sw.default:                                       ; preds = %entry
  %2 = load i32, i32* %c.addr, align 4, !tbaa !2
  store i32 %2, i32* %retval, align 4
  br label %return

return:                                           ; preds = %sw.default, %sw.bb
  %3 = load i32, i32* %retval, align 4
  ret i32 %3
}

; Function Attrs: inlinehint nounwind uwtable
define dso_local i32 @c_toupper(i32 %c) #2 {
entry:
  %retval = alloca i32, align 4
  %c.addr = alloca i32, align 4
  store i32 %c, i32* %c.addr, align 4, !tbaa !2
  %0 = load i32, i32* %c.addr, align 4, !tbaa !2
  switch i32 %0, label %sw.default [
    i32 97, label %sw.bb
    i32 98, label %sw.bb
    i32 99, label %sw.bb
    i32 100, label %sw.bb
    i32 101, label %sw.bb
    i32 102, label %sw.bb
    i32 103, label %sw.bb
    i32 104, label %sw.bb
    i32 105, label %sw.bb
    i32 106, label %sw.bb
    i32 107, label %sw.bb
    i32 108, label %sw.bb
    i32 109, label %sw.bb
    i32 110, label %sw.bb
    i32 111, label %sw.bb
    i32 112, label %sw.bb
    i32 113, label %sw.bb
    i32 114, label %sw.bb
    i32 115, label %sw.bb
    i32 116, label %sw.bb
    i32 117, label %sw.bb
    i32 118, label %sw.bb
    i32 119, label %sw.bb
    i32 120, label %sw.bb
    i32 121, label %sw.bb
    i32 122, label %sw.bb
  ]

sw.bb:                                            ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry
  %1 = load i32, i32* %c.addr, align 4, !tbaa !2
  %sub = sub nsw i32 %1, 97
  %add = add nsw i32 %sub, 65
  store i32 %add, i32* %retval, align 4
  br label %return

sw.default:                                       ; preds = %entry
  %2 = load i32, i32* %c.addr, align 4, !tbaa !2
  store i32 %2, i32* %retval, align 4
  br label %return

return:                                           ; preds = %sw.default, %sw.bb
  %3 = load i32, i32* %retval, align 4
  ret i32 %3
}

; Function Attrs: nounwind readonly uwtable
define dso_local i32 @c_strcasecmp(i8* %s1, i8* %s2) #9 {
entry:
  %retval = alloca i32, align 4
  %s1.addr = alloca i8*, align 8
  %s2.addr = alloca i8*, align 8
  %p1 = alloca i8*, align 8
  %p2 = alloca i8*, align 8
  %c1 = alloca i8, align 1
  %c2 = alloca i8, align 1
  %cleanup.dest.slot = alloca i32, align 4
  store i8* %s1, i8** %s1.addr, align 8, !tbaa !6
  store i8* %s2, i8** %s2.addr, align 8, !tbaa !6
  %0 = bitcast i8** %p1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #13
  %1 = load i8*, i8** %s1.addr, align 8, !tbaa !6
  store i8* %1, i8** %p1, align 8, !tbaa !6
  %2 = bitcast i8** %p2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %2) #13
  %3 = load i8*, i8** %s2.addr, align 8, !tbaa !6
  store i8* %3, i8** %p2, align 8, !tbaa !6
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %c1) #13
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %c2) #13
  %4 = load i8*, i8** %p1, align 8, !tbaa !6
  %5 = load i8*, i8** %p2, align 8, !tbaa !6
  %cmp = icmp eq i8* %4, %5
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %entry
  br label %do.body

do.body:                                          ; preds = %do.cond, %if.end
  %6 = load i8*, i8** %p1, align 8, !tbaa !6
  %7 = load i8, i8* %6, align 1, !tbaa !13
  %conv = zext i8 %7 to i32
  %call = call i32 @c_tolower(i32 %conv)
  %conv1 = trunc i32 %call to i8
  store i8 %conv1, i8* %c1, align 1, !tbaa !13
  %8 = load i8*, i8** %p2, align 8, !tbaa !6
  %9 = load i8, i8* %8, align 1, !tbaa !13
  %conv2 = zext i8 %9 to i32
  %call3 = call i32 @c_tolower(i32 %conv2)
  %conv4 = trunc i32 %call3 to i8
  store i8 %conv4, i8* %c2, align 1, !tbaa !13
  %10 = load i8, i8* %c1, align 1, !tbaa !13
  %conv5 = zext i8 %10 to i32
  %cmp6 = icmp eq i32 %conv5, 0
  br i1 %cmp6, label %if.then8, label %if.end9

if.then8:                                         ; preds = %do.body
  br label %do.end

if.end9:                                          ; preds = %do.body
  %11 = load i8*, i8** %p1, align 8, !tbaa !6
  %incdec.ptr = getelementptr inbounds i8, i8* %11, i32 1
  store i8* %incdec.ptr, i8** %p1, align 8, !tbaa !6
  %12 = load i8*, i8** %p2, align 8, !tbaa !6
  %incdec.ptr10 = getelementptr inbounds i8, i8* %12, i32 1
  store i8* %incdec.ptr10, i8** %p2, align 8, !tbaa !6
  br label %do.cond

do.cond:                                          ; preds = %if.end9
  %13 = load i8, i8* %c1, align 1, !tbaa !13
  %conv11 = zext i8 %13 to i32
  %14 = load i8, i8* %c2, align 1, !tbaa !13
  %conv12 = zext i8 %14 to i32
  %cmp13 = icmp eq i32 %conv11, %conv12
  br i1 %cmp13, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond, %if.then8
  %15 = load i8, i8* %c1, align 1, !tbaa !13
  %conv15 = zext i8 %15 to i32
  %16 = load i8, i8* %c2, align 1, !tbaa !13
  %conv16 = zext i8 %16 to i32
  %sub = sub nsw i32 %conv15, %conv16
  store i32 %sub, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %do.end, %if.then
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %c2) #13
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %c1) #13
  %17 = bitcast i8** %p2 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %17) #13
  %18 = bitcast i8** %p1 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %18) #13
  %19 = load i32, i32* %retval, align 4
  ret i32 %19
}

; Function Attrs: nounwind uwtable
define dso_local i32 @close_stream(%struct._IO_FILE* %stream) #7 {
entry:
  %retval = alloca i32, align 4
  %stream.addr = alloca %struct._IO_FILE*, align 8
  %some_pending = alloca i8, align 1
  %prev_fail = alloca i8, align 1
  %fclose_fail = alloca i8, align 1
  %cleanup.dest.slot = alloca i32, align 4
  store %struct._IO_FILE* %stream, %struct._IO_FILE** %stream.addr, align 8, !tbaa !6
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %some_pending) #13
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** %stream.addr, align 8, !tbaa !6
  %call = call i64 @__fpending(%struct._IO_FILE* %0) #13
  %cmp = icmp ne i64 %call, 0
  %frombool = zext i1 %cmp to i8
  store i8 %frombool, i8* %some_pending, align 1, !tbaa !11
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %prev_fail) #13
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** %stream.addr, align 8, !tbaa !6
  %call1 = call i32 @ferror_unlocked(%struct._IO_FILE* %1) #13
  %cmp2 = icmp ne i32 %call1, 0
  %frombool3 = zext i1 %cmp2 to i8
  store i8 %frombool3, i8* %prev_fail, align 1, !tbaa !11
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %fclose_fail) #13
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** %stream.addr, align 8, !tbaa !6
  %call4 = call i32 @rpl_fclose(%struct._IO_FILE* %2)
  %cmp5 = icmp ne i32 %call4, 0
  %frombool6 = zext i1 %cmp5 to i8
  store i8 %frombool6, i8* %fclose_fail, align 1, !tbaa !11
  %3 = load i8, i8* %prev_fail, align 1, !tbaa !11, !range !25
  %tobool = trunc i8 %3 to i1
  br i1 %tobool, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %4 = load i8, i8* %fclose_fail, align 1, !tbaa !11, !range !25
  %tobool7 = trunc i8 %4 to i1
  br i1 %tobool7, label %land.lhs.true, label %if.end15

land.lhs.true:                                    ; preds = %lor.lhs.false
  %5 = load i8, i8* %some_pending, align 1, !tbaa !11, !range !25
  %tobool8 = trunc i8 %5 to i1
  br i1 %tobool8, label %if.then, label %lor.lhs.false9

lor.lhs.false9:                                   ; preds = %land.lhs.true
  %call10 = call i32* @__errno_location() #26
  %6 = load i32, i32* %call10, align 4, !tbaa !2
  %cmp11 = icmp ne i32 %6, 9
  br i1 %cmp11, label %if.then, label %if.end15

if.then:                                          ; preds = %lor.lhs.false9, %land.lhs.true, %entry
  %7 = load i8, i8* %fclose_fail, align 1, !tbaa !11, !range !25
  %tobool12 = trunc i8 %7 to i1
  br i1 %tobool12, label %if.end, label %if.then13

if.then13:                                        ; preds = %if.then
  %call14 = call i32* @__errno_location() #26
  store i32 0, i32* %call14, align 4, !tbaa !2
  br label %if.end

if.end:                                           ; preds = %if.then13, %if.then
  store i32 -1, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end15:                                         ; preds = %lor.lhs.false9, %lor.lhs.false
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end15, %if.end
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %fclose_fail) #13
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %prev_fail) #13
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %some_pending) #13
  %8 = load i32, i32* %retval, align 4
  ret i32 %8
}

; Function Attrs: nounwind
declare dso_local i64 @__fpending(%struct._IO_FILE*) #6

; Function Attrs: nounwind readnone uwtable
define dso_local { i64, i64 } @dtotimespec(double %sec) #11 {
entry:
  %retval = alloca %struct.timespec, align 8
  %sec.addr = alloca double, align 8
  %s = alloca i64, align 8
  %frac = alloca double, align 8
  %ns = alloca i64, align 8
  store double %sec, double* %sec.addr, align 8, !tbaa !57
  %0 = load double, double* %sec.addr, align 8, !tbaa !57
  %cmp = fcmp olt double 0xC3E0000000000000, %0
  br i1 %cmp, label %if.else, label %if.then

if.then:                                          ; preds = %entry
  %call = call { i64, i64 } @make_timespec(i64 -9223372036854775808, i64 0)
  %1 = bitcast %struct.timespec* %retval to { i64, i64 }*
  %2 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1, i32 0, i32 0
  %3 = extractvalue { i64, i64 } %call, 0
  store i64 %3, i64* %2, align 8
  %4 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1, i32 0, i32 1
  %5 = extractvalue { i64, i64 } %call, 1
  store i64 %5, i64* %4, align 8
  br label %return

if.else:                                          ; preds = %entry
  %6 = load double, double* %sec.addr, align 8, !tbaa !57
  %cmp1 = fcmp olt double %6, 0x43E0000000000000
  br i1 %cmp1, label %if.else4, label %if.then2

if.then2:                                         ; preds = %if.else
  %call3 = call { i64, i64 } @make_timespec(i64 9223372036854775807, i64 999999999)
  %7 = bitcast %struct.timespec* %retval to { i64, i64 }*
  %8 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i32 0, i32 0
  %9 = extractvalue { i64, i64 } %call3, 0
  store i64 %9, i64* %8, align 8
  %10 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i32 0, i32 1
  %11 = extractvalue { i64, i64 } %call3, 1
  store i64 %11, i64* %10, align 8
  br label %return

if.else4:                                         ; preds = %if.else
  %12 = bitcast i64* %s to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %12) #13
  %13 = load double, double* %sec.addr, align 8, !tbaa !57
  %conv = fptosi double %13 to i64
  store i64 %conv, i64* %s, align 8, !tbaa !14
  %14 = bitcast double* %frac to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %14) #13
  %15 = load double, double* %sec.addr, align 8, !tbaa !57
  %16 = load i64, i64* %s, align 8, !tbaa !14
  %conv5 = sitofp i64 %16 to double
  %sub = fsub double %15, %conv5
  %mul = fmul double 1.000000e+09, %sub
  store double %mul, double* %frac, align 8, !tbaa !57
  %17 = bitcast i64* %ns to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %17) #13
  %18 = load double, double* %frac, align 8, !tbaa !57
  %conv6 = fptosi double %18 to i64
  store i64 %conv6, i64* %ns, align 8, !tbaa !14
  %19 = load i64, i64* %ns, align 8, !tbaa !14
  %conv7 = sitofp i64 %19 to double
  %20 = load double, double* %frac, align 8, !tbaa !57
  %cmp8 = fcmp olt double %conv7, %20
  %conv9 = zext i1 %cmp8 to i32
  %conv10 = sext i32 %conv9 to i64
  %21 = load i64, i64* %ns, align 8, !tbaa !14
  %add = add nsw i64 %21, %conv10
  store i64 %add, i64* %ns, align 8, !tbaa !14
  %22 = load i64, i64* %ns, align 8, !tbaa !14
  %div = sdiv i64 %22, 1000000000
  %23 = load i64, i64* %s, align 8, !tbaa !14
  %add11 = add nsw i64 %23, %div
  store i64 %add11, i64* %s, align 8, !tbaa !14
  %24 = load i64, i64* %ns, align 8, !tbaa !14
  %rem = srem i64 %24, 1000000000
  store i64 %rem, i64* %ns, align 8, !tbaa !14
  %25 = load i64, i64* %ns, align 8, !tbaa !14
  %cmp12 = icmp slt i64 %25, 0
  br i1 %cmp12, label %if.then14, label %if.end

if.then14:                                        ; preds = %if.else4
  %26 = load i64, i64* %s, align 8, !tbaa !14
  %dec = add nsw i64 %26, -1
  store i64 %dec, i64* %s, align 8, !tbaa !14
  %27 = load i64, i64* %ns, align 8, !tbaa !14
  %add15 = add nsw i64 %27, 1000000000
  store i64 %add15, i64* %ns, align 8, !tbaa !14
  br label %if.end

if.end:                                           ; preds = %if.then14, %if.else4
  %28 = load i64, i64* %s, align 8, !tbaa !14
  %29 = load i64, i64* %ns, align 8, !tbaa !14
  %call16 = call { i64, i64 } @make_timespec(i64 %28, i64 %29)
  %30 = bitcast %struct.timespec* %retval to { i64, i64 }*
  %31 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %30, i32 0, i32 0
  %32 = extractvalue { i64, i64 } %call16, 0
  store i64 %32, i64* %31, align 8
  %33 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %30, i32 0, i32 1
  %34 = extractvalue { i64, i64 } %call16, 1
  store i64 %34, i64* %33, align 8
  %35 = bitcast i64* %ns to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %35) #13
  %36 = bitcast double* %frac to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %36) #13
  %37 = bitcast i64* %s to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %37) #13
  br label %return

return:                                           ; preds = %if.end, %if.then2, %if.then
  %38 = bitcast %struct.timespec* %retval to { i64, i64 }*
  %39 = load { i64, i64 }, { i64, i64 }* %38, align 8
  ret { i64, i64 } %39
}

; Function Attrs: nounwind uwtable
define dso_local i32 @fd_safer_flag(i32 %fd, i32 %flag) #7 {
entry:
  %fd.addr = alloca i32, align 4
  %flag.addr = alloca i32, align 4
  %f = alloca i32, align 4
  %e = alloca i32, align 4
  store i32 %fd, i32* %fd.addr, align 4, !tbaa !2
  store i32 %flag, i32* %flag.addr, align 4, !tbaa !2
  %0 = load i32, i32* %fd.addr, align 4, !tbaa !2
  %cmp = icmp sle i32 0, %0
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %fd.addr, align 4, !tbaa !2
  %cmp1 = icmp sle i32 %1, 2
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %2 = bitcast i32* %f to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %2) #13
  %3 = load i32, i32* %fd.addr, align 4, !tbaa !2
  %4 = load i32, i32* %flag.addr, align 4, !tbaa !2
  %call = call i32 @dup_safer_flag(i32 %3, i32 %4)
  store i32 %call, i32* %f, align 4, !tbaa !2
  %5 = bitcast i32* %e to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %5) #13
  %call2 = call i32* @__errno_location() #26
  %6 = load i32, i32* %call2, align 4, !tbaa !2
  store i32 %6, i32* %e, align 4, !tbaa !2
  %7 = load i32, i32* %fd.addr, align 4, !tbaa !2
  %call3 = call i32 @close(i32 %7)
  %8 = load i32, i32* %e, align 4, !tbaa !2
  %call4 = call i32* @__errno_location() #26
  store i32 %8, i32* %call4, align 4, !tbaa !2
  %9 = load i32, i32* %f, align 4, !tbaa !2
  store i32 %9, i32* %fd.addr, align 4, !tbaa !2
  %10 = bitcast i32* %e to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %10) #13
  %11 = bitcast i32* %f to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %11) #13
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %12 = load i32, i32* %fd.addr, align 4, !tbaa !2
  ret i32 %12
}

; Function Attrs: nounwind uwtable
define dso_local i32 @dup_safer_flag(i32 %fd, i32 %flag) #7 {
entry:
  %fd.addr = alloca i32, align 4
  %flag.addr = alloca i32, align 4
  store i32 %fd, i32* %fd.addr, align 4, !tbaa !2
  store i32 %flag, i32* %flag.addr, align 4, !tbaa !2
  %0 = load i32, i32* %fd.addr, align 4, !tbaa !2
  %1 = load i32, i32* %flag.addr, align 4, !tbaa !2
  %and = and i32 %1, 524288
  %tobool = icmp ne i32 %and, 0
  %2 = zext i1 %tobool to i64
  %cond = select i1 %tobool, i32 1030, i32 0
  %call = call i32 (i32, i32, ...) @rpl_fcntl(i32 %0, i32 %cond, i32 3)
  ret i32 %call
}

; Function Attrs: nounwind uwtable
define dso_local %struct._IO_FILE* @fopen_safer(i8* nonnull %file, i8* nonnull %mode) #7 {
entry:
  %retval = alloca %struct._IO_FILE*, align 8
  %file.addr = alloca i8*, align 8
  %mode.addr = alloca i8*, align 8
  %fp = alloca %struct._IO_FILE*, align 8
  %fd = alloca i32, align 4
  %f = alloca i32, align 4
  %e = alloca i32, align 4
  %cleanup.dest.slot = alloca i32, align 4
  %e15 = alloca i32, align 4
  store i8* %file, i8** %file.addr, align 8, !tbaa !6
  store i8* %mode, i8** %mode.addr, align 8, !tbaa !6
  %0 = bitcast %struct._IO_FILE** %fp to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #13
  %1 = load i8*, i8** %file.addr, align 8, !tbaa !6
  %2 = load i8*, i8** %mode.addr, align 8, !tbaa !6
  %call = call %struct._IO_FILE* @fopen(i8* %1, i8* %2)
  store %struct._IO_FILE* %call, %struct._IO_FILE** %fp, align 8, !tbaa !6
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** %fp, align 8, !tbaa !6
  %tobool = icmp ne %struct._IO_FILE* %3, null
  br i1 %tobool, label %if.then, label %if.end24

if.then:                                          ; preds = %entry
  %4 = bitcast i32* %fd to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %4) #13
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** %fp, align 8, !tbaa !6
  %call1 = call i32 @fileno(%struct._IO_FILE* %5) #13
  store i32 %call1, i32* %fd, align 4, !tbaa !2
  %6 = load i32, i32* %fd, align 4, !tbaa !2
  %cmp = icmp sle i32 0, %6
  br i1 %cmp, label %land.lhs.true, label %if.end20

land.lhs.true:                                    ; preds = %if.then
  %7 = load i32, i32* %fd, align 4, !tbaa !2
  %cmp2 = icmp sle i32 %7, 2
  br i1 %cmp2, label %if.then3, label %if.end20

if.then3:                                         ; preds = %land.lhs.true
  %8 = bitcast i32* %f to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %8) #13
  %9 = load i32, i32* %fd, align 4, !tbaa !2
  %call4 = call i32 @dup_safer(i32 %9)
  store i32 %call4, i32* %f, align 4, !tbaa !2
  %10 = load i32, i32* %f, align 4, !tbaa !2
  %cmp5 = icmp slt i32 %10, 0
  br i1 %cmp5, label %if.then6, label %if.end

if.then6:                                         ; preds = %if.then3
  %11 = bitcast i32* %e to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %11) #13
  %call7 = call i32* @__errno_location() #26
  %12 = load i32, i32* %call7, align 4, !tbaa !2
  store i32 %12, i32* %e, align 4, !tbaa !2
  %13 = load %struct._IO_FILE*, %struct._IO_FILE** %fp, align 8, !tbaa !6
  %call8 = call i32 @rpl_fclose(%struct._IO_FILE* %13)
  %14 = load i32, i32* %e, align 4, !tbaa !2
  %call9 = call i32* @__errno_location() #26
  store i32 %14, i32* %call9, align 4, !tbaa !2
  store %struct._IO_FILE* null, %struct._IO_FILE** %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  %15 = bitcast i32* %e to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %15) #13
  br label %cleanup

if.end:                                           ; preds = %if.then3
  %16 = load %struct._IO_FILE*, %struct._IO_FILE** %fp, align 8, !tbaa !6
  %call10 = call i32 @rpl_fclose(%struct._IO_FILE* %16)
  %cmp11 = icmp ne i32 %call10, 0
  br i1 %cmp11, label %if.then14, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end
  %17 = load i32, i32* %f, align 4, !tbaa !2
  %18 = load i8*, i8** %mode.addr, align 8, !tbaa !6
  %call12 = call %struct._IO_FILE* @fdopen(i32 %17, i8* %18) #13
  store %struct._IO_FILE* %call12, %struct._IO_FILE** %fp, align 8, !tbaa !6
  %tobool13 = icmp ne %struct._IO_FILE* %call12, null
  br i1 %tobool13, label %if.end19, label %if.then14

if.then14:                                        ; preds = %lor.lhs.false, %if.end
  %19 = bitcast i32* %e15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %19) #13
  %call16 = call i32* @__errno_location() #26
  %20 = load i32, i32* %call16, align 4, !tbaa !2
  store i32 %20, i32* %e15, align 4, !tbaa !2
  %21 = load i32, i32* %f, align 4, !tbaa !2
  %call17 = call i32 @close(i32 %21)
  %22 = load i32, i32* %e15, align 4, !tbaa !2
  %call18 = call i32* @__errno_location() #26
  store i32 %22, i32* %call18, align 4, !tbaa !2
  store %struct._IO_FILE* null, %struct._IO_FILE** %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  %23 = bitcast i32* %e15 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %23) #13
  br label %cleanup

if.end19:                                         ; preds = %lor.lhs.false
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end19, %if.then14, %if.then6
  %24 = bitcast i32* %f to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %24) #13
  %cleanup.dest = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest, label %cleanup21 [
    i32 0, label %cleanup.cont
  ]

cleanup.cont:                                     ; preds = %cleanup
  br label %if.end20

if.end20:                                         ; preds = %cleanup.cont, %land.lhs.true, %if.then
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup21

cleanup21:                                        ; preds = %if.end20, %cleanup
  %25 = bitcast i32* %fd to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %25) #13
  %cleanup.dest22 = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest22, label %cleanup25 [
    i32 0, label %cleanup.cont23
  ]

cleanup.cont23:                                   ; preds = %cleanup21
  br label %if.end24

if.end24:                                         ; preds = %cleanup.cont23, %entry
  %26 = load %struct._IO_FILE*, %struct._IO_FILE** %fp, align 8, !tbaa !6
  store %struct._IO_FILE* %26, %struct._IO_FILE** %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup25

cleanup25:                                        ; preds = %if.end24, %cleanup21
  %27 = bitcast %struct._IO_FILE** %fp to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %27) #13
  %28 = load %struct._IO_FILE*, %struct._IO_FILE** %retval, align 8
  ret %struct._IO_FILE* %28
}

declare dso_local %struct._IO_FILE* @fopen(i8*, i8*) #1

; Function Attrs: cold inlinehint nounwind optsize uwtable
define dso_local i8* @_gl_alloc_nomem() #20 {
entry:
  %call = call i32* @__errno_location() #26
  store i32 12, i32* %call, align 4, !tbaa !2
  ret i8* null
}

; Function Attrs: inlinehint nounwind uwtable
define dso_local noalias i8* @imalloc(i64 %s) #2 {
entry:
  %s.addr = alloca i64, align 8
  store i64 %s, i64* %s.addr, align 8, !tbaa !14
  %0 = load i64, i64* %s.addr, align 8, !tbaa !14
  %cmp = icmp ule i64 %0, -1
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %1 = load i64, i64* %s.addr, align 8, !tbaa !14
  %call = call noalias i8* @malloc(i64 %1) #13
  br label %cond.end

cond.false:                                       ; preds = %entry
  %call1 = call i8* @_gl_alloc_nomem() #29
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %call, %cond.true ], [ %call1, %cond.false ]
  ret i8* %cond
}

; Function Attrs: inlinehint nounwind uwtable
define dso_local i8* @irealloc(i8* %p, i64 %s) #2 {
entry:
  %p.addr = alloca i8*, align 8
  %s.addr = alloca i64, align 8
  store i8* %p, i8** %p.addr, align 8, !tbaa !6
  store i64 %s, i64* %s.addr, align 8, !tbaa !14
  %0 = load i64, i64* %s.addr, align 8, !tbaa !14
  %cmp = icmp ule i64 %0, -1
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %1 = load i8*, i8** %p.addr, align 8, !tbaa !6
  %2 = load i64, i64* %s.addr, align 8, !tbaa !14
  %3 = load i64, i64* %s.addr, align 8, !tbaa !14
  %tobool = icmp ne i64 %3, 0
  %lnot = xor i1 %tobool, true
  %lnot.ext = zext i1 %lnot to i32
  %conv = sext i32 %lnot.ext to i64
  %or = or i64 %2, %conv
  %call = call i8* @realloc(i8* %1, i64 %or) #13
  br label %cond.end

cond.false:                                       ; preds = %entry
  %call1 = call i8* @_gl_alloc_nomem() #29
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %call, %cond.true ], [ %call1, %cond.false ]
  ret i8* %cond
}

; Function Attrs: inlinehint nounwind uwtable
define dso_local noalias i8* @icalloc(i64 %n, i64 %s) #2 {
entry:
  %retval = alloca i8*, align 8
  %n.addr = alloca i64, align 8
  %s.addr = alloca i64, align 8
  store i64 %n, i64* %n.addr, align 8, !tbaa !14
  store i64 %s, i64* %s.addr, align 8, !tbaa !14
  %0 = load i64, i64* %n.addr, align 8, !tbaa !14
  %cmp = icmp ult i64 -1, %0
  br i1 %cmp, label %if.then, label %if.end3

if.then:                                          ; preds = %entry
  %1 = load i64, i64* %s.addr, align 8, !tbaa !14
  %cmp1 = icmp ne i64 %1, 0
  br i1 %cmp1, label %if.then2, label %if.end

if.then2:                                         ; preds = %if.then
  %call = call i8* @_gl_alloc_nomem() #29
  store i8* %call, i8** %retval, align 8
  br label %return

if.end:                                           ; preds = %if.then
  store i64 0, i64* %n.addr, align 8, !tbaa !14
  br label %if.end3

if.end3:                                          ; preds = %if.end, %entry
  %2 = load i64, i64* %s.addr, align 8, !tbaa !14
  %cmp4 = icmp ult i64 -1, %2
  br i1 %cmp4, label %if.then5, label %if.end10

if.then5:                                         ; preds = %if.end3
  %3 = load i64, i64* %n.addr, align 8, !tbaa !14
  %cmp6 = icmp ne i64 %3, 0
  br i1 %cmp6, label %if.then7, label %if.end9

if.then7:                                         ; preds = %if.then5
  %call8 = call i8* @_gl_alloc_nomem() #29
  store i8* %call8, i8** %retval, align 8
  br label %return

if.end9:                                          ; preds = %if.then5
  store i64 0, i64* %s.addr, align 8, !tbaa !14
  br label %if.end10

if.end10:                                         ; preds = %if.end9, %if.end3
  %4 = load i64, i64* %n.addr, align 8, !tbaa !14
  %5 = load i64, i64* %s.addr, align 8, !tbaa !14
  %call11 = call noalias i8* @calloc(i64 %4, i64 %5) #13
  store i8* %call11, i8** %retval, align 8
  br label %return

return:                                           ; preds = %if.end10, %if.then7, %if.then2
  %6 = load i8*, i8** %retval, align 8
  ret i8* %6
}

; Function Attrs: inlinehint nounwind uwtable
define dso_local i8* @ireallocarray(i8* %p, i64 %n, i64 %s) #2 {
entry:
  %p.addr = alloca i8*, align 8
  %n.addr = alloca i64, align 8
  %s.addr = alloca i64, align 8
  store i8* %p, i8** %p.addr, align 8, !tbaa !6
  store i64 %n, i64* %n.addr, align 8, !tbaa !14
  store i64 %s, i64* %s.addr, align 8, !tbaa !14
  %0 = load i64, i64* %n.addr, align 8, !tbaa !14
  %cmp = icmp eq i64 %0, 0
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load i64, i64* %s.addr, align 8, !tbaa !14
  %cmp1 = icmp eq i64 %1, 0
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i64 1, i64* %s.addr, align 8, !tbaa !14
  store i64 1, i64* %n.addr, align 8, !tbaa !14
  br label %if.end

if.end:                                           ; preds = %if.then, %lor.lhs.false
  %2 = load i64, i64* %n.addr, align 8, !tbaa !14
  %cmp2 = icmp ule i64 %2, -1
  br i1 %cmp2, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %if.end
  %3 = load i64, i64* %s.addr, align 8, !tbaa !14
  %cmp3 = icmp ule i64 %3, -1
  br i1 %cmp3, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true
  %4 = load i8*, i8** %p.addr, align 8, !tbaa !6
  %5 = load i64, i64* %n.addr, align 8, !tbaa !14
  %6 = load i64, i64* %s.addr, align 8, !tbaa !14
  %call = call i8* @reallocarray(i8* %4, i64 %5, i64 %6) #13
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true, %if.end
  %call4 = call i8* @_gl_alloc_nomem() #29
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %call, %cond.true ], [ %call4, %cond.false ]
  ret i8* %cond
}

; Function Attrs: nounwind uwtable
define dso_local i8* @locale_charset() #7 {
entry:
  %codeset = alloca i8*, align 8
  %0 = bitcast i8** %codeset to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #13
  %call = call i8* @nl_langinfo(i32 14) #13
  store i8* %call, i8** %codeset, align 8, !tbaa !6
  %1 = load i8*, i8** %codeset, align 8, !tbaa !6
  %cmp = icmp eq i8* %1, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.432, i64 0, i64 0), i8** %codeset, align 8, !tbaa !6
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %2 = load i8*, i8** %codeset, align 8, !tbaa !6
  %arrayidx = getelementptr inbounds i8, i8* %2, i64 0
  %3 = load i8, i8* %arrayidx, align 1, !tbaa !13
  %conv = sext i8 %3 to i32
  %cmp1 = icmp eq i32 %conv, 0
  br i1 %cmp1, label %if.then3, label %if.end4

if.then3:                                         ; preds = %if.end
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1.433, i64 0, i64 0), i8** %codeset, align 8, !tbaa !6
  br label %if.end4

if.end4:                                          ; preds = %if.then3, %if.end
  %4 = load i8*, i8** %codeset, align 8, !tbaa !6
  %5 = bitcast i8** %codeset to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %5) #13
  ret i8* %4
}

; Function Attrs: nounwind uwtable
define dso_local i32 @memcoll(i8* %s1, i64 %s1len, i8* %s2, i64 %s2len) #7 {
entry:
  %s1.addr = alloca i8*, align 8
  %s1len.addr = alloca i64, align 8
  %s2.addr = alloca i8*, align 8
  %s2len.addr = alloca i64, align 8
  %diff = alloca i32, align 4
  %n1 = alloca i8, align 1
  %n2 = alloca i8, align 1
  store i8* %s1, i8** %s1.addr, align 8, !tbaa !6
  store i64 %s1len, i64* %s1len.addr, align 8, !tbaa !14
  store i8* %s2, i8** %s2.addr, align 8, !tbaa !6
  store i64 %s2len, i64* %s2len.addr, align 8, !tbaa !14
  %0 = bitcast i32* %diff to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #13
  %1 = load i64, i64* %s1len.addr, align 8, !tbaa !14
  %2 = load i64, i64* %s2len.addr, align 8, !tbaa !14
  %cmp = icmp eq i64 %1, %2
  br i1 %cmp, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %entry
  %3 = load i8*, i8** %s1.addr, align 8, !tbaa !6
  %4 = load i8*, i8** %s2.addr, align 8, !tbaa !6
  %5 = load i64, i64* %s1len.addr, align 8, !tbaa !14
  %call = call i32 @memcmp(i8* %3, i8* %4, i64 %5) #22
  %cmp1 = icmp eq i32 %call, 0
  br i1 %cmp1, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true
  %call2 = call i32* @__errno_location() #26
  store i32 0, i32* %call2, align 4, !tbaa !2
  store i32 0, i32* %diff, align 4, !tbaa !2
  br label %if.end

if.else:                                          ; preds = %land.lhs.true, %entry
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %n1) #13
  %6 = load i8*, i8** %s1.addr, align 8, !tbaa !6
  %7 = load i64, i64* %s1len.addr, align 8, !tbaa !14
  %arrayidx = getelementptr inbounds i8, i8* %6, i64 %7
  %8 = load i8, i8* %arrayidx, align 1, !tbaa !13
  store i8 %8, i8* %n1, align 1, !tbaa !13
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %n2) #13
  %9 = load i8*, i8** %s2.addr, align 8, !tbaa !6
  %10 = load i64, i64* %s2len.addr, align 8, !tbaa !14
  %arrayidx3 = getelementptr inbounds i8, i8* %9, i64 %10
  %11 = load i8, i8* %arrayidx3, align 1, !tbaa !13
  store i8 %11, i8* %n2, align 1, !tbaa !13
  %12 = load i8*, i8** %s1.addr, align 8, !tbaa !6
  %13 = load i64, i64* %s1len.addr, align 8, !tbaa !14
  %arrayidx4 = getelementptr inbounds i8, i8* %12, i64 %13
  store i8 0, i8* %arrayidx4, align 1, !tbaa !13
  %14 = load i8*, i8** %s2.addr, align 8, !tbaa !6
  %15 = load i64, i64* %s2len.addr, align 8, !tbaa !14
  %arrayidx5 = getelementptr inbounds i8, i8* %14, i64 %15
  store i8 0, i8* %arrayidx5, align 1, !tbaa !13
  %16 = load i8*, i8** %s1.addr, align 8, !tbaa !6
  %17 = load i64, i64* %s1len.addr, align 8, !tbaa !14
  %add = add i64 %17, 1
  %18 = load i8*, i8** %s2.addr, align 8, !tbaa !6
  %19 = load i64, i64* %s2len.addr, align 8, !tbaa !14
  %add6 = add i64 %19, 1
  %call7 = call i32 @strcoll_loop(i8* %16, i64 %add, i8* %18, i64 %add6)
  store i32 %call7, i32* %diff, align 4, !tbaa !2
  %20 = load i8, i8* %n1, align 1, !tbaa !13
  %21 = load i8*, i8** %s1.addr, align 8, !tbaa !6
  %22 = load i64, i64* %s1len.addr, align 8, !tbaa !14
  %arrayidx8 = getelementptr inbounds i8, i8* %21, i64 %22
  store i8 %20, i8* %arrayidx8, align 1, !tbaa !13
  %23 = load i8, i8* %n2, align 1, !tbaa !13
  %24 = load i8*, i8** %s2.addr, align 8, !tbaa !6
  %25 = load i64, i64* %s2len.addr, align 8, !tbaa !14
  %arrayidx9 = getelementptr inbounds i8, i8* %24, i64 %25
  store i8 %23, i8* %arrayidx9, align 1, !tbaa !13
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %n2) #13
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %n1) #13
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %26 = load i32, i32* %diff, align 4, !tbaa !2
  %27 = bitcast i32* %diff to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %27) #13
  ret i32 %26
}

; Function Attrs: nounwind uwtable
define internal i32 @strcoll_loop(i8* %s1, i64 %s1size, i8* %s2, i64 %s2size) #7 {
entry:
  %retval = alloca i32, align 4
  %s1.addr = alloca i8*, align 8
  %s1size.addr = alloca i64, align 8
  %s2.addr = alloca i8*, align 8
  %s2size.addr = alloca i64, align 8
  %diff = alloca i32, align 4
  %size1 = alloca i64, align 8
  %size2 = alloca i64, align 8
  %cleanup.dest.slot = alloca i32, align 4
  store i8* %s1, i8** %s1.addr, align 8, !tbaa !6
  store i64 %s1size, i64* %s1size.addr, align 8, !tbaa !14
  store i8* %s2, i8** %s2.addr, align 8, !tbaa !6
  store i64 %s2size, i64* %s2size.addr, align 8, !tbaa !14
  %0 = bitcast i32* %diff to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #13
  br label %while.cond

while.cond:                                       ; preds = %cleanup.cont, %entry
  %call = call i32* @__errno_location() #26
  store i32 0, i32* %call, align 4, !tbaa !2
  %1 = load i8*, i8** %s1.addr, align 8, !tbaa !6
  %2 = load i8*, i8** %s2.addr, align 8, !tbaa !6
  %call1 = call i32 @strcoll(i8* %1, i8* %2) #22
  store i32 %call1, i32* %diff, align 4, !tbaa !2
  %tobool = icmp ne i32 %call1, 0
  br i1 %tobool, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %while.cond
  %call2 = call i32* @__errno_location() #26
  %3 = load i32, i32* %call2, align 4, !tbaa !2
  %tobool3 = icmp ne i32 %3, 0
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %while.cond
  %4 = phi i1 [ true, %while.cond ], [ %tobool3, %lor.rhs ]
  %lnot = xor i1 %4, true
  br i1 %lnot, label %while.body, label %while.end

while.body:                                       ; preds = %lor.end
  %5 = bitcast i64* %size1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %5) #13
  %6 = load i8*, i8** %s1.addr, align 8, !tbaa !6
  %call4 = call i64 @strlen(i8* %6) #22
  %add = add i64 %call4, 1
  store i64 %add, i64* %size1, align 8, !tbaa !14
  %7 = bitcast i64* %size2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %7) #13
  %8 = load i8*, i8** %s2.addr, align 8, !tbaa !6
  %call5 = call i64 @strlen(i8* %8) #22
  %add6 = add i64 %call5, 1
  store i64 %add6, i64* %size2, align 8, !tbaa !14
  %9 = load i64, i64* %size1, align 8, !tbaa !14
  %10 = load i8*, i8** %s1.addr, align 8, !tbaa !6
  %add.ptr = getelementptr inbounds i8, i8* %10, i64 %9
  store i8* %add.ptr, i8** %s1.addr, align 8, !tbaa !6
  %11 = load i64, i64* %size2, align 8, !tbaa !14
  %12 = load i8*, i8** %s2.addr, align 8, !tbaa !6
  %add.ptr7 = getelementptr inbounds i8, i8* %12, i64 %11
  store i8* %add.ptr7, i8** %s2.addr, align 8, !tbaa !6
  %13 = load i64, i64* %size1, align 8, !tbaa !14
  %14 = load i64, i64* %s1size.addr, align 8, !tbaa !14
  %sub = sub i64 %14, %13
  store i64 %sub, i64* %s1size.addr, align 8, !tbaa !14
  %15 = load i64, i64* %size2, align 8, !tbaa !14
  %16 = load i64, i64* %s2size.addr, align 8, !tbaa !14
  %sub8 = sub i64 %16, %15
  store i64 %sub8, i64* %s2size.addr, align 8, !tbaa !14
  %17 = load i64, i64* %s1size.addr, align 8, !tbaa !14
  %cmp = icmp eq i64 %17, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  %18 = load i64, i64* %s2size.addr, align 8, !tbaa !14
  %cmp9 = icmp ne i64 %18, 0
  %conv = zext i1 %cmp9 to i32
  %sub10 = sub nsw i32 0, %conv
  store i32 %sub10, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %while.body
  %19 = load i64, i64* %s2size.addr, align 8, !tbaa !14
  %cmp11 = icmp eq i64 %19, 0
  br i1 %cmp11, label %if.then13, label %if.end14

if.then13:                                        ; preds = %if.end
  store i32 1, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end14:                                         ; preds = %if.end
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end14, %if.then13, %if.then
  %20 = bitcast i64* %size2 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %20) #13
  %21 = bitcast i64* %size1 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %21) #13
  %cleanup.dest = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest, label %cleanup16 [
    i32 0, label %cleanup.cont
  ]

cleanup.cont:                                     ; preds = %cleanup
  br label %while.cond

while.end:                                        ; preds = %lor.end
  %22 = load i32, i32* %diff, align 4, !tbaa !2
  store i32 %22, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup16

cleanup16:                                        ; preds = %while.end, %cleanup
  %23 = bitcast i32* %diff to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %23) #13
  %24 = load i32, i32* %retval, align 4
  ret i32 %24
}

; Function Attrs: nounwind readonly
declare dso_local i32 @strcoll(i8*, i8*) #5

; Function Attrs: nounwind uwtable
define dso_local i32 @memcoll0(i8* %s1, i64 %s1size, i8* %s2, i64 %s2size) #7 {
entry:
  %retval = alloca i32, align 4
  %s1.addr = alloca i8*, align 8
  %s1size.addr = alloca i64, align 8
  %s2.addr = alloca i8*, align 8
  %s2size.addr = alloca i64, align 8
  store i8* %s1, i8** %s1.addr, align 8, !tbaa !6
  store i64 %s1size, i64* %s1size.addr, align 8, !tbaa !14
  store i8* %s2, i8** %s2.addr, align 8, !tbaa !6
  store i64 %s2size, i64* %s2size.addr, align 8, !tbaa !14
  %0 = load i64, i64* %s1size.addr, align 8, !tbaa !14
  %1 = load i64, i64* %s2size.addr, align 8, !tbaa !14
  %cmp = icmp eq i64 %0, %1
  br i1 %cmp, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %entry
  %2 = load i8*, i8** %s1.addr, align 8, !tbaa !6
  %3 = load i8*, i8** %s2.addr, align 8, !tbaa !6
  %4 = load i64, i64* %s1size.addr, align 8, !tbaa !14
  %call = call i32 @memcmp(i8* %2, i8* %3, i64 %4) #22
  %cmp1 = icmp eq i32 %call, 0
  br i1 %cmp1, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true
  %call2 = call i32* @__errno_location() #26
  store i32 0, i32* %call2, align 4, !tbaa !2
  store i32 0, i32* %retval, align 4
  br label %return

if.else:                                          ; preds = %land.lhs.true, %entry
  %5 = load i8*, i8** %s1.addr, align 8, !tbaa !6
  %6 = load i64, i64* %s1size.addr, align 8, !tbaa !14
  %7 = load i8*, i8** %s2.addr, align 8, !tbaa !6
  %8 = load i64, i64* %s2size.addr, align 8, !tbaa !14
  %call3 = call i32 @strcoll_loop(i8* %5, i64 %6, i8* %7, i64 %8)
  store i32 %call3, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %retval, align 4
  ret i32 %9
}

; Function Attrs: inlinehint nounwind uwtable
define dso_local { i64, i64 } @make_timespec(i64 %s, i64 %ns) #2 {
entry:
  %retval = alloca %struct.timespec, align 8
  %s.addr = alloca i64, align 8
  %ns.addr = alloca i64, align 8
  store i64 %s, i64* %s.addr, align 8, !tbaa !14
  store i64 %ns, i64* %ns.addr, align 8, !tbaa !14
  %0 = load i64, i64* %s.addr, align 8, !tbaa !14
  %tv_sec = getelementptr inbounds %struct.timespec, %struct.timespec* %retval, i32 0, i32 0
  store i64 %0, i64* %tv_sec, align 8, !tbaa !187
  %1 = load i64, i64* %ns.addr, align 8, !tbaa !14
  %tv_nsec = getelementptr inbounds %struct.timespec, %struct.timespec* %retval, i32 0, i32 1
  store i64 %1, i64* %tv_nsec, align 8, !tbaa !186
  %2 = bitcast %struct.timespec* %retval to { i64, i64 }*
  %3 = load { i64, i64 }, { i64, i64 }* %2, align 8
  ret { i64, i64 } %3
}

; Function Attrs: inlinehint nounwind readonly uwtable
define dso_local i32 @timespec_cmp(i64 %a.coerce0, i64 %a.coerce1, i64 %b.coerce0, i64 %b.coerce1) #12 {
entry:
  %a = alloca %struct.timespec, align 8
  %b = alloca %struct.timespec, align 8
  %0 = bitcast %struct.timespec* %a to { i64, i64 }*
  %1 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 0
  store i64 %a.coerce0, i64* %1, align 8
  %2 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 1
  store i64 %a.coerce1, i64* %2, align 8
  %3 = bitcast %struct.timespec* %b to { i64, i64 }*
  %4 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %3, i32 0, i32 0
  store i64 %b.coerce0, i64* %4, align 8
  %5 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %3, i32 0, i32 1
  store i64 %b.coerce1, i64* %5, align 8
  %tv_sec = getelementptr inbounds %struct.timespec, %struct.timespec* %a, i32 0, i32 0
  %6 = load i64, i64* %tv_sec, align 8, !tbaa !187
  %tv_sec1 = getelementptr inbounds %struct.timespec, %struct.timespec* %b, i32 0, i32 0
  %7 = load i64, i64* %tv_sec1, align 8, !tbaa !187
  %cmp = icmp sgt i64 %6, %7
  %conv = zext i1 %cmp to i32
  %tv_sec2 = getelementptr inbounds %struct.timespec, %struct.timespec* %a, i32 0, i32 0
  %8 = load i64, i64* %tv_sec2, align 8, !tbaa !187
  %tv_sec3 = getelementptr inbounds %struct.timespec, %struct.timespec* %b, i32 0, i32 0
  %9 = load i64, i64* %tv_sec3, align 8, !tbaa !187
  %cmp4 = icmp slt i64 %8, %9
  %conv5 = zext i1 %cmp4 to i32
  %sub = sub nsw i32 %conv, %conv5
  %mul = mul nsw i32 2, %sub
  %tv_nsec = getelementptr inbounds %struct.timespec, %struct.timespec* %a, i32 0, i32 1
  %10 = load i64, i64* %tv_nsec, align 8, !tbaa !186
  %tv_nsec6 = getelementptr inbounds %struct.timespec, %struct.timespec* %b, i32 0, i32 1
  %11 = load i64, i64* %tv_nsec6, align 8, !tbaa !186
  %cmp7 = icmp sgt i64 %10, %11
  %conv8 = zext i1 %cmp7 to i32
  %tv_nsec9 = getelementptr inbounds %struct.timespec, %struct.timespec* %a, i32 0, i32 1
  %12 = load i64, i64* %tv_nsec9, align 8, !tbaa !186
  %tv_nsec10 = getelementptr inbounds %struct.timespec, %struct.timespec* %b, i32 0, i32 1
  %13 = load i64, i64* %tv_nsec10, align 8, !tbaa !186
  %cmp11 = icmp slt i64 %12, %13
  %conv12 = zext i1 %cmp11 to i32
  %sub13 = sub nsw i32 %conv8, %conv12
  %add = add nsw i32 %mul, %sub13
  ret i32 %add
}

; Function Attrs: inlinehint nounwind readonly uwtable
define dso_local i32 @timespec_sign(i64 %a.coerce0, i64 %a.coerce1) #12 {
entry:
  %a = alloca %struct.timespec, align 8
  %0 = bitcast %struct.timespec* %a to { i64, i64 }*
  %1 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 0
  store i64 %a.coerce0, i64* %1, align 8
  %2 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 1
  store i64 %a.coerce1, i64* %2, align 8
  %tv_sec = getelementptr inbounds %struct.timespec, %struct.timespec* %a, i32 0, i32 0
  %3 = load i64, i64* %tv_sec, align 8, !tbaa !187
  %cmp = icmp sgt i64 %3, 0
  %conv = zext i1 %cmp to i32
  %tv_sec1 = getelementptr inbounds %struct.timespec, %struct.timespec* %a, i32 0, i32 0
  %4 = load i64, i64* %tv_sec1, align 8, !tbaa !187
  %cmp2 = icmp slt i64 %4, 0
  %conv3 = zext i1 %cmp2 to i32
  %sub = sub nsw i32 %conv, %conv3
  %tv_sec4 = getelementptr inbounds %struct.timespec, %struct.timespec* %a, i32 0, i32 0
  %5 = load i64, i64* %tv_sec4, align 8, !tbaa !187
  %tobool = icmp ne i64 %5, 0
  %lnot = xor i1 %tobool, true
  %lnot.ext = zext i1 %lnot to i32
  %tv_nsec = getelementptr inbounds %struct.timespec, %struct.timespec* %a, i32 0, i32 1
  %6 = load i64, i64* %tv_nsec, align 8, !tbaa !186
  %tobool5 = icmp ne i64 %6, 0
  %lnot6 = xor i1 %tobool5, true
  %lnot8 = xor i1 %lnot6, true
  %lnot.ext9 = zext i1 %lnot8 to i32
  %and = and i32 %lnot.ext, %lnot.ext9
  %add = add nsw i32 %sub, %and
  ret i32 %add
}

; Function Attrs: inlinehint nounwind uwtable
define dso_local double @timespectod(i64 %a.coerce0, i64 %a.coerce1) #2 {
entry:
  %a = alloca %struct.timespec, align 8
  %0 = bitcast %struct.timespec* %a to { i64, i64 }*
  %1 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 0
  store i64 %a.coerce0, i64* %1, align 8
  %2 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 1
  store i64 %a.coerce1, i64* %2, align 8
  %tv_sec = getelementptr inbounds %struct.timespec, %struct.timespec* %a, i32 0, i32 0
  %3 = load i64, i64* %tv_sec, align 8, !tbaa !187
  %conv = sitofp i64 %3 to double
  %tv_nsec = getelementptr inbounds %struct.timespec, %struct.timespec* %a, i32 0, i32 1
  %4 = load i64, i64* %tv_nsec, align 8, !tbaa !186
  %conv1 = sitofp i64 %4 to double
  %div = fdiv double %conv1, 1.000000e+09
  %add = fadd double %conv, %div
  ret double %add
}

; Function Attrs: nounwind uwtable
define dso_local i32 @dup_safer(i32 %fd) #7 {
entry:
  %fd.addr = alloca i32, align 4
  store i32 %fd, i32* %fd.addr, align 4, !tbaa !2
  %0 = load i32, i32* %fd.addr, align 4, !tbaa !2
  %call = call i32 (i32, i32, ...) @rpl_fcntl(i32 %0, i32 0, i32 3)
  ret i32 %call
}

attributes #0 = { noreturn nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { inlinehint nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind }
attributes #5 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind readonly uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { nounwind readnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { inlinehint nounwind readonly uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { nounwind }
attributes #14 = { inlinehint nounwind uwtable allocsize(1,2) "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #15 = { nounwind uwtable allocsize(1,2) "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #16 = { nounwind uwtable allocsize(0) "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #17 = { nounwind uwtable allocsize(1) "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #18 = { nounwind uwtable allocsize(0,1) "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #19 = { nounwind readnone speculatable }
attributes #20 = { cold inlinehint nounwind optsize uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #21 = { noreturn nounwind }
attributes #22 = { nounwind readonly }
attributes #23 = { allocsize(0,1) }
attributes #24 = { noreturn }
attributes #25 = { allocsize(0) }
attributes #26 = { nounwind readnone }
attributes #27 = { allocsize(1) }
attributes #28 = { allocsize(1,2) }
attributes #29 = { cold }

!llvm.ident = !{!0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0}
!llvm.module.flags = !{!1}

!0 = !{!"clang version 9.0.0-2~ubuntu18.04.2 (tags/RELEASE_900/final)"}
!1 = !{i32 1, !"wchar_size", i32 4}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
!6 = !{!7, !7, i64 0}
!7 = !{!"any pointer", !4, i64 0}
!8 = !{!9, !7, i64 0}
!9 = !{!"infomap", !7, i64 0, !7, i64 8}
!10 = !{!9, !7, i64 8}
!11 = !{!12, !12, i64 0}
!12 = !{!"_Bool", !4, i64 0}
!13 = !{!4, !4, i64 0}
!14 = !{!15, !15, i64 0}
!15 = !{!"long", !4, i64 0}
!16 = !{!17, !7, i64 0}
!17 = !{!"lconv", !7, i64 0, !7, i64 8, !7, i64 16, !7, i64 24, !7, i64 32, !7, i64 40, !7, i64 48, !7, i64 56, !7, i64 64, !7, i64 72, !4, i64 80, !4, i64 81, !4, i64 82, !4, i64 83, !4, i64 84, !4, i64 85, !4, i64 86, !4, i64 87, !4, i64 88, !4, i64 89, !4, i64 90, !4, i64 91, !4, i64 92, !4, i64 93}
!18 = !{!17, !7, i64 8}
!19 = !{i64 0, i64 128, !13}
!20 = !{!21, !3, i64 136}
!21 = !{!"sigaction", !4, i64 0, !22, i64 8, !3, i64 136, !7, i64 144}
!22 = !{!"", !4, i64 0}
!23 = !{!24, !15, i64 0}
!24 = !{!"keyfield", !15, i64 0, !15, i64 8, !15, i64 16, !15, i64 24, !7, i64 32, !7, i64 40, !12, i64 48, !12, i64 49, !12, i64 50, !12, i64 51, !12, i64 52, !12, i64 53, !12, i64 54, !12, i64 55, !12, i64 56, !12, i64 57, !7, i64 64}
!25 = !{i8 0, i8 2}
!26 = !{!24, !15, i64 8}
!27 = !{!24, !15, i64 24}
!28 = !{!24, !15, i64 16}
!29 = !{!24, !12, i64 57}
!30 = !{!31, !15, i64 0}
!31 = !{!"Tokens", !15, i64 0, !7, i64 8, !7, i64 16, !32, i64 24, !32, i64 112, !32, i64 200}
!32 = !{!"obstack", !15, i64 0, !7, i64 8, !7, i64 16, !7, i64 24, !7, i64 32, !4, i64 40, !15, i64 48, !4, i64 56, !4, i64 64, !7, i64 72, !3, i64 80, !3, i64 80, !3, i64 80}
!33 = !{!31, !7, i64 8}
!34 = !{!24, !12, i64 55}
!35 = !{!24, !7, i64 32}
!36 = !{!24, !7, i64 40}
!37 = !{!24, !12, i64 48}
!38 = !{!24, !12, i64 49}
!39 = !{!24, !12, i64 54}
!40 = !{!24, !12, i64 50}
!41 = !{!24, !12, i64 52}
!42 = !{!24, !12, i64 53}
!43 = !{!24, !12, i64 56}
!44 = !{!24, !12, i64 51}
!45 = !{!24, !7, i64 64}
!46 = !{!47, !7, i64 0}
!47 = !{!"sortfile", !7, i64 0, !7, i64 8}
!48 = !{!49, !49, i64 0}
!49 = !{!"short", !4, i64 0}
!50 = !{!51, !7, i64 0}
!51 = !{!"month", !7, i64 0, !3, i64 8}
!52 = !{!51, !3, i64 8}
!53 = !{!54, !15, i64 0}
!54 = !{!"rlimit", !15, i64 0, !15, i64 8}
!55 = !{!56, !7, i64 0}
!56 = !{!"option", !7, i64 0, !3, i64 8, !7, i64 16, !3, i64 24}
!57 = !{!58, !58, i64 0}
!58 = !{!"double", !4, i64 0}
!59 = !{i64 0, i64 8, !14, i64 8, i64 8, !14, i64 16, i64 8, !14, i64 24, i64 8, !14, i64 32, i64 8, !6, i64 40, i64 8, !6, i64 48, i64 1, !11, i64 49, i64 1, !11, i64 50, i64 1, !11, i64 51, i64 1, !11, i64 52, i64 1, !11, i64 53, i64 1, !11, i64 54, i64 1, !11, i64 55, i64 1, !11, i64 56, i64 1, !11, i64 57, i64 1, !11, i64 64, i64 8, !6}
!60 = !{!61, !7, i64 0}
!61 = !{!"line", !7, i64 0, !15, i64 8, !7, i64 16, !7, i64 24}
!62 = !{!63, !15, i64 16}
!63 = !{!"buffer", !7, i64 0, !15, i64 8, !15, i64 16, !15, i64 24, !15, i64 32, !15, i64 40, !12, i64 48}
!64 = !{!61, !15, i64 8}
!65 = !{!61, !7, i64 16}
!66 = !{!61, !7, i64 24}
!67 = !{!63, !7, i64 0}
!68 = !{!47, !7, i64 8}
!69 = !{!63, !15, i64 24}
!70 = !{!63, !12, i64 48}
!71 = !{!63, !15, i64 8}
!72 = !{!63, !15, i64 32}
!73 = !{!74, !3, i64 24}
!74 = !{!"stat", !15, i64 0, !15, i64 8, !15, i64 16, !3, i64 24, !3, i64 28, !3, i64 32, !3, i64 36, !15, i64 40, !15, i64 48, !15, i64 56, !15, i64 64, !75, i64 72, !75, i64 88, !75, i64 104, !4, i64 120}
!75 = !{!"timespec", !15, i64 0, !15, i64 8}
!76 = !{!74, !15, i64 48}
!77 = !{!63, !15, i64 40}
!78 = !{!79, !7, i64 0}
!79 = !{!"merge_node_queue", !7, i64 0, !4, i64 8, !4, i64 48}
!80 = !{!81, !7, i64 24}
!81 = !{!"merge_node", !7, i64 0, !7, i64 8, !7, i64 16, !7, i64 24, !7, i64 32, !15, i64 40, !15, i64 48, !7, i64 56, !7, i64 64, !7, i64 72, !3, i64 80, !12, i64 84, !4, i64 88}
!82 = !{!81, !7, i64 16}
!83 = !{!81, !7, i64 8}
!84 = !{!81, !7, i64 0}
!85 = !{!81, !7, i64 32}
!86 = !{!81, !15, i64 48}
!87 = !{!81, !15, i64 40}
!88 = !{!81, !7, i64 56}
!89 = !{!81, !3, i64 80}
!90 = !{!81, !12, i64 84}
!91 = !{!92, !7, i64 0}
!92 = !{!"thread_args", !7, i64 0, !15, i64 8, !15, i64 16, !7, i64 24, !7, i64 32, !7, i64 40, !7, i64 48}
!93 = !{!92, !15, i64 8}
!94 = !{!92, !15, i64 16}
!95 = !{!81, !7, i64 64}
!96 = !{!92, !7, i64 24}
!97 = !{!92, !7, i64 32}
!98 = !{!92, !7, i64 40}
!99 = !{!92, !7, i64 48}
!100 = !{!81, !7, i64 72}
!101 = !{i64 0, i64 8, !6, i64 8, i64 8, !14, i64 16, i64 8, !6, i64 24, i64 8, !6}
!102 = !{!103, !103, i64 0}
!103 = !{!"long double", !4, i64 0}
!104 = !{i64 0, i64 4, !2, i64 4, i64 4, !2, i64 8, i64 4, !2, i64 12, i64 4, !2, i64 16, i64 8, !13, i64 24, i64 4, !2, i64 28, i64 128, !13}
!105 = !{!106}
!106 = !{i64 2, i64 3, i1 false}
!107 = !{!108, !12, i64 0}
!108 = !{!"cs_status", !12, i64 0, !22, i64 8}
!109 = !{!74, !15, i64 8}
!110 = !{!74, !15, i64 0}
!111 = !{i64 0, i64 8, !6, i64 8, i64 8, !6}
!112 = !{i64 0, i64 8, !6, i64 8, i64 8, !14, i64 16, i64 8, !14, i64 24, i64 8, !14, i64 32, i64 8, !14, i64 40, i64 8, !14, i64 48, i64 1, !11}
!113 = !{!114, !3, i64 0}
!114 = !{!"md5_ctx", !3, i64 0, !3, i64 4, !3, i64 8, !3, i64 12, !4, i64 16, !3, i64 24, !4, i64 28}
!115 = !{!114, !3, i64 4}
!116 = !{!114, !3, i64 8}
!117 = !{!114, !3, i64 12}
!118 = !{!114, !3, i64 24}
!119 = !{!120, !15, i64 16}
!120 = !{!"hash_table", !7, i64 0, !7, i64 8, !15, i64 16, !15, i64 24, !15, i64 32, !7, i64 40, !7, i64 48, !7, i64 56, !7, i64 64, !7, i64 72}
!121 = !{!120, !15, i64 24}
!122 = !{!120, !15, i64 32}
!123 = !{!120, !7, i64 0}
!124 = !{!120, !7, i64 8}
!125 = !{!126, !7, i64 0}
!126 = !{!"hash_entry", !7, i64 0, !7, i64 8}
!127 = !{!126, !7, i64 8}
!128 = !{!120, !7, i64 56}
!129 = !{!120, !7, i64 48}
!130 = !{i64 0, i64 4, !131, i64 4, i64 4, !131, i64 8, i64 4, !131, i64 12, i64 4, !131, i64 16, i64 1, !11}
!131 = !{!132, !132, i64 0}
!132 = !{!"float", !4, i64 0}
!133 = !{!120, !7, i64 40}
!134 = !{!120, !7, i64 64}
!135 = !{!120, !7, i64 72}
!136 = !{!137, !132, i64 8}
!137 = !{!"hash_tuning", !132, i64 0, !132, i64 4, !132, i64 8, !132, i64 12, !12, i64 16}
!138 = !{!137, !132, i64 12}
!139 = !{!137, !132, i64 0}
!140 = !{!137, !132, i64 4}
!141 = !{!137, !12, i64 16}
!142 = !{!143, !7, i64 0}
!143 = !{!"heap", !7, i64 0, !15, i64 8, !15, i64 16, !7, i64 24}
!144 = !{!143, !15, i64 8}
!145 = !{!143, !15, i64 16}
!146 = !{!143, !7, i64 24}
!147 = !{!148, !15, i64 32}
!148 = !{!"sysinfo", !15, i64 0, !4, i64 8, !15, i64 32, !15, i64 40, !15, i64 48, !15, i64 56, !15, i64 64, !15, i64 72, !49, i64 80, !49, i64 82, !15, i64 88, !15, i64 96, !3, i64 104, !4, i64 108}
!149 = !{!148, !3, i64 104}
!150 = !{!148, !15, i64 40}
!151 = !{!148, !15, i64 56}
!152 = !{!153, !4, i64 0}
!153 = !{!"quoting_options", !4, i64 0, !3, i64 4, !4, i64 8, !7, i64 40, !7, i64 48}
!154 = !{!153, !3, i64 4}
!155 = !{!153, !7, i64 40}
!156 = !{!153, !7, i64 48}
!157 = !{!158, !7, i64 8}
!158 = !{!"slotvec", !15, i64 0, !7, i64 8}
!159 = !{!158, !15, i64 0}
!160 = !{i64 0, i64 8, !14, i64 8, i64 8, !6}
!161 = !{i64 0, i64 4, !13, i64 4, i64 4, !2, i64 8, i64 32, !13, i64 40, i64 8, !6, i64 48, i64 8, !6}
!162 = !{!163, !7, i64 0}
!163 = !{!"randread_source", !7, i64 0, !7, i64 8, !7, i64 16, !4, i64 24}
!164 = !{!163, !7, i64 8}
!165 = !{!163, !7, i64 16}
!166 = !{!167, !15, i64 0}
!167 = !{!"isaac", !15, i64 0, !168, i64 8, !4, i64 2080}
!168 = !{!"isaac_state", !4, i64 0, !15, i64 2048, !15, i64 2056, !15, i64 2064}
!169 = !{!168, !15, i64 2048}
!170 = !{!168, !15, i64 2056}
!171 = !{!168, !15, i64 2064}
!172 = !{!31, !7, i64 16}
!173 = !{!32, !7, i64 8}
!174 = !{!32, !7, i64 32}
!175 = !{!32, !7, i64 16}
!176 = !{!32, !7, i64 24}
!177 = !{!32, !15, i64 48}
!178 = !{!179, !3, i64 0}
!179 = !{!"_IO_FILE", !3, i64 0, !7, i64 8, !7, i64 16, !7, i64 24, !7, i64 32, !7, i64 40, !7, i64 48, !7, i64 56, !7, i64 64, !7, i64 72, !7, i64 80, !7, i64 88, !7, i64 96, !7, i64 104, !3, i64 112, !3, i64 116, !15, i64 120, !49, i64 128, !4, i64 130, !4, i64 131, !7, i64 136, !15, i64 144, !7, i64 152, !7, i64 160, !7, i64 168, !7, i64 176, !15, i64 184, !3, i64 192, !4, i64 196}
!180 = !{!179, !7, i64 16}
!181 = !{!179, !7, i64 8}
!182 = !{!179, !7, i64 40}
!183 = !{!179, !7, i64 32}
!184 = !{!179, !7, i64 72}
!185 = !{!179, !15, i64 144}
!186 = !{!75, !15, i64 8}
!187 = !{!75, !15, i64 0}
!188 = !{!32, !15, i64 0}
!189 = !{!32, !7, i64 72}
