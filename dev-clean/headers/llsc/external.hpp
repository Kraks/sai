/* LLSC - External utility functions and library modeling functions */
/* Generated by sai.llsc.TestGenerateExternal */
#ifndef LLSC_EXTERNAL_HEADERS_GEN
#define LLSC_EXTERNAL_HEADERS_GEN

/************* Function Declarations **************/
immer::flex_vector<std::pair<SS, PtrVal>> open(SS, immer::flex_vector<PtrVal>);
std::monostate open(SS, immer::flex_vector<PtrVal>, std::function<std::monostate(SS, PtrVal)>);
immer::flex_vector<std::pair<SS, PtrVal>> close(SS, immer::flex_vector<PtrVal>);
std::monostate close(SS, immer::flex_vector<PtrVal>, std::function<std::monostate(SS, PtrVal)>);
immer::flex_vector<std::pair<SS, PtrVal>> read(SS, immer::flex_vector<PtrVal>);
std::monostate read(SS, immer::flex_vector<PtrVal>, std::function<std::monostate(SS, PtrVal)>);
immer::flex_vector<std::pair<SS, PtrVal>> write(SS, immer::flex_vector<PtrVal>);
std::monostate write(SS, immer::flex_vector<PtrVal>, std::function<std::monostate(SS, PtrVal)>);
immer::flex_vector<std::pair<SS, PtrVal>> lseek(SS, immer::flex_vector<PtrVal>);
std::monostate lseek(SS, immer::flex_vector<PtrVal>, std::function<std::monostate(SS, PtrVal)>);
immer::flex_vector<std::pair<SS, PtrVal>> stat(SS, immer::flex_vector<PtrVal>);
std::monostate stat(SS, immer::flex_vector<PtrVal>, std::function<std::monostate(SS, PtrVal)>);

/************* Functions **************/
inline immer::flex_vector<std::pair<SS, PtrVal>> stat(SS x88, immer::flex_vector<PtrVal> x89) {
PtrVal x90 = x89.at(0);
FS x91 = x88.get_fs();
std::pair<immer::flex_vector<PtrVal>, int> x92 = x91.stat_file(get_string(x90, x88));
int x93 = std::get<1>(x92);
immer::flex_vector<std::pair<SS, PtrVal>> x94 = x93 == 0 ? ({
PtrVal x95 = x89.at(1);
SS x96 = x88.update_seq(x95, std::get<0>(x92));
x96.set_fs(x91);
immer::flex_vector<std::pair<SS, PtrVal>>{std::make_pair(x96, make_IntV((int64_t)x93, 32))};
}) : immer::flex_vector<std::pair<SS, PtrVal>>{std::make_pair(x88, make_IntV((int64_t)x93, 32))};
return x94;
}
inline std::monostate stat(SS x97, immer::flex_vector<PtrVal> x98, std::function<std::monostate(SS, PtrVal)> x99) {
PtrVal x100 = x98.at(0);
FS x101 = x97.get_fs();
std::pair<immer::flex_vector<PtrVal>, int> x102 = x101.stat_file(get_string(x100, x97));
int x103 = std::get<1>(x102);
std::monostate x104 = x103 == 0 ? ({
PtrVal x105 = x98.at(1);
SS x106 = x97.update_seq(x105, std::get<0>(x102));
x106.set_fs(x101);
x99(x106, make_IntV((int64_t)x103, 32));
}) : x99(x97, make_IntV((int64_t)x103, 32));
return x104;
}
inline immer::flex_vector<std::pair<SS, PtrVal>> lseek(SS x73, immer::flex_vector<PtrVal> x74) {
PtrVal x75 = x74.at(0);
PtrVal x76 = x74.at(1);
PtrVal x77 = x74.at(2);
FS x78 = x73.get_fs();
int64_t x79 = x78.seek_file((int64_t)proj_IntV(x75), (int64_t)proj_IntV(x76), (int64_t)proj_IntV(x77));
x73.set_fs(x78);
return immer::flex_vector<std::pair<SS, PtrVal>>{std::make_pair(x73, make_IntV(x79, 64))};
}
inline std::monostate lseek(SS x80, immer::flex_vector<PtrVal> x81, std::function<std::monostate(SS, PtrVal)> x82) {
PtrVal x83 = x81.at(0);
PtrVal x84 = x81.at(1);
PtrVal x85 = x81.at(2);
FS x86 = x80.get_fs();
int64_t x87 = x86.seek_file((int64_t)proj_IntV(x83), (int64_t)proj_IntV(x84), (int64_t)proj_IntV(x85));
x80.set_fs(x86);
return x82(x80, make_IntV(x87, 64));
}
inline immer::flex_vector<std::pair<SS, PtrVal>> write(SS x56, immer::flex_vector<PtrVal> x57) {
PtrVal x58 = x57.at(0);
PtrVal x59 = x57.at(1);
PtrVal x60 = x57.at(2);
int64_t x61 = (int64_t)proj_IntV(x60);
FS x62 = x56.get_fs();
int x63 = x62.write_file((int64_t)proj_IntV(x58), x56.at_seq(x59, x61), x61);
x56.set_fs(x62);
return immer::flex_vector<std::pair<SS, PtrVal>>{std::make_pair(x56, make_IntV((int64_t)x63, 64))};
}
inline std::monostate write(SS x64, immer::flex_vector<PtrVal> x65, std::function<std::monostate(SS, PtrVal)> x66) {
PtrVal x67 = x65.at(0);
PtrVal x68 = x65.at(1);
PtrVal x69 = x65.at(2);
int64_t x70 = (int64_t)proj_IntV(x69);
FS x71 = x64.get_fs();
int x72 = x71.write_file((int64_t)proj_IntV(x67), x64.at_seq(x68, x70), x70);
x64.set_fs(x71);
return x66(x64, make_IntV((int64_t)x72, 64));
}
inline immer::flex_vector<std::pair<SS, PtrVal>> read(SS x39, immer::flex_vector<PtrVal> x40) {
PtrVal x41 = x40.at(0);
PtrVal x42 = x40.at(1);
PtrVal x43 = x40.at(2);
FS x44 = x39.get_fs();
std::pair<immer::flex_vector<PtrVal>, int> x45 = x44.read_file((int64_t)proj_IntV(x41), (int64_t)proj_IntV(x43));
SS x46 = x39.update_seq(x42, std::get<0>(x45));
x46.set_fs(x44);
return immer::flex_vector<std::pair<SS, PtrVal>>{std::make_pair(x46, make_IntV((int64_t)std::get<1>(x45), 64))};
}
inline std::monostate read(SS x47, immer::flex_vector<PtrVal> x48, std::function<std::monostate(SS, PtrVal)> x49) {
PtrVal x50 = x48.at(0);
PtrVal x51 = x48.at(1);
PtrVal x52 = x48.at(2);
FS x53 = x47.get_fs();
std::pair<immer::flex_vector<PtrVal>, int> x54 = x53.read_file((int64_t)proj_IntV(x50), (int64_t)proj_IntV(x52));
SS x55 = x47.update_seq(x51, std::get<0>(x54));
x55.set_fs(x53);
return x49(x55, make_IntV((int64_t)std::get<1>(x54), 64));
}
inline immer::flex_vector<std::pair<SS, PtrVal>> close(SS x18, immer::flex_vector<PtrVal> x19) {
PtrVal x20 = x19.at(0);
int64_t x21 = (int64_t)proj_IntV(x20->to_IntV());
FS x22 = x18.get_fs();
bool x23 = x22.has_stream(x21);
immer::flex_vector<std::pair<SS, PtrVal>> x24 = !x23 ? immer::flex_vector<std::pair<SS, PtrVal>>{std::make_pair(x18, make_IntV(-1L, 32))} : ({
Stream x25 = x22.get_stream(x21);
String x26 = x25.get_name();
bool x27 = x22.has_file(x26);
if (x27) {
x22.set_file(x26, x25.get_file());
x22.remove_stream(x21);
}
immer::flex_vector<std::pair<SS, PtrVal>>{std::make_pair(x18, make_IntV(0L, 32))};
});
return x24;
}
inline std::monostate close(SS x28, immer::flex_vector<PtrVal> x29, std::function<std::monostate(SS, PtrVal)> x30) {
PtrVal x31 = x29.at(0);
int64_t x32 = (int64_t)proj_IntV(x31->to_IntV());
FS x33 = x28.get_fs();
bool x34 = x33.has_stream(x32);
std::monostate x35 = !x34 ? x30(x28, make_IntV(-1L, 32)) : ({
Stream x36 = x33.get_stream(x32);
String x37 = x36.get_name();
bool x38 = x33.has_file(x37);
if (x38) {
x33.set_file(x37, x36.get_file());
x33.remove_stream(x32);
}
x30(x28, make_IntV(0L, 32));
});
return x35;
}
inline immer::flex_vector<std::pair<SS, PtrVal>> open(SS x1, immer::flex_vector<PtrVal> x2) {
PtrVal x3 = x2.at(0);
String x4 = get_string(x3, x1);
FS x5 = x1.get_fs();
bool x6 = x5.has_file(x4);
immer::flex_vector<std::pair<SS, PtrVal>> x7 = !x6 ? immer::flex_vector<std::pair<SS, PtrVal>>{std::make_pair(x1, make_IntV(-1L, 32))} : ({
int x8 = x5.get_fresh_fd();
x5.set_stream(x8, Stream(x5.get_file(x4)));
x1.set_fs(x5);
immer::flex_vector<std::pair<SS, PtrVal>>{std::make_pair(x1, make_IntV((int64_t)x8, 32))};
});
return x7;
}
inline std::monostate open(SS x9, immer::flex_vector<PtrVal> x10, std::function<std::monostate(SS, PtrVal)> x11) {
PtrVal x12 = x10.at(0);
String x13 = get_string(x12, x9);
FS x14 = x9.get_fs();
bool x15 = x14.has_file(x13);
std::monostate x16 = !x15 ? x11(x9, make_IntV(-1L, 32)) : ({
int x17 = x14.get_fresh_fd();
x14.set_stream(x17, Stream(x14.get_file(x13)));
x9.set_fs(x14);
x11(x9, make_IntV((int64_t)x17, 32));
});
return x16;
}
#endif // LLSC_EXTERNAL_HEADERS_GEN
