/* LLSC - External utility functions and library modeling functions */
/* Generated by sai.llsc.TestGenerateExternal */
#ifndef LLSC_EXTERNAL_HEADERS_GEN
#define LLSC_EXTERNAL_HEADERS_GEN

/************* Function Declarations **************/
immer::flex_vector<std::pair<SS, PtrVal>> open(SS, immer::flex_vector<PtrVal>);
std::monostate open(SS, immer::flex_vector<PtrVal>, std::function<std::monostate(SS, PtrVal)>);
immer::flex_vector<std::pair<SS, PtrVal>> close(SS, immer::flex_vector<PtrVal>);
std::monostate close(SS, immer::flex_vector<PtrVal>, std::function<std::monostate(SS, PtrVal)>);
immer::flex_vector<std::pair<SS, PtrVal>> read(SS, immer::flex_vector<PtrVal>);
std::monostate read(SS, immer::flex_vector<PtrVal>, std::function<std::monostate(SS, PtrVal)>);
immer::flex_vector<std::pair<SS, PtrVal>> write(SS, immer::flex_vector<PtrVal>);
std::monostate write(SS, immer::flex_vector<PtrVal>, std::function<std::monostate(SS, PtrVal)>);
immer::flex_vector<std::pair<SS, PtrVal>> lseek(SS, immer::flex_vector<PtrVal>);
std::monostate lseek(SS, immer::flex_vector<PtrVal>, std::function<std::monostate(SS, PtrVal)>);
immer::flex_vector<std::pair<SS, PtrVal>> stat(SS, immer::flex_vector<PtrVal>);
std::monostate stat(SS, immer::flex_vector<PtrVal>, std::function<std::monostate(SS, PtrVal)>);

/************* Functions **************/
inline immer::flex_vector<std::pair<SS, PtrVal>> stat(SS x108, immer::flex_vector<PtrVal> x109) {
PtrVal x110 = x109.at(0);
FS x111 = x108.get_fs();
std::pair<immer::flex_vector<PtrVal>, int> x112 = x111.stat_file(get_string(x110, x108));
int x113 = std::get<1>(x112);
immer::flex_vector<std::pair<SS, PtrVal>> x114 = x113 == 0 ? ({
PtrVal x115 = x109.at(1);
SS x116 = x108.update_seq(x115, std::get<0>(x112));
x116.set_fs(x111);
immer::flex_vector<std::pair<SS, PtrVal>>{std::make_pair(x116, make_IntV((int64_t)x113, 32))};
}) : immer::flex_vector<std::pair<SS, PtrVal>>{std::make_pair(x108, make_IntV((int64_t)x113, 32))};
return x114;
}
inline std::monostate stat(SS x117, immer::flex_vector<PtrVal> x118, std::function<std::monostate(SS, PtrVal)> x119) {
PtrVal x120 = x118.at(0);
FS x121 = x117.get_fs();
std::pair<immer::flex_vector<PtrVal>, int> x122 = x121.stat_file(get_string(x120, x117));
int x123 = std::get<1>(x122);
std::monostate x124 = x123 == 0 ? ({
PtrVal x125 = x118.at(1);
SS x126 = x117.update_seq(x125, std::get<0>(x122));
x126.set_fs(x121);
x119(x126, make_IntV((int64_t)x123, 32));
}) : x119(x117, make_IntV((int64_t)x123, 32));
return x124;
}
inline immer::flex_vector<std::pair<SS, PtrVal>> lseek(SS x93, immer::flex_vector<PtrVal> x94) {
PtrVal x95 = x94.at(0);
PtrVal x96 = x94.at(1);
PtrVal x97 = x94.at(2);
FS x98 = x93.get_fs();
int64_t x99 = x98.seek_file((int64_t)proj_IntV(x95), (int64_t)proj_IntV(x96), (int64_t)proj_IntV(x97));
x93.set_fs(x98);
return immer::flex_vector<std::pair<SS, PtrVal>>{std::make_pair(x93, make_IntV(x99, 64))};
}
inline std::monostate lseek(SS x100, immer::flex_vector<PtrVal> x101, std::function<std::monostate(SS, PtrVal)> x102) {
PtrVal x103 = x101.at(0);
PtrVal x104 = x101.at(1);
PtrVal x105 = x101.at(2);
FS x106 = x100.get_fs();
int64_t x107 = x106.seek_file((int64_t)proj_IntV(x103), (int64_t)proj_IntV(x104), (int64_t)proj_IntV(x105));
x100.set_fs(x106);
return x102(x100, make_IntV(x107, 64));
}
inline immer::flex_vector<std::pair<SS, PtrVal>> write(SS x68, immer::flex_vector<PtrVal> x69) {
PtrVal x70 = x69.at(0);
int64_t x71 = (int64_t)proj_IntV(x70);
FS x72 = x68.get_fs();
bool x73 = x72.has_stream(x71);
immer::flex_vector<std::pair<SS, PtrVal>> x74 = !x73 ? immer::flex_vector<std::pair<SS, PtrVal>>{std::make_pair(x68, make_IntV(-1L, 64))} : ({
PtrVal x75 = x69.at(1);
PtrVal x76 = x69.at(2);
int64_t x77 = (int64_t)proj_IntV(x76);
Stream x78 = x72.get_stream(x71);
int x79 = x78.write(x68.at_seq(x75, x77), x77);
x72.set_stream(x71, x78);
x68.set_fs(x72);
immer::flex_vector<std::pair<SS, PtrVal>>{std::make_pair(x68, make_IntV((int64_t)x79, 64))};
});
return x74;
}
inline std::monostate write(SS x80, immer::flex_vector<PtrVal> x81, std::function<std::monostate(SS, PtrVal)> x82) {
PtrVal x83 = x81.at(0);
int64_t x84 = (int64_t)proj_IntV(x83);
FS x85 = x80.get_fs();
bool x86 = x85.has_stream(x84);
std::monostate x87 = !x86 ? x82(x80, make_IntV(-1L, 64)) : ({
PtrVal x88 = x81.at(1);
PtrVal x89 = x81.at(2);
int64_t x90 = (int64_t)proj_IntV(x89);
Stream x91 = x85.get_stream(x84);
int x92 = x91.write(x80.at_seq(x88, x90), x90);
x85.set_stream(x84, x91);
x80.set_fs(x85);
x82(x80, make_IntV((int64_t)x92, 64));
});
return x87;
}
inline immer::flex_vector<std::pair<SS, PtrVal>> read(SS x41, immer::flex_vector<PtrVal> x42) {
PtrVal x43 = x42.at(0);
int64_t x44 = (int64_t)proj_IntV(x43);
FS x45 = x41.get_fs();
bool x46 = x45.has_stream(x44);
immer::flex_vector<std::pair<SS, PtrVal>> x47 = !x46 ? immer::flex_vector<std::pair<SS, PtrVal>>{std::make_pair(x41, make_IntV(-1L, 64))} : ({
PtrVal x48 = x42.at(1);
PtrVal x49 = x42.at(2);
Stream x50 = x45.get_stream(x44);
immer::flex_vector<PtrVal> x51 = x50.read((int64_t)proj_IntV(x49));
x45.set_stream(x44, x50);
int x52 = x51.size();
SS x53 = x41.update_seq(x48, x51);
x53.set_fs(x45);
immer::flex_vector<std::pair<SS, PtrVal>>{std::make_pair(x53, make_IntV((int64_t)x52, 64))};
});
return x47;
}
inline std::monostate read(SS x54, immer::flex_vector<PtrVal> x55, std::function<std::monostate(SS, PtrVal)> x56) {
PtrVal x57 = x55.at(0);
int64_t x58 = (int64_t)proj_IntV(x57);
FS x59 = x54.get_fs();
bool x60 = x59.has_stream(x58);
std::monostate x61 = !x60 ? x56(x54, make_IntV(-1L, 64)) : ({
PtrVal x62 = x55.at(1);
PtrVal x63 = x55.at(2);
Stream x64 = x59.get_stream(x58);
immer::flex_vector<PtrVal> x65 = x64.read((int64_t)proj_IntV(x63));
x59.set_stream(x58, x64);
int x66 = x65.size();
SS x67 = x54.update_seq(x62, x65);
x67.set_fs(x59);
x56(x67, make_IntV((int64_t)x66, 64));
});
return x61;
}
inline immer::flex_vector<std::pair<SS, PtrVal>> close(SS x20, immer::flex_vector<PtrVal> x21) {
PtrVal x22 = x21.at(0);
int64_t x23 = (int64_t)proj_IntV(x22->to_IntV());
FS x24 = x20.get_fs();
bool x25 = x24.has_stream(x23);
immer::flex_vector<std::pair<SS, PtrVal>> x26 = !x25 ? immer::flex_vector<std::pair<SS, PtrVal>>{std::make_pair(x20, make_IntV(-1L, 32))} : ({
Stream x27 = x24.get_stream(x23);
String x28 = x27.file.name;
bool x29 = x24.has_file(x28);
if (x29) {
x24.set_file(x28, x27.file);
x24.remove_stream(x23);
x20.set_fs(x24);
}
immer::flex_vector<std::pair<SS, PtrVal>>{std::make_pair(x20, make_IntV(0L, 32))};
});
return x26;
}
inline std::monostate close(SS x30, immer::flex_vector<PtrVal> x31, std::function<std::monostate(SS, PtrVal)> x32) {
PtrVal x33 = x31.at(0);
int64_t x34 = (int64_t)proj_IntV(x33->to_IntV());
FS x35 = x30.get_fs();
bool x36 = x35.has_stream(x34);
std::monostate x37 = !x36 ? x32(x30, make_IntV(-1L, 32)) : ({
Stream x38 = x35.get_stream(x34);
String x39 = x38.file.name;
bool x40 = x35.has_file(x39);
if (x40) {
x35.set_file(x39, x38.file);
x35.remove_stream(x34);
x30.set_fs(x35);
}
x32(x30, make_IntV(0L, 32));
});
return x37;
}
inline immer::flex_vector<std::pair<SS, PtrVal>> open(SS x1, immer::flex_vector<PtrVal> x2) {
PtrVal x3 = x2.at(0);
String x4 = get_string(x3, x1);
FS x5 = x1.get_fs();
bool x6 = x5.has_file(x4);
immer::flex_vector<std::pair<SS, PtrVal>> x7 = !x6 ? immer::flex_vector<std::pair<SS, PtrVal>>{std::make_pair(x1, make_IntV(-1L, 32))} : ({
int x8 = x5.get_fresh_fd();
File x9 = x5.files.at(x4);
x5.set_stream(x8, Stream(x9));
x1.set_fs(x5);
immer::flex_vector<std::pair<SS, PtrVal>>{std::make_pair(x1, make_IntV((int64_t)x8, 32))};
});
return x7;
}
inline std::monostate open(SS x10, immer::flex_vector<PtrVal> x11, std::function<std::monostate(SS, PtrVal)> x12) {
PtrVal x13 = x11.at(0);
String x14 = get_string(x13, x10);
FS x15 = x10.get_fs();
bool x16 = x15.has_file(x14);
std::monostate x17 = !x16 ? x12(x10, make_IntV(-1L, 32)) : ({
int x18 = x15.get_fresh_fd();
File x19 = x15.files.at(x14);
x15.set_stream(x18, Stream(x19));
x10.set_fs(x15);
x12(x10, make_IntV((int64_t)x18, 32));
});
return x17;
}
#endif // LLSC_EXTERNAL_HEADERS_GEN
