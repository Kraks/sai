/* LLSC - External utility functions and library modeling functions */
/* Generated by sai.llsc.TestGenerateExternal */
#ifndef LLSC_EXTERNAL_HEADERS_GEN
#define LLSC_EXTERNAL_HEADERS_GEN

/************* Function Declarations **************/
immer::flex_vector<std::pair<SS, PtrVal>> open(SS, immer::flex_vector<PtrVal>);
immer::flex_vector<std::pair<SS, PtrVal>> close(SS, immer::flex_vector<PtrVal>);
std::monostate open(SS, immer::flex_vector<PtrVal>, std::function<std::monostate(SS, PtrVal)>);
std::monostate close(SS, immer::flex_vector<PtrVal>, std::function<std::monostate(SS, PtrVal)>);

/************* Functions **************/
inline immer::flex_vector<std::pair<SS, PtrVal>> close(SS x6, immer::flex_vector<PtrVal> x7) {
PtrVal x8 = x7.at(0);
FS x9 = x6.get_fs();
int x10 = x9.close_file(proj_IntV(x8->to_IntV()));
x6.set_fs(x9);
return immer::flex_vector<std::pair<SS, PtrVal>>{std::make_pair(x6, make_IntV(x10, 32))};
}
inline std::monostate close(SS x17, immer::flex_vector<PtrVal> x18, std::function<std::monostate(SS, PtrVal)> x19) {
PtrVal x20 = x18.at(0);
FS x21 = x17.get_fs();
int x22 = x21.close_file(proj_IntV(x20->to_IntV()));
x17.set_fs(x21);
return x19(x17, make_IntV(x22, 32));
}
inline immer::flex_vector<std::pair<SS, PtrVal>> open(SS x1, immer::flex_vector<PtrVal> x2) {
PtrVal x3 = x2.at(0);
FS x4 = x1.get_fs();
int x5 = x4.open_file(get_string(x3, x1), 0);
x1.set_fs(x4);
return immer::flex_vector<std::pair<SS, PtrVal>>{std::make_pair(x1, make_IntV(x5, 32))};
}
inline std::monostate open(SS x11, immer::flex_vector<PtrVal> x12, std::function<std::monostate(SS, PtrVal)> x13) {
PtrVal x14 = x12.at(0);
FS x15 = x11.get_fs();
int x16 = x15.open_file(get_string(x14, x11), 0);
x11.set_fs(x15);
return x13(x11, make_IntV(x16, 32));
}
#endif // LLSC_EXTERNAL_HEADERS_GEN
